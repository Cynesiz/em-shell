var Module = {
    thisProgram: 'sh',
    arguments: [],
    print: main.print,
    printErr: main.print,
    preInit: function () {
        TTY.ttys[FS.makedev(5, 0)].ops = {
            get_char: function (tty) {
                if (!tty.input.length) {
                    var result = main.stdin();
                    if (!result)
                        return null;
                    tty.input = intArrayFromString(result, true);
                }
                return tty.input.shift();
            }, put_char: function (tty, val) {
                main.print(String.fromCharCode(val));
            }, flush: function (tty) {
            }
        }
    },
};

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 18464;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,202,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,22,0,0,0,0,0,0,0,0,0,0,28,72,0,0,2,0,0,0,229,17,0,0,252,17,0,0,3,0,0,0,0,0,0,0,254,17,0,0,4,0,0,0,1,18,0,0,32,18,0,0,5,0,0,0,38,18,0,0,55,18,0,0,6,0,0,0,58,18,0,0,75,18,0,0,7,0,0,0,84,18,0,0,109,18,0,0,8,0,0,0,114,18,0,0,146,18,0,0,9,0,0,0,151,18,0,0,190,18,0,0,10,0,0,0,195,18,0,0,200,18,0,0,11,0,0,0,207,18,0,0,233,18,0,0,4,0,0,0,236,18,0,0,10,19,0,0,12,0,0,0,0,0,0,0,15,19,0,0,13,0,0,0,23,19,0,0,44,19,0,0,14,0,0,0,49,19,0,0,59,19,0,0,15,0,0,0,65,19,0,0,85,19,0,0,16,0,0,0,0,0,0,0,93,19,0,0,17,0,0,0,98,19,0,0,118,19,0,0,18,0,0,0,125,19,0,0,148,19,0,0,19,0,0,0,152,19,0,0,184,19,0,0,20,0,0,0,190,19,0,0,218,19,0,0,2,0,0,0,229,17,0,0,199,16,0,0,21,0,0,0,225,19,0,0,238,19,0,0,3,0,0,0,0,0,0,0,243,19,0,0,22,0,0,0,248,19,0,0,10,20,0,0,23,0,0,0,17,20,0,0,41,20,0,0,24,0,0,0,47,20,0,0,70,20,0,0,25,0,0,0,76,20,0,0,92,20,0,0,26,0,0,0,97,20,0,0,0,0,0,0,0,60,0,0,65,2,0,0,1,62,0,0,65,4,0,0,1,62,62,0,66,0,0,0,1,60,62,0,0,0,0,0,0,60,60,0,33,0,0,0,0,0,0,2,0,0,0,0,105,102,0,0,0,0,1,0,4,0,2,0,116,104,101,110,0,0,2,0,56,0,0,0,101,108,105,102,0,0,3,0,4,0,0,0,101,108,115,101,0,0,4,0,32,0,0,0,102,105,0,0,0,0,5,2,1,0,0,0,102,111,114,0,0,0,6,2,0,10,2,0,119,104,105,108,101,0,7,0,0,2,2,0,117,110,116,105,108,0,8,0,0,2,2,0,105,110,0,0,0,0,11,2,0,2,0,0,100,111,0,0,0,0,9,0,0,4,0,0,100,111,110,101,0,0,10,2,1,0,0,0,99,97,115,101,0,0,12,2,0,64,2,0,101,115,97,99,0,0,16,2,1,0,0,0,0,0,0,0,0,0,14,2,0,64,1,0,97,23,0,0,27,0,0,0,0,0,0,0,99,23,0,0,28,0,0,0,0,0,0,0,104,23,0,0,29,0,0,0,0,0,0,0,108,23,0,0,27,0,0,0,0,0,0,0,1,9,102,0,71,24,0,0,0,0,116,0,90,24,0,0,2,10,100,0,109,24,0,0,3,10,115,0,128,24,0,0,4,9,99,0,144,24,0,0,5,10,109,0,168,24,0,0,8,10,108,0,191,24,0,0,6,0,112,0,210,24,0,0,7,0,110,0,220,24,0,0,9,10,118,0,237,24,0,0,10,0,119,0,0,25,0,0,13,0,101,0,6,25,0,0,14,0,114,0,26,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,15,0,0,192,9,0,0,56,4,0,0,7,0,0,0,36,1,0,0,146,0,0,0,73,0,0,0,73,0,0,0,0,12,0,0,0,2,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,5,0,0,204,5,0,0,60,6,0,0,60,6,0,0,0,0,0,0,32,0,0,0,9,0,0,0,10,0,0,0,13,0,0,0,11,0,0,0,12,0,0,0,133,0,0,0,0,32,0,0,1,32,0,0,2,32,0,0,3,32,0,0,4,32,0,0,5,32,0,0,6,32,0,0,8,32,0,0,9,32,0,0,10,32,0,0,40,32,0,0,41,32,0,0,95,32,0,0,0,48,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,33,0,0,0,8,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,33,0,0,0,0,66,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,0,33,0,0,0,248,61,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,73,0,49,1,83,0,127,1,48,1,105,0,120,1,255,0,129,1,83,2,130,1,131,1,132,1,133,1,134,1,84,2,135,1,136,1,137,1,86,2,138,1,87,2,139,1,140,1,142,1,221,1,143,1,89,2,144,1,91,2,145,1,146,1,147,1,96,2,148,1,99,2,150,1,105,2,151,1,104,2,152,1,153,1,156,1,111,2,157,1,114,2,159,1,117,2,166,1,128,2,167,1,168,1,169,1,131,2,172,1,173,1,174,1,136,2,175,1,176,1,177,1,138,2,178,1,139,2,183,1,146,2,184,1,185,1,188,1,189,1,196,1,198,1,196,1,197,1,197,1,198,1,199,1,201,1,199,1,200,1,200,1,201,1,202,1,204,1,202,1,203,1,203,1,204,1,241,1,243,1,241,1,242,1,242,1,243,1,244,1,245,1,246,1,149,1,247,1,191,1,32,2,158,1,134,3,172,3,136,3,173,3,137,3,174,3,138,3,175,3,140,3,204,3,142,3,205,3,143,3,206,3,153,3,69,3,153,3,190,31,163,3,194,3,247,3,248,3,250,3,251,3,96,30,155,30,223,0,223,0,158,30,223,0,89,31,81,31,91,31,83,31,93,31,85,31,95,31,87,31,188,31,179,31,204,31,195,31,236,31,229,31,252,31,243,31,58,2,101,44,59,2,60,2,61,2,154,1,62,2,102,44,65,2,66,2,67,2,128,1,68,2,137,2,69,2,140,2,244,3,184,3,249,3,242,3,253,3,123,3,254,3,124,3,255,3,125,3,192,4,207,4,38,33,201,3,42,33,107,0,43,33,229,0,50,33,78,33,131,33,132,33,96,44,97,44,98,44,107,2,99,44,125,29,100,44,125,2,109,44,81,2,110,44,113,2,111,44,80,2,112,44,82,2,114,44,115,44,117,44,118,44,126,44,63,2,127,44,64,2,242,44,243,44,125,167,121,29,139,167,140,167,141,167,101,2,170,167,102,2,199,16,39,45,205,16,45,45,118,3,119,3,156,3,181,0,146,3,208,3,152,3,209,3,166,3,213,3,160,3,214,3,154,3,240,3,161,3,241,3,149,3,245,3,207,3,215,3,0,0,0,0,65,0,32,26,192,0,32,31,0,1,1,47,50,1,1,5,57,1,1,15,74,1,1,45,121,1,1,5,112,3,1,3,145,3,32,17,163,3,32,9,0,4,80,16,16,4,32,32,96,4,1,33,138,4,1,53,193,4,1,13,208,4,1,63,20,5,1,19,49,5,48,38,160,1,1,5,179,1,1,3,205,1,1,15,222,1,1,17,248,1,1,39,34,2,1,17,216,3,1,23,0,30,1,149,160,30,1,95,8,31,248,8,24,31,248,6,40,31,248,8,56,31,248,8,72,31,248,6,104,31,248,8,136,31,248,8,152,31,248,8,168,31,248,8,184,31,248,2,186,31,182,2,200,31,170,4,216,31,248,2,218,31,156,2,232,31,248,2,234,31,144,2,248,31,128,2,250,31,130,2,70,2,1,9,16,5,1,3,96,33,16,16,0,44,48,47,103,44,1,5,128,44,1,99,235,44,1,3,64,166,1,45,128,166,1,23,34,167,1,13,50,167,1,61,121,167,1,3,126,167,1,9,144,167,1,3,160,167,1,9,33,255,32,26,0,0,0,0,104,117,115,104,0,115,104,0,0,0,45,45,104,101,108,112,0,98,117,115,121,98,111,120,0,32,109,117,108,116,105,45,99,97,108,108,32,98,105,110,97,114,121,46,10,0,66,117,115,121,66,111,120,32,105,115,32,99,111,112,121,114,105,103,104,116,101,100,32,98,121,32,109,97,110,121,32,97,117,116,104,111,114,115,32,98,101,116,119,101,101,110,32,49,57,57,56,45,50,48,49,53,46,10,76,105,99,101,110,115,101,100,32,117,110,100,101,114,32,71,80,76,118,50,46,32,83,101,101,32,115,111,117,114,99,101,32,100,105,115,116,114,105,98,117,116,105,111,110,32,102,111,114,32,100,101,116,97,105,108,101,100,10,99,111,112,121,114,105,103,104,116,32,110,111,116,105,99,101,115,46,10,10,85,115,97,103,101,58,32,98,117,115,121,98,111,120,32,91,102,117,110,99,116,105,111,110,32,91,97,114,103,117,109,101,110,116,115,93,46,46,46,93,10,32,32,32,111,114,58,32,98,117,115,121,98,111,120,32,45,45,108,105,115,116,91,45,102,117,108,108,93,10,32,32,32,111,114,58,32,98,117,115,121,98,111,120,32,45,45,105,110,115,116,97,108,108,32,91,45,115,93,32,91,68,73,82,93,10,32,32,32,111,114,58,32,102,117,110,99,116,105,111,110,32,91,97,114,103,117,109,101,110,116,115,93,46,46,46,10,10,9,66,117,115,121,66,111,120,32,105,115,32,97,32,109,117,108,116,105,45,99,97,108,108,32,98,105,110,97,114,121,32,116,104,97,116,32,99,111,109,98,105,110,101,115,32,109,97,110,121,32,99,111,109,109,111,110,32,85,110,105,120,10,9,117,116,105,108,105,116,105,101,115,32,105,110,116,111,32,97,32,115,105,110,103,108,101,32,101,120,101,99,117,116,97,98,108,101,46,32,32,77,111,115,116,32,112,101,111,112,108,101,32,119,105,108,108,32,99,114,101,97,116,101,32,97,10,9,108,105,110,107,32,116,111,32,98,117,115,121,98,111,120,32,102,111,114,32,101,97,99,104,32,102,117,110,99,116,105,111,110,32,116,104,101,121,32,119,105,115,104,32,116,111,32,117,115,101,32,97,110,100,32,66,117,115,121,66,111,120,10,9,119,105,108,108,32,97,99,116,32,108,105,107,101,32,119,104,97,116,101,118,101,114,32,105,116,32,119,97,115,32,105,110,118,111,107,101,100,32,97,115,46,10,10,67,117,114,114,101,110,116,108,121,32,100,101,102,105,110,101,100,32,102,117,110,99,116,105,111,110,115,58,10,0,44,10,0,9,0,44,32,0,10,10,0,45,45,108,105,115,116,0,47,117,115,114,47,98,105,110,47,0,45,45,105,110,115,116,97,108,108,0,39,37,115,39,32,105,115,32,110,111,116,32,97,110,32,97,98,115,111,108,117,116,101,32,112,97,116,104,0,45,115,0,58,32,97,112,112,108,101,116,32,110,111,116,32,102,111,117,110,100,10,0,37,115,37,115,37,115,0,1,66,117,115,121,66,111,120,32,118,49,46,50,53,46,48,46,103,105,116,32,40,50,48,49,53,45,49,48,45,50,51,32,50,50,58,49,52,58,49,51,32,69,68,84,41,0,111,117,116,32,111,102,32,109,101,109,111,114,121,0,40,117,110,107,110,111,119,110,41,0,47,112,114,111,99,47,115,101,108,102,47,101,120,101,0,0,0,0,0,0,0,0,0,0,0,0,0,76,73,78,69,83,0,67,79,76,85,77,78,83,0,99,97,110,39,116,32,111,112,101,110,32,39,37,115,39,0,99,97,110,39,116,32,99,114,101,97,116,101,32,112,105,112,101,0,99,97,110,39,116,32,100,117,112,108,105,99,97,116,101,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,108,115,101,101,107,40,37,108,117,41,0,108,115,101,101,107,0,37,72,58,37,77,58,37,83,0,72,85,83,72,95,86,69,82,83,73,79,78,61,49,46,50,53,46,48,46,103,105,116,0,72,85,83,72,95,86,69,82,83,73,79,78,0,72,79,83,84,78,65,77,69,0,37,115,61,37,115,0,80,83,49,0,92,119,32,92,36,32,0,80,83,50,0,62,32,0,43,99,58,120,105,110,115,108,60,58,36,58,82,58,86,58,70,58,0,47,101,116,99,47,112,114,111,102,105,108,101,0,72,73,83,84,70,73,76,69,0,72,79,77,69,0,46,104,117,115,104,95,104,105,115,116,111,114,121,0,72,73,83,84,70,73,76,69,83,73,90,69,0,10,10,37,115,32,37,115,10,69,110,116,101,114,32,39,104,101,108,112,39,32,102,111,114,32,97,32,108,105,115,116,32,111,102,32,98,117,105,108,116,45,105,110,32,99,111,109,109,97,110,100,115,46,10,10,0,104,117,115,104,32,45,32,116,104,101,32,104,117,109,98,108,101,32,115,104,101,108,108,0,66,85,71,32,105,110,32,118,97,114,101,120,112,51,0,103,108,111,98,32,101,114,114,111,114,32,37,100,32,111,110,32,39,37,115,39,0,92,47,37,35,58,45,61,43,63,0,95,42,64,36,33,63,35,0,109,97,108,102,111,114,109,101,100,32,36,123,37,115,58,46,46,46,125,0,112,97,114,97,109,101,116,101,114,32,110,117,108,108,32,111,114,32,110,111,116,32,115,101,116,0,36,37,115,58,32,99,97,110,110,111,116,32,97,115,115,105,103,110,32,105,110,32,116,104,105,115,32,119,97,121,0,66,85,71,32,105,110,32,118,97,114,101,120,112,50,0,115,121,110,116,97,120,32,101,114,114,111,114,58,32,117,110,116,101,114,109,105,110,97,116,101,100,32,37,115,0,115,121,110,116,97,120,32,101,114,114,111,114,58,32,37,115,0,92,60,101,111,102,62,0,36,96,92,10,0,36,123,110,97,109,101,125,0,57,57,57,57,57,57,57,57,57,0,42,63,91,92,123,125,0,118,102,111,114,107,0,116,114,97,112,0,45,60,0,45,36,37,120,58,37,120,58,37,120,58,37,120,58,37,120,58,37,108,108,120,58,37,120,0,45,82,0,45,86,0,45,70,0,45,99,0,99,97,110,39,116,32,114,101,45,101,120,101,99,117,116,101,32,116,104,101,32,115,104,101,108,108,0,116,114,97,112,32,45,45,32,0,32,37,115,10,0,116,114,97,112,58,32,37,115,58,32,105,110,118,97,108,105,100,32,115,105,103,110,97,108,32,115,112,101,99,105,102,105,99,97,116,105,111,110,0,116,114,97,112,58,32,105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,115,0,39,37,46,42,115,39,0,112,105,112,101,102,97,105,108,0,110,111,101,120,101,99,0,120,116,114,97,99,101,0,0,115,101,116,32,37,99,111,32,37,115,10,0,109,97,108,102,111,114,109,101,100,32,102,111,114,0,91,37,100,93,32,37,100,32,37,115,10,0,119,97,105,116,112,105,100,0,91,37,100,93,32,37,45,50,50,115,32,37,46,52,48,115,10,0,68,111,110,101,0,73,70,83,0,32,37,115,0,47,100,101,118,47,110,117,108,108,0,99,97,110,39,116,32,101,120,101,99,117,116,101,32,39,37,115,39,0,82,117,110,32,99,111,109,109,97,110,100,115,32,105,110,32,97,32,102,105,108,101,0,58,0,98,103,0,82,101,115,117,109,101,32,97,32,106,111,98,32,105,110,32,116,104,101,32,98,97,99,107,103,114,111,117,110,100,0,98,114,101,97,107,0,69,120,105,116,32,102,114,111,109,32,97,32,108,111,111,112,0,99,100,0,67,104,97,110,103,101,32,100,105,114,101,99,116,111,114,121,0,99,111,110,116,105,110,117,101,0,83,116,97,114,116,32,110,101,119,32,108,111,111,112,32,105,116,101,114,97,116,105,111,110,0,101,118,97,108,0,67,111,110,115,116,114,117,99,116,32,97,110,100,32,114,117,110,32,115,104,101,108,108,32,99,111,109,109,97,110,100,0,101,120,101,99,0,69,120,101,99,117,116,101,32,99,111,109,109,97,110,100,44,32,100,111,110,39,116,32,114,101,116,117,114,110,32,116,111,32,115,104,101,108,108,0,101,120,105,116,0,69,120,105,116,0,101,120,112,111,114,116,0,83,101,116,32,101,110,118,105,114,111,110,109,101,110,116,32,118,97,114,105,97,98,108,101,115,0,102,103,0,66,114,105,110,103,32,106,111,98,32,105,110,116,111,32,116,104,101,32,102,111,114,101,103,114,111,117,110,100,0,104,101,108,112,0,104,105,115,116,111,114,121,0,83,104,111,119,32,99,111,109,109,97,110,100,32,104,105,115,116,111,114,121,0,106,111,98,115,0,76,105,115,116,32,106,111,98,115,0,108,111,99,97,108,0,83,101,116,32,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,0,109,101,109,108,101,97,107,0,114,101,97,100,0,73,110,112,117,116,32,105,110,116,111,32,118,97,114,105,97,98,108,101,0,114,101,116,117,114,110,0,82,101,116,117,114,110,32,102,114,111,109,32,97,32,102,117,110,99,116,105,111,110,0,115,101,116,0,83,101,116,47,117,110,115,101,116,32,112,111,115,105,116,105,111,110,97,108,32,112,97,114,97,109,101,116,101,114,115,0,115,104,105,102,116,0,83,104,105,102,116,32,112,111,115,105,116,105,111,110,97,108,32,112,97,114,97,109,101,116,101,114,115,0,115,111,117,114,99,101,0,84,114,97,112,32,115,105,103,110,97,108,115,0,116,114,117,101,0,116,121,112,101,0,83,104,111,119,32,99,111,109,109,97,110,100,32,116,121,112,101,0,117,108,105,109,105,116,0,67,111,110,116,114,111,108,32,114,101,115,111,117,114,99,101,32,108,105,109,105,116,115,0,117,109,97,115,107,0,83,101,116,32,102,105,108,101,32,99,114,101,97,116,105,111,110,32,109,97,115,107,0,117,110,115,101,116,0,85,110,115,101,116,32,118,97,114,105,97,98,108,101,115,0,119,97,105,116,0,87,97,105,116,32,102,111,114,32,112,114,111,99,101,115,115,0,119,97,105,116,32,37,115,0,119,97,105,116,58,32,39,37,115,39,58,32,110,111,116,32,97,32,112,105,100,32,111,114,32,118,97,108,105,100,32,106,111,98,32,115,112,101,99,0,33,43,118,102,0,117,110,115,101,116,58,32,45,118,32,97,110,100,32,45,102,32,97,114,101,32,101,120,99,108,117,115,105,118,101,0,37,115,58,32,114,101,97,100,111,110,108,121,32,118,97,114,105,97,98,108,101,0,37,115,58,32,105,110,118,97,108,105,100,32,109,111,100,101,32,39,37,115,39,0,37,48,52,111,10,0,116,121,112,101,58,32,37,115,58,32,110,111,116,32,102,111,117,110,100,0,97,32,102,117,110,99,116,105,111,110,0,97,32,115,104,101,108,108,32,98,117,105,108,116,105,110,0,37,115,32,105,115,32,37,115,10,0,37,46,42,115,47,37,115,0,45,45,0,115,101,116,58,32,37,115,58,32,105,110,118,97,108,105,100,32,111,112,116,105,111,110,0,37,115,58,32,110,111,116,32,105,110,32,97,32,102,117,110,99,116,105,111,110,32,111,114,32,115,111,117,114,99,101,100,32,115,99,114,105,112,116,0,37,115,58,32,98,97,100,32,97,114,103,117,109,101,110,116,115,0,33,115,114,110,58,112,58,116,58,117,58,0,37,115,0,37,115,58,32,110,111,116,32,105,110,32,97,32,102,117,110,99,116,105,111,110,0,37,115,61,0,83,116,111,112,112,101,100,0,82,117,110,110,105,110,103,0,66,117,105,108,116,45,105,110,32,99,111,109,109,97,110,100,115,58,10,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,37,45,49,48,115,37,115,10,0,33,110,0,101,120,112,111,114,116,32,37,46,42,115,0,99,100,58,32,37,115,0,37,115,58,32,111,110,108,121,32,109,101,97,110,105,110,103,102,117,108,32,105,110,32,97,32,108,111,111,112,0,37,115,58,32,110,111,32,99,117,114,114,101,110,116,32,106,111,98,0,37,37,37,100,0,37,115,58,32,98,97,100,32,97,114,103,117,109,101,110,116,32,39,37,115,39,0,37,115,58,32,37,100,58,32,110,111,32,115,117,99,104,32,106,111,98,0,107,105,108,108,32,40,83,73,71,67,79,78,84,41,0,98,117,103,32,105,110,32,114,101,100,105,114,101,99,116,32,112,97,114,115,101,0,3,192,3,0,104,101,114,101,32,100,111,99,117,109,101,110,116,0,123,125,60,62,59,38,124,40,41,35,39,92,36,34,96,0,117,110,101,120,112,101,99,116,101,100,32,69,79,70,32,105,110,32,104,101,114,101,32,100,111,99,117,109,101,110,116,0,101,115,97,99,0,115,121,110,116,97,120,32,101,114,114,111,114,58,32,117,110,101,120,112,101,99,116,101,100,32,37,115,0,69,79,70,0,66,85,71,58,32,117,110,101,120,112,101,99,116,101,100,32,37,99,10,0,97,109,98,105,103,117,111,117,115,32,114,101,100,105,114,101,99,116,0,33,32,33,32,99,111,109,109,97,110,100,0,115,121,110,116,97,120,32,101,114,114,111,114,32,97,116,32,39,37,115,39,0,91,91,0,110,111,116,32,97,32,118,97,108,105,100,32,105,100,101,110,116,105,102,105,101,114,32,105,110,32,102,111,114,0,91,0,101,99,104,111,0,112,119,100,0,116,101,115,116,0,80,80,73,68,0,82,65,78,68,79,77,0,80,87,68,61,37,115,0,73,70,83,61,32,9,10,0,114,101,97,100,58,32,39,37,115,39,58,32,110,111,116,32,97,32,118,97,108,105,100,32,105,100,101,110,116,105,102,105,101,114,0,82,69,80,76,89,0,105,110,118,97,108,105,100,32,99,111,117,110,116,0,105,110,118,97,108,105,100,32,116,105,109,101,111,117,116,0,105,110,118,97,108,105,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,45,72,83,97,102,58,58,116,58,58,100,58,58,115,58,58,99,58,58,109,58,58,108,58,58,112,58,58,110,58,58,118,58,58,119,58,58,101,58,58,114,58,58,0,45,37,99,58,32,37,45,51,48,115,32,0,117,110,108,105,109,105,116,101,100,0,101,114,114,111,114,32,115,101,116,116,105,110,103,32,108,105,109,105,116,0,37,108,108,117,10,0,102,105,108,101,32,115,105,122,101,32,40,98,108,111,99,107,115,41,0,99,112,117,32,116,105,109,101,32,40,115,101,99,111,110,100,115,41,0,100,97,116,97,32,115,101,103,32,115,105,122,101,32,40,107,98,41,0,115,116,97,99,107,32,115,105,122,101,32,40,107,98,41,0,99,111,114,101,32,102,105,108,101,32,115,105,122,101,32,40,98,108,111,99,107,115,41,0,114,101,115,105,100,101,110,116,32,115,101,116,32,115,105,122,101,32,40,107,98,41,0,108,111,99,107,101,100,32,109,101,109,111,114,121,32,40,107,98,41,0,112,114,111,99,101,115,115,101,115,0,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,0,97,100,100,114,101,115,115,32,115,112,97,99,101,32,40,107,98,41,0,108,111,99,107,115,0,115,99,104,101,100,117,108,105,110,103,32,112,114,105,111,114,105,116,121,0,114,101,97,108,45,116,105,109,101,32,112,114,105,111,114,105,116,121,0,119,114,105,116,101,32,101,114,114,111,114,0,109,105,115,115,105,110,103,32,93,0,93,93,0,109,105,115,115,105,110,103,32,93,93,0,37,115,58,32,117,110,107,110,111,119,110,32,111,112,101,114,97,110,100,0,97,114,103,117,109,101,110,116,32,101,120,112,101,99,116,101,100,0,99,108,111,115,105,110,103,32,112,97,114,101,110,32,101,120,112,101,99,116,101,100,0,111,117,116,32,111,102,32,114,97,110,103,101,0,98,97,100,32,110,117,109,98,101,114,0,37,115,58,32,37,115,0,255,255,45,114,0,45,119,0,45,120,0,45,101,0,45,102,0,45,100,0,45,99,0,45,98,0,45,112,0,45,117,0,45,103,0,45,107,0,45,115,0,45,116,0,45,122,0,45,110,0,45,104,0,45,79,0,45,71,0,45,76,0,45,83,0,61,0,61,61,0,33,61,0,60,0,62,0,45,101,113,0,45,110,101,0,45,103,101,0,45,103,116,0,45,108,101,0,45,108,116,0,45,110,116,0,45,111,116,0,45,101,102,0,33,0,45,97,0,45,111,0,40,0,41,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,14,0,15,0,16,0,12,0,13,0,22,0,23,0,11,0,20,0,21,0,11,0,10,0,24,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,17,1,18,1,19,1,34,2,35,3,36,3,37,4,38,4,78,79,32,79,80,84,32,37,99,33,0,37,52,100,32,37,115,10,0,27,91,74,0,27,91,72,0,40,114,101,118,101,114,115,101,45,105,45,115,101,97,114,99,104,41,39,37,115,39,58,32,0,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,59,60,61,62,63,64,91,92,93,94,95,96,123,124,125,126,0,37,115,46,37,117,46,110,101,119,0,37,115,10,0,27,91,37,117,65,0,37,115,37,45,42,115,0,32,96,34,35,36,37,94,38,42,40,41,61,43,123,125,91,93,58,59,39,124,92,60,62,0,37,115,37,115,0,80,65,84,72,0,13,0,27,91,37,117,68,0,13,27,91,37,117,65,0,27,91,37,117,67,0,97,117,103,111,0,114,119,120,88,115,116,0,97,98,101,102,110,114,116,118,92,0,7,8,27,12,10,13,9,11,92,92,79,193,254,79,194,253,79,195,252,79,196,251,79,200,250,79,198,249,91,193,254,91,194,253,91,195,252,91,196,251,91,200,250,91,198,249,91,49,254,250,91,50,254,248,91,51,254,247,91,52,254,249,91,53,254,246,91,54,254,245,91,55,254,250,91,56,254,249,91,49,59,53,195,188,91,49,59,53,196,187,91,49,59,51,195,220,91,49,59,51,196,219,0,63,0,112,111,108,108,0,83,73,71,0,69,88,73,84,0,0,0,72,85,80,0,0,0,0,73,78,84,0,0,0,0,81,85,73,84,0,0,0,73,76,76,0,0,0,0,84,82,65,80,0,0,0,65,66,82,84,0,0,0,66,85,83,0,0,0,0,70,80,69,0,0,0,0,75,73,76,76,0,0,0,85,83,82,49,0,0,0,83,69,71,86,0,0,0,85,83,82,50,0,0,0,80,73,80,69,0,0,0,65,76,82,77,0,0,0,84,69,82,77,0,0,0,83,84,75,70,76,84,0,67,72,76,68,0,0,0,67,79,78,84,0,0,0,83,84,79,80,0,0,0,84,83,84,80,0,0,0,84,84,73,78,0,0,0,84,84,79,85,0,0,0,85,82,71,0,0,0,0,88,67,80,85,0,0,0,88,70,83,90,0,0,0,86,84,65,76,82,77,0,80,82,79,70,0,0,0,87,73,78,67,72,0,0,80,79,76,76,0,0,0,80,87,82,0,0,0,0,83,89,83,0,0,0,0,114,0,119,0,110,117,109,98,101,114,32,37,115,32,105,115,32,110,111,116,32,105,110,32,37,108,108,117,46,46,37,108,108,117,32,114,97,110,103,101,0,105,110,118,97,108,105,100,32,110,117,109,98,101,114,32,39,37,115,39,0,110,117,109,98,101,114,32,37,115,32,105,115,32,110,111,116,32,105,110,32,37,108,108,100,46,46,37,108,108,100,32,114,97,110,103,101,0,103,101,116,99,119,100,0,18,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,17,34,35,36,17,37,38,39,40,41,42,43,44,17,45,46,47,16,16,48,16,16,16,16,16,16,16,49,50,51,16,52,53,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,54,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,55,17,17,17,17,56,17,57,58,59,60,61,62,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,63,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,64,65,17,66,67,68,69,70,71,72,73,16,16,16,74,75,76,77,78,16,16,16,79,80,16,16,16,16,81,16,16,16,16,16,16,16,16,16,17,17,17,82,83,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,84,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,85,16,16,16,16,86,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,87,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,88,89,90,91,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,92,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,254,255,255,7,254,255,255,7,0,0,0,0,0,4,32,4,255,255,127,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,195,255,3,0,31,80,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,223,60,64,215,255,255,251,255,255,255,255,255,255,255,255,255,191,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,254,255,255,255,127,2,254,255,255,255,255,0,0,0,0,0,255,191,182,0,255,255,255,7,7,0,0,0,255,7,255,255,255,255,255,255,255,254,255,195,255,255,255,255,255,255,255,255,255,255,255,255,239,31,254,225,255,159,0,0,255,255,255,255,255,255,0,224,255,255,255,255,255,255,255,255,255,255,255,255,3,0,255,255,255,255,255,7,48,4,255,255,255,252,255,31,0,0,255,255,255,1,0,0,0,0,0,0,0,0,253,31,0,0,0,0,0,0,240,3,255,127,255,255,255,255,255,255,255,239,255,223,225,255,207,255,254,254,238,159,249,255,255,253,197,227,159,89,128,176,207,255,3,0,238,135,249,255,255,253,109,195,135,25,2,94,192,255,63,0,238,191,251,255,255,253,237,227,191,27,1,0,207,255,0,0,238,159,249,255,255,253,237,227,159,25,192,176,207,255,2,0,236,199,61,214,24,199,255,195,199,29,129,0,192,255,0,0,238,223,253,255,255,253,239,227,223,29,96,3,207,255,0,0,236,223,253,255,255,253,239,227,223,29,96,64,207,255,6,0,236,223,253,255,255,255,255,231,223,93,128,0,207,255,0,252,236,255,127,252,255,255,251,47,127,128,95,255,0,0,12,0,254,255,255,255,255,127,255,7,63,32,255,3,0,0,0,0,150,37,240,254,174,236,255,59,95,32,255,243,0,0,0,0,1,0,0,0,255,3,0,0,255,254,255,255,255,31,254,255,3,255,255,254,255,255,255,31,0,0,0,0,0,0,0,0,255,255,255,255,255,255,127,249,255,3,255,255,231,193,255,255,127,64,255,51,255,255,255,255,191,32,255,255,255,255,255,247,255,255,255,255,255,255,255,255,255,61,127,61,255,255,255,255,255,61,255,255,255,255,61,127,61,255,127,255,255,255,255,255,255,255,61,255,255,255,255,255,255,255,255,135,0,0,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,31,0,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,159,255,255,254,255,255,7,255,255,255,255,255,255,255,255,255,199,1,0,255,223,15,0,255,255,15,0,255,255,15,0,255,223,13,0,255,255,255,255,255,255,207,255,255,1,128,16,255,3,0,0,0,0,255,3,255,255,255,255,255,255,255,255,255,255,255,0,255,255,255,255,255,7,255,255,255,255,255,255,255,255,63,0,255,255,255,31,255,15,255,1,192,255,255,255,255,63,31,0,255,255,255,255,255,15,255,255,255,3,255,3,0,0,0,0,255,255,255,15,255,255,255,255,255,255,255,127,254,255,31,0,255,3,255,3,128,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,239,255,239,15,255,3,0,0,0,0,255,255,255,255,255,243,255,255,255,255,255,255,191,255,3,0,255,255,255,255,255,255,63,0,255,227,255,255,255,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,222,111,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,255,255,63,63,255,255,255,255,63,63,255,170,255,255,255,63,255,255,255,255,255,255,223,95,220,31,207,15,255,31,220,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,128,0,0,255,31,0,0,0,0,0,0,0,0,0,0,0,0,132,252,47,62,80,189,255,243,224,67,0,0,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,255,255,255,255,255,255,3,0,0,255,255,255,255,255,127,255,255,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,120,12,0,255,255,255,255,191,32,255,255,255,255,255,255,255,128,0,0,255,255,127,0,127,127,127,127,127,127,127,127,255,255,255,255,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,0,0,0,254,3,62,31,254,255,255,255,255,255,255,255,255,255,127,224,254,255,255,255,255,255,255,255,255,255,255,247,224,255,255,255,255,63,254,255,255,255,255,255,255,255,255,255,255,127,0,0,255,255,255,7,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,0,0,0,0,0,0,255,255,255,255,255,63,255,31,255,255,255,15,0,0,255,255,255,255,255,127,240,143,255,255,255,128,255,255,255,255,255,255,255,255,255,255,0,0,0,0,128,255,252,255,255,255,255,255,255,255,255,255,255,255,255,121,15,0,255,7,0,0,0,0,0,0,0,0,0,255,187,247,255,255,255,0,0,0,255,255,255,255,255,255,15,0,255,255,255,255,255,255,255,255,15,0,255,3,0,0,252,8,255,255,255,255,255,7,255,255,255,255,7,0,255,255,255,31,255,255,255,255,255,255,247,255,0,128,255,3,0,0,0,0,255,255,255,255,255,255,127,0,255,63,255,3,255,255,127,4,255,255,255,255,255,255,255,127,5,0,0,56,255,255,60,0,126,126,126,0,127,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,7,255,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,255,127,248,255,255,255,255,255,15,255,255,255,255,255,255,255,255,255,255,255,255,255,63,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,0,0,0,127,0,248,224,255,253,127,95,219,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,0,0,248,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,255,255,255,255,255,255,255,255,252,255,255,255,255,255,255,0,0,0,0,0,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,223,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,255,3,254,255,255,7,254,255,255,7,192,255,255,255,255,255,255,255,255,255,255,127,252,252,252,28,0,0,0,0,255,239,255,255,127,255,255,183,255,63,255,63,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,7,0,0,0,0,0,0,0,0,255,255,255,255,255,255,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,31,255,255,255,255,255,255,1,0,0,0,0,0,255,255,255,127,0,0,255,255,255,7,0,0,0,0,0,0,255,255,255,63,255,255,255,255,15,255,62,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,255,3,0,0,0,0,0,0,0,0,0,0,63,253,255,255,255,255,191,145,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,63,0,255,255,255,3,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,192,0,0,0,0,0,0,0,0,111,240,239,254,255,255,15,0,0,0,0,0,255,255,255,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,63,0,255,255,63,0,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,63,0,0,0,192,255,0,0,252,255,255,255,255,255,255,1,0,0,255,255,255,1,255,3,255,255,255,255,255,255,199,255,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,30,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,63,0,255,3,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,31,0,255,255,255,255,255,127,0,0,248,255,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,223,255,255,255,255,255,255,255,255,223], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([100,222,255,235,239,255,255,255,255,255,255,255,191,231,223,223,255,255,255,123,95,252,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,255,255,255,253,255,255,247,255,255,255,247,255,255,223,255,255,255,223,255,255,127,255,255,255,127,255,255,255,253,255,255,255,253,255,255,247,207,255,255,255,255,255,255,239,255,255,255,150,254,247,10,132,234,150,170,150,247,247,94,255,251,255,15,238,251,255,15,0,0,0,0,0,0,0,0,18,16,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,16,16,34,35,16,36,37,38,39,40,41,42,43,16,44,45,46,17,47,48,17,17,49,17,17,17,50,51,52,53,54,55,56,57,17,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,58,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,59,16,60,61,62,63,64,65,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,66,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,67,16,16,68,16,69,70,71,16,72,16,73,16,16,16,16,74,75,76,77,16,16,78,16,79,80,16,16,16,16,81,16,16,16,16,16,16,16,16,16,16,16,16,16,82,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,83,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,84,85,86,87,16,16,88,89,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,90,16,91,92,93,94,95,96,97,98,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,254,255,0,252,1,0,0,248,1,0,0,120,0,0,0,0,255,251,223,251,0,0,128,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,252,255,224,175,255,255,255,255,255,255,255,255,255,255,223,255,255,255,255,255,32,64,176,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,0,0,0,0,0,134,254,255,255,255,0,64,73,0,0,0,0,0,24,0,223,255,0,200,0,0,0,0,0,0,0,1,0,60,0,0,0,0,0,0,0,0,0,0,0,0,16,224,1,30,0,96,255,191,0,0,0,0,0,0,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,207,3,0,0,0,3,0,32,255,127,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,0,0,0,0,0,0,0,0,0,16,0,32,30,0,48,0,1,0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,252,15,0,0,0,0,0,0,0,16,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,3,0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,253,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,255,7,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,255,0,0,0,0,0,0,0,16,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,63,2,0,0,0,0,0,0,0,0,0,4,0,0,0,0,16,0,0,0,0,0,0,128,0,128,192,223,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,254,255,255,255,0,252,255,255,0,0,0,0,0,0,0,0,252,0,0,0,0,0,0,192,255,223,255,7,0,0,0,0,0,0,0,0,0,0,128,6,0,252,0,0,24,62,0,0,128,191,0,204,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,96,255,255,255,31,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,0,1,0,0,24,0,0,0,0,0,0,0,0,0,56,0,0,0,0,16,0,0,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,254,127,47,0,0,255,3,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,255,255,255,255,0,0,0,192,0,0,0,0,0,0,0,0,1,0,224,159,0,0,0,0,127,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,16,0,0,252,255,255,255,31,0,0,0,0,0,12,0,0,0,0,0,0,64,0,12,240,0,0,0,0,0,0,192,248,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,255,0,255,255,255,33,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,127,0,0,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,3,224,0,224,0,224,0,96,128,248,255,255,255,252,255,255,255,255,255,127,31,252,241,127,255,127,0,0,255,255,255,3,0,0,255,255,255,255,1,0,123,3,208,193,175,66,0,12,31,188,255,255,0,0,0,0,0,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,255,255,255,127,0,0,0,255,7,0,0,255,255,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,252,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,135,3,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,127,255,15,0,0,0,0,0,0,0,0,255,255,255,251,255,255,255,255,255,255,255,255,255,255,15,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,255,15,30,255,255,255,1,252,193,224,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,255,255,255,255,15,0,0,0,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,127,0,0,0,0,0,0,192,0,224,0,0,0,0,0,0,0,0,0,0,0,128,15,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,255,127,0,3,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,8,0,0,0,15,255,3,0,0,0,0,0,0,240,0,0,0,0,0,0,0,0,0,16,192,0,0,255,255,3,7,0,0,0,0,0,248,0,0,0,0,8,128,0,0,0,0,0,0,0,0,0,0,8,0,255,63,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,0,0,128,11,0,0,0,0,0,0,0,128,2,0,0,192,0,0,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,255,255,255,3,127,0,255,255,255,255,247,255,127,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,254,255,0,252,1,0,0,248,1,0,0,248,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,127,0,48,135,255,255,255,255,255,143,255,0,0,0,0,0,0,224,255,255,7,255,15,0,0,0,0,0,0,255,255,255,255,255,63,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,143,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,255,0,255,1,0,0,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,63,252,255,63,0,0,0,3,0,0,0,0,0,0,254,3,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,7,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,255,255,255,255,127,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,0,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,127,0,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,8,0,0,0,8,0,0,32,0,0,0,32,0,0,128,0,0,0,128,0,0,0,2,0,0,0,2,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,255,255,255,255,255,15,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,127,254,127,254,255,254,255,0,0,0,0,255,7,255,255,255,127,255,255,255,255,255,255,255,15,255,255,255,255,255,7,0,0,0,0,0,0,0,0,192,255,255,255,7,0,255,255,255,255,255,7,255,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,191,255,255,255,255,255,255,255,255,31,255,255,15,0,255,255,255,255,223,7,0,0,255,255,1,0,255,255,255,255,255,255,255,127,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,30,255,255,255,255,255,255,255,63,15,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,255,255,255,255,255,225,255,0,0,0,0,0,0,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,108,110,117,109,0,97,108,112,104,97,0,98,108,97,110,107,0,99,110,116,114,108,0,100,105,103,105,116,0,103,114,97,112,104,0,108,111,119,101,114,0,112,114,105,110,116,0,112,117,110,99,116,0,115,112,97,99,101,0,117,112,112,101,114,0,120,100,105,103,105,116,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,105,110,102,105,110,105,116,121,0,0,47,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,58,32,105,108,108,101,103,97,108,32,111,112,116,105,111,110,58,32,0,10,0,58,32,111,112,116,105,111,110,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,58,32,0,114,119,97], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+17920);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }function _raise(sig) {
      Module.printErr('Calling stub instead of raise()');
    ___setErrNo(ERRNO_CODES.ENOSYS);
        Runtime.warnOnce('raise() returning an error as we do not support it');
      return -1;
    }

   
  Module["_i64Add"] = _i64Add;

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~02000000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall191(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ugetrlimit
      var resource = SYSCALLS.get(), rlim = SYSCALLS.get();
      HEAP32[((rlim)>>2)]=-1;  // RLIM_INFINITY
      HEAP32[(((rlim)+(4))>>2)]=-1;  // RLIM_INFINITY
      HEAP32[(((rlim)+(8))>>2)]=-1;  // RLIM_INFINITY
      HEAP32[(((rlim)+(12))>>2)]=-1;  // RLIM_INFINITY
      return 0; // just report no limits
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _kill(pid, sig) {
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/kill.html
      // Makes no sense in a single-process environment.
  	  // Should kill itself somtimes depending on `pid`
      Module.printErr('Calling stub instead of kill()');
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }

  function ___syscall196(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_lstat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.lstat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _sigemptyset(set) {
      HEAP32[((set)>>2)]=0;
      return 0;
    }

  var _emscripten_check_longjmp=true;

  function _sigprocmask() {
      Module.printErr('Calling stub instead of sigprocmask()');
      return 0;
    }

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      Runtime.stackRestore(ret);
    }

  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(ENV);
      }
      return 0;
    }

  
  function _realloc() { throw 'bad' }
  Module["_realloc"] = _realloc; 
  Module["_saveSetjmp"] = _saveSetjmp;

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _wait(stat_loc) {
      // pid_t wait(int *stat_loc);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/wait.html
      // Makes no sense in a single-process environment.
      ___setErrNo(ERRNO_CODES.ECHILD);
      return -1;
    }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  var PROCINFO={ppid:1,pid:42,sid:42,pgid:42};function ___syscall57(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // setpgid
      var pid = SYSCALLS.get(), pgid = SYSCALLS.get();
      if (pid && pid !== PROCINFO.pid) return -ERRNO_CODES.ESRCH;
      if (pgid && pgid !== PROCINFO.pgid) return -ERRNO_CODES.EPERM;
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  var ___tm_current=allocate(44, "i8", ALLOC_STATIC);
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  
  
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // DST is in December in South
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? Runtime.QUANTUM_SIZE : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function ___syscall75(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // setrlimit
      return 0; // no-op
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall38(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rename
      var old_path = SYSCALLS.getStr(), new_path = SYSCALLS.getStr();
      FS.rename(old_path, new_path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _emscripten_prep_setjmp=true;

  function ___syscall33(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // access
      var path = SYSCALLS.getStr(), amode = SYSCALLS.get();
      return SYSCALLS.doAccess(path, amode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _execl(/* ... */) {
      // int execl(const char *path, const char *arg0, ... /*, (char *)0 */);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/exec.html
      // We don't support executing external code.
      ___setErrNo(ERRNO_CODES.ENOEXEC);
      return -1;
    }function _execvp() {
  return _execl.apply(null, arguments)
  }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _sigaddset(set, signum) {
      HEAP32[((set)>>2)]=HEAP32[((set)>>2)]| (1 << (signum-1));
      return 0;
    }

  
  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }

  function __Exit() {
  Module['printErr']('missing function: _Exit'); abort(-1);
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _execve() {
  return _execl.apply(null, arguments)
  }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function ___syscall83(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // symlink
      var target = SYSCALLS.getStr(), linkpath = SYSCALLS.getStr();
      FS.symlink(target, linkpath);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _sigdelset(set, signum) {
      HEAP32[((set)>>2)]=HEAP32[((set)>>2)]& (~(1 << (signum-1)));
      return 0;
    }

  var _emscripten_preinvoke=true;

  var _BItoD=true;

  function ___syscall85(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readlink
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get(), bufsize = SYSCALLS.get();
      return SYSCALLS.doReadlink(path, buf, bufsize);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall205(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getgroups32
      var size = SYSCALLS.get(), list = SYSCALLS.get();
      if (size < 1) return -ERRNO_CODES.EINVAL;
      HEAP32[((list)>>2)]=0;
      return 1;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall122(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // uname
      var buf = SYSCALLS.get();
      if (!buf) return -ERRNO_CODES.EFAULT
      var layout = {"sysname":0,"nodename":65,"domainname":325,"machine":260,"version":195,"release":130,"__size__":390};
      function copyString(element, value) {
        var offset = layout[element];
        writeAsciiToMemory(value, buf + offset);
      }
      copyString('sysname', 'Emscripten');
      copyString('nodename', 'emscripten');
      copyString('release', '1.0');
      copyString('version', '#1');
      copyString('machine', 'x86-JS');
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function ___syscall202(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getgid32
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall201() {
  return ___syscall202.apply(null, arguments)
  }

  function ___syscall200() {
  return ___syscall202.apply(null, arguments)
  }


  function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _sigismember(set, signum) {
      return HEAP32[((set)>>2)] & (1 << (signum-1));
    }

  function _getpwuid(uid) {
      return 0; // NULL
    }

  
  function ___syscall51(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // acct
      return -ERRNO_CODES.ENOSYS; // unsupported features
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall42() {
  return ___syscall51.apply(null, arguments)
  }

  function ___syscall41(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // dup
      var old = SYSCALLS.getStreamFromFD();
      return FS.open(old.path, old.flags, 0).fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall64(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getppid
      return PROCINFO.ppid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall65(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getpgrp
      return PROCINFO.pgid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall60(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // umask
      var mask = SYSCALLS.get();
      var old = SYSCALLS.umask;
      SYSCALLS.umask = mask;
      return old;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _emscripten_cleanup_setjmp=true;

  function ___syscall63(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // dup2
      var old = SYSCALLS.getStreamFromFD(), suggestFD = SYSCALLS.get();
      if (old.fd === suggestFD) return suggestFD;
      return SYSCALLS.doDup(old.path, old.flags, suggestFD);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall20(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getpid
      return PROCINFO.pid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _sigfillset(set) {
      HEAP32[((set)>>2)]=-1>>>0;
      return 0;
    }

  function _abort() {
      Module['abort']();
    }

  function ___lock() {}

  function ___unlock() {}

  var _fabs=Math_abs;

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  var _emscripten_get_longjmp_result=true;

  function ___syscall168(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // poll
      var fds = SYSCALLS.get(), nfds = SYSCALLS.get(), timeout = SYSCALLS.get();
      var nonzero = 0;
      for (var i = 0; i < nfds; i++) {
        var pollfd = fds + 8 * i;
        var fd = HEAP32[((pollfd)>>2)];
        var events = HEAP16[(((pollfd)+(4))>>1)];
        var mask = 32;
        var stream = FS.getStream(fd);
        if (stream) {
          mask = SYSCALLS.DEFAULT_POLLMASK;
          if (stream.stream_ops.poll) {
            mask = stream.stream_ops.poll(stream);
          }
        }
        mask &= events | 8 | 16;
        if (mask) nonzero++;
        HEAP16[(((pollfd)+(6))>>1)]=mask;
      }
      return nonzero;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _waitpid() {
  return _wait.apply(null, arguments)
  }

  var _BDtoIHigh=true;


  function ___syscall220(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_getdents64
      var stream = SYSCALLS.getStreamFromFD(), dirp = SYSCALLS.get(), count = SYSCALLS.get();
      if (!stream.getdents) {
        stream.getdents = FS.readdir(stream.path);
      }
      var pos = 0;
      while (stream.getdents.length > 0 && pos + 268 < count) {
        var id;
        var type;
        var name = stream.getdents.pop();
        assert(name.length < 256); // limit of dirent struct
        if (name[0] === '.') {
          id = 1;
          type = 4; // DT_DIR
        } else {
          var child = FS.lookupNode(stream.node, name);
          id = child.id;
          type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
                 FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
                 FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
                 8;                             // DT_REG, regular file.
        }
        HEAP32[((dirp + pos)>>2)]=id;
        HEAP32[(((dirp + pos)+(4))>>2)]=stream.position;
        HEAP16[(((dirp + pos)+(8))>>1)]=268;
        HEAP8[(((dirp + pos)+(10))>>0)]=type;
        for (var i = 0; i < name.length; i++) {
          HEAP8[(((dirp + pos)+(11 + i))>>0)]=name.charCodeAt(i);
        }
        HEAP8[(((dirp + pos)+(11 + i))>>0)]=0;
        pos += 268;
      }
      return pos;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _unsetenv(name) {
      // int unsetenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/unsetenv.html
      if (name === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      name = Pointer_stringify(name);
      if (name === '' || name.indexOf('=') !== -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      if (ENV.hasOwnProperty(name)) {
        delete ENV[name];
        ___buildEnvironment(ENV);
      }
      return 0;
    }

  function ___syscall12(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // chdir
      var path = SYSCALLS.getStr();
      FS.chdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall9(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // link
      var oldpath = SYSCALLS.get(), newpath = SYSCALLS.get();
      return -ERRNO_CODES.EMLINK; // no hardlinks for us
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall183(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getcwd
      var buf = SYSCALLS.get(), size = SYSCALLS.get();
      if (size === 0) return -ERRNO_CODES.EINVAL;
      var cwd = FS.cwd();
      if (size < cwd.length + 1) return -ERRNO_CODES.ERANGE;
      writeAsciiToMemory(cwd, buf);
      return buf;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall3(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // read
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall4(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // write
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.write(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _emscripten_setjmp=true;

  var _emscripten_postinvoke=true;

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(Runtime.stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___syscall340(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // prlimit64
      var pid = SYSCALLS.get(), resource = SYSCALLS.get(), new_limit = SYSCALLS.get(), old_limit = SYSCALLS.get();
      if (old_limit) { // just report no limits
        HEAP32[((old_limit)>>2)]=-1;  // RLIM_INFINITY
        HEAP32[(((old_limit)+(4))>>2)]=-1;  // RLIM_INFINITY
        HEAP32[(((old_limit)+(8))>>2)]=-1;  // RLIM_INFINITY
        HEAP32[(((old_limit)+(12))>>2)]=-1;  // RLIM_INFINITY
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _fork() {
      // pid_t fork(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fork.html
      // We don't support multiple processes.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }function _vfork() {
  return _fork.apply(null, arguments)
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
___buildEnvironment(ENV);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_v": nullFunc_v, "nullFunc_iii": nullFunc_iii, "invoke_iiii": invoke_iiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_v": invoke_v, "invoke_iii": invoke_iii, "_fabs": _fabs, "___syscall221": ___syscall221, "_execve": _execve, "___syscall220": ___syscall220, "___syscall64": ___syscall64, "___syscall65": ___syscall65, "___syscall122": ___syscall122, "___syscall63": ___syscall63, "___syscall60": ___syscall60, "_tzset": _tzset, "_execvp": _execvp, "___syscall42": ___syscall42, "___syscall202": ___syscall202, "_unsetenv": _unsetenv, "_fork": _fork, "_vfork": _vfork, "___unlock": ___unlock, "_putenv": _putenv, "___syscall20": ___syscall20, "_llvm_stackrestore": _llvm_stackrestore, "__Exit": __Exit, "___syscall183": ___syscall183, "___buildEnvironment": ___buildEnvironment, "_longjmp": _longjmp, "_sigprocmask": _sigprocmask, "__addDays": __addDays, "___syscall83": ___syscall83, "_localtime_r": _localtime_r, "_wait": _wait, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "___syscall38": ___syscall38, "_sbrk": _sbrk, "_sigaddset": _sigaddset, "___syscall191": ___syscall191, "_sigismember": _sigismember, "___syscall196": ___syscall196, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_sigfillset": _sigfillset, "_time": _time, "_sysconf": _sysconf, "___syscall168": ___syscall168, "_execl": _execl, "___setErrNo": ___setErrNo, "_strftime": _strftime, "__arraySum": __arraySum, "___syscall195": ___syscall195, "_abort": _abort, "_exit": _exit, "_pthread_self": _pthread_self, "___syscall75": ___syscall75, "_llvm_stacksave": _llvm_stacksave, "_kill": _kill, "_getenv": _getenv, "___syscall51": ___syscall51, "_waitpid": _waitpid, "___syscall57": ___syscall57, "___syscall33": ___syscall33, "___syscall54": ___syscall54, "___syscall85": ___syscall85, "_pthread_cleanup_pop": _pthread_cleanup_pop, "__isLeapYear": __isLeapYear, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___syscall12": ___syscall12, "_emscripten_longjmp": _emscripten_longjmp, "_sigdelset": _sigdelset, "___syscall9": ___syscall9, "_sigemptyset": _sigemptyset, "_getpwuid": _getpwuid, "___syscall41": ___syscall41, "___syscall3": ___syscall3, "___syscall340": ___syscall340, "___lock": ___lock, "___syscall6": ___syscall6, "_pthread_cleanup_push": _pthread_cleanup_push, "___syscall4": ___syscall4, "___syscall5": ___syscall5, "_gettimeofday": _gettimeofday, "___syscall201": ___syscall201, "___syscall140": ___syscall140, "_localtime": _localtime, "___syscall205": ___syscall205, "_raise": _raise, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall200": ___syscall200, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "_environ": _environ };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var _environ=env._environ|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iii=env.nullFunc_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_v=env.invoke_v;
  var invoke_iii=env.invoke_iii;
  var _fabs=env._fabs;
  var ___syscall221=env.___syscall221;
  var _execve=env._execve;
  var ___syscall220=env.___syscall220;
  var ___syscall64=env.___syscall64;
  var ___syscall65=env.___syscall65;
  var ___syscall122=env.___syscall122;
  var ___syscall63=env.___syscall63;
  var ___syscall60=env.___syscall60;
  var _tzset=env._tzset;
  var _execvp=env._execvp;
  var ___syscall42=env.___syscall42;
  var ___syscall202=env.___syscall202;
  var _unsetenv=env._unsetenv;
  var _fork=env._fork;
  var _vfork=env._vfork;
  var ___unlock=env.___unlock;
  var _putenv=env._putenv;
  var ___syscall20=env.___syscall20;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var __Exit=env.__Exit;
  var ___syscall183=env.___syscall183;
  var ___buildEnvironment=env.___buildEnvironment;
  var _longjmp=env._longjmp;
  var _sigprocmask=env._sigprocmask;
  var __addDays=env.__addDays;
  var ___syscall83=env.___syscall83;
  var _localtime_r=env._localtime_r;
  var _wait=env._wait;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var ___syscall38=env.___syscall38;
  var _sbrk=env._sbrk;
  var _sigaddset=env._sigaddset;
  var ___syscall191=env.___syscall191;
  var _sigismember=env._sigismember;
  var ___syscall196=env.___syscall196;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _sigfillset=env._sigfillset;
  var _time=env._time;
  var _sysconf=env._sysconf;
  var ___syscall168=env.___syscall168;
  var _execl=env._execl;
  var ___setErrNo=env.___setErrNo;
  var _strftime=env._strftime;
  var __arraySum=env.__arraySum;
  var ___syscall195=env.___syscall195;
  var _abort=env._abort;
  var _exit=env._exit;
  var _pthread_self=env._pthread_self;
  var ___syscall75=env.___syscall75;
  var _llvm_stacksave=env._llvm_stacksave;
  var _kill=env._kill;
  var _getenv=env._getenv;
  var ___syscall51=env.___syscall51;
  var _waitpid=env._waitpid;
  var ___syscall57=env.___syscall57;
  var ___syscall33=env.___syscall33;
  var ___syscall54=env.___syscall54;
  var ___syscall85=env.___syscall85;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var __isLeapYear=env.__isLeapYear;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___syscall12=env.___syscall12;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var _sigdelset=env._sigdelset;
  var ___syscall9=env.___syscall9;
  var _sigemptyset=env._sigemptyset;
  var _getpwuid=env._getpwuid;
  var ___syscall41=env.___syscall41;
  var ___syscall3=env.___syscall3;
  var ___syscall340=env.___syscall340;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___syscall4=env.___syscall4;
  var ___syscall5=env.___syscall5;
  var _gettimeofday=env._gettimeofday;
  var ___syscall201=env.___syscall201;
  var ___syscall140=env.___syscall140;
  var _localtime=env._localtime;
  var ___syscall205=env.___syscall205;
  var _raise=env._raise;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall200=env.___syscall200;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _bb_show_usage() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _xfunc_die();
 // unreachable;
}
function _find_applet_by_name($name) {
 $name = $name|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcmp($name,2948)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (_strcmp($name,(2953))|0);
  $3 = ($2|0)==(0);
  $$ = $3 ? 1 : -1;
  $$0 = $$;
 }
 return ($$0|0);
}
function _run_applet_no_and_exit($applet_no,$argv) {
 $applet_no = $applet_no|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argc$0 = 0, $argc$0$lcssa = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $argc$0 = 1;
 while(1) {
  $0 = (($argv) + ($argc$0<<2)|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = ($1|0)==(0|0);
  $3 = (($argc$0) + 1)|0;
  if ($2) {
   $argc$0$lcssa = $argc$0;
   break;
  } else {
   $argc$0 = $3;
  }
 }
 HEAP8[3631>>0] = 1;
 $4 = (2204 + ($applet_no<<1)|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = $6 & 4095;
 $8 = (2948 + ($7)|0);
 HEAP32[16>>2] = $8;
 $9 = ($argc$0$lcssa|0)==(2);
 if ($9) {
  $10 = ((($argv)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_strcmp($11,2958)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   HEAP8[3631>>0] = 0;
   _bb_show_usage();
   // unreachable;
  }
 }
 $14 = (8 + ($applet_no<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (FUNCTION_TABLE_iii[$15 & 63]($argc$0$lcssa,$argv)|0);
 _exit(($16|0));
 // unreachable;
}
function _run_applet_and_exit($name,$argv) {
 $name = $name|0;
 $argv = $argv|0;
 var $$1$i = 0, $$argv$i = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $a$0$i2 = 0, $a1$0$i3 = 0, $busybox$0$i = 0, $col$0$i1 = 0, $col$2$i = 0, $phitmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_find_applet_by_name($name)|0);
 $1 = ($0|0)>(-1);
 if ($1) {
  _run_applet_no_and_exit($0,$argv);
  // unreachable;
 }
 $2 = (_is_prefixed_with($name,2965)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = ((($argv)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 L7: do {
  if ($6) {
   label = 5;
  } else {
   $17 = (_is_prefixed_with($5,3545)|0);
   $18 = ($17|0)==(0|0);
   if (!($18)) {
    (_dup2(1,2)|0);
    $a1$0$i3 = 2948;
    while(1) {
     $19 = HEAP32[$4>>2]|0;
     $20 = ((($19)) + 6|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = ($21<<24>>24)==(0);
     if (!($22)) {
      (_full_write2_str((3557))|0);
     }
     (_full_write2_str($a1$0$i3)|0);
     (_full_write2_str(15818)|0);
     $23 = (_strlen($a1$0$i3)|0);
     $24 = (($23) + 1)|0;
     $25 = (($a1$0$i3) + ($24)|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(0);
     if ($27) {
      break L7;
     } else {
      $a1$0$i3 = $25;
     }
    }
   }
   $28 = HEAP32[$4>>2]|0;
   $29 = (_strcmp($28,3562)|0);
   $30 = ($29|0)==(0);
   if (!($30)) {
    $57 = (_strcmp($28,2958)|0);
    $58 = ($57|0)==(0);
    if ($58) {
     $59 = ((($argv)) + 8|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==(0|0);
     if ($61) {
      label = 5;
      break;
     }
     HEAP32[$argv>>2] = $60;
     HEAP32[$59>>2] = 0;
     $$1$i = $argv;$62 = $60;
    } else {
     $$1$i = $4;$62 = $28;
    }
    $63 = (_bb_get_last_path_component_nostrip($62)|0);
    HEAP32[16>>2] = $63;
    _run_applet_and_exit($63,$$1$i);
    $64 = HEAP32[16>>2]|0;
    (_full_write2_str($64)|0);
    (_full_write2_str(3604)|0);
    _exit(127);
    // unreachable;
   }
   $31 = (_xmalloc_readlink(3702)|0);
   $32 = ($31|0)==(0|0);
   if ($32) {
    $33 = HEAP32[$argv>>2]|0;
    $34 = HEAP8[$33>>0]|0;
    $35 = ($34<<24>>24)==(47);
    if ($35) {
     $busybox$0$i = $33;
    } else {
     HEAP32[$vararg_buffer>>2] = $33;
     _bb_error_msg_and_die(3572,$vararg_buffer);
     // unreachable;
    }
   } else {
    $busybox$0$i = $31;
   }
   $36 = ((($argv)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(0|0);
   if ($38) {
    $41 = 0;$45 = 36;
   } else {
    $39 = (_strcmp($37,3601)|0);
    $40 = ($39|0)==(0);
    $$argv$i = $40 ? $4 : $argv;
    $phitmp = $40 ? 37 : 36;
    $$phi$trans$insert = ((($$argv$i)) + 8|0);
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $41 = $$pre;$45 = $phitmp;
   }
   $42 = ($41|0)==(0|0);
   $43 = $42 ? (3556) : $41;
   $44 = (_concat_path_file($43,2948)|0);
   $46 = (FUNCTION_TABLE_iii[$45 & 63]($busybox$0$i,$44)|0);
   $47 = ($46|0)==(0);
   if (!($47)) {
    $48 = (___errno_location()|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)==(17);
    if (!($50)) {
     _bb_simple_perror_msg($44);
    }
   }
   _free($44);
   $51 = (_concat_path_file($43,(2953))|0);
   $52 = (FUNCTION_TABLE_iii[$45 & 63]($busybox$0$i,$51)|0);
   $53 = ($52|0)==(0);
   if (!($53)) {
    $54 = (___errno_location()|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ($55|0)==(17);
    if (!($56)) {
     _bb_simple_perror_msg($51);
    }
   }
   _free($51);
  }
 } while(0);
 if ((label|0) == 5) {
  (_dup2(1,2)|0);
  (_full_write2_str(3632)|0);
  (_full_write2_str(2973)|0);
  (_full_write2_str(2994)|0);
  $a$0$i2 = 2948;$col$0$i1 = 0;
  while(1) {
   $7 = (_strlen($a$0$i2)|0);
   $8 = (($7) + 2)|0;
   $9 = (77 - ($7))|0;
   $10 = ($col$0$i1|0)<($9|0);
   if ($10) {
    $11 = ($col$0$i1|0)==(0);
    if ($11) {
     label = 9;
    } else {
     (_full_write2_str(3539)|0);
     $col$2$i = $col$0$i1;
    }
   } else {
    (_full_write2_str(3534)|0);
    label = 9;
   }
   if ((label|0) == 9) {
    label = 0;
    (_full_write2_str(3537)|0);
    $col$2$i = 6;
   }
   (_full_write2_str($a$0$i2)|0);
   $12 = (($8) + ($col$2$i))|0;
   $13 = (($7) + 1)|0;
   $14 = (($a$0$i2) + ($13)|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = ($15<<24>>24)==(0);
   if ($16) {
    break;
   } else {
    $a$0$i2 = $14;$col$0$i1 = $12;
   }
  }
  (_full_write2_str(3542)|0);
 }
 _exit(0);
 // unreachable;
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_mallopt(-1,8192)|0);
 (_mallopt(-3,32512)|0);
 $0 = HEAP32[$argv>>2]|0;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)<(0);
 if ($2) {
  HEAP8[2957>>0] = 1;
  $3 = HEAP8[$0>>0]|0;
  $4 = $3&255;
  $5 = $4 & 127;
  $6 = $5&255;
  HEAP8[$0>>0] = $6;
 }
 HEAP32[16>>2] = 2965;
 $7 = HEAP32[$argv>>2]|0;
 HEAP32[16>>2] = $7;
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(45);
 if ($9) {
  $10 = ((($7)) + 1|0);
  HEAP32[16>>2] = $10;
  $11 = $10;
 } else {
  $11 = $7;
 }
 $12 = (_bb_basename($11)|0);
 HEAP32[16>>2] = $12;
 _run_applet_and_exit($12,$argv);
 $13 = HEAP32[16>>2]|0;
 (_full_write2_str($13)|0);
 (_full_write2_str(3604)|0);
 _exit(127);
 // unreachable;
 return (0)|0;
}
function _is_prefixed_with($string,$key) {
 $string = $string|0;
 $key = $key|0;
 var $$013 = 0, $$02 = 0, $$04 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$key>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $$02 = $string;
  } else {
   $$013 = $string;$$04 = $key;$3 = $0;
   while(1) {
    $2 = HEAP8[$$013>>0]|0;
    $4 = ($3<<24>>24)==($2<<24>>24);
    if (!($4)) {
     $$02 = 0;
     break L1;
    }
    $5 = ((($$04)) + 1|0);
    $6 = ((($$013)) + 1|0);
    $7 = HEAP8[$5>>0]|0;
    $8 = ($7<<24>>24)==(0);
    if ($8) {
     $$02 = $6;
     break;
    } else {
     $$013 = $6;$$04 = $5;$3 = $7;
    }
   }
  }
 } while(0);
 return ($$02|0);
}
function _index_in_strings($strings,$key) {
 $strings = $strings|0;
 $key = $key|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $idx$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$strings>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $$0 = -1;
  } else {
   $$012 = $strings;$idx$03 = 0;
   while(1) {
    $2 = (_strcmp($$012,$key)|0);
    $3 = ($2|0)==(0);
    if ($3) {
     $$0 = $idx$03;
     break L1;
    }
    $4 = (_strlen($$012)|0);
    $5 = (($4) + 1)|0;
    $6 = (($$012) + ($5)|0);
    $7 = (($idx$03) + 1)|0;
    $8 = HEAP8[$6>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     $$0 = -1;
     break;
    } else {
     $$012 = $6;$idx$03 = $7;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _concat_path_file($path,$filename) {
 $path = $path|0;
 $filename = $filename|0;
 var $$01 = 0, $$01$lcssa = 0, $$path = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($path|0)==(0|0);
 $$path = $0 ? 13904 : $path;
 $1 = (_last_char_is($$path,47)|0);
 $$01 = $filename;
 while(1) {
  $2 = HEAP8[$$01>>0]|0;
  $3 = ($2<<24>>24)==(47);
  $4 = ((($$01)) + 1|0);
  if ($3) {
   $$01 = $4;
  } else {
   $$01$lcssa = $$01;
   break;
  }
 }
 $5 = ($1|0)==(0|0);
 $6 = $5 ? 13905 : 13904;
 HEAP32[$vararg_buffer>>2] = $$path;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $$01$lcssa;
 $7 = (_xasprintf(3624,$vararg_buffer)|0);
 STACKTOP = sp;return ($7|0);
}
function _bb_basename($name) {
 $name = $name|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strrchr($name,47)|0);
 $1 = ($0|0)==(0|0);
 $2 = ((($0)) + 1|0);
 $$0 = $1 ? $name : $2;
 return ($$0|0);
}
function _bb_get_last_path_component_nostrip($path) {
 $path = $path|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strrchr($path,47)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = $path;
  } else {
   $2 = ($0|0)==($path|0);
   if ($2) {
    $3 = ((($path)) + 1|0);
    $4 = HEAP8[$3>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$0 = $path;
     break;
    }
   }
   $6 = ((($0)) + 1|0);
   $$0 = $6;
  }
 } while(0);
 return ($$0|0);
}
function _last_char_is($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  label = 4;
 } else {
  $1 = HEAP8[$s>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   label = 4;
  } else {
   $3 = (_strlen($s)|0);
   $4 = (($3) + -1)|0;
   $5 = (($s) + ($4)|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6&255;
   $not$ = ($7|0)==($c|0);
   if ($not$) {
    $$1 = $5;
   } else {
    label = 4;
   }
  }
 }
 if ((label|0) == 4) {
  $$1 = 0;
 }
 return ($$1|0);
}
function _bb_perror_msg($s,$varargs) {
 $s = $s|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p = sp;
 HEAP32[$p>>2] = $varargs;
 $0 = (___errno_location()|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $4 = 0;
 } else {
  $3 = (_strerror($1)|0);
  $4 = $3;
 }
 _bb_verror_msg($s,$p,$4);
 STACKTOP = sp;return;
}
function _bb_perror_msg_and_die($s,$varargs) {
 $s = $s|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p = sp;
 HEAP32[$p>>2] = $varargs;
 $0 = (___errno_location()|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $4 = 0;
 } else {
  $3 = (_strerror($1)|0);
  $4 = $3;
 }
 _bb_verror_msg($s,$p,$4);
 _xfunc_die();
 // unreachable;
}
function _bb_simple_perror_msg($s) {
 $s = $s|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $s;
 _bb_perror_msg(5530,$vararg_buffer);
 STACKTOP = sp;return;
}
function _bb_verror_msg($s,$p,$strerr) {
 $s = $s|0;
 $p = $p|0;
 $strerr = $strerr|0;
 var $$s = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $msg = 0, $used$0 = 0, $used$1 = 0, $used$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $msg = sp;
 $0 = HEAP32[24>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = ($s|0)==(0|0);
  $$s = $2 ? 13904 : $s;
  $3 = (_vasprintf($msg,$$s,$p)|0);
  $4 = ($3|0)<(0);
  if (!($4)) {
   $5 = HEAP32[16>>2]|0;
   $6 = (_strlen($5)|0);
   $7 = (($6) + 2)|0;
   $8 = ($strerr|0)!=(0|0);
   if ($8) {
    $9 = (_strlen($strerr)|0);
    $16 = $9;
   } else {
    $16 = 0;
   }
   $10 = HEAP32[28>>2]|0;
   $11 = (_strlen($10)|0);
   $12 = HEAP32[$msg>>2]|0;
   $13 = (($7) + ($3))|0;
   $14 = (($13) + 3)|0;
   $15 = (($14) + ($16))|0;
   $17 = (($15) + ($11))|0;
   $18 = (_realloc($12,$17)|0);
   $19 = ($18|0)==(0|0);
   if ($19) {
    $20 = (($3) + 1)|0;
    $21 = HEAP32[$msg>>2]|0;
    $22 = (($21) + ($3)|0);
    HEAP8[$22>>0] = 10;
    $used$2 = $20;
   } else {
    HEAP32[$msg>>2] = $18;
    $23 = (($18) + ($7)|0);
    _memmove(($23|0),($18|0),($3|0))|0;
    $24 = HEAP32[16>>2]|0;
    (_strcpy($18,$24)|0);
    $25 = HEAP32[$msg>>2]|0;
    $26 = (($25) + ($6)|0);
    HEAP8[$26>>0] = 58;
    $27 = (($6) + 1)|0;
    $28 = HEAP32[$msg>>2]|0;
    $29 = (($28) + ($27)|0);
    HEAP8[$29>>0] = 32;
    if ($8) {
     $30 = HEAP8[$$s>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $used$0 = $13;
     } else {
      $32 = (($13) + 1)|0;
      $33 = HEAP32[$msg>>2]|0;
      $34 = (($33) + ($13)|0);
      HEAP8[$34>>0] = 58;
      $35 = (($13) + 2)|0;
      $36 = HEAP32[$msg>>2]|0;
      $37 = (($36) + ($32)|0);
      HEAP8[$37>>0] = 32;
      $used$0 = $35;
     }
     $38 = HEAP32[$msg>>2]|0;
     $39 = (($38) + ($used$0)|0);
     (_strcpy($39,$strerr)|0);
     $40 = (($used$0) + ($16))|0;
     $used$1 = $40;
    } else {
     $used$1 = $13;
    }
    $41 = HEAP32[$msg>>2]|0;
    $42 = (($41) + ($used$1)|0);
    $43 = HEAP32[28>>2]|0;
    (_strcpy($42,$43)|0);
    $44 = (($used$1) + ($11))|0;
    $used$2 = $44;
   }
   $45 = HEAP32[24>>2]|0;
   $46 = $45 & 1;
   $47 = ($46|0)==(0);
   if (!($47)) {
    (_fflush_all()|0);
    $48 = HEAP32[$msg>>2]|0;
    (_full_write(2,$48,$used$2)|0);
   }
   $49 = HEAP32[$msg>>2]|0;
   _free($49);
  }
 }
 STACKTOP = sp;return;
}
function _bb_error_msg_and_die($s,$varargs) {
 $s = $s|0;
 $varargs = $varargs|0;
 var $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p = sp;
 HEAP32[$p>>2] = $varargs;
 _bb_verror_msg($s,$p,0);
 _xfunc_die();
 // unreachable;
}
function _bb_error_msg($s,$varargs) {
 $s = $s|0;
 $varargs = $varargs|0;
 var $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p = sp;
 HEAP32[$p>>2] = $varargs;
 _bb_verror_msg($s,$p,0);
 STACKTOP = sp;return;
}
function _xfunc_die() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[32>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  FUNCTION_TABLE_v[$0 & 63]();
 }
 $2 = HEAP8[3631>>0]|0;
 $3 = $2&255;
 _exit(($3|0));
 // unreachable;
}
function _ndelay_on($fd) {
 $fd = $fd|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_fcntl($fd,3,$vararg_buffer)|0);
 $1 = $0 & 2048;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = $0 | 2048;
  HEAP32[$vararg_buffer1>>2] = $3;
  (_fcntl($fd,4,$vararg_buffer1)|0);
 }
 STACKTOP = sp;return ($0|0);
}
function _ndelay_off($fd) {
 $fd = $fd|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_fcntl($fd,3,$vararg_buffer)|0);
 $1 = $0 & 2048;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = $0 & -2049;
  HEAP32[$vararg_buffer1>>2] = $3;
  (_fcntl($fd,4,$vararg_buffer1)|0);
 }
 STACKTOP = sp;return ($0|0);
}
function _close_on_exec_on($fd) {
 $fd = $fd|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = 1;
 (_fcntl($fd,2,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _utoa_to_buf($n,$buf,$buflen) {
 $n = $n|0;
 $buf = $buf|0;
 $buflen = $buflen|0;
 var $$011 = 0, $$048 = 0, $$057 = 0, $$1 = 0, $$16 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i$09 = 0, $or$cond3 = 0, $out$010 = 0, $out$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($buflen|0)==(0);
 L1: do {
  if ($0) {
   $$2 = $buf;
  } else {
   $$011 = $n;$$048 = $buflen;$$057 = $buf;$i$09 = 1000000000;$out$010 = 0;
   while(1) {
    $1 = (($$011>>>0) / ($i$09>>>0))&-1;
    $2 = (($$011>>>0) % ($i$09>>>0))&-1;
    $3 = $1 | $out$010;
    $4 = ($3|0)!=(0);
    $5 = ($i$09|0)==(1);
    $or$cond3 = $5 | $4;
    if ($or$cond3) {
     $6 = (($$048) + -1)|0;
     $7 = ($6|0)==(0);
     if ($7) {
      $$2 = $$057;
      break L1;
     }
     $8 = (($out$010) + 1)|0;
     $9 = (($1) + 48)|0;
     $10 = $9&255;
     $11 = ((($$057)) + 1|0);
     HEAP8[$$057>>0] = $10;
     $$1 = $6;$$16 = $11;$out$1 = $8;
    } else {
     $$1 = $$048;$$16 = $$057;$out$1 = $out$010;
    }
    $12 = (($i$09>>>0) / 10)&-1;
    $13 = ($i$09>>>0)<(10);
    if ($13) {
     $$2 = $$16;
     break;
    } else {
     $$011 = $2;$$048 = $$1;$$057 = $$16;$i$09 = $12;$out$010 = $out$1;
    }
   }
  }
 } while(0);
 return ($$2|0);
}
function _utoa($n) {
 $n = $n|0;
 var $$011$i = 0, $$048$i = 0, $$057$i = 0, $$1$i = 0, $$16$i = 0, $$2$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$09$i = 0;
 var $or$cond3$i = 0, $out$010$i = 0, $out$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011$i = $n;$$048$i = 11;$$057$i = 3717;$i$09$i = 1000000000;$out$010$i = 0;
 while(1) {
  $0 = (($$011$i>>>0) / ($i$09$i>>>0))&-1;
  $1 = (($$011$i>>>0) % ($i$09$i>>>0))&-1;
  $2 = $0 | $out$010$i;
  $3 = ($2|0)!=(0);
  $4 = ($i$09$i|0)==(1);
  $or$cond3$i = $4 | $3;
  if ($or$cond3$i) {
   $5 = (($$048$i) + -1)|0;
   $6 = ($5|0)==(0);
   if ($6) {
    $$2$i = $$057$i;
    break;
   }
   $7 = (($out$010$i) + 1)|0;
   $8 = (($0) + 48)|0;
   $9 = $8&255;
   $10 = ((($$057$i)) + 1|0);
   HEAP8[$$057$i>>0] = $9;
   $$1$i = $5;$$16$i = $10;$out$1$i = $7;
  } else {
   $$1$i = $$048$i;$$16$i = $$057$i;$out$1$i = $out$010$i;
  }
  $11 = (($i$09$i>>>0) / 10)&-1;
  $12 = ($i$09$i>>>0)<(10);
  if ($12) {
   $$2$i = $$16$i;
   break;
  } else {
   $$011$i = $1;$$048$i = $$1$i;$$057$i = $$16$i;$i$09$i = $11;$out$010$i = $out$1$i;
  }
 }
 HEAP8[$$2$i>>0] = 0;
 return (3717|0);
}
function _itoa($n) {
 $n = $n|0;
 var $$0$i = 0, $$01$i = 0, $$02$i = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)<(0);
 if ($0) {
  $1 = (0 - ($n))|0;
  HEAP8[3717>>0] = 45;
  $$0$i = 10;$$01$i = (3718);$$02$i = $1;
 } else {
  $$0$i = 11;$$01$i = 3717;$$02$i = $n;
 }
 $2 = (_utoa_to_buf($$02$i,$$01$i,$$0$i)|0);
 HEAP8[$2>>0] = 0;
 return (3717|0);
}
function _bb_putchar_stderr($ch) {
 $ch = $ch|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP8[$0>>0] = $ch;
 $1 = (_write(2,$0,1)|0);
 STACKTOP = sp;return ($1|0);
}
function _full_write1_str($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($str)|0);
 $1 = (_full_write(1,$str,$0)|0);
 return ($1|0);
}
function _full_write2_str($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($str)|0);
 $1 = (_full_write(2,$str,$0)|0);
 return ($1|0);
}
function _get_terminal_width_height($fd,$width,$height) {
 $fd = $fd|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $err = sp;
 HEAP32[$err>>2] = 1;
 $0 = ($height|0)==(0|0);
 if (!($0)) {
  $1 = (_wh_helper(24,3729,$err)|0);
  HEAP32[$height>>2] = $1;
 }
 $2 = ($width|0)==(0|0);
 if (!($2)) {
  $3 = (_wh_helper(80,3735,$err)|0);
  HEAP32[$width>>2] = $3;
 }
 $4 = HEAP32[$err>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _tcsetattr_stdin_TCSANOW($tp) {
 $tp = $tp|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_tcsetattr(0,0,$tp)|0);
 return ($0|0);
}
function _safe_waitpid($pid,$wstat,$options) {
 $pid = $pid|0;
 $wstat = $wstat|0;
 $options = $options|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 while(1) {
  $0 = (_waitpid(($pid|0),($wstat|0),($options|0))|0);
  $1 = ($0|0)==(-1);
  if (!($1)) {
   $$lcssa = $0;
   break;
  }
  $2 = (___errno_location()|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(4);
  if (!($4)) {
   $$lcssa = -1;
   break;
  }
 }
 return ($$lcssa|0);
}
function _wh_helper($def_val,$env_name,$err) {
 $def_val = $def_val|0;
 $env_name = $env_name|0;
 $err = $err|0;
 var $$0 = 0, $$1$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $def_val$$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_getenv(($env_name|0))|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (_atoi($0)|0);
  HEAP32[$err>>2] = 0;
  $$0 = $2;
 }
 $$1$off = (($$0) + -2)|0;
 $3 = ($$1$off>>>0)>(29997);
 $def_val$$0 = $3 ? $def_val : $$0;
 return ($def_val$$0|0);
}
function _xmalloc($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_malloc($size)|0);
 $1 = ($0|0)==(0|0);
 $2 = ($size|0)!=(0);
 $or$cond = $2 & $1;
 if ($or$cond) {
  _bb_error_msg_and_die(3678,$vararg_buffer);
  // unreachable;
 } else {
  STACKTOP = sp;return ($0|0);
 }
 return (0)|0;
}
function _xrealloc($ptr,$size) {
 $ptr = $ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_realloc($ptr,$size)|0);
 $1 = ($0|0)==(0|0);
 $2 = ($size|0)!=(0);
 $or$cond = $2 & $1;
 if ($or$cond) {
  _bb_error_msg_and_die(3678,$vararg_buffer);
  // unreachable;
 } else {
  STACKTOP = sp;return ($0|0);
 }
 return (0)|0;
}
function _xzalloc($size) {
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_xmalloc($size)|0);
 _memset(($0|0),0,($size|0))|0;
 return ($0|0);
}
function _xstrdup($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (___strdup($s)|0);
  $2 = ($1|0)==(0|0);
  if ($2) {
   _bb_error_msg_and_die(3678,$vararg_buffer);
   // unreachable;
  } else {
   $$0 = $1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _xstrndup($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m$0$lcssa = 0, $m$01 = 0, $t$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $m$0$lcssa = 0;
  } else {
   $m$01 = $n;$t$02 = $s;
   while(1) {
    $1 = HEAP8[$t$02>>0]|0;
    $2 = ($1<<24>>24)==(0);
    if ($2) {
     $m$0$lcssa = $m$01;
     break L1;
    }
    $3 = (($m$01) + -1)|0;
    $4 = ((($t$02)) + 1|0);
    $5 = ($3|0)==(0);
    if ($5) {
     $m$0$lcssa = 0;
     break;
    } else {
     $m$01 = $3;$t$02 = $4;
    }
   }
  }
 } while(0);
 $6 = (($n) - ($m$0$lcssa))|0;
 $7 = (($6) + 1)|0;
 $8 = (_xmalloc($7)|0);
 $9 = (($8) + ($6)|0);
 HEAP8[$9>>0] = 0;
 _memcpy(($8|0),($s|0),($6|0))|0;
 return ($8|0);
}
function _xfopen($path,$mode) {
 $path = $path|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_fopen($path,$mode)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$vararg_buffer>>2] = $path;
  _bb_perror_msg_and_die(3743,$vararg_buffer);
  // unreachable;
 } else {
  STACKTOP = sp;return ($0|0);
 }
 return (0)|0;
}
function _xopen3($pathname,$flags,$mode) {
 $pathname = $pathname|0;
 $flags = $flags|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $mode;
 $0 = (_open($pathname,$flags,$vararg_buffer)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  HEAP32[$vararg_buffer1>>2] = $pathname;
  _bb_perror_msg_and_die(3743,$vararg_buffer1);
  // unreachable;
 } else {
  STACKTOP = sp;return ($0|0);
 }
 return (0)|0;
}
function _xopen($pathname,$flags) {
 $pathname = $pathname|0;
 $flags = $flags|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_xopen3($pathname,$flags,438)|0);
 return ($0|0);
}
function _open3_or_warn($pathname,$flags,$mode) {
 $pathname = $pathname|0;
 $flags = $flags|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $mode;
 $0 = (_open($pathname,$flags,$vararg_buffer)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  HEAP32[$vararg_buffer1>>2] = $pathname;
  _bb_perror_msg(3743,$vararg_buffer1);
 }
 STACKTOP = sp;return ($0|0);
}
function _open_or_warn($pathname,$flags) {
 $pathname = $pathname|0;
 $flags = $flags|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_open3_or_warn($pathname,$flags,438)|0);
 return ($0|0);
}
function _xpipe($filedes) {
 $filedes = $filedes|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pipe($filedes)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _bb_perror_msg_and_die(3759,$vararg_buffer);
  // unreachable;
 }
}
function _xdup2($from,$to) {
 $from = $from|0;
 $to = $to|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_dup2($from,$to)|0);
 $1 = ($0|0)==($to|0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _bb_perror_msg_and_die(3777,$vararg_buffer);
  // unreachable;
 }
}
function _xmove_fd($from,$to) {
 $from = $from|0;
 $to = $to|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($from|0)==($to|0);
 if (!($0)) {
  _xdup2($from,$to);
  (_close($from)|0);
 }
 return;
}
function _xlseek($fd,$offset,$whence) {
 $fd = $fd|0;
 $offset = $offset|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_lseek($fd,$offset,$whence)|0);
 $1 = ($0|0)==(-1);
 if (!($1)) {
  STACKTOP = sp;return ($0|0);
 }
 $2 = ($whence|0)==(0);
 if ($2) {
  HEAP32[$vararg_buffer>>2] = $offset;
  _bb_perror_msg_and_die(3809,$vararg_buffer);
  // unreachable;
 } else {
  _bb_perror_msg_and_die(3820,$vararg_buffer1);
  // unreachable;
 }
 return (0)|0;
}
function _fflush_all() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fflush(0)|0);
 return ($0|0);
}
function _bb_putchar($ch) {
 $ch = $ch|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_putchar_unlocked($ch)|0);
 return ($0|0);
}
function _xasprintf($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $p = 0, $string_ptr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $p = sp + 8|0;
 $string_ptr = sp + 4|0;
 HEAP32[$p>>2] = $varargs;
 $0 = (_vasprintf($string_ptr,$format,$p)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  _bb_error_msg_and_die(3678,$vararg_buffer);
  // unreachable;
 } else {
  $2 = HEAP32[$string_ptr>>2]|0;
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function _bb_unsetenv($var) {
 $var = $var|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($var,61)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  (_unsetenv(($var|0))|0);
 } else {
  $2 = $0;
  $3 = $var;
  $4 = (($2) - ($3))|0;
  $5 = (_xstrndup($var,$4)|0);
  (_unsetenv(($5|0))|0);
  _free($5);
 }
 return;
}
function _xmalloc_readlink($path) {
 $path = $path|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa16 = 0, $$lcssa18 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $buf$0 = 0, $bufsize$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $buf$0 = 0;$bufsize$0 = 0;
 while(1) {
  $0 = (($bufsize$0) + 80)|0;
  $1 = (_xrealloc($buf$0,$0)|0);
  $2 = (_readlink($path,$1,$0)|0);
  $3 = ($2|0)==(-1);
  if ($3) {
   $$lcssa = $1;
   label = 3;
   break;
  }
  $4 = (($bufsize$0) + 79)|0;
  $5 = ($4|0)<($2|0);
  if ($5) {
   $buf$0 = $1;$bufsize$0 = $0;
  } else {
   $$lcssa16 = $1;$$lcssa18 = $2;
   label = 5;
   break;
  }
 }
 if ((label|0) == 3) {
  _free($$lcssa);
  $$0 = 0;
 }
 else if ((label|0) == 5) {
  $6 = (($$lcssa16) + ($$lcssa18)|0);
  HEAP8[$6>>0] = 0;
  $$0 = $$lcssa16;
 }
 return ($$0|0);
}
function _full_write($fd,$buf,$len) {
 $fd = $fd|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$015 = 0, $$024 = 0, $$lcssa = 0, $$total$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $total$06 = 0, $total$06$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($len|0)==(0);
 L1: do {
  if ($0) {
   $$0 = 0;
  } else {
   $$015 = $len;$$024 = $buf;$total$06 = 0;
   while(1) {
    $1 = (_safe_write($fd,$$024,$$015)|0);
    $2 = ($1|0)<(0);
    if ($2) {
     $$lcssa = $1;$total$06$lcssa = $total$06;
     break;
    }
    $4 = (($1) + ($total$06))|0;
    $5 = (($$024) + ($1)|0);
    $6 = (($$015) - ($1))|0;
    $7 = ($$015|0)==($1|0);
    if ($7) {
     $$0 = $4;
     break L1;
    } else {
     $$015 = $6;$$024 = $5;$total$06 = $4;
    }
   }
   $3 = ($total$06$lcssa|0)==(0);
   $$total$0 = $3 ? $$lcssa : $total$06$lcssa;
   $$0 = $$total$0;
  }
 } while(0);
 return ($$0|0);
}
function _safe_read($fd,$buf,$count) {
 $fd = $fd|0;
 $buf = $buf|0;
 $count = $count|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 while(1) {
  $0 = (_read($fd,$buf,$count)|0);
  $1 = ($0|0)<(0);
  if (!($1)) {
   $$lcssa = $0;
   break;
  }
  $2 = (___errno_location()|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(4);
  if (!($4)) {
   $$lcssa = $0;
   break;
  }
 }
 return ($$lcssa|0);
}
function _safe_write($fd,$buf,$count) {
 $fd = $fd|0;
 $buf = $buf|0;
 $count = $count|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 while(1) {
  $0 = (_write($fd,$buf,$count)|0);
  $1 = ($0|0)<(0);
  if (!($1)) {
   $$lcssa = $0;
   break;
  }
  $2 = (___errno_location()|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(4);
  if (!($4)) {
   $$lcssa = $0;
   break;
  }
 }
 return ($$lcssa|0);
}
function _strftime_HHMMSS($buf,$len,$tp) {
 $buf = $buf|0;
 $len = $len|0;
 $tp = $tp|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strftime_fmt($buf,$len,$tp,3826)|0);
 return ($0|0);
}
function _monotonic_us() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tv = sp;
 (_gettimeofday(($tv|0),(0|0))|0);
 $0 = HEAP32[$tv>>2]|0;
 $1 = ($0|0)<(0);
 $2 = $1 << 31 >> 31;
 $3 = (___muldi3(($0|0),($2|0),1000000,0)|0);
 $4 = tempRet0;
 $5 = ((($tv)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<(0);
 $8 = $7 << 31 >> 31;
 $9 = (_i64Add(($3|0),($4|0),($6|0),($8|0))|0);
 $10 = tempRet0;
 tempRet0 = ($10);
 STACKTOP = sp;return ($9|0);
}
function _monotonic_ms() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tv = sp;
 (_gettimeofday(($tv|0),(0|0))|0);
 $0 = HEAP32[$tv>>2]|0;
 $1 = ($0|0)<(0);
 $2 = $1 << 31 >> 31;
 $3 = (___muldi3(($0|0),($2|0),1000,0)|0);
 $4 = tempRet0;
 $5 = ((($tv)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6|0) / 1000)&-1;
 $8 = ($7|0)<(0);
 $9 = $8 << 31 >> 31;
 $10 = (_i64Add(($7|0),($9|0),($3|0),($4|0))|0);
 $11 = tempRet0;
 tempRet0 = ($11);
 STACKTOP = sp;return ($10|0);
}
function _strftime_fmt($buf,$len,$tp,$fmt) {
 $buf = $buf|0;
 $len = $len|0;
 $tp = $tp|0;
 $fmt = $fmt|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t = sp;
 $0 = ($tp|0)==(0|0);
 if ($0) {
  (_time(($t|0))|0);
  $$0 = $t;
 } else {
  $$0 = $tp;
 }
 $1 = (_localtime(($$0|0))|0);
 $2 = (_strftime(($buf|0),($len|0),($fmt|0),($1|0))|0);
 $3 = (($buf) + ($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _bb_strtoull($arg,$endp,$base) {
 $arg = $arg|0;
 $endp = $endp|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $endptr = 0, $endptr$endp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $endptr = sp;
 $0 = ($endp|0)==(0|0);
 $endptr$endp = $0 ? $endptr : $endp;
 HEAP32[$endptr$endp>>2] = $arg;
 $1 = HEAP8[$arg>>0]|0;
 $2 = $1&255;
 $3 = (($2) + 208)|0;
 $4 = $3 & 254;
 $5 = ($4>>>0)<(10);
 if ($5) {
  label = 4;
 } else {
  $6 = $2 | 32;
  $7 = (($6) + 159)|0;
  $8 = $7 & 254;
  $9 = ($8>>>0)<(26);
  if ($9) {
   label = 4;
  } else {
   $10 = (___errno_location()|0);
   HEAP32[$10>>2] = 34;
   $16 = -1;$17 = -1;
  }
 }
 if ((label|0) == 4) {
  $11 = (___errno_location()|0);
  HEAP32[$11>>2] = 0;
  $12 = (_strtoull($arg,$endptr$endp,$base)|0);
  $13 = tempRet0;
  $14 = (_handle_errors($12,$13,$endptr$endp)|0);
  $15 = tempRet0;
  $16 = $15;$17 = $14;
 }
 tempRet0 = ($16);
 STACKTOP = sp;return ($17|0);
}
function _bb_strtoul($arg,$endp,$base) {
 $arg = $arg|0;
 $endp = $endp|0;
 $base = $base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $endptr = 0, $endptr$endp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $endptr = sp;
 $0 = ($endp|0)==(0|0);
 $endptr$endp = $0 ? $endptr : $endp;
 HEAP32[$endptr$endp>>2] = $arg;
 $1 = HEAP8[$arg>>0]|0;
 $2 = $1&255;
 $3 = (($2) + 208)|0;
 $4 = $3 & 254;
 $5 = ($4>>>0)<(10);
 if ($5) {
  label = 4;
 } else {
  $6 = $2 | 32;
  $7 = (($6) + 159)|0;
  $8 = $7 & 254;
  $9 = ($8>>>0)<(26);
  if ($9) {
   label = 4;
  } else {
   $10 = (___errno_location()|0);
   HEAP32[$10>>2] = 34;
   $$0 = -1;
  }
 }
 if ((label|0) == 4) {
  $11 = (___errno_location()|0);
  HEAP32[$11>>2] = 0;
  $12 = (_strtoul($arg,$endptr$endp,$base)|0);
  $13 = (_handle_errors($12,0,$endptr$endp)|0);
  $14 = tempRet0;
  $$0 = $13;
 }
 STACKTOP = sp;return ($$0|0);
}
function _handle_errors($0,$1,$endp) {
 $0 = $0|0;
 $1 = $1|0;
 $endp = $endp|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$endp>>2]|0;
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $17 = $1;$18 = $0;
  } else {
   $5 = $3&255;
   $6 = (($5) + 208)|0;
   $7 = $6 & 254;
   $8 = ($7>>>0)<(10);
   if (!($8)) {
    $9 = $5 | 32;
    $10 = (($9) + 159)|0;
    $11 = $10 & 254;
    $12 = ($11>>>0)<(26);
    if (!($12)) {
     $13 = (___errno_location()|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)==(0);
     if ($15) {
      HEAP32[$13>>2] = 22;
      $17 = $1;$18 = $0;
      break;
     }
    }
   }
   $16 = (___errno_location()|0);
   HEAP32[$16>>2] = 34;
   $17 = -1;$18 = -1;
  }
 } while(0);
 tempRet0 = ($17);
 return ($18|0);
}
function _hush_main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $$ = 0, $$$i = 0, $$1$i = 0, $$neg4 = 0, $$pre$phiZ2D = 0, $$pre$pre = 0, $$pre39 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $builtin_argc$0$ph22 = 0, $builtin_argc$0$ph22$lcssa78 = 0, $cur_var$025 = 0, $cur_var$1 = 0, $e$026 = 0, $exitcond = 0, $flags$0$ph23 = 0, $flags$0$ph7$lcssa13 = 0, $flags$0$ph718 = 0, $flags$0$ph718$lcssa75 = 0, $hp$0 = 0, $input$i = 0, $input$i$1 = 0, $input$i$2 = 0, $input$i$3 = 0, $sig$021 = 0, $split = 0, $uts = 0;
 var $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $input$i$3 = sp + 108|0;
 $input$i$2 = sp + 80|0;
 $input$i$1 = sp + 52|0;
 $input$i = sp + 24|0;
 $uts = sp + 136|0;
 $0 = (_xzalloc(1448)|0);
 HEAP32[840>>2] = $0;
 /* asm() memory 'barrier' */;
 $1 = ((($0)) + 288|0);
 (_sigfillset(($1|0))|0);
 $2 = ((($0)) + 416|0);
 HEAP32[$2>>2] = 268435456;
 $3 = HEAP32[$argv>>2]|0;
 $4 = HEAP32[840>>2]|0;
 $5 = ((($4)) + 96|0);
 HEAP32[$5>>2] = $3;
 $6 = (_xzalloc(24)|0);
 $7 = ((($6)) + 16|0);
 HEAP32[$7>>2] = 1;
 $8 = ((($6)) + 20|0);
 HEAP32[$8>>2] = 1;
 $9 = (_xstrdup(3835)|0);
 $10 = ((($6)) + 4|0);
 HEAP32[$10>>2] = $9;
 (_unsetenv((3859|0))|0);
 $11 = ((($4)) + 116|0);
 HEAP32[$11>>2] = $6;
 $12 = HEAP32[_environ>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $29 = $9;
 } else {
  $14 = HEAP32[$12>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   $29 = $9;
  } else {
   $16 = $14;$cur_var$025 = $6;$e$026 = $12;
   while(1) {
    $17 = (_strchr($16,61)|0);
    $18 = ($17|0)==(0|0);
    if ($18) {
     $cur_var$1 = $cur_var$025;
    } else {
     $19 = (_xzalloc(24)|0);
     HEAP32[$cur_var$025>>2] = $19;
     $20 = HEAP32[$e$026>>2]|0;
     $21 = ((($19)) + 4|0);
     HEAP32[$21>>2] = $20;
     $22 = HEAP32[$e$026>>2]|0;
     $23 = (_strlen($22)|0);
     $24 = ((($19)) + 12|0);
     HEAP32[$24>>2] = $23;
     $25 = ((($19)) + 16|0);
     HEAP32[$25>>2] = 1;
     $cur_var$1 = $19;
    }
    $26 = ((($e$026)) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(0|0);
    if ($28) {
     break;
    } else {
     $16 = $27;$cur_var$025 = $cur_var$1;$e$026 = $26;
    }
   }
   $$pre$pre = HEAP32[$10>>2]|0;
   $29 = $$pre$pre;
  }
 }
 (_putenv(($29|0))|0);
 _set_pwd_var(1);
 $30 = (_get_local_var_value(3872)|0);
 $31 = ($30|0)==(0|0);
 if ($31) {
  (_uname($uts)|0);
  $32 = ((($uts)) + 65|0);
  HEAP32[$vararg_buffer>>2] = 3872;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $32;
  $33 = (_xasprintf(3881,$vararg_buffer)|0);
  _set_local_var($33,0,0,0);
 }
 $34 = (_new_line_input_t(3)|0);
 $35 = ((($4)) + 12|0);
 HEAP32[$35>>2] = $34;
 $36 = (_get_local_var_value(3887)|0);
 $37 = ((($4)) + 4|0);
 $38 = ($36|0)==(0|0);
 $$$i = $38 ? 3891 : $36;
 HEAP32[$37>>2] = $$$i;
 $39 = (_get_local_var_value(3898)|0);
 $40 = ((($4)) + 8|0);
 $41 = ($39|0)==(0|0);
 $$1$i = $41 ? 3902 : $39;
 HEAP32[$40>>2] = $$1$i;
 HEAP32[32>>2] = 38;
 $42 = HEAP32[$argv>>2]|0;
 $43 = ($42|0)==(0|0);
 if ($43) {
  $47 = 0;
 } else {
  $44 = HEAP8[$42>>0]|0;
  $45 = ($44<<24>>24)==(45);
  $47 = $45;
 }
 $46 = $47&1;
 $48 = (_getopt($argc,$argv,3905)|0);
 $49 = ($48|0)<(1);
 L17: do {
  if ($49) {
   $split = $46;
   label = 38;
  } else {
   $50 = ((($4)) + 16|0);
   $51 = ((($4)) + 20|0);
   $52 = ((($4)) + 24|0);
   $53 = ((($4)) + 80|0);
   $54 = ((($4)) + 104|0);
   $55 = ((($4)) + 144|0);
   $56 = ((($4)) + 284|0);
   $233 = $48;$builtin_argc$0$ph22 = 0;$flags$0$ph23 = $46;
   L19: while(1) {
    $234 = $233;$flags$0$ph718 = $flags$0$ph23;
    L21: while(1) {
     $57 = $234;
     L23: while(1) {
      switch ($57|0) {
      case 99:  {
       $builtin_argc$0$ph22$lcssa78 = $builtin_argc$0$ph22;
       label = 17;
       break L19;
       break;
      }
      case 60:  {
       label = 26;
       break L19;
       break;
      }
      case 36:  {
       $flags$0$ph718$lcssa75 = $flags$0$ph718;
       break L21;
       break;
      }
      case 108:  {
       break L23;
       break;
      }
      case 115: case 105:  {
       break;
      }
      case 86: case 82:  {
       $132 = HEAP32[1112>>2]|0;
       $133 = (_xstrdup($132)|0);
       $134 = ($57|0)==(82);
       $135 = $134&1;
       _set_local_var($133,0,0,$135);
       break;
      }
      case 70:  {
       $136 = HEAP32[1112>>2]|0;
       $137 = (_new_function($136)|0);
       $138 = HEAP32[1092>>2]|0;
       $139 = (($argv) + ($138<<2)|0);
       $140 = HEAP32[$139>>2]|0;
       $141 = ((($137)) + 16|0);
       HEAP32[$141>>2] = $140;
       $142 = (($138) + 1)|0;
       HEAP32[1092>>2] = $142;
       break;
      }
      case 120: case 110:  {
       $143 = $57&255;
       $144 = (_set_mode(1,$143,0)|0);
       $145 = ($144|0)==(0);
       if (!($145)) {
        label = 37;
        break L19;
       }
       break;
      }
      default: {
       label = 37;
       break L19;
      }
      }
      $146 = (_getopt($argc,$argv,3905)|0);
      $147 = ($146|0)<(1);
      if ($147) {
       $$pre$phiZ2D = $50;$flags$0$ph7$lcssa13 = $flags$0$ph718;
       label = 39;
       break L17;
      } else {
       $57 = $146;
      }
     }
     $90 = $flags$0$ph718 | 1;
     $91 = (_getopt($argc,$argv,3905)|0);
     $92 = ($91|0)<(1);
     if ($92) {
      $split = $90;
      label = 38;
      break L17;
     } else {
      $234 = $91;$flags$0$ph718 = $90;
     }
    }
    $94 = HEAP32[1112>>2]|0;
    $95 = (_bb_strtoul($94,1112,16)|0);
    HEAP32[$50>>2] = $95;
    $96 = HEAP32[1112>>2]|0;
    $97 = ((($96)) + 1|0);
    HEAP32[1112>>2] = $97;
    $98 = (_bb_strtoul($97,1112,16)|0);
    HEAP32[$51>>2] = $98;
    $99 = HEAP32[1112>>2]|0;
    $100 = ((($99)) + 1|0);
    HEAP32[1112>>2] = $100;
    $101 = (_bb_strtoul($100,1112,16)|0);
    HEAP32[$52>>2] = $101;
    $102 = HEAP32[1112>>2]|0;
    $103 = ((($102)) + 1|0);
    HEAP32[1112>>2] = $103;
    $104 = (_bb_strtoul($103,1112,16)|0);
    HEAP32[$53>>2] = $104;
    $105 = HEAP32[1112>>2]|0;
    $106 = ((($105)) + 1|0);
    HEAP32[1112>>2] = $106;
    $107 = (_bb_strtoul($106,1112,16)|0);
    $108 = HEAP32[1112>>2]|0;
    $109 = ((($108)) + 1|0);
    HEAP32[1112>>2] = $109;
    $110 = (_bb_strtoull($109,1112,16)|0);
    $111 = tempRet0;
    $112 = ($110|0)==(0);
    $113 = ($111|0)==(0);
    $114 = $112 & $113;
    if (!($114)) {
     _install_special_sighandlers();
     $115 = (_xzalloc(260)|0);
     HEAP32[$55>>2] = $115;
     $sig$021 = 1;
     while(1) {
      $116 = (_bitshift64Shl(1,0,($sig$021|0))|0);
      $117 = tempRet0;
      $118 = $116 & $110;
      $119 = $117 & $111;
      $120 = ($118|0)==(0);
      $121 = ($119|0)==(0);
      $122 = $120 & $121;
      if (!($122)) {
       $123 = (_xzalloc(1)|0);
       $124 = HEAP32[$55>>2]|0;
       $125 = (($124) + ($sig$021<<2)|0);
       HEAP32[$125>>2] = $123;
       HEAP32[$56>>2] = (1);
      }
      $126 = (($sig$021) + 1)|0;
      $exitcond = ($126|0)==(65);
      if ($exitcond) {
       break;
      } else {
       $sig$021 = $126;
      }
     }
    }
    $127 = HEAP32[1112>>2]|0;
    $128 = ((($127)) + 1|0);
    HEAP32[1112>>2] = $128;
    $129 = (_bb_strtoul($128,1112,16)|0);
    HEAP32[$54>>2] = $129;
    $130 = (_getopt($argc,$argv,3905)|0);
    $131 = ($130|0)<(1);
    if ($131) {
     $split = $flags$0$ph718$lcssa75;
     label = 38;
     break L17;
    } else {
     $233 = $130;$builtin_argc$0$ph22 = $107;$flags$0$ph23 = $flags$0$ph718$lcssa75;
    }
   }
   if ((label|0) == 17) {
    $58 = HEAP32[$50>>2]|0;
    $59 = ($58|0)==(0);
    if ($59) {
     $60 = (_getpid()|0);
     HEAP32[$50>>2] = $60;
     $61 = (_getppid()|0);
     HEAP32[$51>>2] = $61;
    }
    $62 = HEAP32[1092>>2]|0;
    $63 = (($argv) + ($62<<2)|0);
    $64 = ((($4)) + 92|0);
    HEAP32[$64>>2] = $63;
    $65 = (($argc) - ($62))|0;
    $66 = ((($4)) + 88|0);
    HEAP32[$66>>2] = $65;
    $67 = ($builtin_argc$0$ph22$lcssa78|0)==(0);
    if (!($67)) {
     _install_special_sighandlers();
     $68 = HEAP32[1112>>2]|0;
     $69 = (_find_builtin($68)|0);
     $70 = ($69|0)==(0|0);
     if ($70) {
      break;
     }
     $71 = HEAP32[$66>>2]|0;
     $72 = (($71) - ($builtin_argc$0$ph22$lcssa78))|0;
     HEAP32[$66>>2] = $72;
     $73 = HEAP32[$64>>2]|0;
     $74 = (($73) + ($builtin_argc$0$ph22$lcssa78<<2)|0);
     HEAP32[$64>>2] = $74;
     $75 = ((($74)) + -4|0);
     HEAP32[$75>>2] = 0;
     (_fflush_all()|0);
     $76 = ((($69)) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = HEAP32[1092>>2]|0;
     $79 = (($argv) + ($78<<2)|0);
     $80 = ((($79)) + -4|0);
     $81 = (FUNCTION_TABLE_ii[$77 & 63]($80)|0);
     HEAP32[$53>>2] = $81;
     break;
    }
    $82 = HEAP32[$63>>2]|0;
    $83 = ($82|0)==(0|0);
    if ($83) {
     $84 = ((($63)) + -4|0);
     HEAP32[$64>>2] = $84;
     $85 = HEAP32[$argv>>2]|0;
     HEAP32[$84>>2] = $85;
     $86 = (($65) + 1)|0;
     HEAP32[$66>>2] = $86;
    }
    _install_special_sighandlers();
    $87 = HEAP32[1112>>2]|0;
    ;HEAP32[$input$i>>2]=0|0;HEAP32[$input$i+4>>2]=0|0;HEAP32[$input$i+8>>2]=0|0;HEAP32[$input$i+12>>2]=0|0;HEAP32[$input$i+16>>2]=0|0;
    $88 = ((($input$i)) + 24|0);
    HEAP32[$88>>2] = 39;
    $89 = ((($input$i)) + 20|0);
    HEAP32[$89>>2] = 40;
    HEAP32[$input$i>>2] = $87;
    _parse_and_run_stream($input$i,0);
    break;
   }
   else if ((label|0) == 26) {
    $93 = HEAP32[1112>>2]|0;
    (_full_write1_str($93)|0);
    __exit(0);
    // unreachable;
   }
   else if ((label|0) == 37) {
    _bb_show_usage();
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 38) {
  $$pre39 = ((($4)) + 16|0);
  $$pre$phiZ2D = $$pre39;$flags$0$ph7$lcssa13 = $split;
  label = 39;
 }
 do {
  if ((label|0) == 39) {
   $148 = HEAP32[1092>>2]|0;
   $$neg4 = (($argc) + 1)|0;
   $149 = (($$neg4) - ($148))|0;
   $150 = ((($4)) + 88|0);
   HEAP32[$150>>2] = $149;
   $151 = HEAP32[1092>>2]|0;
   $152 = (($151) + -1)|0;
   $153 = (($argv) + ($152<<2)|0);
   $154 = ((($4)) + 92|0);
   HEAP32[$154>>2] = $153;
   $155 = HEAP32[$argv>>2]|0;
   HEAP32[$153>>2] = $155;
   $156 = HEAP32[$$pre$phiZ2D>>2]|0;
   $157 = ($156|0)==(0);
   if ($157) {
    $158 = (_getpid()|0);
    HEAP32[$$pre$phiZ2D>>2] = $158;
    $159 = (_getppid()|0);
    $160 = ((($4)) + 20|0);
    HEAP32[$160>>2] = $159;
   }
   $161 = $flags$0$ph7$lcssa13 & 1;
   $162 = ($161|0)==(0);
   if (!($162)) {
    $163 = (_fopen_for_read(3924)|0);
    $164 = ($163|0)==(0|0);
    if (!($164)) {
     $165 = (_fileno($163)|0);
     _close_on_exec_on($165);
     _install_special_sighandlers();
     ;HEAP32[$input$i$1>>2]=0|0;HEAP32[$input$i$1+4>>2]=0|0;HEAP32[$input$i$1+8>>2]=0|0;HEAP32[$input$i$1+12>>2]=0|0;
     $166 = ((($input$i$1)) + 24|0);
     HEAP32[$166>>2] = 41;
     $167 = ((($input$i$1)) + 20|0);
     HEAP32[$167>>2] = 42;
     $168 = ((($input$i$1)) + 16|0);
     HEAP32[$168>>2] = $163;
     _parse_and_run_stream($input$i$1,59);
     (_fclose($163)|0);
    }
   }
   $169 = HEAP32[$154>>2]|0;
   $170 = ((($169)) + 4|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = ($171|0)==(0|0);
   if (!($172)) {
    $173 = HEAP32[$150>>2]|0;
    $174 = (($173) + -1)|0;
    HEAP32[$150>>2] = $174;
    HEAP32[$154>>2] = $170;
    $175 = HEAP32[$170>>2]|0;
    $176 = (_xfopen_for_read($175)|0);
    $177 = (_fileno($176)|0);
    _close_on_exec_on($177);
    _install_special_sighandlers();
    ;HEAP32[$input$i$2>>2]=0|0;HEAP32[$input$i$2+4>>2]=0|0;HEAP32[$input$i$2+8>>2]=0|0;HEAP32[$input$i$2+12>>2]=0|0;
    $178 = ((($input$i$2)) + 24|0);
    HEAP32[$178>>2] = 41;
    $179 = ((($input$i$2)) + 20|0);
    HEAP32[$179>>2] = 42;
    $180 = ((($input$i$2)) + 16|0);
    HEAP32[$180>>2] = $176;
    _parse_and_run_stream($input$i$2,59);
    break;
   }
   $181 = (_isatty(0)|0);
   $182 = ($181|0)==(0);
   if (!($182)) {
    $183 = (_isatty(1)|0);
    $184 = ($183|0)==(0);
    if (!($184)) {
     $185 = (_tcgetpgrp(0)|0);
     $186 = ((($4)) + 52|0);
     $187 = ($185|0)<(0);
     $$ = $187 ? 0 : $185;
     HEAP32[$186>>2] = $$;
     HEAP32[$vararg_buffer2>>2] = 255;
     $188 = (_fcntl(0,0,$vararg_buffer2)|0);
     HEAP32[$4>>2] = $188;
     $189 = ($188|0)<(0);
     if ($189) {
      $190 = (_dup(0)|0);
      HEAP32[$4>>2] = $190;
      $191 = ($190|0)<(0);
      if ($191) {
       HEAP32[$4>>2] = 0;
       HEAP32[$186>>2] = 0;
      }
     }
    }
   }
   $192 = HEAP32[$4>>2]|0;
   $193 = ($192|0)==(0);
   if ($193) {
    _install_special_sighandlers();
   } else {
    _close_on_exec_on($192);
    $194 = ((($4)) + 52|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = ($195|0)==(0);
    if (!($196)) {
     $197 = (_getpgrp()|0);
     $198 = HEAP32[$4>>2]|0;
     $199 = (_tcgetpgrp($198)|0);
     HEAP32[$194>>2] = $199;
     $200 = ($199|0)==($197|0);
     if (!($200)) {
      $202 = $197;
      while(1) {
       $201 = (0 - ($202))|0;
       (_kill(($201|0),21)|0);
       $203 = (_getpgrp()|0);
       $204 = HEAP32[$4>>2]|0;
       $205 = (_tcgetpgrp($204)|0);
       HEAP32[$194>>2] = $205;
       $206 = ($205|0)==($203|0);
       if ($206) {
        break;
       } else {
        $202 = $203;
       }
      }
     }
    }
    _install_special_sighandlers();
    $207 = HEAP32[$194>>2]|0;
    $208 = ($207|0)==(0);
    if (!($208)) {
     $209 = ((($4)) + 140|0);
     HEAP32[$209>>2] = 27120;
     _install_sighandlers(27120);
     (_setpgrp()|0);
     $210 = HEAP32[$4>>2]|0;
     $211 = (_getpid()|0);
     (_tcsetpgrp($210,$211)|0);
    }
    HEAP32[32>>2] = 38;
    $212 = (_get_local_var_value(3937)|0);
    $213 = ($212|0)==(0|0);
    if ($213) {
     $214 = (_get_local_var_value(3946)|0);
     $215 = ($214|0)==(0|0);
     if (!($215)) {
      $216 = (_concat_path_file($214,3951)|0);
      $hp$0 = $216;
      label = 61;
     }
    } else {
     $217 = (_xstrdup($212)|0);
     $hp$0 = $217;
     label = 61;
    }
    if ((label|0) == 61) {
     $218 = ($hp$0|0)==(0|0);
     if (!($218)) {
      $219 = HEAP32[$35>>2]|0;
      $220 = ((($219)) + 24|0);
      HEAP32[$220>>2] = $hp$0;
     }
    }
    $221 = (_get_local_var_value(3965)|0);
    $222 = (_size_from_HISTFILESIZE($221)|0);
    $223 = HEAP32[$35>>2]|0;
    $224 = ((($223)) + 16|0);
    HEAP32[$224>>2] = $222;
   }
   $225 = HEAP32[$4>>2]|0;
   $226 = ($225|0)==(0);
   if (!($226)) {
    HEAP32[$vararg_buffer5>>2] = 3632;
    $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
    HEAP32[$vararg_ptr8>>2] = 4034;
    (_printf(3978,$vararg_buffer5)|0);
   }
   $227 = HEAP32[280]|0;
   ;HEAP32[$input$i$3>>2]=0|0;HEAP32[$input$i$3+4>>2]=0|0;HEAP32[$input$i$3+8>>2]=0|0;HEAP32[$input$i$3+12>>2]=0|0;
   $228 = ((($input$i$3)) + 24|0);
   HEAP32[$228>>2] = 41;
   $229 = ((($input$i$3)) + 20|0);
   HEAP32[$229>>2] = 42;
   $230 = ((($input$i$3)) + 16|0);
   HEAP32[$230>>2] = $227;
   _parse_and_run_stream($input$i$3,59);
  }
 } while(0);
 $231 = ((($4)) + 80|0);
 $232 = HEAP32[$231>>2]|0;
 _hush_exit($232);
 // unreachable;
 return (0)|0;
}
function _set_pwd_var($exp) {
 $exp = $exp|0;
 var $$$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[840>>2]|0;
 $1 = ((($0)) + 112|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(3692|0);
 if ($3) {
  HEAP32[$1>>2] = 0;
  $4 = 0;
 } else {
  $4 = $2;
 }
 $5 = (_xrealloc_getcwd_or_warn($4)|0);
 $6 = ($5|0)==(0|0);
 $$$i = $6 ? 3692 : $5;
 HEAP32[$1>>2] = $$$i;
 HEAP32[$vararg_buffer>>2] = $$$i;
 $7 = (_xasprintf(6013,$vararg_buffer)|0);
 _set_local_var($7,$exp,0,0);
 STACKTOP = sp;return;
}
function _get_local_var_value($name) {
 $name = $name|0;
 var $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cpp$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($name)|0);
 $1 = HEAP32[840>>2]|0;
 $2 = ((($1)) + 120|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 L1: do {
  if ($4) {
   label = 7;
  } else {
   $5 = HEAP32[$3>>2]|0;
   $6 = ($5|0)==(0|0);
   if ($6) {
    label = 7;
   } else {
    $7 = $5;$cpp$07 = $3;
    while(1) {
     $8 = (_strncmp($7,$name,$0)|0);
     $9 = ($8|0)==(0);
     if ($9) {
      $10 = (($7) + ($0)|0);
      $11 = HEAP8[$10>>0]|0;
      $12 = ($11<<24>>24)==(61);
      if ($12) {
       $$lcssa = $10;
       break;
      }
     }
     $13 = ((($cpp$07)) + 4|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)==(0|0);
     if ($15) {
      label = 7;
      break L1;
     } else {
      $7 = $14;$cpp$07 = $13;
     }
    }
    $16 = ((($$lcssa)) + 1|0);
    $$3 = $16;
   }
  }
 } while(0);
 do {
  if ((label|0) == 7) {
   $17 = (_get_ptr_to_local_var($name,$0)|0);
   $18 = ($17|0)==(0|0);
   if (!($18)) {
    $19 = HEAP32[$17>>2]|0;
    $20 = ((($19)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (($21) + ($0)|0);
    $23 = ((($22)) + 1|0);
    $$3 = $23;
    break;
   }
   $24 = (_strcmp($name,6001)|0);
   $25 = ($24|0)==(0);
   if ($25) {
    $26 = ((($1)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (_utoa($27)|0);
    $$3 = $28;
    break;
   }
   $29 = (_strcmp($name,6006)|0);
   $30 = ($29|0)==(0);
   if ($30) {
    $31 = ((($1)) + 28|0);
    $32 = (_next_random($31)|0);
    $33 = (_utoa($32)|0);
    $$3 = $33;
   } else {
    $$3 = 0;
   }
  }
 } while(0);
 return ($$3|0);
}
function _set_local_var($str,$flg_export,$local_lvl,$flg_read_only) {
 $str = $str|0;
 $flg_export = $flg_export|0;
 $local_lvl = $local_lvl|0;
 $flg_read_only = $flg_read_only|0;
 var $$$i = 0, $$01 = 0, $$1 = 0, $$1$i = 0, $$2 = 0, $$lcssa = 0, $$lcssa27 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $cur$0 = 0, $cur$1 = 0, $flg_export$ = 0, $var_pp$02 = 0;
 var $var_pp$04 = 0, $var_pp$04$lcssa = 0, $var_pp$04$phi = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_strchr($str,61)|0);
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   _free($str);
  } else {
   $2 = $0;
   $3 = $str;
   $4 = (($2) - ($3))|0;
   $5 = (($4) + 1)|0;
   $6 = HEAP32[840>>2]|0;
   $7 = ((($6)) + 116|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   L4: do {
    if ($9) {
     $$01 = $flg_export;$var_pp$02 = $7;
     label = 21;
    } else {
     $11 = $8;$var_pp$04 = $7;
     while(1) {
      $10 = ((($11)) + 4|0);
      $12 = HEAP32[$10>>2]|0;
      $13 = (_strncmp($12,$str,$5)|0);
      $14 = ($13|0)==(0);
      if ($14) {
       $$lcssa = $11;$$lcssa27 = $10;$var_pp$04$lcssa = $var_pp$04;
       break;
      }
      $15 = HEAP32[$11>>2]|0;
      $16 = ($15|0)==(0|0);
      if ($16) {
       $$01 = $flg_export;$var_pp$02 = $11;
       label = 21;
       break L4;
      } else {
       $var_pp$04$phi = $11;$11 = $15;$var_pp$04 = $var_pp$04$phi;
      }
     }
     $17 = ((($$lcssa)) + 20|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($18|0)==(0);
     if (!($19)) {
      $20 = ($flg_read_only|0)==(0);
      if ($20) {
       HEAP32[$vararg_buffer>>2] = $str;
       _bb_error_msg(5318,$vararg_buffer);
      }
      _free($str);
      break L1;
     }
     $21 = ($flg_export|0)==(-1);
     if ($21) {
      HEAP8[$0>>0] = 0;
      (_unsetenv(($str|0))|0);
      HEAP8[$0>>0] = 61;
     }
     $22 = ((($$lcssa)) + 8|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ($23>>>0)<($local_lvl>>>0);
     if ($24) {
      $25 = HEAP32[$$lcssa>>2]|0;
      HEAP32[$var_pp$04$lcssa>>2] = $25;
      $26 = ((($6)) + 128|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = HEAP32[$27>>2]|0;
      HEAP32[$$lcssa>>2] = $28;
      HEAP32[$27>>2] = $$lcssa;
      $29 = ((($$lcssa)) + 16|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = ($30|0)==(0);
      $flg_export$ = $31 ? $flg_export : 1;
      $$01 = $flg_export$;$var_pp$02 = $var_pp$04$lcssa;
      label = 21;
      break;
     }
     $32 = HEAP32[$$lcssa27>>2]|0;
     $33 = (($32) + ($5)|0);
     $34 = ((($0)) + 1|0);
     $35 = (_strcmp($33,$34)|0);
     $36 = ($35|0)==(0);
     do {
      if (!($36)) {
       $37 = ((($$lcssa)) + 12|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = ($38|0)==(0);
       if ($39) {
        _free($32);
       } else {
        $40 = (_strlen($str)|0);
        $41 = ($38>>>0)<($40>>>0);
        if (!($41)) {
         (_strcpy($32,$str)|0);
         break;
        }
       }
       HEAP32[$37>>2] = 0;
       $$1 = $flg_export;$cur$0 = $$lcssa;
       label = 22;
       break L4;
      }
     } while(0);
     _free($str);
     $$2 = $flg_export;$cur$1 = $$lcssa;
    }
   } while(0);
   if ((label|0) == 21) {
    $42 = (_xzalloc(24)|0);
    $43 = ((($42)) + 8|0);
    HEAP32[$43>>2] = $local_lvl;
    $44 = HEAP32[$var_pp$02>>2]|0;
    HEAP32[$42>>2] = $44;
    HEAP32[$var_pp$02>>2] = $42;
    $$1 = $$01;$cur$0 = $42;
    label = 22;
   }
   if ((label|0) == 22) {
    $45 = ((($cur$0)) + 4|0);
    HEAP32[$45>>2] = $str;
    $46 = ((($cur$0)) + 20|0);
    HEAP32[$46>>2] = $flg_read_only;
    $$2 = $$1;$cur$1 = $cur$0;
   }
   $47 = ($$2|0)==(1);
   if ($47) {
    $48 = ((($cur$1)) + 16|0);
    HEAP32[$48>>2] = 1;
   }
   $49 = ($5|0)==(4);
   if ($49) {
    $50 = ((($cur$1)) + 4|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = HEAP8[$51>>0]|0;
    $53 = ($52<<24>>24)==(80);
    if ($53) {
     $54 = ((($51)) + 1|0);
     $55 = HEAP8[$54>>0]|0;
     $56 = ($55<<24>>24)==(83);
     if ($56) {
      $57 = (_get_local_var_value(3887)|0);
      $58 = ((($6)) + 4|0);
      $59 = ($57|0)==(0|0);
      $$$i = $59 ? 3891 : $57;
      HEAP32[$58>>2] = $$$i;
      $60 = (_get_local_var_value(3898)|0);
      $61 = ((($6)) + 8|0);
      $62 = ($60|0)==(0|0);
      $$1$i = $62 ? 3902 : $60;
      HEAP32[$61>>2] = $$1$i;
     }
    }
   }
   $63 = ((($cur$1)) + 16|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64|0)==(0);
   if (!($65)) {
    $66 = ($$2|0)==(-1);
    if ($66) {
     HEAP32[$63>>2] = 0;
     break;
    } else {
     $67 = ((($cur$1)) + 4|0);
     $68 = HEAP32[$67>>2]|0;
     (_putenv(($68|0))|0);
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _xfunc_has_died() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[840>>2]|0;
 $1 = ((($0)) + 76|0);
 HEAP32[$1>>2] = 1;
 $2 = HEAP8[3631>>0]|0;
 $3 = $2&255;
 _hush_exit($3);
 // unreachable;
}
function _install_special_sighandlers() {
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mask$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[840>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $mask$0 = 131080;
 } else {
  $3 = ((($0)) + 52|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  $$ = $5 ? 163854 : 7503886;
  $mask$0 = $$;
 }
 $6 = ((($0)) + 136|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($mask$0|0);
 if (!($8)) {
  $9 = $7 ^ -1;
  $10 = $mask$0 & $9;
  HEAP32[$6>>2] = $mask$0;
  _install_sighandlers($10);
 }
 return;
}
function _find_builtin($name) {
 $name = $name|0;
 var $$ = 0, $$0 = 0, $$012$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$012$i$i = 56;
 while(1) {
  $0 = HEAP32[$$012$i$i>>2]|0;
  $1 = (_strcmp($name,$0)|0);
  $2 = ($1|0)==(0);
  if ($2) {
   $$0 = $$012$i$i;
   break;
  }
  $3 = ((($$012$i$i)) + 12|0);
  $4 = ($3|0)==((392)|0);
  if ($4) {
   label = 4;
   break;
  } else {
   $$012$i$i = $3;
  }
 }
 if ((label|0) == 4) {
  $5 = (_strcmp($name,5985)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   $$0 = 612;
  } else {
   $7 = (_strcmp($name,5987)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $$0 = (624);
   } else {
    $9 = (_strcmp($name,5992)|0);
    $10 = ($9|0)==(0);
    if ($10) {
     $$0 = (636);
    } else {
     $11 = (_strcmp($name,5996)|0);
     $12 = ($11|0)==(0);
     $$ = $12 ? (648) : 0;
     return ($$|0);
    }
   }
  }
 }
 return ($$0|0);
}
function _static_peek($i) {
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$i>>2]|0;
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 return ($2|0);
}
function _static_get($i) {
 $i = $i|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$i>>2]|0;
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = ($1<<24>>24)==(0);
 if ($3) {
  $$0 = -1;
 } else {
  $4 = ((($0)) + 1|0);
  HEAP32[$i>>2] = $4;
  $5 = ((($i)) + 12|0);
  HEAP32[$5>>2] = $2;
  $$0 = $2;
 }
 return ($$0|0);
}
function _parse_and_run_stream($inp,$end_trigger) {
 $inp = $inp|0;
 $end_trigger = $end_trigger|0;
 var $$01$i$i = 0, $$lcssa17 = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, $ch$0 = 0, $empty$0$off0 = 0, $empty$0$off0$lcssa16 = 0, $or$cond3 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($end_trigger|0)==(59);
 $1 = ((($inp)) + 8|0);
 $2 = ((($inp)) + 12|0);
 $3 = ((($inp)) + 20|0);
 $4 = HEAP32[840>>2]|0;
 $5 = ((($4)) + 61|0);
 $6 = ((($4)) + 72|0);
 $empty$0$off0 = 0;
 while(1) {
  if ($0) {
   HEAP32[$1>>2] = 0;
  }
  $7 = (_parse_stream(0,$inp,$end_trigger)|0);
  $switch = ($7>>>0)<((2)>>>0);
  if ($switch) {
   $8 = ($7|0)==((1)|0);
   $or$cond3 = $0 & $8;
   if (!($or$cond3)) {
    $$lcssa17 = $7;$empty$0$off0$lcssa16 = $empty$0$off0;
    label = 10;
    break;
   }
   $9 = HEAP32[$2>>2]|0;
   $ch$0 = $9;
   L9: while(1) {
    switch ($ch$0|0) {
    case 10: case -1:  {
     break L9;
     break;
    }
    default: {
    }
    }
    $10 = HEAP32[$3>>2]|0;
    $11 = (FUNCTION_TABLE_ii[$10 & 63]($inp)|0);
    $ch$0 = $11;
   }
   HEAP32[$inp>>2] = 0;
   $empty$0$off0 = 1;
   continue;
  } else {
   $13 = HEAP8[$5>>0]|0;
   $14 = ($13<<24>>24)==(0);
   if ($14) {
    (_run_list($7)|0);
   }
   $15 = ($7|0)==(0|0);
   if (!($15)) {
    $$01$i$i = $7;
    while(1) {
     $16 = (_free_pipe($$01$i$i)|0);
     $17 = ($16|0)==(0|0);
     if ($17) {
      break;
     } else {
      $$01$i$i = $16;
     }
    }
   }
   $18 = HEAP32[$6>>2]|0;
   $19 = ($18|0)==(1);
   if ($19) {
    break;
   } else {
    $empty$0$off0 = 1;
    continue;
   }
  }
 }
 if ((label|0) == 10) {
  $$not = ($$lcssa17|0)!=(0|0);
  $brmerge = $empty$0$off0$lcssa16 | $$not;
  if (!($brmerge)) {
   $12 = ((($4)) + 80|0);
   HEAP32[$12>>2] = 0;
  }
 }
 return;
}
function _new_function($name) {
 $name = $name|0;
 var $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $funcp$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_find_function_slot($name)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $23 = (_xzalloc(20)|0);
   HEAP32[$0>>2] = $23;
   $funcp$0 = $23;
  } else {
   $3 = ((($1)) + 8|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   $6 = ((($1)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   if (!($5)) {
    $15 = ((($4)) + 28|0);
    $16 = HEAP32[$15>>2]|0;
    HEAP32[$16>>2] = $7;
    $17 = ((($1)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($4)) + 16|0);
    HEAP32[$19>>2] = $18;
    $20 = ((($1)) + 16|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($4)) + 20|0);
    HEAP32[$22>>2] = $21;
    $funcp$0 = $1;
    break;
   }
   _free($7);
   $8 = ((($1)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $funcp$0 = $1;
   } else {
    $$01$i = $9;
    while(1) {
     $11 = (_free_pipe($$01$i)|0);
     $12 = ($11|0)==(0|0);
     if ($12) {
      break;
     } else {
      $$01$i = $11;
     }
    }
    $13 = ((($1)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    _free($14);
    $funcp$0 = $1;
   }
  }
 } while(0);
 $24 = ((($funcp$0)) + 4|0);
 HEAP32[$24>>2] = $name;
 return ($funcp$0|0);
}
function _set_mode($state,$mode,$o_opt) {
 $state = $state|0;
 $mode = $mode|0;
 $o_opt = $o_opt|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $idx$01 = 0, $p$02 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $mode << 24 >> 24;
 L1: do {
  switch ($0|0) {
  case 110:  {
   $1 = $state&255;
   $2 = HEAP32[840>>2]|0;
   $3 = ((($2)) + 61|0);
   HEAP8[$3>>0] = $1;
   $$0 = 0;
   break;
  }
  case 120:  {
   $4 = $state&255;
   $5 = HEAP32[840>>2]|0;
   $6 = ((($5)) + 62|0);
   HEAP8[$6>>0] = $4;
   $$0 = 0;
   break;
  }
  case 111:  {
   $7 = ($o_opt|0)==(0|0);
   if ($7) {
    $8 = HEAP32[840>>2]|0;
    $idx$01 = 0;$p$02 = 4451;
    while(1) {
     $9 = (((($8)) + 60|0) + ($idx$01)|0);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)!=(0);
     $12 = $11 ? 45 : 43;
     HEAP32[$vararg_buffer>>2] = $12;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $p$02;
     (_printf(4475,$vararg_buffer)|0);
     $13 = (($idx$01) + 1)|0;
     $14 = (_strlen($p$02)|0);
     $15 = (($14) + 1)|0;
     $16 = (($p$02) + ($15)|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = ($17<<24>>24)==(0);
     if ($18) {
      $$0 = 0;
      break;
     } else {
      $idx$01 = $13;$p$02 = $16;
     }
    }
   } else {
    $19 = (_index_in_strings(4451,$o_opt)|0);
    $20 = ($19|0)>(-1);
    if (!($20)) {
     $$0 = 1;
     break L1;
    }
    $21 = $state&255;
    $22 = HEAP32[840>>2]|0;
    $23 = (((($22)) + 60|0) + ($19)|0);
    HEAP8[$23>>0] = $21;
    $$0 = 0;
    break L1;
   }
   break;
  }
  default: {
   $$0 = 1;
  }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _file_peek($i) {
 $i = $i|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$i>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   label = 3;
  } else {
   $2 = HEAP8[$0>>0]|0;
   $3 = ($2<<24>>24)==(0);
   if ($3) {
    label = 3;
   } else {
    $5 = ((($i)) + 4|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==(0);
    if (!($7)) {
     $8 = ((($0)) + 1|0);
     $9 = HEAP8[$8>>0]|0;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$0 = -1;
      break;
     }
    }
    $11 = $2 << 24 >> 24;
    $$0 = $11;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $4 = ((($i)) + 16|0);
  while(1) {
   $12 = HEAP32[$4>>2]|0;
   $13 = (_getc_unlocked($12)|0);
   $14 = ($13|0)==(0);
   if (!($14)) {
    $$lcssa = $13;
    break;
   }
  }
  $15 = ($$lcssa|0)==(-1);
  $16 = $15&1;
  $17 = ((($i)) + 4|0);
  HEAP8[$17>>0] = $16;
  $18 = $$lcssa&255;
  $19 = ((($i)) + 5|0);
  HEAP8[$19>>0] = $18;
  $20 = ((($i)) + 6|0);
  HEAP8[$20>>0] = 0;
  HEAP32[$i>>2] = $19;
  $$0 = $$lcssa;
 }
 return ($$0|0);
}
function _file_get($i) {
 $i = $i|0;
 var $$ = 0, $$in$i$i = 0, $$lcssa10 = 0, $$lobit$i = 0, $$pre = 0, $$pre$phi6Z2D = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ch$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$i>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  label = 6;
 } else {
  $2 = HEAP8[$0>>0]|0;
  $3 = ($2<<24>>24)==(0);
  if ($3) {
   label = 6;
  } else {
   $$pre5 = ((($i)) + 4|0);
   $$pre$phi6Z2D = $$pre5;$5 = $0;
   label = 4;
  }
 }
 do {
  if ((label|0) == 6) {
   $12 = HEAP32[840>>2]|0;
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0);
   $$pre = ((($i)) + 16|0);
   if (!($14)) {
    $15 = HEAP32[$$pre>>2]|0;
    $16 = HEAP32[1120>>2]|0;
    $17 = ($15|0)==($16|0);
    if ($17) {
     $18 = ((($i)) + 8|0);
     $19 = ((($12)) + 4|0);
     $20 = ((($12)) + 8|0);
     $21 = ((($12)) + 64|0);
     $22 = ((($12)) + 12|0);
     $23 = ((($12)) + 424|0);
     $24 = ((($i)) + 4|0);
     $25 = ((($12)) + 425|0);
     while(1) {
      $26 = HEAP32[$18>>2]|0;
      $27 = ($26|0)==(0);
      $$in$i$i = $27 ? $19 : $20;
      $28 = HEAP32[$$in$i$i>>2]|0;
      while(1) {
       HEAP32[$21>>2] = 0;
       $29 = HEAP32[$22>>2]|0;
       $30 = (_read_line_input($29,$28,$23,1023,-1)|0);
       (_check_and_run_traps()|0);
       $31 = ($30|0)==(0);
       if ($31) {
        continue;
       }
       $32 = HEAP32[$21>>2]|0;
       $33 = ($32|0)==(0);
       if ($33) {
        $$lcssa10 = $30;
        break;
       }
      }
      $$lobit$i = $$lcssa10 >>> 31;
      $34 = $$lobit$i&255;
      HEAP8[$24>>0] = $34;
      $35 = ($34<<24>>24)==(0);
      if (!($35)) {
       HEAP8[$23>>0] = -1;
       HEAP8[$25>>0] = 0;
      }
      HEAP32[$i>>2] = $23;
      $36 = HEAP8[$23>>0]|0;
      $37 = ($36<<24>>24)==(0);
      if (!($37)) {
       break;
      }
     }
     HEAP32[$18>>2] = 1;
     $$pre$phi6Z2D = $24;$5 = $23;
     label = 4;
     break;
    }
   }
   while(1) {
    $38 = HEAP32[$$pre>>2]|0;
    $39 = (_getc_unlocked($38)|0);
    $40 = ($39|0)==(0);
    if (!($40)) {
     $ch$0 = $39;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $4 = ((($5)) + 1|0);
  HEAP32[$i>>2] = $4;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = HEAP8[$$pre$phi6Z2D>>0]|0;
  $9 = ($8<<24>>24)==(0);
  if ($9) {
   $ch$0 = $7;
  } else {
   $10 = HEAP8[$4>>0]|0;
   $11 = ($10<<24>>24)==(0);
   $$ = $11 ? -1 : $7;
   $ch$0 = $$;
  }
 }
 $41 = ((($i)) + 12|0);
 HEAP32[$41>>2] = $ch$0;
 return ($ch$0|0);
}
function _install_sighandlers($mask) {
 $mask = $mask|0;
 var $$record_pending_signo$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $handler$1$i = 0, $sig$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mask >>> 1;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = HEAP32[840>>2]|0;
  $3 = ((($2)) + 140|0);
  $4 = ((($2)) + 136|0);
  $5 = ((($2)) + 284|0);
  $8 = $0;$sig$02 = 0;
  while(1) {
   $6 = (($sig$02) + 1)|0;
   $7 = $8 & 1;
   $9 = ($7|0)==(0);
   if (!($9)) {
    $10 = ($6>>>0)<(32);
    if ($10) {
     $11 = 1 << $6;
     $12 = HEAP32[$3>>2]|0;
     $13 = $12 & $11;
     $14 = ($13|0)==(0);
     if ($14) {
      $15 = HEAP32[$4>>2]|0;
      $16 = $15 & $11;
      $17 = ($16|0)==(0);
      if ($17) {
       $handler$1$i = 0;
      } else {
       $18 = $11 & 7340032;
       $19 = ($18|0)!=(0);
       $$record_pending_signo$i = $19 ? (1) : 43;
       $handler$1$i = $$record_pending_signo$i;
      }
     } else {
      $handler$1$i = 44;
     }
    } else {
     $handler$1$i = 0;
    }
    HEAP32[$5>>2] = $handler$1$i;
   }
   $20 = $8 >>> 1;
   $21 = ($20|0)==(0);
   if ($21) {
    break;
   } else {
    $8 = $20;$sig$02 = $6;
   }
  }
 }
 return;
}
function _hush_exit($exitcode) {
 $exitcode = $exitcode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $argv = sp;
 (_fflush_all()|0);
 $0 = HEAP32[840>>2]|0;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(1);
 if ($3) {
  $4 = ((($0)) + 144|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = HEAP32[$5>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    $9 = HEAP8[$7>>0]|0;
    $10 = ($9<<24>>24)==(0);
    if (!($10)) {
     $11 = HEAP32[$5>>2]|0;
     $12 = ((($argv)) + 4|0);
     HEAP32[$12>>2] = $11;
     $13 = ((($argv)) + 8|0);
     HEAP32[$13>>2] = 0;
     HEAP32[$1>>2] = 1;
     (_builtin_eval($argv)|0);
    }
   }
  }
 }
 (_fflush_all()|0);
 $14 = $exitcode & 255;
 $15 = (0 - ($14))|0;
 _sigexit($15);
 // unreachable;
}
function _builtin_eval($argv) {
 $argv = $argv|0;
 var $$$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $input$i = 0, $rcode$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $input$i = sp;
 $0 = ((($argv)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $rcode$0 = 0;
  } else {
   $3 = HEAP8[$1>>0]|0;
   $4 = ($3<<24>>24)==(45);
   if ($4) {
    $5 = ((($1)) + 1|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==(45);
    if ($7) {
     $8 = ((($1)) + 2|0);
     $9 = HEAP8[$8>>0]|0;
     $10 = ($9<<24>>24)==(0);
     $11 = ((($argv)) + 8|0);
     $$$i = $10 ? $11 : $0;
     $$pre = HEAP32[$$$i>>2]|0;
     $12 = ($$pre|0)==(0|0);
     if ($12) {
      $rcode$0 = 0;
      break;
     } else {
      $13 = $$$i;
     }
    } else {
     $13 = $0;
    }
   } else {
    $13 = $0;
   }
   $14 = (_expand_strvec_to_string($13)|0);
   ;HEAP32[$input$i>>2]=0|0;HEAP32[$input$i+4>>2]=0|0;HEAP32[$input$i+8>>2]=0|0;HEAP32[$input$i+12>>2]=0|0;HEAP32[$input$i+16>>2]=0|0;
   $15 = ((($input$i)) + 24|0);
   HEAP32[$15>>2] = 39;
   $16 = ((($input$i)) + 20|0);
   HEAP32[$16>>2] = 40;
   HEAP32[$input$i>>2] = $14;
   _parse_and_run_stream($input$i,0);
   _free($14);
   $17 = HEAP32[840>>2]|0;
   $18 = ((($17)) + 80|0);
   $19 = HEAP32[$18>>2]|0;
   $rcode$0 = $19;
  }
 } while(0);
 STACKTOP = sp;return ($rcode$0|0);
}
function _sigexit($sig) {
 $sig = $sig|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[840>>2]|0;
 $1 = ((($0)) + 52|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = (_getpid()|0);
  $5 = ((($0)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($4|0)==($6|0);
  if ($7) {
   (_sigprocmask_allsigs(0)|0);
   $8 = HEAP32[$0>>2]|0;
   $9 = HEAP32[$1>>2]|0;
   (_tcsetpgrp($8,$9)|0);
  }
 }
 $10 = ($sig|0)<(1);
 if ($10) {
  $11 = (0 - ($sig))|0;
  __exit($11);
  // unreachable;
 } else {
  _kill_myself_with_sig($sig);
  // unreachable;
 }
}
function _expand_strvec_to_string($argv) {
 $argv = $argv|0;
 var $$phi$trans$insert = 0, $$pre = 0, $$pre2$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$014 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_expand_variables($argv,128)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   $20 = 0;
  } else {
   $3 = ((($0)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if ($5) {
    $20 = $1;
   } else {
    $6 = (_strlen($1)|0);
    $7 = (($1) + ($6)|0);
    $8 = ((($7)) + 1|0);
    $9 = ($8|0)==($4|0);
    L4: do {
     if ($9) {
      $11 = $4;$n$014 = 1;
      while(1) {
       $10 = ((($11)) + -1|0);
       HEAP8[$10>>0] = 32;
       $12 = (($n$014) + 1)|0;
       $13 = (($0) + ($12<<2)|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = ($14|0)==(0|0);
       if ($15) {
        break;
       }
       $$phi$trans$insert = (($0) + ($n$014<<2)|0);
       $$pre = HEAP32[$$phi$trans$insert>>2]|0;
       $16 = (_strlen($$pre)|0);
       $17 = (($$pre) + ($16)|0);
       $18 = ((($17)) + 1|0);
       $19 = ($18|0)==($14|0);
       if ($19) {
        $11 = $14;$n$014 = $12;
       } else {
        break L4;
       }
      }
      $$pre2$pre = HEAP32[$0>>2]|0;
      $20 = $$pre2$pre;
      break L1;
     }
    } while(0);
    _bb_error_msg_and_die(4058,$vararg_buffer);
    // unreachable;
   }
  }
 } while(0);
 _overlapping_strcpy($0,$20);
 STACKTOP = sp;return ($0|0);
}
function _expand_variables($argv,$expflags) {
 $argv = $argv|0;
 $expflags = $expflags|0;
 var $$01$i = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0$lcssa = 0, $n$01 = 0, $output = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $output = sp;
 ;HEAP32[$output>>2]=0|0;HEAP32[$output+4>>2]=0|0;HEAP32[$output+8>>2]=0|0;HEAP32[$output+12>>2]=0|0;HEAP32[$output+16>>2]=0|0;HEAP32[$output+20>>2]=0|0;HEAP32[$output+24>>2]=0|0;
 $0 = ((($output)) + 12|0);
 HEAP32[$0>>2] = $expflags;
 $1 = HEAP32[$argv>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $n$0$lcssa = 0;
 } else {
  $$02 = $argv;$3 = $1;$n$01 = 0;
  while(1) {
   $4 = (_expand_vars_to_list($output,$n$01,$3)|0);
   $5 = ((($$02)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    $n$0$lcssa = $4;
    break;
   } else {
    $$02 = $5;$3 = $6;$n$01 = $4;
   }
  }
 }
 $8 = (_o_save_ptr($output,$n$0$lcssa)|0);
 $9 = HEAP32[$output>>2]|0;
 $10 = $8 << 2;
 $11 = (($10) + 60)|0;
 $12 = $11 & -64;
 $13 = (($8) + -1)|0;
 $14 = (($9) + ($13<<2)|0);
 HEAP32[$14>>2] = 0;
 $15 = ($13|0)==(0);
 if (!($15)) {
  $$01$i = $13;
  while(1) {
   $16 = (($$01$i) + -1)|0;
   $17 = HEAP32[$output>>2]|0;
   $18 = (($9) + ($16<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($17) + ($19)|0);
   $21 = (($20) + ($12)|0);
   HEAP32[$18>>2] = $21;
   $22 = ($16|0)==(0);
   if ($22) {
    break;
   } else {
    $$01$i = $16;
   }
  }
 }
 STACKTOP = sp;return ($9|0);
}
function _expand_vars_to_list($output,$n,$arg) {
 $output = $output|0;
 $n = $n|0;
 $arg = $arg|0;
 var $$0$lcssa = 0, $$01$lcssa = 0, $$0115 = 0, $$017 = 0, $$1 = 0, $$2$be = 0, $$212 = 0, $$65 = 0, $$7 = 0, $$8 = 0, $$pre = 0, $$pre$i = 0, $$pre$phi34Z2D = 0, $$pre$phiZ2D = 0, $$pre26 = 0, $$pre27 = 0, $$pre28 = 0, $$pre29 = 0, $$pre30 = 0, $$pre32 = 0;
 var $$promoted = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cant_be_null$0$lcssa = 0, $cant_be_null$016 = 0, $cant_be_null$12 = 0, $cant_be_null$34 = 0, $ended_in_ifs = 0, $eol_cnt$0$be$i = 0, $eol_cnt$0$i = 0;
 var $eol_cnt$11$i = 0, $i$013 = 0, $or$cond = 0, $p = 0, $pid$i = 0, $pipe_str$i = 0, $sext = 0, $status$i = 0, $subst_result = 0, $to_be_freed = 0, $val$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pipe_str$i = sp + 48|0;
 $pid$i = sp + 44|0;
 $status$i = sp + 40|0;
 $ended_in_ifs = sp + 36|0;
 $p = sp + 32|0;
 $to_be_freed = sp + 28|0;
 $subst_result = sp;
 HEAP32[$ended_in_ifs>>2] = 0;
 $0 = (_o_save_ptr($output,$n)|0);
 $1 = (_strchr($arg,3)|0);
 HEAP32[$p>>2] = $1;
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   $$0$lcssa = $0;$$01$lcssa = $arg;$cant_be_null$0$lcssa = 0;
  } else {
   $3 = ((($output)) + 4|0);
   $4 = ((($output)) + 12|0);
   $5 = HEAP32[840>>2]|0;
   $6 = ((($5)) + 92|0);
   $7 = ((($output)) + 16|0);
   $8 = ((($pipe_str$i)) + 24|0);
   $9 = ((($pipe_str$i)) + 20|0);
   $10 = ((($pipe_str$i)) + 16|0);
   $11 = ((($subst_result)) + 4|0);
   $12 = ((($subst_result)) + 8|0);
   $13 = ((($5)) + 80|0);
   $14 = ((($5)) + 108|0);
   $$0115 = $arg;$$017 = $0;$15 = $1;$17 = 0;$cant_be_null$016 = 0;
   while(1) {
    $16 = $15;
    HEAP32[$to_be_freed>>2] = 0;
    ;HEAP32[$subst_result>>2]=0|0;HEAP32[$subst_result+4>>2]=0|0;HEAP32[$subst_result+8>>2]=0|0;HEAP32[$subst_result+12>>2]=0|0;HEAP32[$subst_result+16>>2]=0|0;HEAP32[$subst_result+20>>2]=0|0;HEAP32[$subst_result+24>>2]=0|0;
    $18 = ($17|0)==(0);
    if ($18) {
     $$1 = $$017;
    } else {
     _o_grow_by($output,1);
     $19 = HEAP32[$3>>2]|0;
     $20 = HEAP32[$output>>2]|0;
     $21 = (($20) + ($19)|0);
     HEAP8[$21>>0] = 0;
     $22 = HEAP32[$3>>2]|0;
     $23 = (($22) + 1)|0;
     HEAP32[$3>>2] = $23;
     $24 = HEAP32[$output>>2]|0;
     $25 = (($24) + ($23)|0);
     HEAP8[$25>>0] = 0;
     $26 = (_o_save_ptr($output,$$017)|0);
     HEAP32[$ended_in_ifs>>2] = 0;
     $$1 = $26;
    }
    $27 = $$0115;
    $28 = (($16) - ($27))|0;
    _o_grow_by($output,$28);
    $29 = HEAP32[$3>>2]|0;
    $30 = HEAP32[$output>>2]|0;
    $31 = (($30) + ($29)|0);
    _memcpy(($31|0),($$0115|0),($28|0))|0;
    $32 = HEAP32[$3>>2]|0;
    $33 = (($32) + ($28))|0;
    HEAP32[$3>>2] = $33;
    $34 = HEAP32[$output>>2]|0;
    $35 = (($34) + ($33)|0);
    HEAP8[$35>>0] = 0;
    $36 = ((($15)) + 1|0);
    $37 = (_strchr($36,3)|0);
    HEAP32[$p>>2] = $37;
    $38 = HEAP8[$36>>0]|0;
    $39 = $38&255;
    $40 = HEAP32[$4>>2]|0;
    $41 = $40 & 128;
    $42 = $41 | $39;
    $sext = $42 << 24;
    $43 = $sext >> 24;
    $44 = $43 & 127;
    $45 = ($44|0)==(64);
    L8: do {
     if ($45) {
      $cant_be_null$12 = $cant_be_null$016;
      label = 7;
     } else {
      $46 = $cant_be_null$016&255;
      $47 = $43 | $46;
      $48 = $47&255;
      switch ($44|0) {
      case 42:  {
       $cant_be_null$12 = $48;
       label = 7;
       break L8;
       break;
      }
      case 96:  {
       HEAP8[$37>>0] = 0;
       $104 = ((($15)) + 2|0);
       $105 = (_generate_stream_from_string($104,$pid$i)|0);
       ;HEAP32[$pipe_str$i>>2]=0|0;HEAP32[$pipe_str$i+4>>2]=0|0;HEAP32[$pipe_str$i+8>>2]=0|0;HEAP32[$pipe_str$i+12>>2]=0|0;
       HEAP32[$8>>2] = 41;
       HEAP32[$9>>2] = 42;
       HEAP32[$10>>2] = $105;
       $106 = 42;$eol_cnt$0$i = 0;
       L13: while(1) {
        $107 = (FUNCTION_TABLE_ii[$106 & 63]($pipe_str$i)|0);
        switch ($107|0) {
        case -1:  {
         break L13;
         break;
        }
        case 10:  {
         $109 = (($eol_cnt$0$i) + 1)|0;
         $eol_cnt$0$be$i = $109;
         break;
        }
        default: {
         $108 = ($eol_cnt$0$i|0)==(0);
         if (!($108)) {
          $$promoted = HEAP32[$11>>2]|0;
          $$pre26 = HEAP32[$12>>2]|0;
          $110 = $$promoted;$112 = $$pre26;$eol_cnt$11$i = $eol_cnt$0$i;
          while(1) {
           $111 = ($110|0)<($112|0);
           if ($111) {
            $$pre27 = HEAP32[$subst_result>>2]|0;
            $118 = $$pre27;$190 = $112;
           } else {
            $113 = (($112) + 128)|0;
            HEAP32[$12>>2] = $113;
            $114 = HEAP32[$subst_result>>2]|0;
            $115 = (($112) + 129)|0;
            $116 = (_xrealloc($114,$115)|0);
            HEAP32[$subst_result>>2] = $116;
            $118 = $116;$190 = $113;
           }
           $117 = (($118) + ($110)|0);
           HEAP8[$117>>0] = 10;
           $119 = (($110) + 1)|0;
           $120 = (($118) + ($119)|0);
           HEAP8[$120>>0] = 0;
           $121 = (($eol_cnt$11$i) + -1)|0;
           $122 = ($121|0)==(0);
           if ($122) {
            break;
           } else {
            $110 = $119;$112 = $190;$eol_cnt$11$i = $121;
           }
          }
          $123 = (($eol_cnt$0$i) + ($$promoted))|0;
          HEAP32[$11>>2] = $123;
         }
         _o_addQchr($subst_result,$107);
         $eol_cnt$0$be$i = 0;
        }
        }
        $$pre$i = HEAP32[$9>>2]|0;
        $106 = $$pre$i;$eol_cnt$0$i = $eol_cnt$0$be$i;
       }
       (_fclose($105)|0);
       $124 = HEAP32[$pid$i>>2]|0;
       (_safe_waitpid($124,$status$i,0)|0);
       $125 = HEAP32[$status$i>>2]|0;
       $126 = $125 >>> 8;
       $127 = $126 & 255;
       HEAP32[$13>>2] = $127;
       $128 = HEAP32[$subst_result>>2]|0;
       $191 = $128;$val$0 = $128;
       break;
      }
      case 3:  {
       HEAP32[$7>>2] = 1;
       $$65 = $$1;$142 = 0;$cant_be_null$34 = -128;
       break L8;
       break;
      }
      default: {
       $129 = (_expand_one_var($to_be_freed,$36,$p)|0);
       $191 = 0;$val$0 = $129;
      }
      }
      $130 = $43 & 128;
      $131 = ($130|0)==(0);
      if ($131) {
       $132 = ($val$0|0)==(0|0);
       if ($132) {
        $$65 = $$1;$142 = $191;$cant_be_null$34 = $48;
        break;
       }
       $133 = HEAP8[$val$0>>0]|0;
       $134 = ($133<<24>>24)==(0);
       if ($134) {
        $$65 = $$1;$142 = $191;$cant_be_null$34 = $48;
        break;
       }
       $135 = (_expand_on_ifs($ended_in_ifs,$output,$$1,$val$0)|0);
       $$65 = $135;$142 = $191;$cant_be_null$34 = $48;
       break;
      } else {
       HEAP32[$7>>2] = 1;
       $136 = ($val$0|0)==(0|0);
       if ($136) {
        $$65 = $$1;$142 = $191;$cant_be_null$34 = $48;
        break;
       }
       $$pre28 = HEAP8[$val$0>>0]|0;
       $137 = ($$pre28<<24>>24)==(0);
       if ($137) {
        $$65 = $$1;$142 = $191;$cant_be_null$34 = $48;
        break;
       }
       _o_addQstr($output,$val$0);
       $$65 = $$1;$142 = $191;$cant_be_null$34 = $48;
       break;
      }
     }
    } while(0);
    L39: do {
     if ((label|0) == 7) {
      label = 0;
      $49 = HEAP32[$6>>2]|0;
      $50 = ((($49)) + 4|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0|0);
      if ($52) {
       $$65 = $$1;$142 = 0;$cant_be_null$34 = $cant_be_null$12;
      } else {
       $53 = $cant_be_null$12&255;
       $54 = $53 | $43;
       $55 = $54&255;
       $56 = $43 & 128;
       $57 = ($56|0)==(0);
       if ($57) {
        $$212 = $$1;$62 = $51;$i$013 = 1;
        while(1) {
         $63 = (_expand_on_ifs(0,$output,$$212,$62)|0);
         $64 = (($i$013) + 1)|0;
         $65 = HEAP32[$6>>2]|0;
         $66 = (($65) + ($i$013<<2)|0);
         $67 = HEAP32[$66>>2]|0;
         $68 = HEAP8[$67>>0]|0;
         $69 = ($68<<24>>24)==(0);
         if ($69) {
          $$2$be = $63;$82 = $65;
         } else {
          $70 = (($65) + ($64<<2)|0);
          $71 = HEAP32[$70>>2]|0;
          $72 = ($71|0)==(0|0);
          if ($72) {
           $$2$be = $63;$82 = $65;
          } else {
           _o_grow_by($output,1);
           $73 = HEAP32[$3>>2]|0;
           $74 = HEAP32[$output>>2]|0;
           $75 = (($74) + ($73)|0);
           HEAP8[$75>>0] = 0;
           $76 = HEAP32[$3>>2]|0;
           $77 = (($76) + 1)|0;
           HEAP32[$3>>2] = $77;
           $78 = HEAP32[$output>>2]|0;
           $79 = (($78) + ($77)|0);
           HEAP8[$79>>0] = 0;
           $80 = (_o_save_ptr($output,$63)|0);
           $$pre30 = HEAP32[$6>>2]|0;
           $$2$be = $80;$82 = $$pre30;
          }
         }
         $81 = (($82) + ($64<<2)|0);
         $83 = HEAP32[$81>>2]|0;
         $84 = ($83|0)==(0|0);
         if ($84) {
          $$65 = $$2$be;$142 = 0;$cant_be_null$34 = $55;
          break L39;
         } else {
          $$212 = $$2$be;$62 = $83;$i$013 = $64;
         }
        }
       }
       _o_addQstr($output,$51);
       $58 = HEAP32[$6>>2]|0;
       $59 = ((($58)) + 8|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = ($60|0)==(0|0);
       if (!($61)) {
        $189 = $58;$97 = 2;
        while(1) {
         $85 = HEAP32[$14>>2]|0;
         $86 = HEAP8[$85>>0]|0;
         $87 = ($86<<24>>24)==(0);
         if ($87) {
          $96 = $189;
         } else {
          _o_grow_by($output,1);
          $88 = HEAP32[$3>>2]|0;
          $89 = HEAP32[$output>>2]|0;
          $90 = (($89) + ($88)|0);
          HEAP8[$90>>0] = $86;
          $91 = HEAP32[$3>>2]|0;
          $92 = (($91) + 1)|0;
          HEAP32[$3>>2] = $92;
          $93 = HEAP32[$output>>2]|0;
          $94 = (($93) + ($92)|0);
          HEAP8[$94>>0] = 0;
          $$pre29 = HEAP32[$6>>2]|0;
          $96 = $$pre29;
         }
         $95 = (($96) + ($97<<2)|0);
         $98 = HEAP32[$95>>2]|0;
         _o_addQstr($output,$98);
         $99 = (($97) + 1)|0;
         $100 = HEAP32[$6>>2]|0;
         $101 = (($100) + ($99<<2)|0);
         $102 = HEAP32[$101>>2]|0;
         $103 = ($102|0)==(0|0);
         if ($103) {
          break;
         } else {
          $189 = $100;$97 = $99;
         }
        }
       }
       HEAP32[$7>>2] = 1;
       $$65 = $$1;$142 = 0;$cant_be_null$34 = $55;
      }
     }
    } while(0);
    $138 = HEAP32[$to_be_freed>>2]|0;
    _free($138);
    $139 = HEAP32[$p>>2]|0;
    $140 = HEAP8[$139>>0]|0;
    $141 = ($140<<24>>24)==(3);
    if (!($141)) {
     HEAP8[$139>>0] = 3;
    }
    _free($142);
    $143 = HEAP32[$p>>2]|0;
    $144 = ((($143)) + 1|0);
    $145 = (_strchr($144,3)|0);
    HEAP32[$p>>2] = $145;
    $146 = ($145|0)==(0|0);
    if ($146) {
     $$0$lcssa = $$65;$$01$lcssa = $144;$cant_be_null$0$lcssa = $cant_be_null$34;
     break L1;
    }
    $$pre = HEAP32[$ended_in_ifs>>2]|0;
    $$0115 = $144;$$017 = $$65;$15 = $145;$17 = $$pre;$cant_be_null$016 = $cant_be_null$34;
   }
  }
 } while(0);
 $147 = HEAP8[$$01$lcssa>>0]|0;
 $148 = ($147<<24>>24)==(0);
 do {
  if ($148) {
   $169 = ((($output)) + 4|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = HEAP32[$output>>2]|0;
   $172 = $$0$lcssa << 2;
   $173 = (($172) + 60)|0;
   $174 = $173 & -64;
   $175 = (($$0$lcssa) + -1)|0;
   $176 = (($171) + ($175<<2)|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = (($177) + ($174))|0;
   $179 = ($170|0)!=($178|0);
   $180 = ($cant_be_null$0$lcssa<<24>>24)<(0);
   $or$cond = $180 | $179;
   if ($or$cond) {
    _o_grow_by($output,1);
    $182 = HEAP32[$169>>2]|0;
    $183 = HEAP32[$output>>2]|0;
    $184 = (($183) + ($182)|0);
    HEAP8[$184>>0] = 0;
    $185 = HEAP32[$169>>2]|0;
    $186 = (($185) + 1)|0;
    HEAP32[$169>>2] = $186;
    $187 = HEAP32[$output>>2]|0;
    $188 = (($187) + ($186)|0);
    HEAP8[$188>>0] = 0;
    $$8 = $$0$lcssa;
    break;
   } else {
    $181 = ((($output)) + 20|0);
    HEAP32[$181>>2] = 1;
    $$8 = $175;
    break;
   }
  } else {
   $149 = HEAP32[$ended_in_ifs>>2]|0;
   $150 = ($149|0)==(0);
   if ($150) {
    $$pre32 = ((($output)) + 4|0);
    $$7 = $$0$lcssa;$$pre$phi34Z2D = $output;$$pre$phiZ2D = $$pre32;
   } else {
    _o_grow_by($output,1);
    $151 = ((($output)) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = HEAP32[$output>>2]|0;
    $154 = (($153) + ($152)|0);
    HEAP8[$154>>0] = 0;
    $155 = HEAP32[$151>>2]|0;
    $156 = (($155) + 1)|0;
    HEAP32[$151>>2] = $156;
    $157 = HEAP32[$output>>2]|0;
    $158 = (($157) + ($156)|0);
    HEAP8[$158>>0] = 0;
    $159 = (_o_save_ptr($output,$$0$lcssa)|0);
    $$7 = $159;$$pre$phi34Z2D = $output;$$pre$phiZ2D = $151;
   }
   $160 = (_strlen($$01$lcssa)|0);
   $161 = (($160) + 1)|0;
   _o_grow_by($output,$161);
   $162 = HEAP32[$$pre$phiZ2D>>2]|0;
   $163 = HEAP32[$$pre$phi34Z2D>>2]|0;
   $164 = (($163) + ($162)|0);
   _memcpy(($164|0),($$01$lcssa|0),($161|0))|0;
   $165 = HEAP32[$$pre$phiZ2D>>2]|0;
   $166 = (($165) + ($161))|0;
   HEAP32[$$pre$phiZ2D>>2] = $166;
   $167 = HEAP32[$$pre$phi34Z2D>>2]|0;
   $168 = (($167) + ($166)|0);
   HEAP8[$168>>0] = 0;
   $$8 = $$7;
  }
 } while(0);
 STACKTOP = sp;return ($$8|0);
}
function _o_save_ptr($o,$n) {
 $o = $o|0;
 $n = $n|0;
 var $$$0$i$i = 0, $$0 = 0, $$0$i$1$i = 0, $$0$i$i = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst$0$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($o)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 2;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   label = 14;
  } else {
   $4 = ((($o)) + 20|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    $7 = HEAP32[$o>>2]|0;
    $8 = ($7|0)==(0|0);
    if ($8) {
     $9 = (_o_save_ptr_helper($o,$n)|0);
     $$0 = $9;
     break;
    }
    $10 = $n << 2;
    $11 = (($10) + 60)|0;
    $12 = $11 & -64;
    $13 = (($n) + -1)|0;
    $14 = (($7) + ($13<<2)|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (($15) + ($12))|0;
    $17 = (($7) + ($16)|0);
    $$0$i$i = $17;
    L7: while(1) {
     $18 = HEAP8[$$0$i$i>>0]|0;
     switch ($18<<24>>24) {
     case 0:  {
      break L7;
      break;
     }
     case 123: case 63: case 91: case 42:  {
      label = 13;
      break L7;
      break;
     }
     case 92:  {
      break;
     }
     default: {
      $23 = ((($$0$i$i)) + 1|0);
      $$0$i$i = $23;
      continue L7;
     }
     }
     $19 = ((($$0$i$i)) + 1|0);
     $20 = HEAP8[$19>>0]|0;
     $21 = ($20<<24>>24)==(0);
     if ($21) {
      break;
     }
     $22 = ((($$0$i$i)) + 2|0);
     $$0$i$i = $22;
    }
    if ((label|0) == 13) {
     $37 = (_xstrdup($17)|0);
     $38 = HEAP32[$o>>2]|0;
     $39 = $17;
     $40 = (($39) - ($38))|0;
     $41 = ((($o)) + 4|0);
     HEAP32[$41>>2] = $40;
     $42 = (_glob_brace($37,$o,$n)|0);
     _free($37);
     $$0 = $42;
     break;
    }
    $24 = (___strchrnul($17,92)|0);
    $$0$i$1$i = $24;$dst$0$i$i = $24;
    while(1) {
     $25 = HEAP8[$$0$i$1$i>>0]|0;
     $26 = ($25<<24>>24)==(92);
     $27 = ((($$0$i$1$i)) + 1|0);
     $$$0$i$i = $26 ? $27 : $$0$i$1$i;
     $28 = ((($$$0$i$i)) + 1|0);
     $29 = HEAP8[$$$0$i$i>>0]|0;
     $30 = ((($dst$0$i$i)) + 1|0);
     HEAP8[$dst$0$i$i>>0] = $29;
     $31 = ($29<<24>>24)==(0);
     if ($31) {
      $$lcssa = $30;
      break;
     } else {
      $$0$i$1$i = $28;$dst$0$i$i = $30;
     }
    }
    $32 = HEAP32[$o>>2]|0;
    $33 = $$lcssa;
    $34 = (($33) - ($32))|0;
    $35 = ((($o)) + 4|0);
    HEAP32[$35>>2] = $34;
    $36 = (_o_save_ptr_helper($o,$n)|0);
    $$0 = $36;
   } else {
    label = 14;
   }
  }
 } while(0);
 if ((label|0) == 14) {
  $43 = (_o_save_ptr_helper($o,$n)|0);
  $$0 = $43;
 }
 return ($$0|0);
}
function _o_save_ptr_helper($o,$n) {
 $o = $o|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $list$0 = 0, $string_len$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$o>>2]|0;
 $1 = ((($o)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 $4 = $n << 2;
 if ($3) {
  $5 = (($4) + 60)|0;
  $6 = $5 & -64;
  $7 = ((($o)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) - ($6))|0;
  $10 = $n & 15;
  $11 = ($10|0)==(0);
  if ($11) {
   $12 = ((($o)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + 64)|0;
   HEAP32[$12>>2] = $14;
   $15 = (($13) + 65)|0;
   $16 = (_xrealloc($0,$15)|0);
   HEAP32[$o>>2] = $16;
   $17 = (($16) + ($n<<2)|0);
   $18 = ((($17)) + 64|0);
   _memmove(($18|0),($17|0),($9|0))|0;
   $19 = HEAP32[$7>>2]|0;
   $20 = (($19) + 64)|0;
   HEAP32[$7>>2] = $20;
   $list$0 = $16;$string_len$0 = $9;
  } else {
   $list$0 = $0;$string_len$0 = $9;
  }
 } else {
  $21 = (($4) + 64)|0;
  $22 = $21 & -64;
  $23 = ((($o)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) - ($22))|0;
  HEAP32[$1>>2] = 0;
  $list$0 = $0;$string_len$0 = $25;
 }
 $26 = ((($o)) + 16|0);
 HEAP32[$26>>2] = 0;
 $27 = $string_len$0;
 $28 = (($list$0) + ($n<<2)|0);
 HEAP32[$28>>2] = $27;
 $29 = (($n) + 1)|0;
 return ($29|0);
}
function _glob_brace($pattern,$o,$n) {
 $pattern = $pattern|0;
 $o = $o|0;
 $n = $n|0;
 var $$$0$i = 0, $$0$i = 0, $$01 = 0, $$02 = 0, $$13 = 0, $$2 = 0, $$lcssa34 = 0, $$lcssa36 = 0, $$lcssa38 = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $argv$0 = 0;
 var $begin$0 = 0, $begin$0$ = 0, $begin$0$be = 0, $begin$0$lcssa37 = 0, $begin$0$pn = 0, $begin$0$pn$phi = 0, $dst$0$i = 0, $globdata = 0, $next$0 = 0, $p$0 = 0, $rest$027 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $globdata = sp + 16|0;
 $begin$0 = $pattern;
 L1: while(1) {
  $0 = HEAP8[$begin$0>>0]|0;
  switch ($0<<24>>24) {
  case 0:  {
   break L1;
   break;
  }
  case 123:  {
   $1 = (_next_brace_sub($begin$0)|0);
   $2 = ($1|0)==(0|0);
   if ($2) {
    break L1;
   }
   $3 = HEAP8[$1>>0]|0;
   $4 = ($3<<24>>24)==(125);
   if ($4) {
    $$pn = $1;
   } else {
    $$lcssa38 = $1;$begin$0$lcssa37 = $begin$0;
    label = 5;
    break L1;
   }
   break;
  }
  case 92:  {
   $5 = ((($begin$0)) + 1|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   $begin$0$ = $7 ? $begin$0 : $5;
   $$pn = $begin$0$;
   break;
  }
  default: {
   $$pn = $begin$0;
  }
  }
  $begin$0$be = ((($$pn)) + 1|0);
  $begin$0 = $begin$0$be;
 }
 L8: do {
  if ((label|0) == 5) {
   $rest$027 = $$lcssa38;
   while(1) {
    $8 = (_next_brace_sub($rest$027)|0);
    $9 = ($8|0)==(0|0);
    if ($9) {
     break L8;
    }
    $$pre = HEAP8[$8>>0]|0;
    $10 = ($$pre<<24>>24)==(125);
    if ($10) {
     $$lcssa36 = $8;
     break;
    } else {
     $rest$027 = $8;
    }
   }
   $11 = ((($$lcssa36)) + 1|0);
   $12 = (_strlen($11)|0);
   $13 = (($12) + 1)|0;
   $14 = (_strlen($pattern)|0);
   $15 = (_xmalloc($14)|0);
   $16 = $begin$0$lcssa37;
   $17 = $pattern;
   $18 = (($16) - ($17))|0;
   $$02 = $n;$begin$0$pn = $begin$0$lcssa37;$next$0 = $$lcssa38;
   while(1) {
    $p$0 = ((($begin$0$pn)) + 1|0);
    $19 = (_mempcpy($15,$pattern,$18)|0);
    $20 = $next$0;
    $21 = $p$0;
    $22 = (($20) - ($21))|0;
    $23 = (_mempcpy($19,$p$0,$22)|0);
    _memcpy(($23|0),($11|0),($13|0))|0;
    $24 = (_glob_brace($15,$o,$$02)|0);
    $25 = HEAP8[$next$0>>0]|0;
    $26 = ($25<<24>>24)==(125);
    if ($26) {
     $$lcssa34 = $24;
     break;
    }
    $27 = (_next_brace_sub($next$0)|0);
    $begin$0$pn$phi = $next$0;$$02 = $24;$next$0 = $27;$begin$0$pn = $begin$0$pn$phi;
   }
   _free($15);
   STACKTOP = sp;return ($$lcssa34|0);
  }
 } while(0);
 dest=$globdata; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $28 = (_glob($pattern,0,0,$globdata)|0);
 switch ($28|0) {
 case 0:  {
  $48 = ((($globdata)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)==(0|0);
  if ($50) {
   $$2 = $n;
  } else {
   $51 = HEAP32[$49>>2]|0;
   $52 = ($51|0)==(0|0);
   if ($52) {
    $$2 = $n;
   } else {
    $53 = ((($o)) + 4|0);
    $$13 = $n;$54 = $51;$argv$0 = $49;
    while(1) {
     $55 = (_strlen($54)|0);
     $56 = (($55) + 1)|0;
     _o_grow_by($o,$56);
     $57 = HEAP32[$53>>2]|0;
     $58 = HEAP32[$o>>2]|0;
     $59 = (($58) + ($57)|0);
     _memcpy(($59|0),($54|0),($56|0))|0;
     $60 = HEAP32[$53>>2]|0;
     $61 = (($60) + ($56))|0;
     HEAP32[$53>>2] = $61;
     $62 = HEAP32[$o>>2]|0;
     $63 = (($62) + ($61)|0);
     HEAP8[$63>>0] = 0;
     $64 = (_o_save_ptr_helper($o,$$13)|0);
     $65 = ((($argv$0)) + 4|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ($66|0)==(0|0);
     if ($67) {
      $$2 = $64;
      break;
     } else {
      $$13 = $64;$54 = $66;$argv$0 = $65;
     }
    }
   }
  }
  _globfree($globdata);
  $$01 = $$2;
  break;
 }
 case 3:  {
  _globfree($globdata);
  $29 = (___strchrnul($pattern,92)|0);
  $$0$i = $29;$dst$0$i = $29;
  while(1) {
   $30 = HEAP8[$$0$i>>0]|0;
   $31 = ($30<<24>>24)==(92);
   $32 = ((($$0$i)) + 1|0);
   $$$0$i = $31 ? $32 : $$0$i;
   $33 = ((($$$0$i)) + 1|0);
   $34 = HEAP8[$$$0$i>>0]|0;
   $35 = ((($dst$0$i)) + 1|0);
   HEAP8[$dst$0$i>>0] = $34;
   $36 = ($34<<24>>24)==(0);
   if ($36) {
    break;
   } else {
    $$0$i = $33;$dst$0$i = $35;
   }
  }
  $37 = (_strlen($pattern)|0);
  $38 = (($37) + 1)|0;
  _o_grow_by($o,$38);
  $39 = ((($o)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = HEAP32[$o>>2]|0;
  $42 = (($41) + ($40)|0);
  _memcpy(($42|0),($pattern|0),($38|0))|0;
  $43 = HEAP32[$39>>2]|0;
  $44 = (($43) + ($38))|0;
  HEAP32[$39>>2] = $44;
  $45 = HEAP32[$o>>2]|0;
  $46 = (($45) + ($44)|0);
  HEAP8[$46>>0] = 0;
  $47 = (_o_save_ptr_helper($o,$n)|0);
  $$01 = $47;
  break;
 }
 case 1:  {
  _bb_error_msg_and_die(3678,$vararg_buffer);
  // unreachable;
  break;
 }
 default: {
  HEAP32[$vararg_buffer1>>2] = $28;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $pattern;
  _bb_error_msg_and_die(4073,$vararg_buffer1);
  // unreachable;
 }
 }
 STACKTOP = sp;return ($$01|0);
}
function _next_brace_sub($cp) {
 $cp = $cp|0;
 var $$0 = 0, $$0$lcssa = 0, $$0$lcssa34 = 0, $$0$ph = 0, $$035 = 0, $$036 = 0, $$06$pn = 0, $$depth$1 = 0, $$lcssa = 0, $$lcssa38 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $depth$0$ph = 0, $depth$114 = 0, $or$cond = 0, $phitmp = 0, $phitmp12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$06$pn = $cp;$depth$0$ph = 0;
 L1: while(1) {
  $$0$ph = ((($$06$pn)) + 1|0);
  $$0 = $$0$ph;
  L3: while(1) {
   $0 = HEAP8[$$0>>0]|0;
   switch ($0<<24>>24) {
   case 0:  {
    $13 = 0;
    break L1;
    break;
   }
   case 125:  {
    $$0$lcssa34 = $$0;$$lcssa38 = $0;
    label = 6;
    break L3;
    break;
   }
   case 92:  {
    break;
   }
   default: {
    $$0$lcssa = $$0;$$lcssa = $0;
    label = 7;
    break L3;
   }
   }
   $1 = ((($$0)) + 1|0);
   $2 = HEAP8[$1>>0]|0;
   $3 = ($2<<24>>24)==(0);
   if ($3) {
    $13 = 0;
    break L1;
   }
   $4 = ((($$0)) + 2|0);
   $$0 = $4;
  }
  if ((label|0) == 6) {
   label = 0;
   $5 = (($depth$0$ph) + -1)|0;
   $6 = ($depth$0$ph|0)==(0);
   if ($6) {
    $$036 = $$0$lcssa34;$12 = $$lcssa38;
    label = 9;
    break;
   } else {
    $$035 = $$0$lcssa34;$9 = $$lcssa38;$depth$114 = $5;
   }
  }
  else if ((label|0) == 7) {
   label = 0;
   $7 = ($$lcssa<<24>>24)==(44);
   $8 = ($depth$0$ph|0)==(0);
   $or$cond = $8 & $7;
   if ($or$cond) {
    $$036 = $$0$lcssa;$12 = $$lcssa;
    label = 9;
    break;
   } else {
    $$035 = $$0$lcssa;$9 = $$lcssa;$depth$114 = $depth$0$ph;
   }
  }
  $10 = ($9<<24>>24)==(123);
  $11 = $10&1;
  $$depth$1 = (($11) + ($depth$114))|0;
  $$06$pn = $$035;$depth$0$ph = $$depth$1;
 }
 if ((label|0) == 9) {
  $phitmp = ($12<<24>>24)!=(0);
  $phitmp12 = $phitmp ? $$036 : 0;
  $13 = $phitmp12;
 }
 return ($13|0);
}
function _o_grow_by($o,$len) {
 $o = $o|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($o)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($len))|0;
 $3 = ((($o)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)>($4|0);
 if ($5) {
  $6 = $len << 1;
  $7 = ($6>>>0)>(128);
  $8 = $7 ? $6 : 128;
  $9 = (($4) + ($8))|0;
  HEAP32[$3>>2] = $9;
  $10 = HEAP32[$o>>2]|0;
  $11 = (($9) + 1)|0;
  $12 = (_xrealloc($10,$11)|0);
  HEAP32[$o>>2] = $12;
 }
 return;
}
function _o_addQstr($o,$str) {
 $o = $o|0;
 $str = $str|0;
 var $$015$i$i = 0, $$02$$i$i = 0, $$024$i$i = 0, $$neg$i$i = 0, $$phi$trans$insert$i$i = 0, $$pre$i$i = 0, $$pre$phi8$i$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sz$0$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($str)|0);
 $1 = ((($o)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 L1: do {
  if ($4) {
   _o_grow_by($o,$0);
   $5 = ((($o)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = HEAP32[$o>>2]|0;
   $8 = (($7) + ($6)|0);
   _memcpy(($8|0),($str|0),($0|0))|0;
   $9 = HEAP32[$5>>2]|0;
   $10 = (($9) + ($0))|0;
   HEAP32[$5>>2] = $10;
   $11 = HEAP32[$o>>2]|0;
   $12 = (($11) + ($10)|0);
   HEAP8[$12>>0] = 0;
  } else {
   $13 = ($0|0)==(0);
   $$phi$trans$insert$i$i = ((($o)) + 4|0);
   if ($13) {
    $$pre$i$i = HEAP32[$$phi$trans$insert$i$i>>2]|0;
    $$pre$phi8$i$iZ2D = $o;$42 = $$pre$i$i;
   } else {
    $$015$i$i = $str;$$024$i$i = $0;
    while(1) {
     $14 = (_strcspn($$015$i$i,4282)|0);
     $15 = ($14|0)>($$024$i$i|0);
     $$02$$i$i = $15 ? $$024$i$i : $14;
     _o_grow_by($o,$$02$$i$i);
     $16 = HEAP32[$$phi$trans$insert$i$i>>2]|0;
     $17 = HEAP32[$o>>2]|0;
     $18 = (($17) + ($16)|0);
     _memcpy(($18|0),($$015$i$i|0),($$02$$i$i|0))|0;
     $19 = HEAP32[$$phi$trans$insert$i$i>>2]|0;
     $20 = (($19) + ($$02$$i$i))|0;
     HEAP32[$$phi$trans$insert$i$i>>2] = $20;
     $21 = HEAP32[$o>>2]|0;
     $22 = (($21) + ($20)|0);
     HEAP8[$22>>0] = 0;
     $23 = ($$02$$i$i|0)==($$024$i$i|0);
     if ($23) {
      break L1;
     }
     $24 = (($$015$i$i) + ($$02$$i$i)|0);
     $$neg$i$i = (($$024$i$i) + -1)|0;
     $25 = (($$neg$i$i) - ($$02$$i$i))|0;
     $26 = ((($24)) + 1|0);
     $27 = HEAP8[$24>>0]|0;
     $28 = ($27<<24>>24)==(0);
     if ($28) {
      $sz$0$i$i = 1;
     } else {
      $29 = HEAP32[$$phi$trans$insert$i$i>>2]|0;
      $30 = HEAP32[$o>>2]|0;
      $31 = (($30) + ($29)|0);
      HEAP8[$31>>0] = 92;
      $32 = HEAP32[$$phi$trans$insert$i$i>>2]|0;
      $33 = (($32) + 1)|0;
      HEAP32[$$phi$trans$insert$i$i>>2] = $33;
      $sz$0$i$i = 2;
     }
     _o_grow_by($o,$sz$0$i$i);
     $34 = HEAP32[$$phi$trans$insert$i$i>>2]|0;
     $35 = HEAP32[$o>>2]|0;
     $36 = (($35) + ($34)|0);
     HEAP8[$36>>0] = $27;
     $37 = HEAP32[$$phi$trans$insert$i$i>>2]|0;
     $38 = (($37) + 1)|0;
     HEAP32[$$phi$trans$insert$i$i>>2] = $38;
     $39 = ($$neg$i$i|0)==($$02$$i$i|0);
     if ($39) {
      $$pre$phi8$i$iZ2D = $o;$42 = $38;
      break;
     } else {
      $$015$i$i = $26;$$024$i$i = $25;
     }
    }
   }
   $40 = HEAP32[$$pre$phi8$i$iZ2D>>2]|0;
   $41 = (($40) + ($42)|0);
   HEAP8[$41>>0] = 0;
  }
 } while(0);
 return;
}
function _expand_on_ifs($ended_with_ifs,$output,$n,$str) {
 $ended_with_ifs = $ended_with_ifs|0;
 $output = $output|0;
 $n = $n|0;
 $str = $str|0;
 var $$0$be$i = 0, $$01$be$i = 0, $$01$ph$lcssa = 0, $$01$ph14 = 0, $$02$ph13 = 0, $$025 = 0, $$04$i = 0, $$13 = 0, $$in$i = 0, $$lcssa = 0, $$pre = 0, $$pre22 = 0, $$pre24 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $last_is_ifs$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$str>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $$01$ph$lcssa = $n;$last_is_ifs$1 = 0;
  } else {
   $2 = HEAP32[840>>2]|0;
   $3 = ((($2)) + 108|0);
   $4 = ((($output)) + 16|0);
   $5 = ((($output)) + 4|0);
   $6 = ((($output)) + 12|0);
   $$01$ph14 = $n;$$02$ph13 = $str;$93 = $0;
   while(1) {
    $7 = ($$01$ph14|0)>(0);
    $$pre = HEAP32[$3>>2]|0;
    $$025 = $$02$ph13;$8 = $$pre;$94 = $93;
    while(1) {
     $9 = (_strcspn($$025,$8)|0);
     $10 = ($9|0)==(0);
     if ($10) {
      $$13 = $$025;$69 = $8;
     } else {
      $11 = HEAP32[$6>>2]|0;
      $12 = $11 & 2;
      $13 = ($12|0)==(0);
      L9: do {
       if ($13) {
        _o_grow_by($output,$9);
        $14 = HEAP32[$5>>2]|0;
        $15 = HEAP32[$output>>2]|0;
        $16 = (($15) + ($14)|0);
        _memcpy(($16|0),($$025|0),($9|0))|0;
        $17 = HEAP32[$5>>2]|0;
        $18 = (($17) + ($9))|0;
        HEAP32[$5>>2] = $18;
        $19 = HEAP32[$output>>2]|0;
        $20 = (($19) + ($18)|0);
        HEAP8[$20>>0] = 0;
       } else {
        $21 = ($9|0)>(0);
        if ($21) {
         $$04$i = $$025;$$in$i = $9;$24 = $94;
         while(1) {
          $22 = (($$in$i) + -1)|0;
          $23 = ((($$04$i)) + 1|0);
          switch ($24<<24>>24) {
          case 125: case 123:  {
           _o_grow_by($output,1);
           $25 = HEAP32[$5>>2]|0;
           $26 = HEAP32[$output>>2]|0;
           $27 = (($26) + ($25)|0);
           HEAP8[$27>>0] = 92;
           $28 = HEAP32[$5>>2]|0;
           $29 = (($28) + 1)|0;
           HEAP32[$5>>2] = $29;
           $30 = HEAP32[$output>>2]|0;
           $31 = (($30) + ($29)|0);
           HEAP8[$31>>0] = 0;
           break;
          }
          default: {
          }
          }
          _o_grow_by($output,1);
          $32 = HEAP32[$5>>2]|0;
          $33 = HEAP32[$output>>2]|0;
          $34 = (($33) + ($32)|0);
          HEAP8[$34>>0] = $24;
          $35 = HEAP32[$5>>2]|0;
          $36 = (($35) + 1)|0;
          HEAP32[$5>>2] = $36;
          $37 = HEAP32[$output>>2]|0;
          $38 = (($37) + ($36)|0);
          HEAP8[$38>>0] = 0;
          $39 = ($24<<24>>24)==(92);
          if ($39) {
           _o_grow_by($output,1);
           $40 = HEAP32[$5>>2]|0;
           $41 = HEAP32[$output>>2]|0;
           $42 = (($41) + ($40)|0);
           HEAP8[$42>>0] = 92;
           $43 = HEAP32[$5>>2]|0;
           $44 = (($43) + 1)|0;
           HEAP32[$5>>2] = $44;
           $45 = HEAP32[$output>>2]|0;
           $46 = (($45) + ($44)|0);
           HEAP8[$46>>0] = 0;
           $47 = ($22|0)==(0);
           if ($47) {
            break L9;
           }
           $49 = (($$in$i) + -2)|0;
           _o_grow_by($output,1);
           $50 = HEAP32[$5>>2]|0;
           $51 = HEAP32[$output>>2]|0;
           $52 = (($51) + ($50)|0);
           HEAP8[$52>>0] = 92;
           $53 = HEAP32[$5>>2]|0;
           $54 = (($53) + 1)|0;
           HEAP32[$5>>2] = $54;
           $55 = HEAP32[$output>>2]|0;
           $56 = (($55) + ($54)|0);
           HEAP8[$56>>0] = 0;
           $57 = ((($$04$i)) + 2|0);
           $58 = HEAP8[$23>>0]|0;
           _o_grow_by($output,1);
           $59 = HEAP32[$5>>2]|0;
           $60 = HEAP32[$output>>2]|0;
           $61 = (($60) + ($59)|0);
           HEAP8[$61>>0] = $58;
           $62 = HEAP32[$5>>2]|0;
           $63 = (($62) + 1)|0;
           HEAP32[$5>>2] = $63;
           $64 = HEAP32[$output>>2]|0;
           $65 = (($64) + ($63)|0);
           HEAP8[$65>>0] = 0;
           $$0$be$i = $57;$$01$be$i = $49;
          } else {
           $$0$be$i = $23;$$01$be$i = $22;
          }
          $48 = ($$01$be$i|0)>(0);
          if (!($48)) {
           break L9;
          }
          $$pre22 = HEAP8[$$0$be$i>>0]|0;
          $$04$i = $$0$be$i;$$in$i = $$01$be$i;$24 = $$pre22;
         }
        }
       }
      } while(0);
      $66 = (($$025) + ($9)|0);
      $67 = HEAP8[$66>>0]|0;
      $68 = ($67<<24>>24)==(0);
      if ($68) {
       $$01$ph$lcssa = $$01$ph14;$last_is_ifs$1 = 0;
       break L1;
      }
      $$pre24 = HEAP32[$3>>2]|0;
      $$13 = $66;$69 = $$pre24;
     }
     $70 = (_strspn($$13,$69)|0);
     $71 = (($$13) + ($70)|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $$01$ph$lcssa = $$01$ph14;$last_is_ifs$1 = 1;
      break L1;
     }
     $74 = HEAP32[$4>>2]|0;
     $75 = ($74|0)==(0);
     if (!($75)) {
      $$lcssa = $71;
      break;
     }
     if (!($7)) {
      $$025 = $71;$8 = $69;$94 = $72;
      continue;
     }
     $76 = HEAP32[$5>>2]|0;
     $77 = (($76) + -1)|0;
     $78 = HEAP32[$output>>2]|0;
     $79 = (($78) + ($77)|0);
     $80 = HEAP8[$79>>0]|0;
     $81 = ($80<<24>>24)==(0);
     if ($81) {
      $$025 = $71;$8 = $69;$94 = $72;
     } else {
      $$lcssa = $71;
      break;
     }
    }
    _o_grow_by($output,1);
    $82 = HEAP32[$5>>2]|0;
    $83 = HEAP32[$output>>2]|0;
    $84 = (($83) + ($82)|0);
    HEAP8[$84>>0] = 0;
    $85 = HEAP32[$5>>2]|0;
    $86 = (($85) + 1)|0;
    HEAP32[$5>>2] = $86;
    $87 = HEAP32[$output>>2]|0;
    $88 = (($87) + ($86)|0);
    HEAP8[$88>>0] = 0;
    $89 = (_o_save_ptr($output,$$01$ph14)|0);
    $90 = HEAP8[$$lcssa>>0]|0;
    $91 = ($90<<24>>24)==(0);
    if ($91) {
     $$01$ph$lcssa = $89;$last_is_ifs$1 = 1;
     break;
    } else {
     $$01$ph14 = $89;$$02$ph13 = $$lcssa;$93 = $90;
    }
   }
  }
 } while(0);
 $92 = ($ended_with_ifs|0)==(0|0);
 if (!($92)) {
  HEAP32[$ended_with_ifs>>2] = $last_is_ifs$1;
 }
 return ($$01$ph$lcssa|0);
}
function _generate_stream_from_string($s,$pid_p) {
 $s = $s|0;
 $pid_p = $pid_p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $channel = 0, $to_free = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $channel = sp + 8|0;
 $to_free = sp + 4|0;
 HEAP32[$to_free>>2] = 0;
 _xpipe($channel);
 $0 = (_vfork()|0);
 $1 = ($0|0)<(0);
 if ($1) {
  _bb_perror_msg_and_die(4289,$vararg_buffer);
  // unreachable;
 }
 $2 = ($0|0)==(0);
 if (!($2)) {
  HEAP32[$pid_p>>2] = $0;
  HEAP32[32>>2] = 38;
  $20 = ((($channel)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  (_close($21)|0);
  $22 = HEAP32[$channel>>2]|0;
  _close_on_exec_on($22);
  $23 = HEAP32[$channel>>2]|0;
  $24 = (_xfdopen_for_read($23)|0);
  STACKTOP = sp;return ($24|0);
 }
 HEAP32[32>>2] = 0;
 $3 = HEAP32[840>>2]|0;
 $4 = ((($3)) + 28|0);
 HEAP32[$4>>2] = 0;
 $5 = HEAP32[$channel>>2]|0;
 (_close($5)|0);
 $6 = ((($channel)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 _xmove_fd($7,1);
 $8 = ((($3)) + 44|0);
 HEAP32[$8>>2] = 1;
 $9 = (_skip_whitespace($s)|0);
 $10 = (_is_prefixed_with($9,4295)|0);
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $12 = ((($9)) + 4|0);
  $13 = (_skip_whitespace($12)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)==(0);
  if ($15) {
   (_builtin_trap(36)|0);
   _exit(0);
   // unreachable;
  }
 }
 $16 = ((($3)) + 92|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($17)) + 4|0);
 _re_execute_shell($to_free,$9,$18,$19,0);
 // unreachable;
 return (0)|0;
}
function _o_addQchr($o,$ch) {
 $o = $o|0;
 $ch = $ch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $memchr = 0, $sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($o)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $sz$0 = 1;
 } else {
  $memchr = (_memchr(4282,$ch,7)|0);
  $4 = ($memchr|0)==(0|0);
  if ($4) {
   $sz$0 = 1;
  } else {
   $5 = ((($o)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = HEAP32[$o>>2]|0;
   $8 = (($7) + ($6)|0);
   HEAP8[$8>>0] = 92;
   $9 = HEAP32[$5>>2]|0;
   $10 = (($9) + 1)|0;
   HEAP32[$5>>2] = $10;
   $sz$0 = 2;
  }
 }
 _o_grow_by($o,$sz$0);
 $11 = $ch&255;
 $12 = ((($o)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$o>>2]|0;
 $15 = (($14) + ($13)|0);
 HEAP8[$15>>0] = $11;
 $16 = HEAP32[$12>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[$12>>2] = $17;
 $18 = HEAP32[$o>>2]|0;
 $19 = (($18) + ($17)|0);
 HEAP8[$19>>0] = 0;
 return;
}
function _expand_one_var($to_be_freed_pp,$arg,$pp) {
 $to_be_freed_pp = $to_be_freed_pp|0;
 $arg = $arg|0;
 $pp = $pp|0;
 var $$ = 0, $$02$i = 0, $$02$i$i = 0, $$02$i$i$lcssa = 0, $$15$i = 0, $$exp_word$1 = 0, $$lcssa = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exp_op$0 = 0, $exp_op$1 = 0, $exp_save$0 = 0, $exp_saveptr$0 = 0, $exp_saveptr$1 = 0, $exp_word$0 = 0, $exp_word$1 = 0, $exp_word$1$ = 0, $exp_word$1$$20 = 0, $exp_word$3 = 0, $memchr = 0;
 var $memchr2 = 0, $memchr3 = 0, $not$$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond27 = 0, $or$cond4 = 0, $p$0 = 0, $p$1 = 0, $pattern$0 = 0, $res_len$0$i = 0, $res_len$13$i = 0, $result$0$i = 0, $result$14$i = 0, $result$2$i = 0, $scan_flags$0$i = 0, $to_be_freed$2 = 0, $to_be_freed$3 = 0, $use_word$05 = 0, $use_word$05$18 = 0;
 var $val$1 = 0, $val$1$ = 0, $val$6 = 0, $val$7 = 0, $var$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pp>>2]|0;
 HEAP8[$0>>0] = 0;
 $1 = ((($arg)) + 1|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $10 = 0;
 } else {
  $4 = $2 << 24 >> 24;
  $memchr3 = (_memchr(4095,$4,10)|0);
  $10 = $memchr3;
 }
 $5 = HEAP8[$arg>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = $6 & 127;
 $8 = $7&255;
 HEAP8[$arg>>0] = $8;
 $9 = ($7|0)!=(35);
 $11 = ($10|0)!=(0|0);
 $or$cond = $11 | $3;
 $or$cond27 = $9 | $or$cond;
 if ($or$cond27) {
  $12 = ($10|0)==(0|0);
  if ($12) {
   label = 6;
  } else {
   $memchr2 = (_memchr((4108),$7,5)|0);
   $13 = ($memchr2|0)==(0|0);
   if ($13) {
    label = 6;
   } else {
    $16 = $2;$exp_saveptr$0 = $1;
   }
  }
  if ((label|0) == 6) {
   $14 = (_strcspn($1,4095)|0);
   $15 = (($1) + ($14)|0);
   $$pre = HEAP8[$15>>0]|0;
   $16 = $$pre;$exp_saveptr$0 = $15;
  }
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $exp_op$1 = 0;$exp_save$0 = 0;$exp_saveptr$1 = $exp_saveptr$0;$exp_word$1 = 0;$var$0 = $arg;
  } else {
   $18 = ((($exp_saveptr$0)) + 1|0);
   $19 = ($16<<24>>24)==(58);
   do {
    if ($19) {
     $20 = HEAP8[$18>>0]|0;
     $21 = ($20<<24>>24)==(0);
     if (!($21)) {
      $22 = ((($exp_saveptr$0)) + 2|0);
      $23 = $20 << 24 >> 24;
      $memchr = (_memchr((4100),$23,5)|0);
      $24 = ($memchr|0)==(0|0);
      if (!($24)) {
       $exp_op$0 = $20;$exp_word$0 = $22;
       break;
      }
     }
     $exp_op$0 = 58;$exp_word$0 = $18;
    } else {
     $exp_op$0 = $16;$exp_word$0 = $18;
    }
   } while(0);
   HEAP8[$exp_saveptr$0>>0] = 0;
   $exp_op$1 = $exp_op$0;$exp_save$0 = $16;$exp_saveptr$1 = $exp_saveptr$0;$exp_word$1 = $exp_word$0;$var$0 = $arg;
  }
 } else {
  $exp_op$1 = 76;$exp_save$0 = 0;$exp_saveptr$1 = 0;$exp_word$1 = 0;$var$0 = $1;
 }
 $25 = HEAP8[$var$0>>0]|0;
 $26 = $25 << 24 >> 24;
 $27 = (($26) + 208)|0;
 $28 = $27 & 254;
 $29 = ($28>>>0)<(10);
 L19: do {
  if ($29) {
   $30 = (_xatoi_positive($var$0)|0);
   $31 = HEAP32[840>>2]|0;
   $32 = ((($31)) + 88|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($30|0)<($33|0);
   if ($34) {
    $35 = ((($31)) + 92|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (($36) + ($30<<2)|0);
    $38 = HEAP32[$37>>2]|0;
    $val$1 = $38;
   } else {
    $val$1 = 0;
   }
  } else {
   switch ($26|0) {
   case 36:  {
    $39 = HEAP32[840>>2]|0;
    $40 = ((($39)) + 16|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (_utoa($41)|0);
    $val$1 = $42;
    break L19;
    break;
   }
   case 33:  {
    $43 = HEAP32[840>>2]|0;
    $44 = ((($43)) + 24|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($45|0)==(0);
    if ($46) {
     $val$1 = 13904;
     break L19;
    }
    $47 = (_utoa($45)|0);
    $val$1 = $47;
    break L19;
    break;
   }
   case 63:  {
    $48 = HEAP32[840>>2]|0;
    $49 = ((($48)) + 80|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (_utoa($50)|0);
    $val$1 = $51;
    break L19;
    break;
   }
   case 35:  {
    $52 = HEAP32[840>>2]|0;
    $53 = ((($52)) + 88|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($54|0)==(0);
    $56 = (($54) + -1)|0;
    $$ = $55 ? 0 : $56;
    $57 = (_utoa($$)|0);
    $val$1 = $57;
    break L19;
    break;
   }
   default: {
    $58 = (_get_local_var_value($var$0)|0);
    $val$1 = $58;
    break L19;
   }
   }
  }
 } while(0);
 L31: do {
  switch ($exp_op$1<<24>>24) {
  case 76:  {
   $59 = ($val$1|0)==(0|0);
   if ($59) {
    $61 = 0;
   } else {
    $60 = (_strlen($val$1)|0);
    $61 = $60;
   }
   $62 = (_utoa($61)|0);
   $p$1 = $0;$to_be_freed$3 = 0;$val$7 = $62;
   break;
  }
  case 0:  {
   $p$1 = $0;$to_be_freed$3 = 0;$val$7 = $val$1;
   break;
  }
  case 35: case 37:  {
   $63 = ($val$1|0)==(0|0);
   if ($63) {
    $p$0 = $0;$to_be_freed$2 = 0;$val$6 = 0;
    label = 58;
   } else {
    $64 = HEAP8[$val$1>>0]|0;
    $65 = ($64<<24>>24)==(0);
    if ($65) {
     $p$0 = $0;$to_be_freed$2 = 0;$val$6 = $val$1;
     label = 58;
    } else {
     $66 = HEAP8[$exp_word$1>>0]|0;
     $67 = ($exp_op$1<<24>>24)==(35);
     $68 = ($exp_op$1<<24>>24)==($66<<24>>24);
     $69 = $68 ? 6 : 5;
     $70 = $68 ? 9 : 10;
     $scan_flags$0$i = $67 ? $69 : $70;
     $71 = ((($exp_word$1)) + 1|0);
     $$exp_word$1 = $68 ? $71 : $exp_word$1;
     $72 = (_encode_then_expand_string($$exp_word$1,1,1)|0);
     $73 = ($72|0)==(0|0);
     $exp_word$3 = $73 ? $$exp_word$1 : $72;
     $74 = (_scan_and_match($val$1,$exp_word$3,$scan_flags$0$i)|0);
     _free($72);
     $75 = ($74|0)==(0|0);
     if ($75) {
      $p$0 = $0;$to_be_freed$2 = 0;$val$6 = $val$1;
      label = 58;
     } else {
      $76 = $scan_flags$0$i & 4;
      $77 = ($76|0)==(0);
      if ($77) {
       $78 = $74;
       $79 = $val$1;
       $80 = (($78) - ($79))|0;
       $81 = (_xstrndup($val$1,$80)|0);
       $p$0 = $0;$to_be_freed$2 = $81;$val$6 = $81;
       label = 58;
      } else {
       $p$0 = $0;$to_be_freed$2 = 0;$val$6 = $74;
       label = 58;
      }
     }
    }
   }
   break;
  }
  case 92: case 47:  {
   $82 = ($val$1|0)==(0|0);
   if ($82) {
    $p$0 = $0;$to_be_freed$2 = 0;$val$6 = 0;
    label = 58;
   } else {
    $83 = HEAP8[$val$1>>0]|0;
    $84 = ($83<<24>>24)==(0);
    if ($84) {
     $p$0 = $0;$to_be_freed$2 = 0;$val$6 = $val$1;
     label = 58;
    } else {
     $85 = (_encode_then_expand_string($exp_word$1,0,0)|0);
     $86 = ($85|0)==(0|0);
     if ($86) {
      $87 = (_xstrdup($exp_word$1)|0);
      $pattern$0 = $87;
     } else {
      $pattern$0 = $85;
     }
     $88 = ((($0)) + 1|0);
     HEAP8[$0>>0] = 3;
     $89 = (_strchr($88,3)|0);
     HEAP8[$89>>0] = 0;
     $90 = $6 & 128;
     $91 = (_encode_then_expand_string($88,$90,1)|0);
     $92 = ($91|0)!=(0|0);
     $93 = $92 ? $91 : $88;
     $94 = (_strlen($93)|0);
     $not$$i = ($exp_op$1<<24>>24)==(47);
     $$02$i = $val$1;$res_len$0$i = 0;$result$0$i = 0;
     L62: while(1) {
      $$02$i$i = $$02$i;
      while(1) {
       $95 = (_scan_and_match($$02$i$i,$pattern$0,6)|0);
       $96 = ($95|0)==(0|0);
       if (!($96)) {
        $$02$i$i$lcssa = $$02$i$i;$$lcssa = $95;
        break;
       }
       $97 = HEAP8[$$02$i$i>>0]|0;
       $98 = ($97<<24>>24)==(0);
       if ($98) {
        $$15$i = $$02$i;$res_len$13$i = $res_len$0$i;$result$14$i = $result$0$i;
        break L62;
       }
       $99 = HEAP8[$pattern$0>>0]|0;
       $100 = ($99<<24>>24)==(42);
       $101 = ((($$02$i$i)) + 1|0);
       if ($100) {
        $$15$i = $$02$i;$res_len$13$i = $res_len$0$i;$result$14$i = $result$0$i;
        break L62;
       } else {
        $$02$i$i = $101;
       }
      }
      $102 = ($$02$i$i$lcssa|0)==(0|0);
      if ($102) {
       $$15$i = $$02$i;$res_len$13$i = $res_len$0$i;$result$14$i = $result$0$i;
       break;
      }
      $103 = $$02$i$i$lcssa;
      $104 = $$02$i;
      $105 = (($103) - ($104))|0;
      $106 = (($105) + ($res_len$0$i))|0;
      $107 = (($106) + ($94))|0;
      $108 = (($107) + 1)|0;
      $109 = (_xrealloc($result$0$i,$108)|0);
      $110 = (($109) + ($res_len$0$i)|0);
      _memcpy(($110|0),($$02$i|0),($105|0))|0;
      $111 = (($109) + ($106)|0);
      (_strcpy($111,$93)|0);
      if ($not$$i) {
       $$15$i = $$lcssa;$res_len$13$i = $107;$result$14$i = $109;
       break;
      } else {
       $$02$i = $$lcssa;$res_len$0$i = $107;$result$0$i = $109;
      }
     }
     $112 = HEAP8[$$15$i>>0]|0;
     $113 = ($112<<24>>24)!=(0);
     $114 = ($result$14$i|0)!=(0|0);
     $or$cond$i = $114 & $113;
     if ($or$cond$i) {
      $115 = (_strlen($$15$i)|0);
      $116 = (($res_len$13$i) + 1)|0;
      $117 = (($116) + ($115))|0;
      $118 = (_xrealloc($result$14$i,$117)|0);
      $119 = (($118) + ($res_len$13$i)|0);
      (_strcpy($119,$$15$i)|0);
      $result$2$i = $118;
     } else {
      $result$2$i = $result$14$i;
     }
     $120 = ($result$2$i|0)==(0|0);
     $val$1$ = $120 ? $val$1 : $result$2$i;
     _free($pattern$0);
     _free($91);
     $p$0 = $89;$to_be_freed$2 = $result$2$i;$val$6 = $val$1$;
     label = 58;
    }
   }
   break;
  }
  case 58:  {
   HEAP32[$vararg_buffer>>2] = $var$0;
   _die_if_script(4113,$vararg_buffer);
   $p$0 = $0;$to_be_freed$2 = 0;$val$6 = 0;
   label = 58;
   break;
  }
  default: {
   $121 = ($val$1|0)==(0|0);
   do {
    if ($121) {
     $use_word$05$18 = ($exp_op$1<<24>>24)==(43);
     if ($use_word$05$18) {
      $p$0 = $0;$to_be_freed$2 = 0;$val$6 = 0;
      label = 58;
      break L31;
     }
    } else {
     $122 = ($exp_save$0<<24>>24)==(58);
     if ($122) {
      $126 = HEAP8[$val$1>>0]|0;
      $127 = ($126<<24>>24)==(0);
      $128 = ($exp_op$1<<24>>24)==(43);
      $use_word$05 = $128 ^ $127;
      if ($use_word$05) {
       break;
      } else {
       $p$0 = $0;$to_be_freed$2 = 0;$val$6 = $val$1;
       label = 58;
       break L31;
      }
     }
     $123 = ($exp_op$1<<24>>24)==(43);
     if (!($123)) {
      $p$0 = $0;$to_be_freed$2 = 0;$val$6 = $val$1;
      label = 58;
      break L31;
     }
     $124 = (_encode_then_expand_string($exp_word$1,1,1)|0);
     $125 = ($124|0)==(0|0);
     $exp_word$1$$20 = $125 ? $exp_word$1 : $124;
     $p$0 = $0;$to_be_freed$2 = $124;$val$6 = $exp_word$1$$20;
     label = 58;
     break L31;
    }
   } while(0);
   $129 = (_encode_then_expand_string($exp_word$1,1,1)|0);
   $130 = ($129|0)==(0|0);
   $exp_word$1$ = $130 ? $exp_word$1 : $129;
   switch ($exp_op$1<<24>>24) {
   case 63:  {
    $131 = HEAP8[$exp_word$1$>>0]|0;
    $132 = ($131<<24>>24)!=(0);
    $133 = $132 ? $exp_word$1$ : 4133;
    HEAP32[$vararg_buffer1>>2] = $var$0;
    $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr4>>2] = $133;
    _die_if_script(6566,$vararg_buffer1);
    $p$0 = $0;$to_be_freed$2 = $129;$val$6 = $val$1;
    label = 58;
    break L31;
    break;
   }
   case 61:  {
    break;
   }
   default: {
    $p$0 = $0;$to_be_freed$2 = $129;$val$6 = $exp_word$1$;
    label = 58;
    break L31;
   }
   }
   $134 = HEAP8[$var$0>>0]|0;
   $135 = $134&255;
   $136 = (($135) + 208)|0;
   $137 = $136 & 254;
   $138 = ($137>>>0)<(10);
   $139 = ($134<<24>>24)==(35);
   $or$cond4 = $139 | $138;
   if ($or$cond4) {
    HEAP32[$vararg_buffer5>>2] = $var$0;
    _die_if_script(4159,$vararg_buffer5);
    $p$0 = $0;$to_be_freed$2 = $129;$val$6 = 0;
    label = 58;
    break L31;
   } else {
    HEAP32[$vararg_buffer8>>2] = $var$0;
    $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
    HEAP32[$vararg_ptr11>>2] = $exp_word$1$;
    $140 = (_xasprintf(3881,$vararg_buffer8)|0);
    _set_local_var($140,0,0,0);
    $p$0 = $0;$to_be_freed$2 = $129;$val$6 = $exp_word$1$;
    label = 58;
    break L31;
   }
  }
  }
 } while(0);
 if ((label|0) == 58) {
  HEAP8[$exp_saveptr$1>>0] = $exp_save$0;
  $p$1 = $p$0;$to_be_freed$3 = $to_be_freed$2;$val$7 = $val$6;
 }
 HEAP8[$arg>>0] = $5;
 HEAP32[$pp>>2] = $p$1;
 HEAP32[$to_be_freed_pp>>2] = $to_be_freed$3;
 STACKTOP = sp;return ($val$7|0);
}
function _encode_then_expand_string($str,$process_bkslash,$do_unbackslash) {
 $str = $str|0;
 $process_bkslash = $process_bkslash|0;
 $do_unbackslash = $do_unbackslash|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dest = 0, $input = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $input = sp + 28|0;
 $dest = sp;
 ;HEAP32[$dest>>2]=0|0;HEAP32[$dest+4>>2]=0|0;HEAP32[$dest+8>>2]=0|0;HEAP32[$dest+12>>2]=0|0;HEAP32[$dest+16>>2]=0|0;HEAP32[$dest+20>>2]=0|0;HEAP32[$dest+24>>2]=0|0;
 $0 = (_strchr($str,36)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = (_strchr($str,92)|0);
  $3 = ($2|0)==(0|0);
  if ($3) {
   $4 = (_strchr($str,96)|0);
   $5 = ($4|0)==(0|0);
   if ($5) {
    $$0 = 0;
   } else {
    label = 4;
   }
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  ;HEAP32[$input>>2]=0|0;HEAP32[$input+4>>2]=0|0;HEAP32[$input+8>>2]=0|0;HEAP32[$input+12>>2]=0|0;HEAP32[$input+16>>2]=0|0;
  $6 = ((($input)) + 24|0);
  HEAP32[$6>>2] = 39;
  $7 = ((($input)) + 20|0);
  HEAP32[$7>>2] = 40;
  HEAP32[$input>>2] = $str;
  (_encode_string(0,$dest,$input,-1,$process_bkslash)|0);
  $8 = HEAP32[$dest>>2]|0;
  $9 = (_expand_string_to_string($8,$do_unbackslash)|0);
  $10 = HEAP32[$dest>>2]|0;
  _free($10);
  $$0 = $9;
 }
 STACKTOP = sp;return ($$0|0);
}
function _die_if_script($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p = sp;
 HEAP32[$p>>2] = $varargs;
 _bb_verror_msg($fmt,$p,0);
 $0 = HEAP32[840>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  _xfunc_die();
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _encode_string($as_string,$dest,$input,$dquote_end,$process_bkslash) {
 $as_string = $as_string|0;
 $dest = $dest|0;
 $input = $input|0;
 $dquote_end = $dquote_end|0;
 $process_bkslash = $process_bkslash|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $7 = 0, $8 = 0, $9 = 0, $ch$0 = 0, $memchr = 0, $msg$i = 0, $or$cond = 0, $or$cond5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $msg$i = sp + 12|0;
 $0 = ((($input)) + 20|0);
 $1 = ($as_string|0)==(0|0);
 $2 = ((($input)) + 24|0);
 $3 = ($process_bkslash|0)!=(0);
 $4 = ((($as_string)) + 4|0);
 $5 = ((($dest)) + 4|0);
 $6 = ($dquote_end|0)==(34);
 $7 = $6&1;
 L1: while(1) {
  $8 = HEAP32[$0>>2]|0;
  $9 = (FUNCTION_TABLE_ii[$8 & 63]($input)|0);
  $10 = ($9|0)==(-1);
  $or$cond5 = $1 | $10;
  if (!($or$cond5)) {
   _o_grow_by($as_string,1);
   $11 = $9&255;
   $12 = HEAP32[$4>>2]|0;
   $13 = HEAP32[$as_string>>2]|0;
   $14 = (($13) + ($12)|0);
   HEAP8[$14>>0] = $11;
   $15 = HEAP32[$4>>2]|0;
   $16 = (($15) + 1)|0;
   HEAP32[$4>>2] = $16;
   $17 = HEAP32[$as_string>>2]|0;
   $18 = (($17) + ($16)|0);
   HEAP8[$18>>0] = 0;
  }
  $19 = ($9|0)==($dquote_end|0);
  if ($19) {
   $$0 = 1;
   break;
  }
  L7: do {
   switch ($9|0) {
   case -1:  {
    label = 6;
    break L1;
    break;
   }
   case 10:  {
    break;
   }
   default: {
    $21 = HEAP32[$2>>2]|0;
    $22 = (FUNCTION_TABLE_ii[$21 & 63]($input)|0);
    $23 = ($9|0)==(92);
    $or$cond = $3 & $23;
    if (!($or$cond)) {
     switch ($9|0) {
     case 36:  {
      $38 = (_parse_dollar($as_string,$dest,$input,-128)|0);
      $39 = ($38|0)==(0);
      if ($39) {
       $$0 = 0;
       break L1;
      } else {
       continue L1;
      }
      break;
     }
     case 96:  {
      break;
     }
     default: {
      break L7;
     }
     }
     _o_grow_by($dest,1);
     $40 = HEAP32[$5>>2]|0;
     $41 = HEAP32[$dest>>2]|0;
     $42 = (($41) + ($40)|0);
     HEAP8[$42>>0] = 3;
     $43 = HEAP32[$5>>2]|0;
     $44 = (($43) + 1)|0;
     HEAP32[$5>>2] = $44;
     $45 = HEAP32[$dest>>2]|0;
     $46 = (($45) + ($44)|0);
     HEAP8[$46>>0] = 0;
     _o_grow_by($dest,1);
     $47 = HEAP32[$5>>2]|0;
     $48 = HEAP32[$dest>>2]|0;
     $49 = (($48) + ($47)|0);
     HEAP8[$49>>0] = -32;
     $50 = HEAP32[$5>>2]|0;
     $51 = (($50) + 1)|0;
     HEAP32[$5>>2] = $51;
     $52 = HEAP32[$dest>>2]|0;
     $53 = (($52) + ($51)|0);
     HEAP8[$53>>0] = 0;
     $54 = (_add_till_backquote($dest,$input,$7)|0);
     $55 = ($54|0)==(0);
     if ($55) {
      $$0 = 0;
      break L1;
     }
     _o_grow_by($dest,1);
     $56 = HEAP32[$5>>2]|0;
     $57 = HEAP32[$dest>>2]|0;
     $58 = (($57) + ($56)|0);
     HEAP8[$58>>0] = 3;
     $59 = HEAP32[$5>>2]|0;
     $60 = (($59) + 1)|0;
     HEAP32[$5>>2] = $60;
     $61 = HEAP32[$dest>>2]|0;
     $62 = (($61) + ($60)|0);
     HEAP8[$62>>0] = 0;
     continue L1;
    }
    $24 = ($22|0)==(-1);
    if ($24) {
     label = 9;
     break L1;
    }
    $25 = ($22|0)==($dquote_end|0);
    if ($25) {
     label = 12;
    } else {
     $memchr = (_memchr(4259,$22,5)|0);
     $26 = ($memchr|0)==(0|0);
     if ($26) {
      $ch$0 = 92;
     } else {
      label = 12;
     }
    }
    if ((label|0) == 12) {
     label = 0;
     $27 = HEAP32[$0>>2]|0;
     $28 = (FUNCTION_TABLE_ii[$27 & 63]($input)|0);
     $29 = ($28|0)==(10);
     if ($29) {
      continue L1;
     } else {
      $ch$0 = $28;
     }
    }
    _o_addqchr($dest,$ch$0);
    if ($1) {
     continue L1;
    }
    _o_grow_by($as_string,1);
    $30 = $ch$0&255;
    $31 = HEAP32[$4>>2]|0;
    $32 = HEAP32[$as_string>>2]|0;
    $33 = (($32) + ($31)|0);
    HEAP8[$33>>0] = $30;
    $34 = HEAP32[$4>>2]|0;
    $35 = (($34) + 1)|0;
    HEAP32[$4>>2] = $35;
    $36 = HEAP32[$as_string>>2]|0;
    $37 = (($36) + ($35)|0);
    HEAP8[$37>>0] = 0;
    continue L1;
   }
   }
  } while(0);
  _o_addQchr($dest,$9);
 }
 if ((label|0) == 6) {
  HEAP8[$msg$i>>0] = 34;
  $20 = ((($msg$i)) + 1|0);
  HEAP8[$20>>0] = 0;
  HEAP32[$vararg_buffer>>2] = $msg$i;
  _bb_error_msg(4205,$vararg_buffer);
  $$0 = 0;
 }
 else if ((label|0) == 9) {
  HEAP32[$vararg_buffer1>>2] = 4252;
  _bb_error_msg(4235,$vararg_buffer1);
  _xfunc_die();
  // unreachable;
 }
 STACKTOP = sp;return ($$0|0);
}
function _expand_string_to_string($str,$do_unbackslash) {
 $str = $str|0;
 $do_unbackslash = $do_unbackslash|0;
 var $$$0$i = 0, $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argv = 0, $dst$0$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $argv = sp + 8|0;
 $0 = (_strchr($str,3)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = (_strchr($str,92)|0);
  $3 = ($2|0)==(0|0);
  if ($3) {
   $4 = (_xstrdup($str)|0);
   $$0 = $4;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 L4: do {
  if ((label|0) == 4) {
   HEAP32[$argv>>2] = $str;
   $5 = ((($argv)) + 4|0);
   HEAP32[$5>>2] = 0;
   $6 = ($do_unbackslash|0)!=(0);
   $7 = $6 ? 129 : 128;
   $8 = (_expand_variables($argv,$7)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = ((($8)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0|0);
    if ($13) {
     _overlapping_strcpy($8,$9);
     if (!($6)) {
      $$0 = $8;
      break;
     }
     $14 = (___strchrnul($8,92)|0);
     $$0$i = $14;$dst$0$i = $14;
     while(1) {
      $15 = HEAP8[$$0$i>>0]|0;
      $16 = ($15<<24>>24)==(92);
      $17 = ((($$0$i)) + 1|0);
      $$$0$i = $16 ? $17 : $$0$i;
      $18 = ((($$$0$i)) + 1|0);
      $19 = HEAP8[$$$0$i>>0]|0;
      $20 = ((($dst$0$i)) + 1|0);
      HEAP8[$dst$0$i>>0] = $19;
      $21 = ($19<<24>>24)==(0);
      if ($21) {
       $$0 = $8;
       break L4;
      } else {
       $$0$i = $18;$dst$0$i = $20;
      }
     }
    }
   }
   _bb_error_msg_and_die(4190,$vararg_buffer);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _o_addqchr($o,$ch) {
 $o = $o|0;
 $ch = $ch|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $memchr = (_memchr(4282,$ch,7)|0);
 $0 = ($memchr|0)!=(0|0);
 $$ = $0 ? 2 : 1;
 _o_grow_by($o,$$);
 $1 = ((($o)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 if ($0) {
  $3 = HEAP32[$o>>2]|0;
  $4 = (($3) + ($2)|0);
  HEAP8[$4>>0] = 92;
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 1)|0;
  HEAP32[$1>>2] = $6;
  $10 = $6;
 } else {
  $10 = $2;
 }
 $7 = $ch&255;
 $8 = HEAP32[$o>>2]|0;
 $9 = (($8) + ($10)|0);
 HEAP8[$9>>0] = $7;
 $11 = HEAP32[$1>>2]|0;
 $12 = (($11) + 1)|0;
 HEAP32[$1>>2] = $12;
 $13 = HEAP32[$o>>2]|0;
 $14 = (($13) + ($12)|0);
 HEAP8[$14>>0] = 0;
 return;
}
function _parse_dollar($as_string,$dest,$input,$quote_mask) {
 $as_string = $as_string|0;
 $dest = $dest|0;
 $input = $input|0;
 $quote_mask = $quote_mask|0;
 var $$ = 0, $$04 = 0, $$4 = 0, $$lcssa54 = 0, $$pre = 0, $$pre$phi37Z2D = 0, $$pre$phi39Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ch$0 = 0, $ch$1 = 0;
 var $ch$2 = 0, $ch$4 = 0, $end_ch$1 = 0, $end_ch$2 = 0, $end_ch$2$lcssa53 = 0, $memchr = 0, $memchr8 = 0, $memchr9 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($input)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (FUNCTION_TABLE_ii[$1 & 63]($input)|0);
 $3 = $2 | 32;
 $4 = (($3) + 159)|0;
 $5 = $4 & 254;
 $6 = ($5>>>0)<(26);
 L1: do {
  if ($6) {
   $7 = ((($input)) + 20|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (FUNCTION_TABLE_ii[$8 & 63]($input)|0);
   $10 = ($as_string|0)==(0|0);
   if ($10) {
    $$pre$phiZ2D = $7;$ch$0 = $9;
    label = 4;
   } else {
    _o_grow_by($as_string,1);
    $11 = $9&255;
    $12 = ((($as_string)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = HEAP32[$as_string>>2]|0;
    $15 = (($14) + ($13)|0);
    HEAP8[$15>>0] = $11;
    $16 = HEAP32[$12>>2]|0;
    $17 = (($16) + 1)|0;
    HEAP32[$12>>2] = $17;
    $18 = HEAP32[$as_string>>2]|0;
    $19 = (($18) + ($17)|0);
    HEAP8[$19>>0] = 0;
    $$pre$phiZ2D = $7;$ch$0 = $9;
    label = 4;
   }
  } else {
   $67 = (($2) + 208)|0;
   $68 = $67 & 254;
   $69 = ($68>>>0)<(10);
   L5: do {
    if (!($69)) {
     switch ($2|0) {
     case 64: case 42: case 35: case 63: case 33: case 36:  {
      break L5;
      break;
     }
     case 123:  {
      _o_grow_by($dest,1);
      $108 = ((($dest)) + 4|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = HEAP32[$dest>>2]|0;
      $111 = (($110) + ($109)|0);
      HEAP8[$111>>0] = 3;
      $112 = HEAP32[$108>>2]|0;
      $113 = (($112) + 1)|0;
      HEAP32[$108>>2] = $113;
      $114 = HEAP32[$dest>>2]|0;
      $115 = (($114) + ($113)|0);
      HEAP8[$115>>0] = 0;
      $116 = ((($input)) + 20|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = (FUNCTION_TABLE_ii[$117 & 63]($input)|0);
      $119 = ($as_string|0)==(0|0);
      if (!($119)) {
       _o_grow_by($as_string,1);
       $120 = $118&255;
       $121 = ((($as_string)) + 4|0);
       $122 = HEAP32[$121>>2]|0;
       $123 = HEAP32[$as_string>>2]|0;
       $124 = (($123) + ($122)|0);
       HEAP8[$124>>0] = $120;
       $125 = HEAP32[$121>>2]|0;
       $126 = (($125) + 1)|0;
       HEAP32[$121>>2] = $126;
       $127 = HEAP32[$as_string>>2]|0;
       $128 = (($127) + ($126)|0);
       HEAP8[$128>>0] = 0;
      }
      $129 = HEAP32[$116>>2]|0;
      $130 = (FUNCTION_TABLE_ii[$129 & 63]($input)|0);
      $131 = ($130|0)==(-1);
      L12: do {
       if (!($131)) {
        $memchr = (_memchr(4105,$130,8)|0);
        $132 = ($memchr|0)==(0|0);
        if ($132) {
         $133 = (($130) + 208)|0;
         $134 = $133 & 254;
         $135 = ($134>>>0)<(10);
         if (!($135)) {
          $136 = $130 | 32;
          $137 = (($136) + 159)|0;
          $138 = $137 & 254;
          $139 = ($138>>>0)<(26);
          if (!($139)) {
           break;
          }
         }
        }
        if ($119) {
         $$pre = ((($as_string)) + 4|0);
         $$pre$phi37Z2D = $$pre;$$pre$phi39Z2D = $as_string;
        } else {
         _o_grow_by($as_string,1);
         $140 = $130&255;
         $141 = ((($as_string)) + 4|0);
         $142 = HEAP32[$141>>2]|0;
         $143 = HEAP32[$as_string>>2]|0;
         $144 = (($143) + ($142)|0);
         HEAP8[$144>>0] = $140;
         $145 = HEAP32[$141>>2]|0;
         $146 = (($145) + 1)|0;
         HEAP32[$141>>2] = $146;
         $147 = HEAP32[$as_string>>2]|0;
         $148 = (($147) + ($146)|0);
         HEAP8[$148>>0] = 0;
         $$pre$phi37Z2D = $141;$$pre$phi39Z2D = $as_string;
        }
        $149 = $quote_mask&255;
        $150 = $130 | $149;
        $ch$2 = $150;
        while(1) {
         _o_grow_by($dest,1);
         $151 = $ch$2&255;
         $152 = HEAP32[$108>>2]|0;
         $153 = HEAP32[$dest>>2]|0;
         $154 = (($153) + ($152)|0);
         HEAP8[$154>>0] = $151;
         $155 = HEAP32[$108>>2]|0;
         $156 = (($155) + 1)|0;
         HEAP32[$108>>2] = $156;
         $157 = HEAP32[$dest>>2]|0;
         $158 = (($157) + ($156)|0);
         HEAP8[$158>>0] = 0;
         $159 = HEAP32[$116>>2]|0;
         $160 = (FUNCTION_TABLE_ii[$159 & 63]($input)|0);
         if (!($119)) {
          _o_grow_by($as_string,1);
          $161 = $160&255;
          $162 = HEAP32[$$pre$phi37Z2D>>2]|0;
          $163 = HEAP32[$$pre$phi39Z2D>>2]|0;
          $164 = (($163) + ($162)|0);
          HEAP8[$164>>0] = $161;
          $165 = HEAP32[$$pre$phi37Z2D>>2]|0;
          $166 = (($165) + 1)|0;
          HEAP32[$$pre$phi37Z2D>>2] = $166;
          $167 = HEAP32[$$pre$phi39Z2D>>2]|0;
          $168 = (($167) + ($166)|0);
          HEAP8[$168>>0] = 0;
         }
         $169 = ($160|0)==(125);
         if ($169) {
          break;
         }
         $170 = (($160) + 208)|0;
         $171 = $170 & 254;
         $172 = ($171>>>0)<(10);
         if ($172) {
          $ch$2 = $160;
          continue;
         }
         $173 = $160 | 32;
         $174 = (($173) + 159)|0;
         $175 = $174 & 254;
         $176 = ($175>>>0)>(25);
         $177 = ($160|0)!=(95);
         $or$cond3 = $177 & $176;
         if ($or$cond3) {
          $$lcssa54 = $160;
          label = 31;
          break;
         } else {
          $ch$2 = $160;
         }
        }
        L29: do {
         if ((label|0) == 31) {
          $memchr8 = (_memchr((4096),$$lcssa54,9)|0);
          $178 = ($memchr8|0)==(0|0);
          if ($178) {
           break L12;
          }
          switch ($$lcssa54|0) {
          case 58:  {
           $179 = HEAP32[$0>>2]|0;
           $180 = (FUNCTION_TABLE_ii[$179 & 63]($input)|0);
           $memchr9 = (_memchr((4100),$180,5)|0);
           $181 = ($memchr9|0)==(0|0);
           $$ = $181 ? 32058 : 125;
           $ch$4 = 58;$end_ch$1 = $$;
           break;
          }
          case 47:  {
           $182 = HEAP32[$0>>2]|0;
           $183 = (FUNCTION_TABLE_ii[$182 & 63]($input)|0);
           $184 = ($183|0)==(47);
           if ($184) {
            $185 = HEAP32[$116>>2]|0;
            (FUNCTION_TABLE_ii[$185 & 63]($input)|0);
            if ($119) {
             $ch$4 = 92;$end_ch$1 = 32047;
            } else {
             _o_grow_by($as_string,1);
             $186 = HEAP32[$$pre$phi37Z2D>>2]|0;
             $187 = HEAP32[$$pre$phi39Z2D>>2]|0;
             $188 = (($187) + ($186)|0);
             HEAP8[$188>>0] = 47;
             $189 = HEAP32[$$pre$phi37Z2D>>2]|0;
             $190 = (($189) + 1)|0;
             HEAP32[$$pre$phi37Z2D>>2] = $190;
             $191 = HEAP32[$$pre$phi39Z2D>>2]|0;
             $192 = (($191) + ($190)|0);
             HEAP8[$192>>0] = 0;
             $ch$4 = 92;$end_ch$1 = 32047;
            }
           } else {
            $ch$4 = 47;$end_ch$1 = 32047;
           }
           break;
          }
          default: {
           $ch$4 = $$lcssa54;$end_ch$1 = 125;
          }
          }
          _o_grow_by($dest,1);
          $193 = $ch$4&255;
          $194 = HEAP32[$108>>2]|0;
          $195 = HEAP32[$dest>>2]|0;
          $196 = (($195) + ($194)|0);
          HEAP8[$196>>0] = $193;
          $197 = HEAP32[$108>>2]|0;
          $198 = (($197) + 1)|0;
          HEAP32[$108>>2] = $198;
          $199 = HEAP32[$dest>>2]|0;
          $200 = (($199) + ($198)|0);
          HEAP8[$200>>0] = 0;
          $end_ch$2 = $end_ch$1;
          while(1) {
           $201 = HEAP32[$108>>2]|0;
           $202 = (_add_till_closing_bracket($dest,$input,$end_ch$2)|0);
           $203 = $202 & 255;
           $204 = ($203|0)==(0);
           if ($204) {
            $$4 = 0;
            break L1;
           }
           if (!($119)) {
            $205 = HEAP32[$dest>>2]|0;
            $206 = (($205) + ($201)|0);
            $207 = (_strlen($206)|0);
            _o_grow_by($as_string,$207);
            $208 = HEAP32[$$pre$phi37Z2D>>2]|0;
            $209 = HEAP32[$$pre$phi39Z2D>>2]|0;
            $210 = (($209) + ($208)|0);
            _memcpy(($210|0),($206|0),($207|0))|0;
            $211 = HEAP32[$$pre$phi37Z2D>>2]|0;
            $212 = (($211) + ($207))|0;
            HEAP32[$$pre$phi37Z2D>>2] = $212;
            $213 = HEAP32[$$pre$phi39Z2D>>2]|0;
            $214 = (($213) + ($212)|0);
            HEAP8[$214>>0] = 0;
            _o_grow_by($as_string,1);
            $215 = $202&255;
            $216 = HEAP32[$$pre$phi37Z2D>>2]|0;
            $217 = HEAP32[$$pre$phi39Z2D>>2]|0;
            $218 = (($217) + ($216)|0);
            HEAP8[$218>>0] = $215;
            $219 = HEAP32[$$pre$phi37Z2D>>2]|0;
            $220 = (($219) + 1)|0;
            HEAP32[$$pre$phi37Z2D>>2] = $220;
            $221 = HEAP32[$$pre$phi39Z2D>>2]|0;
            $222 = (($221) + ($220)|0);
            HEAP8[$222>>0] = 0;
           }
           $223 = $end_ch$2 & 65280;
           $224 = ($223|0)==(0);
           if ($224) {
            break L29;
           }
           _o_grow_by($dest,1);
           $225 = HEAP32[$108>>2]|0;
           $226 = HEAP32[$dest>>2]|0;
           $227 = (($226) + ($225)|0);
           HEAP8[$227>>0] = 3;
           $228 = HEAP32[$108>>2]|0;
           $229 = (($228) + 1)|0;
           HEAP32[$108>>2] = $229;
           $230 = HEAP32[$dest>>2]|0;
           $231 = (($230) + ($229)|0);
           HEAP8[$231>>0] = 0;
           $232 = $end_ch$2 & 255;
           $233 = ($232|0)==($203|0);
           if ($233) {
            $end_ch$2 = 125;
           } else {
            $end_ch$2$lcssa53 = $end_ch$2;
            break;
           }
          }
          $234 = ($end_ch$2$lcssa53|0)==(32058);
          if ($234) {
           _o_grow_by($dest,9);
           $235 = HEAP32[$108>>2]|0;
           $236 = HEAP32[$dest>>2]|0;
           $237 = (($236) + ($235)|0);
           dest=$237; src=4272; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
           $238 = HEAP32[$108>>2]|0;
           $239 = (($238) + 9)|0;
           HEAP32[$108>>2] = $239;
           $240 = HEAP32[$dest>>2]|0;
           $241 = (($240) + ($239)|0);
           HEAP8[$241>>0] = 0;
          }
         }
        } while(0);
        _o_grow_by($dest,1);
        $242 = HEAP32[$108>>2]|0;
        $243 = HEAP32[$dest>>2]|0;
        $244 = (($243) + ($242)|0);
        HEAP8[$244>>0] = 3;
        $245 = HEAP32[$108>>2]|0;
        $246 = (($245) + 1)|0;
        HEAP32[$108>>2] = $246;
        $247 = HEAP32[$dest>>2]|0;
        $248 = (($247) + ($246)|0);
        HEAP8[$248>>0] = 0;
        $$4 = 1;
        break L1;
       }
      } while(0);
      HEAP32[$vararg_buffer>>2] = 4264;
      _bb_error_msg(4205,$vararg_buffer);
      $$4 = 0;
      break L1;
      break;
     }
     case 40:  {
      $249 = ((($input)) + 20|0);
      $250 = HEAP32[$249>>2]|0;
      $251 = (FUNCTION_TABLE_ii[$250 & 63]($input)|0);
      $252 = ($as_string|0)==(0|0);
      if (!($252)) {
       _o_grow_by($as_string,1);
       $253 = $251&255;
       $254 = ((($as_string)) + 4|0);
       $255 = HEAP32[$254>>2]|0;
       $256 = HEAP32[$as_string>>2]|0;
       $257 = (($256) + ($255)|0);
       HEAP8[$257>>0] = $253;
       $258 = HEAP32[$254>>2]|0;
       $259 = (($258) + 1)|0;
       HEAP32[$254>>2] = $259;
       $260 = HEAP32[$as_string>>2]|0;
       $261 = (($260) + ($259)|0);
       HEAP8[$261>>0] = 0;
      }
      _o_grow_by($dest,1);
      $262 = ((($dest)) + 4|0);
      $263 = HEAP32[$262>>2]|0;
      $264 = HEAP32[$dest>>2]|0;
      $265 = (($264) + ($263)|0);
      HEAP8[$265>>0] = 3;
      $266 = HEAP32[$262>>2]|0;
      $267 = (($266) + 1)|0;
      HEAP32[$262>>2] = $267;
      $268 = HEAP32[$dest>>2]|0;
      $269 = (($268) + ($267)|0);
      HEAP8[$269>>0] = 0;
      $270 = $quote_mask&255;
      $271 = $270 | 96;
      _o_grow_by($dest,1);
      $272 = $271&255;
      $273 = HEAP32[$262>>2]|0;
      $274 = HEAP32[$dest>>2]|0;
      $275 = (($274) + ($273)|0);
      HEAP8[$275>>0] = $272;
      $276 = HEAP32[$262>>2]|0;
      $277 = (($276) + 1)|0;
      HEAP32[$262>>2] = $277;
      $278 = HEAP32[$dest>>2]|0;
      $279 = (($278) + ($277)|0);
      HEAP8[$279>>0] = 0;
      $280 = HEAP32[$262>>2]|0;
      $281 = (_add_till_closing_bracket($dest,$input,41)|0);
      $282 = ($281|0)==(0);
      if ($282) {
       $$4 = 0;
       break L1;
      }
      if (!($252)) {
       $283 = HEAP32[$dest>>2]|0;
       $284 = (($283) + ($280)|0);
       $285 = (_strlen($284)|0);
       _o_grow_by($as_string,$285);
       $286 = ((($as_string)) + 4|0);
       $287 = HEAP32[$286>>2]|0;
       $288 = HEAP32[$as_string>>2]|0;
       $289 = (($288) + ($287)|0);
       _memcpy(($289|0),($284|0),($285|0))|0;
       $290 = HEAP32[$286>>2]|0;
       $291 = (($290) + ($285))|0;
       HEAP32[$286>>2] = $291;
       $292 = HEAP32[$as_string>>2]|0;
       $293 = (($292) + ($291)|0);
       HEAP8[$293>>0] = 0;
       _o_grow_by($as_string,1);
       $294 = HEAP32[$286>>2]|0;
       $295 = HEAP32[$as_string>>2]|0;
       $296 = (($295) + ($294)|0);
       HEAP8[$296>>0] = 41;
       $297 = HEAP32[$286>>2]|0;
       $298 = (($297) + 1)|0;
       HEAP32[$286>>2] = $298;
       $299 = HEAP32[$as_string>>2]|0;
       $300 = (($299) + ($298)|0);
       HEAP8[$300>>0] = 0;
      }
      _o_grow_by($dest,1);
      $301 = HEAP32[$262>>2]|0;
      $302 = HEAP32[$dest>>2]|0;
      $303 = (($302) + ($301)|0);
      HEAP8[$303>>0] = 3;
      $304 = HEAP32[$262>>2]|0;
      $305 = (($304) + 1)|0;
      HEAP32[$262>>2] = $305;
      $306 = HEAP32[$dest>>2]|0;
      $307 = (($306) + ($305)|0);
      HEAP8[$307>>0] = 0;
      $$4 = 1;
      break L1;
      break;
     }
     case 95:  {
      $308 = ((($input)) + 20|0);
      $309 = HEAP32[$308>>2]|0;
      $310 = (FUNCTION_TABLE_ii[$309 & 63]($input)|0);
      $311 = ($as_string|0)==(0|0);
      if (!($311)) {
       _o_grow_by($as_string,1);
       $312 = $310&255;
       $313 = ((($as_string)) + 4|0);
       $314 = HEAP32[$313>>2]|0;
       $315 = HEAP32[$as_string>>2]|0;
       $316 = (($315) + ($314)|0);
       HEAP8[$316>>0] = $312;
       $317 = HEAP32[$313>>2]|0;
       $318 = (($317) + 1)|0;
       HEAP32[$313>>2] = $318;
       $319 = HEAP32[$as_string>>2]|0;
       $320 = (($319) + ($318)|0);
       HEAP8[$320>>0] = 0;
      }
      $321 = HEAP32[$0>>2]|0;
      $322 = (FUNCTION_TABLE_ii[$321 & 63]($input)|0);
      $323 = (($322) + 208)|0;
      $324 = $323 & 254;
      $325 = ($324>>>0)<(10);
      if ($325) {
       $$pre$phiZ2D = $308;$ch$0 = 95;
       label = 4;
       break L1;
      }
      $326 = $322 | 32;
      $327 = (($326) + 159)|0;
      $328 = $327 & 254;
      $329 = ($328>>>0)<(26);
      if ($329) {
       $$pre$phiZ2D = $308;$ch$0 = 95;
       label = 4;
       break L1;
      }
      break;
     }
     default: {
     }
     }
     _o_addQchr($dest,36);
     $$4 = 1;
     break L1;
    }
   } while(0);
   $70 = ((($input)) + 20|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (FUNCTION_TABLE_ii[$71 & 63]($input)|0);
   $73 = ($as_string|0)==(0|0);
   if (!($73)) {
    _o_grow_by($as_string,1);
    $74 = $72&255;
    $75 = ((($as_string)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = HEAP32[$as_string>>2]|0;
    $78 = (($77) + ($76)|0);
    HEAP8[$78>>0] = $74;
    $79 = HEAP32[$75>>2]|0;
    $80 = (($79) + 1)|0;
    HEAP32[$75>>2] = $80;
    $81 = HEAP32[$as_string>>2]|0;
    $82 = (($81) + ($80)|0);
    HEAP8[$82>>0] = 0;
   }
   _o_grow_by($dest,1);
   $83 = ((($dest)) + 4|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = HEAP32[$dest>>2]|0;
   $86 = (($85) + ($84)|0);
   HEAP8[$86>>0] = 3;
   $87 = HEAP32[$83>>2]|0;
   $88 = (($87) + 1)|0;
   HEAP32[$83>>2] = $88;
   $89 = HEAP32[$dest>>2]|0;
   $90 = (($89) + ($88)|0);
   HEAP8[$90>>0] = 0;
   $91 = $quote_mask&255;
   $92 = $72 | $91;
   _o_grow_by($dest,1);
   $93 = $92&255;
   $94 = HEAP32[$83>>2]|0;
   $95 = HEAP32[$dest>>2]|0;
   $96 = (($95) + ($94)|0);
   HEAP8[$96>>0] = $93;
   $97 = HEAP32[$83>>2]|0;
   $98 = (($97) + 1)|0;
   HEAP32[$83>>2] = $98;
   $99 = HEAP32[$dest>>2]|0;
   $100 = (($99) + ($98)|0);
   HEAP8[$100>>0] = 0;
   _o_grow_by($dest,1);
   $101 = HEAP32[$83>>2]|0;
   $102 = HEAP32[$dest>>2]|0;
   $103 = (($102) + ($101)|0);
   HEAP8[$103>>0] = 3;
   $104 = HEAP32[$83>>2]|0;
   $105 = (($104) + 1)|0;
   HEAP32[$83>>2] = $105;
   $106 = HEAP32[$dest>>2]|0;
   $107 = (($106) + ($105)|0);
   HEAP8[$107>>0] = 0;
   $$4 = 1;
  }
 } while(0);
 if ((label|0) == 4) {
  _o_grow_by($dest,1);
  $20 = ((($dest)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$dest>>2]|0;
  $23 = (($22) + ($21)|0);
  HEAP8[$23>>0] = 3;
  $24 = HEAP32[$20>>2]|0;
  $25 = (($24) + 1)|0;
  HEAP32[$20>>2] = $25;
  $26 = HEAP32[$dest>>2]|0;
  $27 = (($26) + ($25)|0);
  HEAP8[$27>>0] = 0;
  $28 = ($as_string|0)==(0|0);
  $29 = ((($as_string)) + 4|0);
  $$04 = $quote_mask;$ch$1 = $ch$0;
  while(1) {
   $30 = $$04&255;
   $31 = $30 | $ch$1;
   _o_grow_by($dest,1);
   $32 = $31&255;
   $33 = HEAP32[$20>>2]|0;
   $34 = HEAP32[$dest>>2]|0;
   $35 = (($34) + ($33)|0);
   HEAP8[$35>>0] = $32;
   $36 = HEAP32[$20>>2]|0;
   $37 = (($36) + 1)|0;
   HEAP32[$20>>2] = $37;
   $38 = HEAP32[$dest>>2]|0;
   $39 = (($38) + ($37)|0);
   HEAP8[$39>>0] = 0;
   $40 = HEAP32[$0>>2]|0;
   $41 = (FUNCTION_TABLE_ii[$40 & 63]($input)|0);
   $42 = (($41) + 208)|0;
   $43 = $42 & 254;
   $44 = ($43>>>0)<(10);
   if (!($44)) {
    $45 = $41 | 32;
    $46 = (($45) + 159)|0;
    $47 = $46 & 254;
    $48 = ($47>>>0)>(25);
    $49 = ($41|0)!=(95);
    $or$cond = $49 & $48;
    if ($or$cond) {
     break;
    }
   }
   $50 = HEAP32[$$pre$phiZ2D>>2]|0;
   $51 = (FUNCTION_TABLE_ii[$50 & 63]($input)|0);
   if ($28) {
    $$04 = 0;$ch$1 = $51;
    continue;
   }
   _o_grow_by($as_string,1);
   $52 = $51&255;
   $53 = HEAP32[$29>>2]|0;
   $54 = HEAP32[$as_string>>2]|0;
   $55 = (($54) + ($53)|0);
   HEAP8[$55>>0] = $52;
   $56 = HEAP32[$29>>2]|0;
   $57 = (($56) + 1)|0;
   HEAP32[$29>>2] = $57;
   $58 = HEAP32[$as_string>>2]|0;
   $59 = (($58) + ($57)|0);
   HEAP8[$59>>0] = 0;
   $$04 = 0;$ch$1 = $51;
  }
  _o_grow_by($dest,1);
  $60 = HEAP32[$20>>2]|0;
  $61 = HEAP32[$dest>>2]|0;
  $62 = (($61) + ($60)|0);
  HEAP8[$62>>0] = 3;
  $63 = HEAP32[$20>>2]|0;
  $64 = (($63) + 1)|0;
  HEAP32[$20>>2] = $64;
  $65 = HEAP32[$dest>>2]|0;
  $66 = (($65) + ($64)|0);
  HEAP8[$66>>0] = 0;
  $$4 = 1;
 }
 STACKTOP = sp;return ($$4|0);
}
function _add_till_backquote($dest,$input,$in_dquote) {
 $dest = $dest|0;
 $input = $input|0;
 $in_dquote = $in_dquote|0;
 var $$1$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ch$0 = 0, $ch$07 = 0, $msg$i = 0, $or$cond5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $msg$i = sp + 4|0;
 $0 = ((($input)) + 20|0);
 $1 = ((($dest)) + 4|0);
 $2 = ($in_dquote|0)==(0);
 L1: while(1) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (FUNCTION_TABLE_ii[$3 & 63]($input)|0);
  L3: do {
   switch ($4|0) {
   case 96:  {
    $$1$ph = 1;
    break L1;
    break;
   }
   case 92:  {
    $5 = HEAP32[$0>>2]|0;
    $6 = (FUNCTION_TABLE_ii[$5 & 63]($input)|0);
    switch ($6|0) {
    case 36: case 92: case 96:  {
     $ch$07 = $6;
     break L3;
     break;
    }
    default: {
    }
    }
    $7 = ($6|0)!=(34);
    $or$cond5 = $2 | $7;
    if ($or$cond5) {
     _o_grow_by($dest,1);
     $8 = HEAP32[$1>>2]|0;
     $9 = HEAP32[$dest>>2]|0;
     $10 = (($9) + ($8)|0);
     HEAP8[$10>>0] = 92;
     $11 = HEAP32[$1>>2]|0;
     $12 = (($11) + 1)|0;
     HEAP32[$1>>2] = $12;
     $13 = HEAP32[$dest>>2]|0;
     $14 = (($13) + ($12)|0);
     HEAP8[$14>>0] = 0;
     $ch$0 = $6;
     label = 6;
    } else {
     $ch$07 = 34;
    }
    break;
   }
   default: {
    $ch$0 = $4;
    label = 6;
   }
   }
  } while(0);
  if ((label|0) == 6) {
   label = 0;
   $15 = ($ch$0|0)==(-1);
   if ($15) {
    label = 7;
    break;
   } else {
    $ch$07 = $ch$0;
   }
  }
  _o_grow_by($dest,1);
  $17 = $ch$07&255;
  $18 = HEAP32[$1>>2]|0;
  $19 = HEAP32[$dest>>2]|0;
  $20 = (($19) + ($18)|0);
  HEAP8[$20>>0] = $17;
  $21 = HEAP32[$1>>2]|0;
  $22 = (($21) + 1)|0;
  HEAP32[$1>>2] = $22;
  $23 = HEAP32[$dest>>2]|0;
  $24 = (($23) + ($22)|0);
  HEAP8[$24>>0] = 0;
 }
 if ((label|0) == 7) {
  HEAP8[$msg$i>>0] = 96;
  $16 = ((($msg$i)) + 1|0);
  HEAP8[$16>>0] = 0;
  HEAP32[$vararg_buffer>>2] = $msg$i;
  _bb_error_msg(4205,$vararg_buffer);
  $$1$ph = 0;
 }
 STACKTOP = sp;return ($$1$ph|0);
}
function _add_till_closing_bracket($dest,$input,$end_ch) {
 $dest = $dest|0;
 $input = $input|0;
 $end_ch = $end_ch|0;
 var $$0 = 0, $$lcssa46 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $ch$0$i = 0, $msg$i = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $msg$i = sp + 28|0;
 $0 = $end_ch & 127;
 $1 = ((($input)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 63]($input)|0);
 $4 = ($3|0)==(-1);
 L1: do {
  if ($4) {
   label = 3;
  } else {
   $5 = $end_ch & 128;
   $6 = ($5|0)==(0);
   $7 = ((($input)) + 24|0);
   $8 = ((($dest)) + 4|0);
   $9 = $end_ch << 16;
   $10 = $9 >> 24;
   $13 = $3;
   L3: while(1) {
    $14 = ($13|0)==($0|0);
    $15 = ($13|0)==($10|0);
    $or$cond = $14 | $15;
    if ($or$cond) {
     if ($6) {
      $$0 = $13;
      break L1;
     }
     $16 = HEAP32[$7>>2]|0;
     $17 = (FUNCTION_TABLE_ii[$16 & 63]($input)|0);
     $18 = ($17|0)==($0|0);
     if ($18) {
      $$lcssa46 = $13;
      label = 7;
      break;
     }
    }
    _o_grow_by($dest,1);
    $20 = $13&255;
    $21 = HEAP32[$8>>2]|0;
    $22 = HEAP32[$dest>>2]|0;
    $23 = (($22) + ($21)|0);
    HEAP8[$23>>0] = $20;
    $24 = HEAP32[$8>>2]|0;
    $25 = (($24) + 1)|0;
    HEAP32[$8>>2] = $25;
    $26 = HEAP32[$dest>>2]|0;
    $27 = (($26) + ($25)|0);
    HEAP8[$27>>0] = 0;
    $28 = ($13|0)==(40);
    switch ($13|0) {
    case 40: case 123:  {
     $29 = $28 ? 41 : 125;
     $30 = (_add_till_closing_bracket($dest,$input,$29)|0);
     $31 = ($30|0)==(0);
     if ($31) {
      $$0 = 0;
      break L1;
     }
     _o_grow_by($dest,1);
     $32 = $29&255;
     $33 = HEAP32[$8>>2]|0;
     $34 = HEAP32[$dest>>2]|0;
     $35 = (($34) + ($33)|0);
     HEAP8[$35>>0] = $32;
     $36 = HEAP32[$8>>2]|0;
     $37 = (($36) + 1)|0;
     HEAP32[$8>>2] = $37;
     $38 = HEAP32[$dest>>2]|0;
     $39 = (($38) + ($37)|0);
     HEAP8[$39>>0] = 0;
     break;
    }
    case 39:  {
     L12: while(1) {
      $40 = HEAP32[$1>>2]|0;
      $41 = (FUNCTION_TABLE_ii[$40 & 63]($input)|0);
      switch ($41|0) {
      case -1:  {
       label = 12;
       break L3;
       break;
      }
      case 39:  {
       break L12;
       break;
      }
      default: {
      }
      }
      _o_grow_by($dest,1);
      $43 = $41&255;
      $44 = HEAP32[$8>>2]|0;
      $45 = HEAP32[$dest>>2]|0;
      $46 = (($45) + ($44)|0);
      HEAP8[$46>>0] = $43;
      $47 = HEAP32[$8>>2]|0;
      $48 = (($47) + 1)|0;
      HEAP32[$8>>2] = $48;
      $49 = HEAP32[$dest>>2]|0;
      $50 = (($49) + ($48)|0);
      HEAP8[$50>>0] = 0;
     }
     _o_grow_by($dest,1);
     $51 = HEAP32[$8>>2]|0;
     $52 = HEAP32[$dest>>2]|0;
     $53 = (($52) + ($51)|0);
     HEAP8[$53>>0] = $20;
     $54 = HEAP32[$8>>2]|0;
     $55 = (($54) + 1)|0;
     HEAP32[$8>>2] = $55;
     $56 = HEAP32[$dest>>2]|0;
     $57 = (($56) + ($55)|0);
     HEAP8[$57>>0] = 0;
     break;
    }
    case 34:  {
     L16: while(1) {
      $58 = HEAP32[$1>>2]|0;
      $59 = (FUNCTION_TABLE_ii[$58 & 63]($input)|0);
      switch ($59|0) {
      case -1:  {
       label = 16;
       break L3;
       break;
      }
      case 34:  {
       break L16;
       break;
      }
      case 92:  {
       _o_grow_by($dest,1);
       $61 = HEAP32[$8>>2]|0;
       $62 = HEAP32[$dest>>2]|0;
       $63 = (($62) + ($61)|0);
       HEAP8[$63>>0] = 92;
       $64 = HEAP32[$8>>2]|0;
       $65 = (($64) + 1)|0;
       HEAP32[$8>>2] = $65;
       $66 = HEAP32[$dest>>2]|0;
       $67 = (($66) + ($65)|0);
       HEAP8[$67>>0] = 0;
       $68 = HEAP32[$1>>2]|0;
       $69 = (FUNCTION_TABLE_ii[$68 & 63]($input)|0);
       $ch$0$i = $69;
       break;
      }
      default: {
       $ch$0$i = $59;
      }
      }
      _o_grow_by($dest,1);
      $70 = $ch$0$i&255;
      $71 = HEAP32[$8>>2]|0;
      $72 = HEAP32[$dest>>2]|0;
      $73 = (($72) + ($71)|0);
      HEAP8[$73>>0] = $70;
      $74 = HEAP32[$8>>2]|0;
      $75 = (($74) + 1)|0;
      HEAP32[$8>>2] = $75;
      $76 = HEAP32[$dest>>2]|0;
      $77 = (($76) + ($75)|0);
      HEAP8[$77>>0] = 0;
      $78 = ($ch$0$i|0)==(96);
      if (!($78)) {
       continue;
      }
      $79 = (_add_till_backquote($dest,$input,1)|0);
      $80 = ($79|0)==(0);
      if ($80) {
       $$0 = 0;
       break L1;
      }
      _o_grow_by($dest,1);
      $81 = HEAP32[$8>>2]|0;
      $82 = HEAP32[$dest>>2]|0;
      $83 = (($82) + ($81)|0);
      HEAP8[$83>>0] = $70;
      $84 = HEAP32[$8>>2]|0;
      $85 = (($84) + 1)|0;
      HEAP32[$8>>2] = $85;
      $86 = HEAP32[$dest>>2]|0;
      $87 = (($86) + ($85)|0);
      HEAP8[$87>>0] = 0;
     }
     _o_grow_by($dest,1);
     $88 = HEAP32[$8>>2]|0;
     $89 = HEAP32[$dest>>2]|0;
     $90 = (($89) + ($88)|0);
     HEAP8[$90>>0] = $20;
     $91 = HEAP32[$8>>2]|0;
     $92 = (($91) + 1)|0;
     HEAP32[$8>>2] = $92;
     $93 = HEAP32[$dest>>2]|0;
     $94 = (($93) + ($92)|0);
     HEAP8[$94>>0] = 0;
     break;
    }
    case 96:  {
     $95 = (_add_till_backquote($dest,$input,0)|0);
     $96 = ($95|0)==(0);
     if ($96) {
      $$0 = 0;
      break L1;
     }
     _o_grow_by($dest,1);
     $97 = HEAP32[$8>>2]|0;
     $98 = HEAP32[$dest>>2]|0;
     $99 = (($98) + ($97)|0);
     HEAP8[$99>>0] = $20;
     $100 = HEAP32[$8>>2]|0;
     $101 = (($100) + 1)|0;
     HEAP32[$8>>2] = $101;
     $102 = HEAP32[$dest>>2]|0;
     $103 = (($102) + ($101)|0);
     HEAP8[$103>>0] = 0;
     break;
    }
    case 92:  {
     $104 = HEAP32[$1>>2]|0;
     $105 = (FUNCTION_TABLE_ii[$104 & 63]($input)|0);
     $106 = ($105|0)==(-1);
     if ($106) {
      label = 25;
      break L3;
     }
     _o_grow_by($dest,1);
     $108 = $105&255;
     $109 = HEAP32[$8>>2]|0;
     $110 = HEAP32[$dest>>2]|0;
     $111 = (($110) + ($109)|0);
     HEAP8[$111>>0] = $108;
     $112 = HEAP32[$8>>2]|0;
     $113 = (($112) + 1)|0;
     HEAP32[$8>>2] = $113;
     $114 = HEAP32[$dest>>2]|0;
     $115 = (($114) + ($113)|0);
     HEAP8[$115>>0] = 0;
     break;
    }
    default: {
    }
    }
    $116 = HEAP32[$1>>2]|0;
    $117 = (FUNCTION_TABLE_ii[$116 & 63]($input)|0);
    $118 = ($117|0)==(-1);
    if ($118) {
     label = 3;
     break L1;
    } else {
     $13 = $117;
    }
   }
   if ((label|0) == 7) {
    $19 = HEAP32[$1>>2]|0;
    (FUNCTION_TABLE_ii[$19 & 63]($input)|0);
    $$0 = $$lcssa46;
    break;
   }
   else if ((label|0) == 12) {
    HEAP8[$msg$i>>0] = 39;
    $42 = ((($msg$i)) + 1|0);
    HEAP8[$42>>0] = 0;
    HEAP32[$vararg_buffer1>>2] = $msg$i;
    _bb_error_msg(4205,$vararg_buffer1);
    $$0 = 0;
    break;
   }
   else if ((label|0) == 16) {
    HEAP8[$msg$i>>0] = 34;
    $60 = ((($msg$i)) + 1|0);
    HEAP8[$60>>0] = 0;
    HEAP32[$vararg_buffer4>>2] = $msg$i;
    _bb_error_msg(4205,$vararg_buffer4);
    $$0 = 0;
    break;
   }
   else if ((label|0) == 25) {
    HEAP8[$msg$i>>0] = 41;
    $107 = ((($msg$i)) + 1|0);
    HEAP8[$107>>0] = 0;
    HEAP32[$vararg_buffer7>>2] = $msg$i;
    _bb_error_msg(4205,$vararg_buffer7);
    $$0 = 0;
    break;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $11 = $0&255;
  HEAP8[$msg$i>>0] = $11;
  $12 = ((($msg$i)) + 1|0);
  HEAP8[$12>>0] = 0;
  HEAP32[$vararg_buffer>>2] = $msg$i;
  _bb_error_msg(4205,$vararg_buffer);
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _builtin_trap($argv) {
 $argv = $argv|0;
 var $$ = 0, $$0 = 0, $$02 = 0, $$1$ph8 = 0, $$16 = 0, $$16$lcssa = 0, $$2 = 0, $$3 = 0, $$lcssa = 0, $$pre = 0, $$pre14 = 0, $$record_pending_signo$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, $handler$0 = 0, $i$05 = 0, $new_cmd$0 = 0, $new_cmd$1 = 0, $ret$0$ph9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[840>>2]|0;
 $1 = ((($0)) + 144|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (_xzalloc(260)|0);
  HEAP32[$1>>2] = $4;
  $67 = $4;
 } else {
  $67 = $2;
 }
 $5 = ((($argv)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 L4: do {
  if ($7) {
   $9 = $67;$i$05 = 0;
   while(1) {
    $8 = (($9) + ($i$05<<2)|0);
    $10 = HEAP32[$8>>2]|0;
    $11 = ($10|0)==(0|0);
    if (!($11)) {
     (_printf(4367,$vararg_buffer)|0);
     $12 = HEAP32[$1>>2]|0;
     $13 = (($12) + ($i$05<<2)|0);
     $14 = HEAP32[$13>>2]|0;
     _print_escaped($14);
     $15 = (_get_signame($i$05)|0);
     HEAP32[$vararg_buffer1>>2] = $15;
     (_printf(4376,$vararg_buffer1)|0);
    }
    $16 = (($i$05) + 1)|0;
    $exitcond = ($16|0)==(65);
    if ($exitcond) {
     $$02 = 0;
     break L4;
    }
    $$pre14 = HEAP32[$1>>2]|0;
    $9 = $$pre14;$i$05 = $16;
   }
  } else {
   (_bb_strtoul($6,0,10)|0);
   $17 = (___errno_location()|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(0);
   if ($19) {
    $$0 = $5;$new_cmd$0 = 0;
   } else {
    $55 = ((($argv)) + 8|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($56|0)==(0|0);
    if ($57) {
     _bb_error_msg(4420,$vararg_buffer6);
     $$02 = 1;
     break;
    }
    $58 = HEAP32[$5>>2]|0;
    $59 = HEAP8[$58>>0]|0;
    $60 = ($59<<24>>24)==(45);
    L17: do {
     if ($60) {
      $61 = ((($58)) + 1|0);
      $62 = HEAP8[$61>>0]|0;
      switch ($62<<24>>24) {
      case 0:  {
       $$3 = $5;$new_cmd$1 = 0;
       break L17;
       break;
      }
      case 45:  {
       break;
      }
      default: {
       $$2 = $5;$69 = $58;
       label = 28;
       break L17;
      }
      }
      $63 = ((($58)) + 2|0);
      $64 = HEAP8[$63>>0]|0;
      $65 = ($64<<24>>24)==(0);
      $$ = $65 ? $55 : $5;
      $$pre = HEAP32[$$>>2]|0;
      $$2 = $$;$69 = $$pre;
      label = 28;
     } else {
      $$2 = $5;$69 = $58;
      label = 28;
     }
    } while(0);
    if ((label|0) == 28) {
     $$3 = $$2;$new_cmd$1 = $69;
    }
    $66 = ((($$3)) + 4|0);
    $$0 = $66;$new_cmd$0 = $new_cmd$1;
   }
   $20 = HEAP32[$$0>>2]|0;
   $21 = ($20|0)==(0|0);
   if ($21) {
    $$02 = 0;
   } else {
    $22 = ($new_cmd$0|0)==(0|0);
    $23 = ((($0)) + 140|0);
    $24 = ((($0)) + 136|0);
    $25 = ((($0)) + 284|0);
    $$1$ph8 = $$0;$68 = $20;$ret$0$ph9 = 0;
    while(1) {
     $$16 = $$1$ph8;$27 = $68;
     while(1) {
      $26 = ((($$16)) + 4|0);
      $28 = (_get_signum($27)|0);
      $29 = ($28>>>0)>(64);
      if ($29) {
       $$16$lcssa = $$16;$$lcssa = $26;
       break;
      }
      $33 = HEAP32[$1>>2]|0;
      $34 = (($33) + ($28<<2)|0);
      $35 = HEAP32[$34>>2]|0;
      _free($35);
      $36 = (_xstrdup($new_cmd$0)|0);
      $37 = HEAP32[$1>>2]|0;
      $38 = (($37) + ($28<<2)|0);
      HEAP32[$38>>2] = $36;
      $39 = ($28|0)==(0);
      if (!($39)) {
       if ($22) {
        $45 = ($28>>>0)<(32);
        if ($45) {
         $46 = 1 << $28;
         $47 = HEAP32[$23>>2]|0;
         $48 = $47 & $46;
         $49 = ($48|0)==(0);
         if ($49) {
          $50 = HEAP32[$24>>2]|0;
          $51 = $50 & $46;
          $52 = ($51|0)==(0);
          if ($52) {
           $handler$0 = 0;
          } else {
           $53 = $46 & 7340032;
           $54 = ($53|0)!=(0);
           $$record_pending_signo$i = $54 ? (1) : 43;
           $handler$0 = $$record_pending_signo$i;
          }
         } else {
          $handler$0 = 44;
         }
        } else {
         $handler$0 = 0;
        }
       } else {
        $42 = HEAP8[$new_cmd$0>>0]|0;
        $43 = ($42<<24>>24)!=(0);
        $44 = $43 ? 43 : (1);
        $handler$0 = $44;
       }
       HEAP32[$25>>2] = $handler$0;
      }
      $40 = HEAP32[$26>>2]|0;
      $41 = ($40|0)==(0|0);
      if ($41) {
       $$02 = $ret$0$ph9;
       break L4;
      } else {
       $$16 = $26;$27 = $40;
      }
     }
     $30 = HEAP32[$$16$lcssa>>2]|0;
     HEAP32[$vararg_buffer3>>2] = $30;
     _bb_perror_msg(4381,$vararg_buffer3);
     $31 = HEAP32[$$lcssa>>2]|0;
     $32 = ($31|0)==(0|0);
     if ($32) {
      $$02 = 1;
      break;
     } else {
      $$1$ph8 = $$lcssa;$68 = $31;$ret$0$ph9 = 1;
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$02|0);
}
function _re_execute_shell($to_free,$s,$g_argv0,$g_argv,$builtin_argv) {
 $to_free = $to_free|0;
 $s = $s|0;
 $g_argv0 = $g_argv0|0;
 $g_argv = $g_argv|0;
 $builtin_argv = $builtin_argv|0;
 var $$018 = 0, $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $argv$0 = 0, $cnt$050 = 0, $cnt$1 = 0, $cnt$2$lcssa = 0, $cnt$241 = 0, $cnt$3 = 0, $cnt$4$lcssa = 0;
 var $cnt$435 = 0, $cnt$5$lcssa = 0, $cnt$530 = 0, $cur$0 = 0, $cur$0$40 = 0, $cur$042 = 0, $cur$1 = 0, $cur$1$22 = 0, $cur$124 = 0, $exitcond = 0, $funcp$0 = 0, $funcp$0$34 = 0, $funcp$036 = 0, $funcp$1 = 0, $funcp$1$14 = 0, $funcp$116 = 0, $heredoc_argv = 0, $param_buf = 0, $pp$049 = 0, $pp$129 = 0;
 var $pp$2$lcssa = 0, $pp$223 = 0, $pp$3 = 0, $pp$4$lcssa = 0, $pp$415 = 0, $pp$5$lcssa = 0, $pp$510 = 0, $pp$510$phi = 0, $pp$6 = 0, $pp$6$pn = 0, $pp$79 = 0, $pp$8 = 0, $sig$048 = 0, $vararg_buffer = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0;
 var $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 40|0;
 $vararg_buffer = sp;
 $param_buf = sp + 64|0;
 $heredoc_argv = sp + 48|0;
 $0 = ($g_argv0|0)==(0|0);
 if ($0) {
  $1 = HEAP32[840>>2]|0;
  $2 = ((($1)) + 96|0);
  $3 = HEAP32[$2>>2]|0;
  HEAP32[$heredoc_argv>>2] = $3;
  $4 = ((($heredoc_argv)) + 4|0);
  HEAP32[$4>>2] = 4300;
  $5 = ((($heredoc_argv)) + 8|0);
  HEAP32[$5>>2] = $s;
  $6 = ((($heredoc_argv)) + 12|0);
  HEAP32[$6>>2] = 0;
  $122 = $1;$argv$0 = $heredoc_argv;$pp$8 = $6;
 } else {
  $7 = ($builtin_argv|0)!=(0|0);
  if ($7) {
   $8 = HEAP32[$builtin_argv>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $cnt$1 = 0;
   } else {
    $cnt$050 = 0;$pp$049 = $builtin_argv;
    while(1) {
     $10 = ((($pp$049)) + 4|0);
     $11 = (($cnt$050) + 1)|0;
     $12 = HEAP32[$10>>2]|0;
     $13 = ($12|0)==(0|0);
     if ($13) {
      $cnt$1 = $11;
      break;
     } else {
      $cnt$050 = $11;$pp$049 = $10;
     }
    }
   }
  } else {
   $cnt$1 = 0;
  }
  $14 = HEAP32[840>>2]|0;
  $15 = ((($14)) + 144|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   $42 = 0;$45 = 0;
  } else {
   $26 = 0;$28 = 0;$sig$048 = 1;
   while(1) {
    $18 = (($16) + ($sig$048<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(0|0);
    if ($20) {
     $128 = $26;$129 = $28;
    } else {
     $21 = HEAP8[$19>>0]|0;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      $23 = (_bitshift64Shl(1,0,($sig$048|0))|0);
      $24 = tempRet0;
      $25 = $23 | $26;
      $27 = $24 | $28;
      $128 = $25;$129 = $27;
     } else {
      $128 = $26;$129 = $28;
     }
    }
    $29 = (($sig$048) + 1)|0;
    $exitcond = ($29|0)==(65);
    if ($exitcond) {
     $42 = $128;$45 = $129;
     break;
    } else {
     $26 = $128;$28 = $129;$sig$048 = $29;
    }
   }
  }
  $30 = ((($14)) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($14)) + 20|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($14)) + 24|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($14)) + 80|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($14)) + 104|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP32[$vararg_buffer>>2] = $31;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $33;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $35;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $37;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $cnt$1;
  $vararg_ptr5 = ((($vararg_buffer)) + 24|0);
  $40 = $vararg_ptr5;
  $41 = $40;
  HEAP32[$41>>2] = $42;
  $43 = (($40) + 4)|0;
  $44 = $43;
  HEAP32[$44>>2] = $45;
  $vararg_ptr6 = ((($vararg_buffer)) + 32|0);
  HEAP32[$vararg_ptr6>>2] = $39;
  (_sprintf($param_buf,4303,$vararg_buffer)|0);
  $46 = (($cnt$1) + 6)|0;
  $47 = ((($14)) + 116|0);
  $cur$0$40 = HEAP32[$47>>2]|0;
  $48 = ($cur$0$40|0)==(0|0);
  if ($48) {
   $cnt$2$lcssa = $46;
  } else {
   $cnt$241 = $46;$cur$042 = $cur$0$40;
   while(1) {
    $49 = ((($cur$042)) + 16|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($50|0)==(0);
    if ($51) {
     label = 14;
    } else {
     $52 = ((($cur$042)) + 20|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==(0);
     if ($54) {
      $cnt$3 = $cnt$241;
     } else {
      label = 14;
     }
    }
    if ((label|0) == 14) {
     label = 0;
     $55 = (($cnt$241) + 2)|0;
     $cnt$3 = $55;
    }
    $cur$0 = HEAP32[$cur$042>>2]|0;
    $56 = ($cur$0|0)==(0|0);
    if ($56) {
     $cnt$2$lcssa = $cnt$3;
     break;
    } else {
     $cnt$241 = $cnt$3;$cur$042 = $cur$0;
    }
   }
  }
  $57 = ((($14)) + 124|0);
  $funcp$0$34 = HEAP32[$57>>2]|0;
  $58 = ($funcp$0$34|0)==(0|0);
  if ($58) {
   $cnt$4$lcssa = $cnt$2$lcssa;
  } else {
   $cnt$435 = $cnt$2$lcssa;$funcp$036 = $funcp$0$34;
   while(1) {
    $61 = (($cnt$435) + 3)|0;
    $funcp$0 = HEAP32[$funcp$036>>2]|0;
    $62 = ($funcp$0|0)==(0|0);
    if ($62) {
     $cnt$4$lcssa = $61;
     break;
    } else {
     $cnt$435 = $61;$funcp$036 = $funcp$0;
    }
   }
  }
  $59 = HEAP32[$g_argv>>2]|0;
  $60 = ($59|0)==(0|0);
  if ($60) {
   $cnt$5$lcssa = $cnt$4$lcssa;
  } else {
   $cnt$530 = $cnt$4$lcssa;$pp$129 = $g_argv;
   while(1) {
    $63 = ((($pp$129)) + 4|0);
    $64 = (($cnt$530) + 1)|0;
    $65 = HEAP32[$63>>2]|0;
    $66 = ($65|0)==(0|0);
    if ($66) {
     $cnt$5$lcssa = $64;
     break;
    } else {
     $cnt$530 = $64;$pp$129 = $63;
    }
   }
  }
  $67 = $cnt$5$lcssa << 2;
  $68 = (_xzalloc($67)|0);
  HEAP32[$to_free>>2] = $68;
  $69 = ((($14)) + 96|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($68)) + 4|0);
  HEAP32[$68>>2] = $70;
  $72 = ((($68)) + 8|0);
  HEAP32[$71>>2] = $param_buf;
  $cur$1$22 = HEAP32[$47>>2]|0;
  $73 = ($cur$1$22|0)==(0|0);
  if ($73) {
   $pp$2$lcssa = $72;
  } else {
   $cur$124 = $cur$1$22;$pp$223 = $72;
   while(1) {
    $74 = ((($cur$124)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (_strcmp($75,3835)|0);
    $77 = ($76|0)==(0);
    do {
     if ($77) {
      $pp$3 = $pp$223;
     } else {
      $78 = ((($cur$124)) + 20|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($79|0)==(0);
      if (!($80)) {
       $81 = ((($pp$223)) + 4|0);
       HEAP32[$pp$223>>2] = 4328;
       $82 = HEAP32[$74>>2]|0;
       $83 = ((($pp$223)) + 8|0);
       HEAP32[$81>>2] = $82;
       $pp$3 = $83;
       break;
      }
      $84 = ((($cur$124)) + 16|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = ($85|0)==(0);
      if ($86) {
       $87 = ((($pp$223)) + 4|0);
       HEAP32[$pp$223>>2] = 4331;
       $88 = HEAP32[$74>>2]|0;
       $89 = ((($pp$223)) + 8|0);
       HEAP32[$87>>2] = $88;
       $pp$3 = $89;
      } else {
       $pp$3 = $pp$223;
      }
     }
    } while(0);
    $cur$1 = HEAP32[$cur$124>>2]|0;
    $90 = ($cur$1|0)==(0|0);
    if ($90) {
     $pp$2$lcssa = $pp$3;
     break;
    } else {
     $cur$124 = $cur$1;$pp$223 = $pp$3;
    }
   }
  }
  $funcp$1$14 = HEAP32[$57>>2]|0;
  $91 = ($funcp$1$14|0)==(0|0);
  $92 = ((($pp$2$lcssa)) + 4|0);
  if ($91) {
   $$lcssa6 = $92;$pp$4$lcssa = $pp$2$lcssa;
  } else {
   $96 = $92;$funcp$116 = $funcp$1$14;$pp$415 = $pp$2$lcssa;
   while(1) {
    HEAP32[$pp$415>>2] = 4334;
    $93 = ((($funcp$116)) + 4|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ((($pp$415)) + 8|0);
    HEAP32[$96>>2] = $94;
    $97 = ((($funcp$116)) + 16|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ((($pp$415)) + 12|0);
    HEAP32[$95>>2] = $98;
    $funcp$1 = HEAP32[$funcp$116>>2]|0;
    $100 = ($funcp$1|0)==(0|0);
    $101 = ((($pp$415)) + 16|0);
    if ($100) {
     $$lcssa6 = $101;$pp$4$lcssa = $99;
     break;
    } else {
     $96 = $101;$funcp$116 = $funcp$1;$pp$415 = $99;
    }
   }
  }
  HEAP32[$pp$4$lcssa>>2] = 4337;
  $102 = ((($pp$4$lcssa)) + 8|0);
  HEAP32[$$lcssa6>>2] = $s;
  if ($7) {
   $103 = ((($builtin_argv)) + 4|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ($104|0)==(0|0);
   $106 = ((($pp$4$lcssa)) + 12|0);
   if ($105) {
    $$lcssa = $106;$pp$5$lcssa = $102;
   } else {
    $107 = $104;$109 = $103;$113 = $106;$pp$510 = $102;
    while(1) {
     HEAP32[$pp$510>>2] = $107;
     $108 = ((($109)) + 4|0);
     $110 = HEAP32[$108>>2]|0;
     $111 = ($110|0)==(0|0);
     $112 = ((($113)) + 4|0);
     if ($111) {
      $$lcssa = $112;$pp$5$lcssa = $113;
      break;
     } else {
      $pp$510$phi = $113;$107 = $110;$109 = $108;$113 = $112;$pp$510 = $pp$510$phi;
     }
    }
   }
   HEAP32[$pp$5$lcssa>>2] = 13904;
   $pp$6 = $$lcssa;
  } else {
   $pp$6 = $102;
  }
  HEAP32[$pp$6>>2] = $g_argv0;
  $114 = HEAP32[$g_argv>>2]|0;
  $115 = ($114|0)==(0|0);
  if (!($115)) {
   $$018 = $g_argv;$117 = $114;$pp$6$pn = $pp$6;
   while(1) {
    $pp$79 = ((($pp$6$pn)) + 4|0);
    $116 = ((($$018)) + 4|0);
    HEAP32[$pp$79>>2] = $117;
    $118 = HEAP32[$116>>2]|0;
    $119 = ($118|0)==(0|0);
    if ($119) {
     break;
    } else {
     $$018 = $116;$117 = $118;$pp$6$pn = $pp$79;
    }
   }
  }
  $120 = HEAP32[_environ>>2]|0;
  $122 = $14;$argv$0 = $68;$pp$8 = $120;
 }
 $121 = ((($122)) + 136|0);
 $123 = HEAP32[$121>>2]|0;
 $124 = $123 & 7340032;
 _switch_off_special_sigs($124);
 (_execve((3702|0),($argv$0|0),($pp$8|0))|0);
 $125 = HEAP32[$argv$0>>2]|0;
 $126 = HEAP8[$125>>0]|0;
 $127 = ($126<<24>>24)==(47);
 if ($127) {
  (_execve(($125|0),($argv$0|0),($pp$8|0))|0);
 }
 HEAP8[3631>>0] = 127;
 _bb_error_msg_and_die(4340,$vararg_buffer7);
 // unreachable;
}
function _switch_off_special_sigs($mask) {
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $sig$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mask >>> 1;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = HEAP32[840>>2]|0;
  $3 = ((($2)) + 144|0);
  $4 = ((($2)) + 284|0);
  $7 = $0;$sig$01 = 0;
  while(1) {
   $5 = (($sig$01) + 1)|0;
   $6 = $7 & 1;
   $8 = ($6|0)==(0);
   do {
    if (!($8)) {
     $9 = HEAP32[$3>>2]|0;
     $10 = ($9|0)==(0|0);
     if (!($10)) {
      $11 = (($9) + ($5<<2)|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = ($12|0)==(0|0);
      if (!($13)) {
       $14 = HEAP8[$12>>0]|0;
       $15 = ($14<<24>>24)==(0);
       if ($15) {
        break;
       }
      }
      _free($12);
      $16 = HEAP32[$3>>2]|0;
      $17 = (($16) + ($5<<2)|0);
      HEAP32[$17>>2] = 0;
     }
     HEAP32[$4>>2] = 0;
    }
   } while(0);
   $18 = $7 >>> 1;
   $19 = ($18|0)==(0);
   if ($19) {
    break;
   } else {
    $7 = $18;$sig$01 = $5;
   }
  }
 }
 return;
}
function _print_escaped($s) {
 $s = $s|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP8[$s>>0]|0;
 $1 = ($0<<24>>24)==(39);
 if ($1) {
  $$1 = $s;
  label = 3;
 } else {
  $$01 = $s;
  label = 2;
 }
 while(1) {
  if ((label|0) == 2) {
   label = 0;
   $2 = (___strchrnul($$01,39)|0);
   $3 = $2;
   $4 = $$01;
   $5 = (($3) - ($4))|0;
   HEAP32[$vararg_buffer>>2] = $5;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $$01;
   (_printf(4444,$vararg_buffer)|0);
   $6 = HEAP8[$2>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $$0 = 0;$$3 = $$01;
   } else {
    $$1 = $2;
    label = 3;
    continue;
   }
  }
  else if ((label|0) == 3) {
   label = 0;
   (_putchar_unlocked(34)|0);
   $$2 = $$1;
   while(1) {
    (_putchar_unlocked(39)|0);
    $8 = ((($$2)) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(39);
    if ($10) {
     $$2 = $8;
    } else {
     $$lcssa = $8;
     break;
    }
   }
   (_putchar_unlocked(34)|0);
   $$0 = 1;$$3 = $$lcssa;
  }
  if (!($$0)) {
   break;
  }
  $11 = HEAP8[$$3>>0]|0;
  $12 = ($11<<24>>24)==(0);
  if ($12) {
   break;
  } else {
   $$01 = $$3;
   label = 2;
  }
 }
 STACKTOP = sp;return;
}
function _record_pending_signo($sig) {
 $sig = $sig|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[840>>2]|0;
 $1 = ((($0)) + 148|0);
 (_sigaddset(($1|0),($sig|0))|0);
 return;
}
function _check_and_run_traps() {
 var $$lcssa = 0, $$lcssa31 = 0, $$lcssa34 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argv = 0, $job$0 = 0, $job$0$7 = 0, $job$08 = 0, $last_sig$0$ph = 0, $last_sig$0$ph$lcssa35 = 0;
 var $sig$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $argv = sp;
 $0 = HEAP32[840>>2]|0;
 $1 = ((($0)) + 148|0);
 $2 = ((($0)) + 144|0);
 $3 = ((($0)) + 64|0);
 $4 = ((($argv)) + 4|0);
 $5 = ((($argv)) + 8|0);
 $6 = ((($0)) + 80|0);
 $last_sig$0$ph = 0;
 L1: while(1) {
  $sig$0 = 0;
  L3: while(1) {
   $7 = (($sig$0) + 1)|0;
   $8 = (_sigismember(($1|0),($7|0))|0);
   $9 = ($8|0)==(0);
   if ($9) {
    $12 = ($7|0)<(65);
    if ($12) {
     $sig$0 = $7;
     continue;
    } else {
     $last_sig$0$ph$lcssa35 = $last_sig$0$ph;
     label = 17;
     break L1;
    }
   }
   (_sigdelset(($1|0),($7|0))|0);
   $10 = HEAP32[$2>>2]|0;
   $11 = ($10|0)==(0|0);
   if (!($11)) {
    $13 = (($10) + ($7<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0|0);
    if (!($15)) {
     $16 = HEAP8[$14>>0]|0;
     $17 = ($16<<24>>24)==(0);
     if ($17) {
      $sig$0 = 0;
      continue;
     } else {
      $$lcssa = $7;$$lcssa34 = $14;
      label = 8;
      break;
     }
    }
   }
   switch ($sig$0|0) {
   case 0:  {
    break L1;
    break;
   }
   case 1:  {
    $$lcssa31 = $7;
    label = 10;
    break L3;
    break;
   }
   default: {
    $sig$0 = 0;
   }
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $18 = $$lcssa34;
   HEAP32[$4>>2] = $18;
   HEAP32[$5>>2] = 0;
   $19 = HEAP32[$6>>2]|0;
   (_builtin_eval($argv)|0);
   HEAP32[$6>>2] = $19;
   $last_sig$0$ph = $$lcssa;
   continue;
  }
  else if ((label|0) == 10) {
   label = 0;
   (_bb_putchar(10)|0);
   HEAP32[$3>>2] = 1;
   $last_sig$0$ph = $$lcssa31;
   continue;
  }
 }
 if ((label|0) == 17) {
  STACKTOP = sp;return ($last_sig$0$ph$lcssa35|0);
 }
 $20 = ((($0)) + 56|0);
 $job$0$7 = HEAP32[$20>>2]|0;
 $21 = ($job$0$7|0)==(0|0);
 if (!($21)) {
  $job$08 = $job$0$7;
  while(1) {
   $22 = ((($job$08)) + 20|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)<(1);
   if (!($24)) {
    $25 = (0 - ($23))|0;
    $26 = (_kill(($25|0),1)|0);
    $27 = ($26|0)==(0);
    if ($27) {
     $28 = HEAP32[$22>>2]|0;
     $29 = (0 - ($28))|0;
     (_kill(($29|0),18)|0);
    }
   }
   $job$0 = HEAP32[$job$08>>2]|0;
   $30 = ($job$0|0)==(0|0);
   if ($30) {
    break;
   } else {
    $job$08 = $job$0;
   }
  }
 }
 _sigexit(1);
 // unreachable;
 return (0)|0;
}
function _find_function_slot($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $funcpp$0$lcssa = 0, $funcpp$01 = 0, $funcpp$01$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[840>>2]|0;
 $1 = ((($0)) + 124|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 L1: do {
  if ($3) {
   $funcpp$0$lcssa = $1;
  } else {
   $5 = $2;$funcpp$01 = $1;
   while(1) {
    $7 = ((($5)) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (_strcmp($name,$8)|0);
    $10 = ($9|0)==(0);
    if ($10) {
     $funcpp$0$lcssa = $funcpp$01;
     break L1;
    }
    $4 = HEAP32[$5>>2]|0;
    $6 = ($4|0)==(0|0);
    if ($6) {
     $funcpp$0$lcssa = $5;
     break;
    } else {
     $funcpp$01$phi = $5;$5 = $4;$funcpp$01 = $funcpp$01$phi;
    }
   }
  }
 } while(0);
 return ($funcpp$0$lcssa|0);
}
function _free_pipe($pi) {
 $pi = $pi|0;
 var $$0$i1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, $r$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pi)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 $3 = ((($pi)) + 28|0);
 if ($2) {
  $i$04 = 0;
  while(1) {
   $4 = HEAP32[$3>>2]|0;
   $5 = (((($4) + (($i$04*36)|0)|0)) + 28|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if (!($7)) {
    _free_strings($6);
   }
   $8 = (((($4) + (($i$04*36)|0)|0)) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $13 = (((($4) + (($i$04*36)|0)|0)) + 24|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0|0);
    if (!($15)) {
     $16 = ((($14)) + 8|0);
     HEAP32[$16>>2] = 0;
    }
   } else {
    $$0$i1 = $9;
    while(1) {
     $11 = (_free_pipe($$0$i1)|0);
     $12 = ($11|0)==(0|0);
     if ($12) {
      break;
     } else {
      $$0$i1 = $11;
     }
    }
   }
   $17 = (((($4) + (($i$04*36)|0)|0)) + 20|0);
   $18 = HEAP32[$17>>2]|0;
   _free($18);
   $19 = (((($4) + (($i$04*36)|0)|0)) + 32|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0|0);
   if (!($21)) {
    $r$02 = $20;
    while(1) {
     $22 = ((($r$02)) + 4|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ($23|0)==(0|0);
     if (!($24)) {
      _free($23);
     }
     $25 = HEAP32[$r$02>>2]|0;
     _free($r$02);
     $26 = ($25|0)==(0|0);
     if ($26) {
      break;
     } else {
      $r$02 = $25;
     }
    }
   }
   $27 = (($i$04) + 1)|0;
   $28 = HEAP32[$0>>2]|0;
   $29 = ($27|0)<($28|0);
   if ($29) {
    $i$04 = $27;
   } else {
    break;
   }
  }
 }
 $30 = HEAP32[$3>>2]|0;
 _free($30);
 $31 = ((($pi)) + 24|0);
 $32 = HEAP32[$31>>2]|0;
 _free($32);
 $33 = HEAP32[$pi>>2]|0;
 _free($pi);
 return ($33|0);
}
function _free_strings($strings) {
 $strings = $strings|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $v$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($strings|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$strings>>2]|0;
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $3 = $1;$v$01 = $strings;
   while(1) {
    _free($3);
    $4 = ((($v$01)) + 4|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)==(0|0);
    if ($6) {
     break;
    } else {
     $3 = $5;$v$01 = $4;
    }
   }
  }
  _free($strings);
 }
 return;
}
function _parse_stream($pstring,$input,$end_trigger) {
 $pstring = $pstring|0;
 $input = $input|0;
 $end_trigger = $end_trigger|0;
 var $$01$i = 0, $$01$i$38 = 0, $$0656$i = 0, $$17$lcssa$i = 0, $$1749$i = 0, $$28$lcssa$i = 0, $$2847$i = 0, $$3 = 0, $$410$i = 0, $$410$i$lcssa = 0, $$ch$1$i$i = 0, $$ch$1$i$i$lcssa = 0, $$ch$1$i$i401 = 0, $$lcssa = 0, $$lcssa10$i$i = 0, $$lcssa396 = 0, $$lcssa398 = 0, $$lcssa402 = 0, $$lcssa405 = 0, $$lcssa408 = 0;
 var $$lcssa411 = 0, $$lcssa412 = 0, $$lcssa413 = 0, $$lcssa415 = 0, $$lcssa426 = 0, $$old = 0, $$old$i$i = 0, $$old18 = 0, $$old9 = 0, $$pr = 0, $$pre = 0, $$pre$i = 0, $$pre217 = 0, $$pre218 = 0, $$pre219 = 0, $$pre220 = 0, $$pre221 = 0, $$pre222 = 0, $$pre223 = 0, $$pre224 = 0;
 var $$pre225 = 0, $$pre226 = 0, $$pre227 = 0, $$pre228 = 0, $$pre229 = 0, $$pre230 = 0, $$pre231 = 0, $$pre234 = 0, $$pre235 = 0, $$pre236 = 0, $$pre238 = 0, $$pre239 = 0, $$pre240 = 0, $$pre241 = 0, $$pre242 = 0, $$pre243 = 0, $$pre244 = 0, $$pre245 = 0, $$pre246 = 0, $$pre247 = 0;
 var $$pre248 = 0, $$pre249 = 0, $$pre250 = 0, $$pre251 = 0, $$pre252 = 0, $$pre253 = 0, $$pre254 = 0, $$pre255 = 0, $$pre256 = 0, $$pre257 = 0, $$pre258 = 0, $$pre259 = 0, $$pre260 = 0, $$pre261 = 0, $$pre262 = 0, $$pre263 = 0, $$pre264 = 0, $$pre265 = 0, $$pre266 = 0, $$pre267 = 0;
 var $$pre268 = 0, $$pre269 = 0, $$pre270 = 0, $$pre271 = 0, $$pre272 = 0, $$sink105 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
 var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
 var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
 var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
 var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
 var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
 var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
 var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
 var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
 var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
 var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
 var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
 var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
 var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0;
 var $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $as_string$i = 0;
 var $ch$0 = 0, $ch$0$i$i = 0, $ch$129$i$i = 0, $ch$1738284 = 0, $ch$173828488 = 0, $ch$174 = 0, $ch$175 = 0, $ch$175$lcssa = 0, $ch$175$lcssa207 = 0, $cmd$051$i = 0, $cond$i$i = 0, $cond6$i$i = 0, $ctx = 0, $dest = 0, $endch$0$i = 0, $heredoc_cnt$0$be = 0, $heredoc_cnt$0$be$lcssa = 0, $heredoc_cnt$0183 = 0, $heredoc_cnt$377 = 0, $heredoc_cnt$378 = 0;
 var $heredoc_cnt$4 = 0, $heredoc_cnt$5 = 0, $i$050$i = 0, $is_special$0 = 0, $msg$i = 0, $next$0 = 0, $or$cond$i$i = 0, $or$cond10 = 0, $or$cond13 = 0, $or$cond29 = 0, $or$cond3$i$i = 0, $or$cond3$old$i$i = 0, $or$cond325 = 0, $or$cond328 = 0, $or$cond34 = 0, $or$cond5$i$i = 0, $or$cond8 = 0, $pctx$0 = 0, $pi$0 = 0, $pi$0$55$i = 0;
 var $pi$0$i = 0, $pi$057$i = 0, $prev$0$i$i = 0, $prev$1$i$i = 0, $prev$228$i$i = 0, $redir$0$46$i = 0, $redir$0$i = 0, $redir$048$i = 0, $redir_style$0 = 0, $redir_style$1 = 0, $switch$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0;
 var $vararg_buffer31 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer31 = sp + 88|0;
 $vararg_buffer28 = sp + 80|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $as_string$i = sp + 184|0;
 $msg$i = sp + 188|0;
 $ctx = sp + 120|0;
 $dest = sp + 92|0;
 ;HEAP32[$dest>>2]=0|0;HEAP32[$dest+4>>2]=0|0;HEAP32[$dest+8>>2]=0|0;HEAP32[$dest+12>>2]=0|0;HEAP32[$dest+16>>2]=0|0;HEAP32[$dest+20>>2]=0|0;HEAP32[$dest+24>>2]=0|0;
 $0 = HEAP32[840>>2]|0;
 $1 = ((($0)) + 280|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[$1>>2] = $3;
 $4 = ((($dest)) + 4|0);
 $5 = ((($dest)) + 8|0);
 HEAP32[$5>>2] = 128;
 $6 = (_xrealloc(0,129)|0);
 HEAP32[$dest>>2] = $6;
 HEAP8[$6>>0] = 0;
 $7 = HEAP32[$4>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = HEAP32[$dest>>2]|0;
 $10 = (($9) + ($8)|0);
 HEAP8[$10>>0] = 0;
 HEAP32[$4>>2] = 0;
 dest=$ctx; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $11 = (_xzalloc(44)|0);
 HEAP32[$ctx>>2] = $11;
 $12 = ((($ctx)) + 4|0);
 HEAP32[$12>>2] = $11;
 (_done_command($ctx)|0);
 $13 = ((($input)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 63]($input)|0);
 $16 = ($15|0)==(-1);
 L1: do {
  if ($16) {
   label = 5;
  } else {
   $17 = ((($ctx)) + 16|0);
   $18 = ((($ctx)) + 20|0);
   $19 = ((($ctx)) + 24|0);
   $20 = ((($ctx)) + 8|0);
   $21 = ((($dest)) + 16|0);
   $22 = ((($dest)) + 24|0);
   $$old18 = ($end_trigger|0)!=(0);
   $23 = ((($ctx)) + 44|0);
   $24 = ((($ctx)) + 56|0);
   $25 = ((($ctx)) + 12|0);
   $26 = ((($dest)) + 12|0);
   $27 = ((($input)) + 24|0);
   $28 = ((($ctx)) + 52|0);
   $29 = ($end_trigger|0)!=(59);
   $30 = ($end_trigger|0)==(41);
   $$old = ($end_trigger|0)==(125);
   $60 = $15;$heredoc_cnt$0183 = 0;
   L3: while(1) {
    $52 = HEAP32[$18>>2]|0;
    $53 = HEAP32[$19>>2]|0;
    $54 = ($52|0)<($53|0);
    if ($54) {
     $$pre217 = HEAP32[$17>>2]|0;
     $62 = $$pre217;$63 = $52;
    } else {
     $55 = (($53) + 128)|0;
     HEAP32[$19>>2] = $55;
     $56 = HEAP32[$17>>2]|0;
     $57 = (($53) + 129)|0;
     $58 = (_xrealloc($56,$57)|0);
     HEAP32[$17>>2] = $58;
     $$pre = HEAP32[$18>>2]|0;
     $62 = $58;$63 = $$pre;
    }
    $59 = $60&255;
    $61 = (($62) + ($63)|0);
    HEAP8[$61>>0] = $59;
    $64 = HEAP32[$18>>2]|0;
    $65 = (($64) + 1)|0;
    HEAP32[$18>>2] = $65;
    $66 = HEAP32[$17>>2]|0;
    $67 = (($66) + ($65)|0);
    HEAP8[$67>>0] = 0;
    $68 = ($60|0)==(10);
    if ($68) {
     $next$0 = 0;
    } else {
     $69 = HEAP32[$27>>2]|0;
     $70 = (FUNCTION_TABLE_ii[$69 & 63]($input)|0);
     $next$0 = $70;
    }
    $71 = HEAP32[$20>>2]|0;
    $72 = ((($71)) + 28|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($73|0)==(0|0);
    $75 = HEAP32[$4>>2]|0;
    $76 = HEAP32[$21>>2]|0;
    $77 = $75 | $76;
    $78 = ($77|0)==(0);
    $79 = $78 & $74;
    L12: do {
     if ($79) {
      switch ($next$0|0) {
      case 38: case 41: case 59: case 124:  {
       $is_special$0 = 5795;
       break L12;
       break;
      }
      default: {
      }
      }
      $80 = (_strchr((6024),$next$0)|0);
      $81 = ($80|0)==(0|0);
      if ($81) {
       label = 23;
      } else {
       $is_special$0 = 5795;
      }
     } else {
      label = 23;
     }
    } while(0);
    if ((label|0) == 23) {
     label = 0;
     $is_special$0 = (5797);
    }
    $82 = (_strchr($is_special$0,$60)|0);
    $83 = (_strchr((6024),$60)|0);
    $84 = ($82|0)!=(0|0);
    $85 = ($83|0)!=(0|0);
    $or$cond8 = $84 | $85;
    L18: do {
     if ($or$cond8) {
      if ($85) {
       $93 = (_done_word($dest,$ctx)|0);
       $94 = ($93|0)==(0);
       if (!($94)) {
        $pctx$0 = $ctx;
        label = 250;
        break L1;
       }
       if ($68) {
        $95 = HEAP32[$20>>2]|0;
        $96 = ((($95)) + 16|0);
        $97 = HEAP32[$96>>2]|0;
        $98 = ($97|0)==(0|0);
        if ($98) {
         $99 = ((($95)) + 28|0);
         $100 = HEAP32[$99>>2]|0;
         $101 = ($100|0)==(0|0);
         if ($101) {
          $102 = ((($95)) + 32|0);
          $103 = HEAP32[$102>>2]|0;
          $104 = ($103|0)==(0|0);
          $105 = HEAP32[$4>>2]|0;
          $106 = HEAP32[$21>>2]|0;
          $107 = $105 | $106;
          $108 = ($107|0)==(0);
          $109 = $108 & $104;
          if ($109) {
           $110 = HEAP32[$ctx>>2]|0;
           $111 = ((($110)) + 4|0);
           $112 = HEAP32[$111>>2]|0;
           $113 = ($112|0)==(0);
           if (!($113)) {
            $114 = ((($110)) + 32|0);
            $115 = HEAP32[$114>>2]|0;
            $116 = ($115|0)==(4);
            if (!($116)) {
             $heredoc_cnt$0$be = $heredoc_cnt$0183;
             break;
            }
           }
          }
         }
        }
        _done_pipe($ctx,1);
        $117 = ($heredoc_cnt$0183|0)==(0);
        if (!($117)) {
         $pi$0$55$i = HEAP32[$ctx>>2]|0;
         $118 = ($pi$0$55$i|0)==(0|0);
         if (!($118)) {
          $$0656$i = $heredoc_cnt$0183;$pi$057$i = $pi$0$55$i;
          while(1) {
           $119 = ((($pi$057$i)) + 4|0);
           $120 = HEAP32[$119>>2]|0;
           $121 = ($120|0)>(0);
           if ($121) {
            $122 = ((($pi$057$i)) + 28|0);
            $123 = HEAP32[$122>>2]|0;
            $$1749$i = $$0656$i;$781 = $120;$cmd$051$i = $123;$i$050$i = 0;
            while(1) {
             $124 = ((($cmd$051$i)) + 32|0);
             $redir$0$46$i = HEAP32[$124>>2]|0;
             $125 = ($redir$0$46$i|0)==(0|0);
             if ($125) {
              $$28$lcssa$i = $$1749$i;$223 = $781;
             } else {
              $$2847$i = $$1749$i;$redir$048$i = $redir$0$46$i;
              while(1) {
               $126 = ((($redir$048$i)) + 16|0);
               $127 = HEAP32[$126>>2]|0;
               $128 = ($127|0)==(4);
               if ($128) {
                HEAP32[$126>>2] = 5;
                $129 = ((($redir$048$i)) + 4|0);
                $130 = HEAP32[$129>>2]|0;
                $131 = ((($redir$048$i)) + 12|0);
                $132 = HEAP32[$131>>2]|0;
                $133 = $132 & 1;
                $134 = ($133|0)!=(0);
                $135 = $132 & 2;
                $136 = ($135|0)!=(0);
                $156 = 0;$782 = 0;$783 = 0;$prev$1$i$i = 0;
                L43: while(1) {
                 while(1) {
                  $167 = HEAP32[$13>>2]|0;
                  $168 = (FUNCTION_TABLE_ii[$167 & 63]($input)|0);
                  $169 = ($168|0)==(-1);
                  if ($169) {
                   $788 = $782;$789 = $156;$790 = $783;$ch$0$i$i = -1;$prev$0$i$i = $prev$1$i$i;
                   break;
                  }
                  $170 = HEAP32[$18>>2]|0;
                  $171 = HEAP32[$19>>2]|0;
                  $172 = ($170|0)<($171|0);
                  if ($172) {
                   $$pre219 = HEAP32[$17>>2]|0;
                   $179 = $$pre219;$180 = $170;
                  } else {
                   $173 = (($171) + 128)|0;
                   HEAP32[$19>>2] = $173;
                   $174 = HEAP32[$17>>2]|0;
                   $175 = (($171) + 129)|0;
                   $176 = (_xrealloc($174,$175)|0);
                   HEAP32[$17>>2] = $176;
                   $$pre218 = HEAP32[$18>>2]|0;
                   $179 = $176;$180 = $$pre218;
                  }
                  $177 = $168&255;
                  $178 = (($179) + ($180)|0);
                  HEAP8[$178>>0] = $177;
                  $181 = HEAP32[$18>>2]|0;
                  $182 = (($181) + 1)|0;
                  HEAP32[$18>>2] = $182;
                  $183 = HEAP32[$17>>2]|0;
                  $184 = (($183) + ($182)|0);
                  HEAP8[$184>>0] = 0;
                  $185 = ($168|0)==(9);
                  $186 = $134 & $185;
                  if (!($186)) {
                   $788 = $782;$789 = $156;$790 = $783;$ch$0$i$i = $168;$prev$0$i$i = $prev$1$i$i;
                   break;
                  }
                 }
                 L52: while(1) {
                  switch ($ch$0$i$i|0) {
                  case -1:  {
                   $$lcssa10$i$i = $790;
                   label = 61;
                   break L3;
                   break;
                  }
                  case 10:  {
                   $$lcssa402 = $788;$$lcssa405 = $789;$$lcssa408 = $790;
                   break L52;
                   break;
                  }
                  default: {
                   $188 = $789;$190 = $788;$193 = $790;$ch$129$i$i = $ch$0$i$i;$prev$228$i$i = $prev$0$i$i;
                  }
                  }
                  while(1) {
                   $187 = (($188) + 1)|0;
                   $189 = ($188|0)<($190|0);
                   if ($189) {
                    $197 = $193;$787 = $190;
                   } else {
                    $191 = (($190) + 128)|0;
                    $192 = (($190) + 129)|0;
                    $194 = (_xrealloc($193,$192)|0);
                    $197 = $194;$787 = $191;
                   }
                   $195 = $ch$129$i$i&255;
                   $196 = (($197) + ($188)|0);
                   HEAP8[$196>>0] = $195;
                   $198 = (($197) + ($187)|0);
                   HEAP8[$198>>0] = 0;
                   $199 = HEAP32[$18>>2]|0;
                   $200 = HEAP32[$19>>2]|0;
                   $201 = ($199|0)<($200|0);
                   if ($201) {
                    $$pre221 = HEAP32[$17>>2]|0;
                    $207 = $$pre221;$208 = $199;
                   } else {
                    $202 = (($200) + 128)|0;
                    HEAP32[$19>>2] = $202;
                    $203 = HEAP32[$17>>2]|0;
                    $204 = (($200) + 129)|0;
                    $205 = (_xrealloc($203,$204)|0);
                    HEAP32[$17>>2] = $205;
                    $$pre220 = HEAP32[$18>>2]|0;
                    $207 = $205;$208 = $$pre220;
                   }
                   $206 = (($207) + ($208)|0);
                   HEAP8[$206>>0] = $195;
                   $209 = HEAP32[$18>>2]|0;
                   $210 = (($209) + 1)|0;
                   HEAP32[$18>>2] = $210;
                   $211 = HEAP32[$17>>2]|0;
                   $212 = (($211) + ($210)|0);
                   HEAP8[$212>>0] = 0;
                   $213 = ($prev$228$i$i|0)==(92);
                   $214 = ($ch$129$i$i|0)==(92);
                   $or$cond5$i$i = $214 & $213;
                   $$ch$1$i$i = $or$cond5$i$i ? 0 : $ch$129$i$i;
                   $215 = HEAP32[$13>>2]|0;
                   $145 = (FUNCTION_TABLE_ii[$215 & 63]($input)|0);
                   $cond$i$i = ($145|0)==(-1);
                   if ($cond$i$i) {
                    $$ch$1$i$i$lcssa = $$ch$1$i$i;$$lcssa = $187;$$lcssa396 = $787;$$lcssa398 = $197;
                    label = 49;
                    break;
                   }
                   $137 = HEAP32[$18>>2]|0;
                   $138 = HEAP32[$19>>2]|0;
                   $139 = ($137|0)<($138|0);
                   if ($139) {
                    $$pre223 = HEAP32[$17>>2]|0;
                    $147 = $$pre223;$148 = $137;
                   } else {
                    $140 = (($138) + 128)|0;
                    HEAP32[$19>>2] = $140;
                    $141 = HEAP32[$17>>2]|0;
                    $142 = (($138) + 129)|0;
                    $143 = (_xrealloc($141,$142)|0);
                    HEAP32[$17>>2] = $143;
                    $$pre222 = HEAP32[$18>>2]|0;
                    $147 = $143;$148 = $$pre222;
                   }
                   $144 = $145&255;
                   $146 = (($147) + ($148)|0);
                   HEAP8[$146>>0] = $144;
                   $149 = HEAP32[$18>>2]|0;
                   $150 = (($149) + 1)|0;
                   HEAP32[$18>>2] = $150;
                   $151 = HEAP32[$17>>2]|0;
                   $152 = (($151) + ($150)|0);
                   HEAP8[$152>>0] = 0;
                   $cond6$i$i = ($145|0)==(10);
                   $153 = ($$ch$1$i$i|0)!=(92);
                   $or$cond3$i$i = $136 | $153;
                   $or$cond$i$i = $or$cond3$i$i & $cond6$i$i;
                   if ($or$cond$i$i) {
                    $$ch$1$i$i401 = $$ch$1$i$i;$155 = $197;$784 = $787;$785 = $187;$786 = 10;
                    break;
                   } else {
                    $188 = $187;$190 = $787;$193 = $197;$ch$129$i$i = $145;$prev$228$i$i = $$ch$1$i$i;
                   }
                  }
                  if ((label|0) == 49) {
                   label = 0;
                   $$old$i$i = ($$ch$1$i$i$lcssa|0)!=(92);
                   $or$cond3$old$i$i = $136 | $$old$i$i;
                   if ($or$cond3$old$i$i) {
                    $$ch$1$i$i401 = $$ch$1$i$i$lcssa;$155 = $$lcssa398;$784 = $$lcssa396;$785 = $$lcssa;$786 = -1;
                   } else {
                    $$lcssa10$i$i = $$lcssa398;
                    label = 61;
                    break L3;
                   }
                  }
                  $154 = (($155) + ($156)|0);
                  $157 = (_strcmp($154,$130)|0);
                  $158 = ($157|0)==(0);
                  if ($158) {
                   $$lcssa411 = $155;$$lcssa412 = $154;
                   break L43;
                  } else {
                   $788 = $784;$789 = $785;$790 = $155;$ch$0$i$i = $786;$prev$0$i$i = $$ch$1$i$i401;
                  }
                 }
                 $159 = (($$lcssa405) + 1)|0;
                 $160 = ($$lcssa405|0)<($$lcssa402|0);
                 if ($160) {
                  $165 = $$lcssa408;$791 = $$lcssa402;
                 } else {
                  $161 = (($$lcssa402) + 128)|0;
                  $162 = (($$lcssa402) + 129)|0;
                  $163 = (_xrealloc($$lcssa408,$162)|0);
                  $165 = $163;$791 = $161;
                 }
                 $164 = (($165) + ($$lcssa405)|0);
                 HEAP8[$164>>0] = 10;
                 $166 = (($165) + ($159)|0);
                 HEAP8[$166>>0] = 0;
                 $156 = $159;$782 = $791;$783 = $165;$prev$1$i$i = 10;
                }
                HEAP8[$$lcssa412>>0] = 0;
                $216 = ($$lcssa411|0)==(0|0);
                if ($216) {
                 break L3;
                }
                $217 = HEAP32[$129>>2]|0;
                _free($217);
                HEAP32[$129>>2] = $$lcssa411;
                $218 = (($$2847$i) + -1)|0;
                $$410$i = $218;
               } else {
                $$410$i = $$2847$i;
               }
               $redir$0$i = HEAP32[$redir$048$i>>2]|0;
               $219 = ($redir$0$i|0)==(0|0);
               if ($219) {
                $$410$i$lcssa = $$410$i;
                break;
               } else {
                $$2847$i = $$410$i;$redir$048$i = $redir$0$i;
               }
              }
              $$pre$i = HEAP32[$119>>2]|0;
              $$28$lcssa$i = $$410$i$lcssa;$223 = $$pre$i;
             }
             $220 = ((($cmd$051$i)) + 36|0);
             $221 = (($i$050$i) + 1)|0;
             $222 = ($221|0)<($223|0);
             if ($222) {
              $$1749$i = $$28$lcssa$i;$781 = $223;$cmd$051$i = $220;$i$050$i = $221;
             } else {
              $$17$lcssa$i = $$28$lcssa$i;
              break;
             }
            }
           } else {
            $$17$lcssa$i = $$0656$i;
           }
           $pi$0$i = HEAP32[$pi$057$i>>2]|0;
           $224 = ($pi$0$i|0)!=(0|0);
           $225 = ($$17$lcssa$i|0)!=(0);
           $226 = $225 & $224;
           if ($226) {
            $$0656$i = $$17$lcssa$i;$pi$057$i = $pi$0$i;
           } else {
            break;
           }
          }
         }
        }
        HEAP32[$22>>2] = 0;
        $ch$174 = 59;$heredoc_cnt$377 = 0;
        label = 83;
       } else {
        label = 76;
       }
      } else {
       label = 76;
      }
      if ((label|0) == 76) {
       label = 0;
       $227 = ($60|0)==(125);
       if ($227) {
        $228 = HEAP32[$20>>2]|0;
        $229 = ((($228)) + 16|0);
        $230 = HEAP32[$229>>2]|0;
        $231 = ($230|0)==(0|0);
        if (!($231)) {
         $ch$0 = 125;
         label = 25;
         break;
        }
        $232 = ((($228)) + 28|0);
        $233 = HEAP32[$232>>2]|0;
        $234 = ($233|0)==(0|0);
        if (!($234)) {
         $ch$0 = 125;
         label = 25;
         break;
        }
        $235 = ((($228)) + 32|0);
        $236 = HEAP32[$235>>2]|0;
        $237 = ($236|0)==(0|0);
        $238 = HEAP32[$4>>2]|0;
        $239 = HEAP32[$21>>2]|0;
        $240 = $238 | $239;
        $241 = ($240|0)==(0);
        $242 = $241 & $237;
        if (!($242)) {
         $ch$0 = 125;
         label = 25;
         break;
        }
        $243 = HEAP32[$12>>2]|0;
        $244 = ((($243)) + 4|0);
        $245 = HEAP32[$244>>2]|0;
        $246 = ($245|0)==(0);
        if ($246) {
         $247 = ((($243)) + 40|0);
         $248 = HEAP32[$247>>2]|0;
         $249 = ($248|0)==(0);
         $250 = $$old & $249;
         if ($250) {
          $251 = ($heredoc_cnt$0183|0)==(0);
          if ($251) {
           $ch$173828488 = 125;
           label = 91;
          } else {
           label = 90;
           break L3;
          }
         } else {
          $ch$175 = 125;$heredoc_cnt$378 = $heredoc_cnt$0183;
         }
        } else {
         $ch$175 = 125;$heredoc_cnt$378 = $heredoc_cnt$0183;
        }
       } else {
        $ch$174 = $60;$heredoc_cnt$377 = $heredoc_cnt$0183;
        label = 83;
       }
      }
      do {
       if ((label|0) == 83) {
        label = 0;
        $252 = ($ch$174|0)==($end_trigger|0);
        $or$cond29 = $$old18 & $252;
        if ($or$cond29) {
         $253 = ($heredoc_cnt$377|0)==(0);
         $or$cond13 = $253 | $29;
         if ($or$cond13) {
          if ($30) {
           $254 = HEAP32[$23>>2]|0;
           $255 = ($254|0)==(14);
           if ($255) {
            $256 = HEAP32[$21>>2]|0;
            $257 = ($256|0)==(0);
            if (!($257)) {
             $ch$175 = 41;$heredoc_cnt$378 = $heredoc_cnt$377;
             break;
            }
            $258 = HEAP32[$dest>>2]|0;
            $259 = (_strcmp($258,5843)|0);
            $260 = ($259|0)==(0);
            if ($260) {
             $ch$1738284 = 41;
            } else {
             $ch$175 = 41;$heredoc_cnt$378 = $heredoc_cnt$377;
             break;
            }
           } else {
            $ch$1738284 = 41;
           }
          } else {
           $ch$1738284 = $end_trigger;
          }
          if ($253) {
           $ch$173828488 = $ch$1738284;
           label = 91;
          } else {
           label = 90;
           break L3;
          }
         } else {
          $ch$175 = 59;$heredoc_cnt$378 = $heredoc_cnt$377;
         }
        } else {
         $ch$175 = $ch$174;$heredoc_cnt$378 = $heredoc_cnt$377;
        }
       }
      } while(0);
      if ((label|0) == 91) {
       label = 0;
       $261 = (_done_word($dest,$ctx)|0);
       $262 = ($261|0)==(0);
       if (!($262)) {
        $pctx$0 = $ctx;
        label = 250;
        break L1;
       }
       _done_pipe($ctx,1);
       HEAP32[$22>>2] = 0;
       $263 = HEAP32[$23>>2]|0;
       $264 = HEAP32[$24>>2]|0;
       $265 = $263 | $264;
       $266 = ($265|0)==(0);
       if ($266) {
        label = 93;
        break L3;
       } else {
        $ch$175 = $ch$173828488;$heredoc_cnt$378 = 0;
       }
      }
      if ($85) {
       $heredoc_cnt$0$be = $heredoc_cnt$378;
      } else {
       switch ($ch$175|0) {
       case 62:  {
        $274 = (_redirect_opt_num($dest)|0);
        $275 = (_done_word($dest,$ctx)|0);
        $276 = ($275|0)==(0);
        if (!($276)) {
         $pctx$0 = $ctx;
         label = 250;
         break L1;
        }
        $277 = ($next$0|0)==(62);
        if ($277) {
         $278 = HEAP32[$13>>2]|0;
         $279 = (FUNCTION_TABLE_ii[$278 & 63]($input)|0);
         $280 = HEAP32[$18>>2]|0;
         $281 = HEAP32[$19>>2]|0;
         $282 = ($280|0)<($281|0);
         if ($282) {
          $$pre231 = HEAP32[$17>>2]|0;
          $289 = $$pre231;$290 = $280;
         } else {
          $283 = (($281) + 128)|0;
          HEAP32[$19>>2] = $283;
          $284 = HEAP32[$17>>2]|0;
          $285 = (($281) + 129)|0;
          $286 = (_xrealloc($284,$285)|0);
          HEAP32[$17>>2] = $286;
          $$pre230 = HEAP32[$18>>2]|0;
          $289 = $286;$290 = $$pre230;
         }
         $287 = $279&255;
         $288 = (($289) + ($290)|0);
         HEAP8[$288>>0] = $287;
         $291 = HEAP32[$18>>2]|0;
         $292 = (($291) + 1)|0;
         HEAP32[$18>>2] = $292;
         $293 = HEAP32[$17>>2]|0;
         $294 = (($293) + ($292)|0);
         HEAP8[$294>>0] = 0;
         $redir_style$0 = 2;
        } else {
         $redir_style$0 = 1;
        }
        $295 = (_parse_redirect($ctx,$274,$redir_style$0,$input)|0);
        $$sink105 = $295;$heredoc_cnt$5 = $heredoc_cnt$378;
        label = 249;
        break;
       }
       case 60:  {
        $296 = (_redirect_opt_num($dest)|0);
        $297 = (_done_word($dest,$ctx)|0);
        $298 = ($297|0)==(0);
        if (!($298)) {
         $pctx$0 = $ctx;
         label = 250;
         break L1;
        }
        switch ($next$0|0) {
        case 60:  {
         $299 = (($heredoc_cnt$378) + 1)|0;
         $300 = HEAP32[$13>>2]|0;
         $301 = (FUNCTION_TABLE_ii[$300 & 63]($input)|0);
         $302 = HEAP32[$18>>2]|0;
         $303 = HEAP32[$19>>2]|0;
         $304 = ($302|0)<($303|0);
         if ($304) {
          $$pre229 = HEAP32[$17>>2]|0;
          $311 = $$pre229;$312 = $302;
         } else {
          $305 = (($303) + 128)|0;
          HEAP32[$19>>2] = $305;
          $306 = HEAP32[$17>>2]|0;
          $307 = (($303) + 129)|0;
          $308 = (_xrealloc($306,$307)|0);
          HEAP32[$17>>2] = $308;
          $$pre228 = HEAP32[$18>>2]|0;
          $311 = $308;$312 = $$pre228;
         }
         $309 = $301&255;
         $310 = (($311) + ($312)|0);
         HEAP8[$310>>0] = $309;
         $313 = HEAP32[$18>>2]|0;
         $314 = (($313) + 1)|0;
         HEAP32[$18>>2] = $314;
         $315 = HEAP32[$17>>2]|0;
         $316 = (($315) + ($314)|0);
         HEAP8[$316>>0] = 0;
         $heredoc_cnt$4 = $299;$redir_style$1 = 4;
         break;
        }
        case 62:  {
         $317 = HEAP32[$13>>2]|0;
         $318 = (FUNCTION_TABLE_ii[$317 & 63]($input)|0);
         $319 = HEAP32[$18>>2]|0;
         $320 = HEAP32[$19>>2]|0;
         $321 = ($319|0)<($320|0);
         if ($321) {
          $$pre227 = HEAP32[$17>>2]|0;
          $328 = $$pre227;$329 = $319;
         } else {
          $322 = (($320) + 128)|0;
          HEAP32[$19>>2] = $322;
          $323 = HEAP32[$17>>2]|0;
          $324 = (($320) + 129)|0;
          $325 = (_xrealloc($323,$324)|0);
          HEAP32[$17>>2] = $325;
          $$pre226 = HEAP32[$18>>2]|0;
          $328 = $325;$329 = $$pre226;
         }
         $326 = $318&255;
         $327 = (($328) + ($329)|0);
         HEAP8[$327>>0] = $326;
         $330 = HEAP32[$18>>2]|0;
         $331 = (($330) + 1)|0;
         HEAP32[$18>>2] = $331;
         $332 = HEAP32[$17>>2]|0;
         $333 = (($332) + ($331)|0);
         HEAP8[$333>>0] = 0;
         $heredoc_cnt$4 = $heredoc_cnt$378;$redir_style$1 = 3;
         break;
        }
        default: {
         $heredoc_cnt$4 = $heredoc_cnt$378;$redir_style$1 = 0;
        }
        }
        $334 = (_parse_redirect($ctx,$296,$redir_style$1,$input)|0);
        $$sink105 = $334;$heredoc_cnt$5 = $heredoc_cnt$4;
        label = 249;
        break;
       }
       case 35:  {
        $335 = HEAP32[$4>>2]|0;
        $336 = HEAP32[$21>>2]|0;
        $337 = $335 | $336;
        $338 = ($337|0)==(0);
        if ($338) {
         L129: while(1) {
          $339 = HEAP32[$27>>2]|0;
          $340 = (FUNCTION_TABLE_ii[$339 & 63]($input)|0);
          switch ($340|0) {
          case 10: case -1:  {
           break L129;
           break;
          }
          default: {
          }
          }
          $341 = HEAP32[$13>>2]|0;
          (FUNCTION_TABLE_ii[$341 & 63]($input)|0);
         }
         $342 = HEAP32[$18>>2]|0;
         $343 = HEAP32[$19>>2]|0;
         $344 = ($342|0)<($343|0);
         if ($344) {
          $$pre225 = HEAP32[$17>>2]|0;
          $350 = $$pre225;$351 = $342;
         } else {
          $345 = (($343) + 128)|0;
          HEAP32[$19>>2] = $345;
          $346 = HEAP32[$17>>2]|0;
          $347 = (($343) + 129)|0;
          $348 = (_xrealloc($346,$347)|0);
          HEAP32[$17>>2] = $348;
          $$pre224 = HEAP32[$18>>2]|0;
          $350 = $348;$351 = $$pre224;
         }
         $349 = (($350) + ($351)|0);
         HEAP8[$349>>0] = 10;
         $352 = HEAP32[$18>>2]|0;
         $353 = (($352) + 1)|0;
         HEAP32[$18>>2] = $353;
         $354 = HEAP32[$17>>2]|0;
         $355 = (($354) + ($353)|0);
         HEAP8[$355>>0] = 0;
         $heredoc_cnt$0$be = $heredoc_cnt$378;
         break L18;
        }
        break;
       }
       case 92:  {
        $356 = ($next$0|0)==(10);
        if ($356) {
         $357 = HEAP32[$18>>2]|0;
         $358 = (($357) + -1)|0;
         HEAP32[$18>>2] = $358;
         $359 = HEAP32[$17>>2]|0;
         $360 = (($359) + ($358)|0);
         HEAP8[$360>>0] = 0;
         $361 = HEAP32[$13>>2]|0;
         (FUNCTION_TABLE_ii[$361 & 63]($input)|0);
         $heredoc_cnt$0$be = $heredoc_cnt$378;
         break L18;
        }
        break;
       }
       default: {
       }
       }
       if ((label|0) == 249) {
        label = 0;
        $765 = ($$sink105|0)==(0);
        if ($765) {
         $heredoc_cnt$0$be = $heredoc_cnt$5;
         break;
        } else {
         $pctx$0 = $ctx;
         label = 250;
         break L1;
        }
       }
       $365 = HEAP32[$22>>2]|0;
       $366 = ($365|0)==(0);
       if ($366) {
        $367 = HEAP32[$25>>2]|0;
        $368 = ($367|0)==(0|0);
        if ($368) {
         HEAP32[$22>>2] = 2;
         $491 = 2;
        } else {
         $491 = 0;
        }
       } else {
        $491 = $365;
       }
       L146: do {
        switch ($ch$175|0) {
        case 125:  {
         $ch$175$lcssa207 = 125;
         label = 247;
         break L3;
         break;
        }
        case 35:  {
         _o_addQchr($dest,35);
         $heredoc_cnt$0$be = $heredoc_cnt$378;
         break L18;
         break;
        }
        case 92:  {
         $369 = ($next$0|0)==(-1);
         if ($369) {
          label = 133;
          break L3;
         }
         $370 = HEAP32[$13>>2]|0;
         $371 = (FUNCTION_TABLE_ii[$370 & 63]($input)|0);
         $372 = HEAP32[$4>>2]|0;
         $373 = HEAP32[$5>>2]|0;
         $374 = ($372|0)<($373|0);
         if ($374) {
          $$pre268 = HEAP32[$dest>>2]|0;
          $380 = $$pre268;$381 = $372;
         } else {
          $375 = (($373) + 128)|0;
          HEAP32[$5>>2] = $375;
          $376 = HEAP32[$dest>>2]|0;
          $377 = (($373) + 129)|0;
          $378 = (_xrealloc($376,$377)|0);
          HEAP32[$dest>>2] = $378;
          $$pre267 = HEAP32[$4>>2]|0;
          $380 = $378;$381 = $$pre267;
         }
         $379 = (($380) + ($381)|0);
         HEAP8[$379>>0] = 92;
         $382 = HEAP32[$4>>2]|0;
         $383 = (($382) + 1)|0;
         HEAP32[$4>>2] = $383;
         $384 = HEAP32[$dest>>2]|0;
         $385 = (($384) + ($383)|0);
         HEAP8[$385>>0] = 0;
         $386 = HEAP32[$4>>2]|0;
         $387 = HEAP32[$5>>2]|0;
         $388 = ($386|0)<($387|0);
         if ($388) {
          $$pre270 = HEAP32[$dest>>2]|0;
          $395 = $$pre270;$396 = $386;
         } else {
          $389 = (($387) + 128)|0;
          HEAP32[$5>>2] = $389;
          $390 = HEAP32[$dest>>2]|0;
          $391 = (($387) + 129)|0;
          $392 = (_xrealloc($390,$391)|0);
          HEAP32[$dest>>2] = $392;
          $$pre269 = HEAP32[$4>>2]|0;
          $395 = $392;$396 = $$pre269;
         }
         $393 = $371&255;
         $394 = (($395) + ($396)|0);
         HEAP8[$394>>0] = $393;
         $397 = HEAP32[$4>>2]|0;
         $398 = (($397) + 1)|0;
         HEAP32[$4>>2] = $398;
         $399 = HEAP32[$dest>>2]|0;
         $400 = (($399) + ($398)|0);
         HEAP8[$400>>0] = 0;
         $401 = HEAP32[$18>>2]|0;
         $402 = HEAP32[$19>>2]|0;
         $403 = ($401|0)<($402|0);
         if ($403) {
          $$pre272 = HEAP32[$17>>2]|0;
          $409 = $$pre272;$410 = $401;
         } else {
          $404 = (($402) + 128)|0;
          HEAP32[$19>>2] = $404;
          $405 = HEAP32[$17>>2]|0;
          $406 = (($402) + 129)|0;
          $407 = (_xrealloc($405,$406)|0);
          HEAP32[$17>>2] = $407;
          $$pre271 = HEAP32[$18>>2]|0;
          $409 = $407;$410 = $$pre271;
         }
         $408 = (($409) + ($410)|0);
         HEAP8[$408>>0] = $393;
         $411 = HEAP32[$18>>2]|0;
         $412 = (($411) + 1)|0;
         HEAP32[$18>>2] = $412;
         $413 = HEAP32[$17>>2]|0;
         $414 = (($413) + ($412)|0);
         HEAP8[$414>>0] = 0;
         HEAP32[$21>>2] = 1;
         $heredoc_cnt$0$be = $heredoc_cnt$378;
         break L18;
         break;
        }
        case 36:  {
         $415 = (_parse_dollar($17,$dest,$input,0)|0);
         $416 = ($415|0)==(0);
         if ($416) {
          $pctx$0 = $ctx;
          label = 250;
          break L1;
         } else {
          $heredoc_cnt$0$be = $heredoc_cnt$378;
          break L18;
         }
         break;
        }
        case 39:  {
         HEAP32[$21>>2] = 1;
         $417 = ($next$0|0)==(39);
         $418 = HEAP32[$25>>2]|0;
         $419 = ($418|0)==(0|0);
         $or$cond325 = $417 & $419;
         if ($or$cond325) {
          label = 147;
         } else {
          $420 = HEAP32[$13>>2]|0;
          $421 = (FUNCTION_TABLE_ii[$420 & 63]($input)|0);
          $422 = ($421|0)==(-1);
          if ($422) {
           label = 157;
           break L3;
          } else {
           $476 = $421;
          }
          while(1) {
           $468 = HEAP32[$18>>2]|0;
           $469 = HEAP32[$19>>2]|0;
           $470 = ($468|0)<($469|0);
           if ($470) {
            $$pre260 = HEAP32[$17>>2]|0;
            $478 = $$pre260;$479 = $468;
           } else {
            $471 = (($469) + 128)|0;
            HEAP32[$19>>2] = $471;
            $472 = HEAP32[$17>>2]|0;
            $473 = (($469) + 129)|0;
            $474 = (_xrealloc($472,$473)|0);
            HEAP32[$17>>2] = $474;
            $$pre259 = HEAP32[$18>>2]|0;
            $478 = $474;$479 = $$pre259;
           }
           $475 = $476&255;
           $477 = (($478) + ($479)|0);
           HEAP8[$477>>0] = $475;
           $480 = HEAP32[$18>>2]|0;
           $481 = (($480) + 1)|0;
           HEAP32[$18>>2] = $481;
           $482 = HEAP32[$17>>2]|0;
           $483 = (($482) + ($481)|0);
           HEAP8[$483>>0] = 0;
           $484 = ($476|0)==(39);
           if ($484) {
            $heredoc_cnt$0$be = $heredoc_cnt$378;
            break L18;
           }
           _o_addqchr($dest,$476);
           $485 = HEAP32[$13>>2]|0;
           $486 = (FUNCTION_TABLE_ii[$485 & 63]($input)|0);
           $487 = ($486|0)==(-1);
           if ($487) {
            label = 157;
            break L3;
           } else {
            $476 = $486;
           }
          }
         }
         break;
        }
        case 34:  {
         HEAP32[$21>>2] = 1;
         $488 = ($next$0|0)==(34);
         $489 = HEAP32[$25>>2]|0;
         $490 = ($489|0)==(0|0);
         $or$cond328 = $488 & $490;
         if ($or$cond328) {
          label = 147;
         } else {
          $492 = ($491|0)==(2);
          if ($492) {
           $493 = HEAP32[$26>>2]|0;
           $494 = $493 | 1;
           HEAP32[$26>>2] = $494;
          }
          $495 = (_encode_string($17,$dest,$input,34,1)|0);
          $496 = ($495|0)==(0);
          if ($496) {
           $pctx$0 = $ctx;
           label = 250;
           break L1;
          }
          $497 = HEAP32[$26>>2]|0;
          $498 = $497 & -2;
          HEAP32[$26>>2] = $498;
          $heredoc_cnt$0$be = $heredoc_cnt$378;
          break L18;
         }
         break;
        }
        case 96:  {
         $499 = HEAP32[$4>>2]|0;
         $500 = HEAP32[$5>>2]|0;
         $501 = ($499|0)<($500|0);
         if ($501) {
          $$pre250 = HEAP32[$dest>>2]|0;
          $507 = $$pre250;$508 = $499;
         } else {
          $502 = (($500) + 128)|0;
          HEAP32[$5>>2] = $502;
          $503 = HEAP32[$dest>>2]|0;
          $504 = (($500) + 129)|0;
          $505 = (_xrealloc($503,$504)|0);
          HEAP32[$dest>>2] = $505;
          $$pre249 = HEAP32[$4>>2]|0;
          $507 = $505;$508 = $$pre249;
         }
         $506 = (($507) + ($508)|0);
         HEAP8[$506>>0] = 3;
         $509 = HEAP32[$4>>2]|0;
         $510 = (($509) + 1)|0;
         HEAP32[$4>>2] = $510;
         $511 = HEAP32[$dest>>2]|0;
         $512 = (($511) + ($510)|0);
         HEAP8[$512>>0] = 0;
         $513 = HEAP32[$4>>2]|0;
         $514 = HEAP32[$5>>2]|0;
         $515 = ($513|0)<($514|0);
         if ($515) {
          $$pre252 = HEAP32[$dest>>2]|0;
          $521 = $$pre252;$522 = $513;
         } else {
          $516 = (($514) + 128)|0;
          HEAP32[$5>>2] = $516;
          $517 = HEAP32[$dest>>2]|0;
          $518 = (($514) + 129)|0;
          $519 = (_xrealloc($517,$518)|0);
          HEAP32[$dest>>2] = $519;
          $$pre251 = HEAP32[$4>>2]|0;
          $521 = $519;$522 = $$pre251;
         }
         $520 = (($521) + ($522)|0);
         HEAP8[$520>>0] = 96;
         $523 = HEAP32[$4>>2]|0;
         $524 = (($523) + 1)|0;
         HEAP32[$4>>2] = $524;
         $525 = HEAP32[$dest>>2]|0;
         $526 = (($525) + ($524)|0);
         HEAP8[$526>>0] = 0;
         $527 = HEAP32[$4>>2]|0;
         $528 = (_add_till_backquote($dest,$input,0)|0);
         $529 = ($528|0)==(0);
         if ($529) {
          $pctx$0 = $ctx;
          label = 250;
          break L1;
         }
         $530 = HEAP32[$dest>>2]|0;
         $531 = (($530) + ($527)|0);
         $532 = (_strlen($531)|0);
         $533 = HEAP32[$18>>2]|0;
         $534 = (($533) + ($532))|0;
         $535 = HEAP32[$19>>2]|0;
         $536 = ($534|0)>($535|0);
         if ($536) {
          $537 = $532 << 1;
          $538 = ($537>>>0)>(128);
          $539 = $538 ? $537 : 128;
          $540 = (($539) + ($535))|0;
          HEAP32[$19>>2] = $540;
          $541 = HEAP32[$17>>2]|0;
          $542 = (($540) + 1)|0;
          $543 = (_xrealloc($541,$542)|0);
          HEAP32[$17>>2] = $543;
          $$pre253 = HEAP32[$18>>2]|0;
          $545 = $543;$546 = $$pre253;
         } else {
          $$pre254 = HEAP32[$17>>2]|0;
          $545 = $$pre254;$546 = $533;
         }
         $544 = (($545) + ($546)|0);
         _memcpy(($544|0),($531|0),($532|0))|0;
         $547 = HEAP32[$18>>2]|0;
         $548 = (($547) + ($532))|0;
         HEAP32[$18>>2] = $548;
         $549 = HEAP32[$17>>2]|0;
         $550 = (($549) + ($548)|0);
         HEAP8[$550>>0] = 0;
         $551 = HEAP32[$18>>2]|0;
         $552 = HEAP32[$19>>2]|0;
         $553 = ($551|0)<($552|0);
         if ($553) {
          $$pre256 = HEAP32[$17>>2]|0;
          $559 = $$pre256;$560 = $551;
         } else {
          $554 = (($552) + 128)|0;
          HEAP32[$19>>2] = $554;
          $555 = HEAP32[$17>>2]|0;
          $556 = (($552) + 129)|0;
          $557 = (_xrealloc($555,$556)|0);
          HEAP32[$17>>2] = $557;
          $$pre255 = HEAP32[$18>>2]|0;
          $559 = $557;$560 = $$pre255;
         }
         $558 = (($559) + ($560)|0);
         HEAP8[$558>>0] = 96;
         $561 = HEAP32[$18>>2]|0;
         $562 = (($561) + 1)|0;
         HEAP32[$18>>2] = $562;
         $563 = HEAP32[$17>>2]|0;
         $564 = (($563) + ($562)|0);
         HEAP8[$564>>0] = 0;
         $565 = HEAP32[$4>>2]|0;
         $566 = HEAP32[$5>>2]|0;
         $567 = ($565|0)<($566|0);
         if ($567) {
          $$pre258 = HEAP32[$dest>>2]|0;
          $573 = $$pre258;$574 = $565;
         } else {
          $568 = (($566) + 128)|0;
          HEAP32[$5>>2] = $568;
          $569 = HEAP32[$dest>>2]|0;
          $570 = (($566) + 129)|0;
          $571 = (_xrealloc($569,$570)|0);
          HEAP32[$dest>>2] = $571;
          $$pre257 = HEAP32[$4>>2]|0;
          $573 = $571;$574 = $$pre257;
         }
         $572 = (($573) + ($574)|0);
         HEAP8[$572>>0] = 3;
         $575 = HEAP32[$4>>2]|0;
         $576 = (($575) + 1)|0;
         HEAP32[$4>>2] = $576;
         $577 = HEAP32[$dest>>2]|0;
         $578 = (($577) + ($576)|0);
         HEAP8[$578>>0] = 0;
         $heredoc_cnt$0$be = $heredoc_cnt$378;
         break L18;
         break;
        }
        case 59:  {
         label = 185;
         break;
        }
        case 38:  {
         $603 = (_done_word($dest,$ctx)|0);
         $604 = ($603|0)==(0);
         if (!($604)) {
          $pctx$0 = $ctx;
          label = 250;
          break L1;
         }
         $605 = ($next$0|0)==(38);
         if (!($605)) {
          _done_pipe($ctx,4);
          break L146;
         }
         $606 = HEAP32[$13>>2]|0;
         $607 = (FUNCTION_TABLE_ii[$606 & 63]($input)|0);
         $608 = HEAP32[$18>>2]|0;
         $609 = HEAP32[$19>>2]|0;
         $610 = ($608|0)<($609|0);
         if ($610) {
          $$pre246 = HEAP32[$17>>2]|0;
          $617 = $$pre246;$618 = $608;
         } else {
          $611 = (($609) + 128)|0;
          HEAP32[$19>>2] = $611;
          $612 = HEAP32[$17>>2]|0;
          $613 = (($609) + 129)|0;
          $614 = (_xrealloc($612,$613)|0);
          HEAP32[$17>>2] = $614;
          $$pre245 = HEAP32[$18>>2]|0;
          $617 = $614;$618 = $$pre245;
         }
         $615 = $607&255;
         $616 = (($617) + ($618)|0);
         HEAP8[$616>>0] = $615;
         $619 = HEAP32[$18>>2]|0;
         $620 = (($619) + 1)|0;
         HEAP32[$18>>2] = $620;
         $621 = HEAP32[$17>>2]|0;
         $622 = (($621) + ($620)|0);
         HEAP8[$622>>0] = 0;
         _done_pipe($ctx,2);
         break;
        }
        case 124:  {
         $623 = (_done_word($dest,$ctx)|0);
         $624 = ($623|0)==(0);
         if (!($624)) {
          $pctx$0 = $ctx;
          label = 250;
          break L1;
         }
         $625 = HEAP32[$23>>2]|0;
         $626 = ($625|0)==(14);
         if ($626) {
          $heredoc_cnt$0$be = $heredoc_cnt$378;
          break L18;
         }
         $627 = ($next$0|0)==(124);
         if (!($627)) {
          (_done_command($ctx)|0);
          break L146;
         }
         $628 = HEAP32[$13>>2]|0;
         $629 = (FUNCTION_TABLE_ii[$628 & 63]($input)|0);
         $630 = HEAP32[$18>>2]|0;
         $631 = HEAP32[$19>>2]|0;
         $632 = ($630|0)<($631|0);
         if ($632) {
          $$pre244 = HEAP32[$17>>2]|0;
          $639 = $$pre244;$640 = $630;
         } else {
          $633 = (($631) + 128)|0;
          HEAP32[$19>>2] = $633;
          $634 = HEAP32[$17>>2]|0;
          $635 = (($631) + 129)|0;
          $636 = (_xrealloc($634,$635)|0);
          HEAP32[$17>>2] = $636;
          $$pre243 = HEAP32[$18>>2]|0;
          $639 = $636;$640 = $$pre243;
         }
         $637 = $629&255;
         $638 = (($639) + ($640)|0);
         HEAP8[$638>>0] = $637;
         $641 = HEAP32[$18>>2]|0;
         $642 = (($641) + 1)|0;
         HEAP32[$18>>2] = $642;
         $643 = HEAP32[$17>>2]|0;
         $644 = (($643) + ($642)|0);
         HEAP8[$644>>0] = 0;
         _done_pipe($ctx,3);
         break;
        }
        case 40:  {
         $645 = HEAP32[$23>>2]|0;
         $646 = ($645|0)==(14);
         $647 = HEAP32[$20>>2]|0;
         if ($646) {
          $648 = ((($647)) + 28|0);
          $649 = HEAP32[$648>>2]|0;
          $650 = ($649|0)==(0|0);
          $651 = HEAP32[$4>>2]|0;
          $652 = ($651|0)==(0);
          $or$cond34 = $650 & $652;
          if ($or$cond34) {
           $653 = HEAP32[$21>>2]|0;
           $654 = ($653|0)==(0);
           if ($654) {
            $heredoc_cnt$0$be = $heredoc_cnt$378;
            break L18;
           }
          } else {
           label = 213;
          }
         } else {
          label = 213;
         }
         if ((label|0) == 213) {
          label = 0;
          $$pr = HEAP32[$21>>2]|0;
          $656 = ($$pr|0)==(0);
          if ($656) {
           $657 = HEAP32[$4>>2]|0;
           $658 = ($657|0)==(0);
           if (!($658)) {
            $659 = (_done_word($dest,$ctx)|0);
            $660 = ($659|0)==(0);
            if (!($660)) {
             $pctx$0 = $ctx;
             label = 250;
             break L1;
            }
           }
           $661 = ((($647)) + 28|0);
           $662 = HEAP32[$661>>2]|0;
           $663 = ($662|0)==(0|0);
           if (!($663)) {
            $664 = ((($662)) + 4|0);
            $665 = HEAP32[$664>>2]|0;
            $666 = ($665|0)==(0|0);
            if (!($666)) {
             label = 218;
             break L3;
            }
            L230: while(1) {
             $668 = HEAP32[$13>>2]|0;
             $669 = (FUNCTION_TABLE_ii[$668 & 63]($input)|0);
             switch ($669|0) {
             case 9: case 32:  {
              break;
             }
             case 41:  {
              break L230;
              break;
             }
             default: {
              $$lcssa413 = $669;
              label = 220;
              break L3;
             }
             }
            }
            $674 = HEAP32[$18>>2]|0;
            $675 = HEAP32[$19>>2]|0;
            $676 = ($674|0)<($675|0);
            if ($676) {
             $$pre235 = HEAP32[$17>>2]|0;
             $682 = $$pre235;$683 = $674;
            } else {
             $677 = (($675) + 128)|0;
             HEAP32[$19>>2] = $677;
             $678 = HEAP32[$17>>2]|0;
             $679 = (($675) + 129)|0;
             $680 = (_xrealloc($678,$679)|0);
             HEAP32[$17>>2] = $680;
             $$pre234 = HEAP32[$18>>2]|0;
             $682 = $680;$683 = $$pre234;
            }
            $681 = (($682) + ($683)|0);
            HEAP8[$681>>0] = 41;
            $684 = HEAP32[$18>>2]|0;
            $685 = (($684) + 1)|0;
            HEAP32[$18>>2] = $685;
            $686 = HEAP32[$17>>2]|0;
            $687 = (($686) + ($685)|0);
            HEAP8[$687>>0] = 0;
            L237: while(1) {
             $688 = HEAP32[$13>>2]|0;
             $689 = (FUNCTION_TABLE_ii[$688 & 63]($input)|0);
             switch ($689|0) {
             case 9: case 10: case 32:  {
              break;
             }
             case 123:  {
              break L237;
              break;
             }
             default: {
              $$lcssa415 = $689;
              label = 226;
              break L3;
             }
             }
            }
            $694 = HEAP32[$18>>2]|0;
            $695 = HEAP32[$19>>2]|0;
            $696 = ($694|0)<($695|0);
            if ($696) {
             $$pre238 = HEAP32[$17>>2]|0;
             $702 = $$pre238;$703 = $694;
            } else {
             $697 = (($695) + 128)|0;
             HEAP32[$19>>2] = $697;
             $698 = HEAP32[$17>>2]|0;
             $699 = (($695) + 129)|0;
             $700 = (_xrealloc($698,$699)|0);
             HEAP32[$17>>2] = $700;
             $$pre236 = HEAP32[$18>>2]|0;
             $702 = $700;$703 = $$pre236;
            }
            $701 = (($702) + ($703)|0);
            HEAP8[$701>>0] = 123;
            $704 = HEAP32[$18>>2]|0;
            $705 = (($704) + 1)|0;
            HEAP32[$18>>2] = $705;
            $706 = HEAP32[$17>>2]|0;
            $707 = (($706) + ($705)|0);
            HEAP8[$707>>0] = 0;
            $708 = ((($647)) + 8|0);
            HEAP32[$708>>2] = 3;
            $792 = $647;
            label = 232;
            break L146;
           }
          }
         }
         $709 = ((($647)) + 8|0);
         HEAP32[$709>>2] = 1;
         $754 = $647;$endch$0$i = 41;
         label = 238;
         break;
        }
        case 123:  {
         $655 = HEAP32[$20>>2]|0;
         $792 = $655;
         label = 232;
         break;
        }
        case 41:  {
         $762 = HEAP32[$23>>2]|0;
         $763 = ($762|0)==(14);
         if ($763) {
          label = 185;
         } else {
          $ch$175$lcssa207 = 41;
          label = 247;
          break L3;
         }
         break;
        }
        default: {
         $ch$175$lcssa = $ch$175;
         label = 248;
         break L3;
        }
        }
       } while(0);
       L247: do {
        if ((label|0) == 147) {
         label = 0;
         $423 = HEAP32[$18>>2]|0;
         $424 = HEAP32[$19>>2]|0;
         $425 = ($423|0)<($424|0);
         if ($425) {
          $$pre262 = HEAP32[$17>>2]|0;
          $432 = $$pre262;$433 = $423;
         } else {
          $426 = (($424) + 128)|0;
          HEAP32[$19>>2] = $426;
          $427 = HEAP32[$17>>2]|0;
          $428 = (($424) + 129)|0;
          $429 = (_xrealloc($427,$428)|0);
          HEAP32[$17>>2] = $429;
          $$pre261 = HEAP32[$18>>2]|0;
          $432 = $429;$433 = $$pre261;
         }
         $430 = $next$0&255;
         $431 = (($432) + ($433)|0);
         HEAP8[$431>>0] = $430;
         $434 = HEAP32[$18>>2]|0;
         $435 = (($434) + 1)|0;
         HEAP32[$18>>2] = $435;
         $436 = HEAP32[$17>>2]|0;
         $437 = (($436) + ($435)|0);
         HEAP8[$437>>0] = 0;
         $438 = HEAP32[$13>>2]|0;
         (FUNCTION_TABLE_ii[$438 & 63]($input)|0);
         $439 = HEAP32[$4>>2]|0;
         $440 = HEAP32[$5>>2]|0;
         $441 = ($439|0)<($440|0);
         if ($441) {
          $$pre264 = HEAP32[$dest>>2]|0;
          $447 = $$pre264;$448 = $439;
         } else {
          $442 = (($440) + 128)|0;
          HEAP32[$5>>2] = $442;
          $443 = HEAP32[$dest>>2]|0;
          $444 = (($440) + 129)|0;
          $445 = (_xrealloc($443,$444)|0);
          HEAP32[$dest>>2] = $445;
          $$pre263 = HEAP32[$4>>2]|0;
          $447 = $445;$448 = $$pre263;
         }
         $446 = (($447) + ($448)|0);
         HEAP8[$446>>0] = 3;
         $449 = HEAP32[$4>>2]|0;
         $450 = (($449) + 1)|0;
         HEAP32[$4>>2] = $450;
         $451 = HEAP32[$dest>>2]|0;
         $452 = (($451) + ($450)|0);
         HEAP8[$452>>0] = 0;
         $453 = HEAP32[$4>>2]|0;
         $454 = HEAP32[$5>>2]|0;
         $455 = ($453|0)<($454|0);
         if ($455) {
          $$pre266 = HEAP32[$dest>>2]|0;
          $461 = $$pre266;$462 = $453;
         } else {
          $456 = (($454) + 128)|0;
          HEAP32[$5>>2] = $456;
          $457 = HEAP32[$dest>>2]|0;
          $458 = (($454) + 129)|0;
          $459 = (_xrealloc($457,$458)|0);
          HEAP32[$dest>>2] = $459;
          $$pre265 = HEAP32[$4>>2]|0;
          $461 = $459;$462 = $$pre265;
         }
         $460 = (($461) + ($462)|0);
         HEAP8[$460>>0] = 3;
         $463 = HEAP32[$4>>2]|0;
         $464 = (($463) + 1)|0;
         HEAP32[$4>>2] = $464;
         $465 = HEAP32[$dest>>2]|0;
         $466 = (($465) + ($464)|0);
         HEAP8[$466>>0] = 0;
         $heredoc_cnt$0$be = $heredoc_cnt$378;
         break L18;
        }
        else if ((label|0) == 185) {
         label = 0;
         $579 = (_done_word($dest,$ctx)|0);
         $580 = ($579|0)==(0);
         if (!($580)) {
          $pctx$0 = $ctx;
          label = 250;
          break L1;
         }
         _done_pipe($ctx,1);
         while(1) {
          $581 = HEAP32[$27>>2]|0;
          $582 = (FUNCTION_TABLE_ii[$581 & 63]($input)|0);
          $583 = ($582|0)==(59);
          if (!($583)) {
           break L247;
          }
          $584 = HEAP32[$13>>2]|0;
          $585 = (FUNCTION_TABLE_ii[$584 & 63]($input)|0);
          $586 = HEAP32[$18>>2]|0;
          $587 = HEAP32[$19>>2]|0;
          $588 = ($586|0)<($587|0);
          if ($588) {
           $$pre248 = HEAP32[$17>>2]|0;
           $595 = $$pre248;$596 = $586;
          } else {
           $589 = (($587) + 128)|0;
           HEAP32[$19>>2] = $589;
           $590 = HEAP32[$17>>2]|0;
           $591 = (($587) + 129)|0;
           $592 = (_xrealloc($590,$591)|0);
           HEAP32[$17>>2] = $592;
           $$pre247 = HEAP32[$18>>2]|0;
           $595 = $592;$596 = $$pre247;
          }
          $593 = $585&255;
          $594 = (($595) + ($596)|0);
          HEAP8[$594>>0] = $593;
          $597 = HEAP32[$18>>2]|0;
          $598 = (($597) + 1)|0;
          HEAP32[$18>>2] = $598;
          $599 = HEAP32[$17>>2]|0;
          $600 = (($599) + ($598)|0);
          HEAP8[$600>>0] = 0;
          $601 = HEAP32[$23>>2]|0;
          $602 = ($601|0)==(15);
          if ($602) {
           break;
          }
         }
         HEAP32[$28>>2] = 1;
         HEAP32[$23>>2] = 14;
        }
        else if ((label|0) == 232) {
         label = 0;
         $710 = HEAP32[$13>>2]|0;
         $711 = (FUNCTION_TABLE_ii[$710 & 63]($input)|0);
         switch ($711|0) {
         case 9: case 10: case 32:  {
          break;
         }
         default: {
          $$lcssa426 = $711;
          label = 233;
          break L3;
         }
         }
         $716 = HEAP32[$18>>2]|0;
         $717 = HEAP32[$19>>2]|0;
         $718 = ($716|0)<($717|0);
         if ($718) {
          $$pre240 = HEAP32[$17>>2]|0;
          $725 = $$pre240;$726 = $716;
         } else {
          $719 = (($717) + 128)|0;
          HEAP32[$19>>2] = $719;
          $720 = HEAP32[$17>>2]|0;
          $721 = (($717) + 129)|0;
          $722 = (_xrealloc($720,$721)|0);
          HEAP32[$17>>2] = $722;
          $$pre239 = HEAP32[$18>>2]|0;
          $725 = $722;$726 = $$pre239;
         }
         $723 = $711&255;
         $724 = (($725) + ($726)|0);
         HEAP8[$724>>0] = $723;
         $727 = HEAP32[$18>>2]|0;
         $728 = (($727) + 1)|0;
         HEAP32[$18>>2] = $728;
         $729 = HEAP32[$17>>2]|0;
         $730 = (($729) + ($728)|0);
         HEAP8[$730>>0] = 0;
         $754 = $792;$endch$0$i = 125;
         label = 238;
        }
       } while(0);
       if ((label|0) == 238) {
        label = 0;
        HEAP32[$as_string$i>>2] = 0;
        $731 = (_parse_stream($as_string$i,$input,$endch$0$i)|0);
        $732 = HEAP32[$as_string$i>>2]|0;
        $733 = ($732|0)==(0|0);
        if (!($733)) {
         $734 = (_strlen($732)|0);
         $735 = HEAP32[$18>>2]|0;
         $736 = (($735) + ($734))|0;
         $737 = HEAP32[$19>>2]|0;
         $738 = ($736|0)>($737|0);
         if ($738) {
          $739 = $734 << 1;
          $740 = ($739>>>0)>(128);
          $741 = $740 ? $739 : 128;
          $742 = (($741) + ($737))|0;
          HEAP32[$19>>2] = $742;
          $743 = HEAP32[$17>>2]|0;
          $744 = (($742) + 1)|0;
          $745 = (_xrealloc($743,$744)|0);
          HEAP32[$17>>2] = $745;
          $$pre241 = HEAP32[$18>>2]|0;
          $747 = $745;$748 = $$pre241;
         } else {
          $$pre242 = HEAP32[$17>>2]|0;
          $747 = $$pre242;$748 = $735;
         }
         $746 = (($747) + ($748)|0);
         _memcpy(($746|0),($732|0),($734|0))|0;
         $749 = HEAP32[$18>>2]|0;
         $750 = (($749) + ($734))|0;
         HEAP32[$18>>2] = $750;
         $751 = HEAP32[$17>>2]|0;
         $752 = (($751) + ($750)|0);
         HEAP8[$752>>0] = 0;
        }
        $switch$i = ($731>>>0)<((2)>>>0);
        if ($switch$i) {
         label = 245;
         break L3;
        }
        $753 = ((($754)) + 16|0);
        HEAP32[$753>>2] = $731;
        $755 = HEAP32[$as_string$i>>2]|0;
        $756 = (_strlen($755)|0);
        $757 = (($756) + -1)|0;
        $758 = (($755) + ($757)|0);
        HEAP8[$758>>0] = 0;
        $759 = HEAP32[$as_string$i>>2]|0;
        $760 = ((($754)) + 20|0);
        HEAP32[$760>>2] = $759;
       }
       HEAP32[$22>>2] = 0;
       $heredoc_cnt$0$be = $heredoc_cnt$378;
      }
     } else {
      $ch$0 = $60;
      label = 25;
     }
    } while(0);
    do {
     if ((label|0) == 25) {
      label = 0;
      _o_addQchr($dest,$ch$0);
      $86 = HEAP32[$22>>2]|0;
      $87 = ($86|0)==(0);
      if ($87) {
       $$old9 = ($ch$0|0)==(61);
       if (!($$old9)) {
        $heredoc_cnt$0$be = $heredoc_cnt$0183;
        break;
       }
      } else {
       $88 = ($86|0)==(3);
       $89 = ($ch$0|0)==(61);
       $or$cond10 = $89 & $88;
       if (!($or$cond10)) {
        $heredoc_cnt$0$be = $heredoc_cnt$0183;
        break;
       }
      }
      $90 = HEAP32[$dest>>2]|0;
      $91 = (_is_well_formed_var_name($90,61)|0);
      $92 = ($91|0)==(0);
      if ($92) {
       $heredoc_cnt$0$be = $heredoc_cnt$0183;
      } else {
       HEAP32[$22>>2] = 1;
       $heredoc_cnt$0$be = $heredoc_cnt$0183;
      }
     }
    } while(0);
    $362 = HEAP32[$13>>2]|0;
    $363 = (FUNCTION_TABLE_ii[$362 & 63]($input)|0);
    $364 = ($363|0)==(-1);
    if ($364) {
     $heredoc_cnt$0$be$lcssa = $heredoc_cnt$0$be;
     label = 3;
     break;
    } else {
     $60 = $363;$heredoc_cnt$0183 = $heredoc_cnt$0$be;
    }
   }
   switch (label|0) {
    case 3: {
     $31 = ($heredoc_cnt$0$be$lcssa|0)==(0);
     if ($31) {
      label = 5;
      break L1;
     }
     HEAP32[$vararg_buffer>>2] = 5781;
     _bb_error_msg(4205,$vararg_buffer);
     $pctx$0 = $ctx;
     label = 250;
     break L1;
     break;
    }
    case 61: {
     _free($$lcssa10$i$i);
     break;
    }
    case 90: {
     HEAP32[$vararg_buffer7>>2] = 5781;
     _bb_error_msg(4205,$vararg_buffer7);
     $pctx$0 = $ctx;
     label = 250;
     break L1;
     break;
    }
    case 93: {
     $267 = HEAP32[$dest>>2]|0;
     _free($267);
     ;HEAP32[$dest>>2]=0|0;HEAP32[$dest+4>>2]=0|0;HEAP32[$dest+8>>2]=0|0;HEAP32[$dest+12>>2]=0|0;HEAP32[$dest+16>>2]=0|0;HEAP32[$dest+20>>2]=0|0;HEAP32[$dest+24>>2]=0|0;
     $268 = ($pstring|0)==(0|0);
     if ($268) {
      $270 = HEAP32[$17>>2]|0;
      _free($270);
     } else {
      $269 = HEAP32[$17>>2]|0;
      HEAP32[$pstring>>2] = $269;
     }
     $271 = HEAP32[$1>>2]|0;
     $272 = (($271) + -1)|0;
     HEAP32[$1>>2] = $272;
     $273 = HEAP32[$ctx>>2]|0;
     $$3 = $273;
     break L1;
     break;
    }
    case 133: {
     HEAP32[$vararg_buffer10>>2] = 4252;
     _bb_error_msg(4235,$vararg_buffer10);
     _xfunc_die();
     // unreachable;
     break;
    }
    case 157: {
     HEAP8[$msg$i>>0] = 39;
     $467 = ((($msg$i)) + 1|0);
     HEAP8[$467>>0] = 0;
     HEAP32[$vararg_buffer13>>2] = $msg$i;
     _bb_error_msg(4205,$vararg_buffer13);
     $pctx$0 = $ctx;
     label = 250;
     break L1;
     break;
    }
    case 218: {
     HEAP8[$msg$i>>0] = 40;
     $667 = ((($msg$i)) + 1|0);
     HEAP8[$667>>0] = 0;
     HEAP32[$vararg_buffer16>>2] = $msg$i;
     _bb_error_msg(5848,$vararg_buffer16);
     $pctx$0 = $ctx;
     label = 250;
     break L1;
     break;
    }
    case 220: {
     $670 = $$lcssa413&255;
     HEAP8[$msg$i>>0] = $670;
     $671 = ((($msg$i)) + 1|0);
     HEAP8[$671>>0] = 0;
     $672 = ($$lcssa413|0)==(-1);
     $673 = $672 ? 5876 : $msg$i;
     HEAP32[$vararg_buffer19>>2] = $673;
     _bb_error_msg(5848,$vararg_buffer19);
     $pctx$0 = $ctx;
     label = 250;
     break L1;
     break;
    }
    case 226: {
     $690 = $$lcssa415&255;
     HEAP8[$msg$i>>0] = $690;
     $691 = ((($msg$i)) + 1|0);
     HEAP8[$691>>0] = 0;
     $692 = ($$lcssa415|0)==(-1);
     $693 = $692 ? 5876 : $msg$i;
     HEAP32[$vararg_buffer22>>2] = $693;
     _bb_error_msg(5848,$vararg_buffer22);
     $pctx$0 = $ctx;
     label = 250;
     break L1;
     break;
    }
    case 233: {
     $712 = $$lcssa426&255;
     HEAP8[$msg$i>>0] = $712;
     $713 = ((($msg$i)) + 1|0);
     HEAP8[$713>>0] = 0;
     $714 = ($$lcssa426|0)==(-1);
     $715 = $714 ? 5876 : $msg$i;
     HEAP32[$vararg_buffer25>>2] = $715;
     _bb_error_msg(5848,$vararg_buffer25);
     $pctx$0 = $ctx;
     label = 250;
     break L1;
     break;
    }
    case 245: {
     $761 = HEAP32[$as_string$i>>2]|0;
     _free($761);
     $pctx$0 = $ctx;
     label = 250;
     break L1;
     break;
    }
    case 247: {
     HEAP8[$msg$i>>0] = $ch$175$lcssa207;
     $764 = ((($msg$i)) + 1|0);
     HEAP8[$764>>0] = 0;
     HEAP32[$vararg_buffer28>>2] = $msg$i;
     _bb_error_msg(5848,$vararg_buffer28);
     $pctx$0 = $ctx;
     label = 250;
     break L1;
     break;
    }
    case 248: {
     HEAP32[$vararg_buffer31>>2] = $ch$175$lcssa;
     _bb_error_msg_and_die(5880,$vararg_buffer31);
     // unreachable;
     break;
    }
   }
   HEAP32[$vararg_buffer4>>2] = 5811;
   _bb_error_msg(4235,$vararg_buffer4);
   $pctx$0 = $ctx;
   label = 250;
  }
 } while(0);
 do {
  if ((label|0) == 5) {
   $32 = ($end_trigger|0)==(41);
   if ($32) {
    HEAP8[$msg$i>>0] = 40;
    $33 = ((($msg$i)) + 1|0);
    HEAP8[$33>>0] = 0;
    HEAP32[$vararg_buffer1>>2] = $msg$i;
    _bb_error_msg(4205,$vararg_buffer1);
    $pctx$0 = $ctx;
    label = 250;
    break;
   }
   $34 = (_done_word($dest,$ctx)|0);
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = HEAP32[$dest>>2]|0;
    _free($36);
    ;HEAP32[$dest>>2]=0|0;HEAP32[$dest+4>>2]=0|0;HEAP32[$dest+8>>2]=0|0;HEAP32[$dest+12>>2]=0|0;HEAP32[$dest+16>>2]=0|0;HEAP32[$dest+20>>2]=0|0;HEAP32[$dest+24>>2]=0|0;
    _done_pipe($ctx,1);
    $37 = HEAP32[$ctx>>2]|0;
    $38 = ((($37)) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($39|0)==(0);
    if ($40) {
     $41 = ((($37)) + 40|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==(0);
     if ($43) {
      $$01$i = $37;
      while(1) {
       $44 = (_free_pipe($$01$i)|0);
       $45 = ($44|0)==(0|0);
       if ($45) {
        $pi$0 = 0;
        break;
       } else {
        $$01$i = $44;
       }
      }
     } else {
      $pi$0 = $37;
     }
    } else {
     $pi$0 = $37;
    }
    $46 = ($pstring|0)==(0|0);
    $47 = ((($ctx)) + 16|0);
    if ($46) {
     $49 = HEAP32[$47>>2]|0;
     _free($49);
    } else {
     $48 = HEAP32[$47>>2]|0;
     HEAP32[$pstring>>2] = $48;
    }
    $50 = HEAP32[$1>>2]|0;
    $51 = (($50) + -1)|0;
    HEAP32[$1>>2] = $51;
    $$3 = $pi$0;
   } else {
    $pctx$0 = $ctx;
    label = 250;
   }
  }
 } while(0);
 if ((label|0) == 250) {
  while(1) {
   label = 0;
   _done_pipe($pctx$0,1);
   $766 = HEAP32[$pctx$0>>2]|0;
   $767 = ($766|0)==(0|0);
   if (!($767)) {
    $$01$i$38 = $766;
    while(1) {
     $768 = (_free_pipe($$01$i$38)|0);
     $769 = ($768|0)==(0|0);
     if ($769) {
      break;
     } else {
      $$01$i$38 = $768;
     }
    }
   }
   $770 = ((($pctx$0)) + 16|0);
   $771 = HEAP32[$770>>2]|0;
   _free($771);
   $772 = ((($pctx$0)) + 60|0);
   $773 = HEAP32[$772>>2]|0;
   $774 = ($pctx$0|0)==($ctx|0);
   if (!($774)) {
    _free($pctx$0);
   }
   $775 = ($773|0)==(0|0);
   if ($775) {
    break;
   } else {
    $pctx$0 = $773;
    label = 250;
   }
  }
  $776 = HEAP32[$dest>>2]|0;
  _free($776);
  ;HEAP32[$dest>>2]=0|0;HEAP32[$dest+4>>2]=0|0;HEAP32[$dest+8>>2]=0|0;HEAP32[$dest+12>>2]=0|0;HEAP32[$dest+16>>2]=0|0;HEAP32[$dest+20>>2]=0|0;HEAP32[$dest+24>>2]=0|0;
  $777 = ((($0)) + 80|0);
  HEAP32[$777>>2] = 1;
  $778 = ($pstring|0)==(0|0);
  if (!($778)) {
   HEAP32[$pstring>>2] = 0;
  }
  $779 = HEAP32[$1>>2]|0;
  $780 = (($779) + -1)|0;
  HEAP32[$1>>2] = $780;
  $$3 = (1);
 }
 STACKTOP = sp;return ($$3|0);
}
function _run_list($pi) {
 $pi = $pi|0;
 var $$026 = 0, $$026$lcssa698 = 0, $$026$lcssa699 = 0, $$026$lcssa700 = 0, $$026$lcssa702 = 0, $$026$lcssa703 = 0, $$026$lcssa705 = 0, $$026$lcssa706 = 0, $$026$lcssa707 = 0, $$026$ph = 0, $$026$ph57 = 0, $$026709 = 0, $$026710 = 0, $$026711 = 0, $$026712 = 0, $$026713 = 0, $$1 = 0, $$lcssa = 0, $$lcssa720 = 0, $$lcssa721 = 0;
 var $$lcssa722 = 0, $$lcssa746 = 0, $$lcssa749 = 0, $$lcssa751 = 0, $$lcssa752 = 0, $$lcssa754 = 0, $$lcssa755 = 0, $$lcssa756 = 0, $$lcssa759 = 0, $$lcssa763 = 0, $$lcssa763$lcssa = 0, $$lcssa764 = 0, $$lcssa777 = 0, $$lcssa778 = 0, $$off = 0, $$off29 = 0, $$off31 = 0, $$pre = 0, $$pre301 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $argv$0181 = 0, $case_word$0$ph = 0, $case_word$0$ph$lcssa787 = 0, $case_word$0$ph$lcssa788 = 0, $case_word$0$ph$lcssa789 = 0, $case_word$0$ph$lcssa790 = 0, $case_word$0$ph$lcssa791 = 0, $case_word$0$ph56289 = 0;
 var $case_word$548 = 0, $cond_code$0$ph = 0, $cond_code$0$ph54 = 0, $cond_code$0$ph54$lcssa765 = 0, $cond_code$0$ph54$lcssa766 = 0, $cond_code$0$ph54$lcssa767 = 0, $cond_code$0$ph54$lcssa768 = 0, $cond_code$4 = 0, $cond_code$5 = 0, $cond_code$6 = 0, $cond_code$646 = 0, $cpipe$0182 = 0, $for_lcur$0$ph = 0, $for_lcur$2 = 0, $for_lcur$342 = 0, $for_list$0$ph = 0, $for_list$0$ph$lcssa780 = 0, $for_list$0$ph$lcssa781 = 0, $for_list$0$ph$lcssa782 = 0, $for_list$0$ph$lcssa784 = 0;
 var $for_list$2 = 0, $for_list$2$lcssa = 0, $for_list$343 = 0, $for_list$4 = 0, $last_followup$0 = 0, $last_followup$0$ph = 0, $last_followup$0$ph52 = 0, $last_followup$1 = 0, $last_followup$2 = 0, $last_followup$244 = 0, $last_rword$0 = 0, $last_rword$0$lcssa687 = 0, $last_rword$0$ph = 0, $last_rword$0$ph55 = 0, $last_rword$247 = 0, $loop_top$0 = 0, $loop_top$0$ph = 0, $loop_top$0$ph51 = 0, $loop_top$1 = 0, $loop_top$1$lcssa = 0;
 var $loop_top$1$lcssa724 = 0, $loop_top$1$lcssa725 = 0, $loop_top$1$lcssa725$lcssa = 0, $loop_top$1$lcssa725$lcssa739 = 0, $loop_top$1$lcssa727 = 0, $loop_top$1$lcssa728 = 0, $loop_top$1$lcssa730 = 0, $loop_top$1$lcssa731 = 0, $loop_top$1$lcssa732 = 0, $loop_top$1$lcssa732$lcssa = 0, $loop_top$1$lcssa733 = 0, $loop_top$1734 = 0, $loop_top$1735 = 0, $loop_top$1735$lcssa = 0, $loop_top$1736 = 0, $loop_top$1737 = 0, $loop_top$1738 = 0, $loop_top$2 = 0, $or$cond = 0, $or$cond15 = 0;
 var $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $rcode$0 = 0, $rcode$0$lcssa185 = 0, $rcode$0$lcssa677 = 0, $rcode$0$lcssa677$lcssa686 = 0, $rcode$0$lcssa679 = 0, $rcode$0$lcssa680 = 0, $rcode$0$lcssa682 = 0, $rcode$0$ph = 0, $rcode$0$ph53 = 0, $rcode$3 = 0, $rcode$5$cond_code$0 = 0, $rcode$5$ph = 0, $rcode$6 = 0;
 var $rcode$7 = 0, $rcode$8 = 0, $rcode$845 = 0, $rcode$9 = 0, $switch = 0, $vals$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[840>>2]|0;
 $1 = ((($0)) + 280|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[$1>>2] = $3;
 $4 = ($pi|0)==(0|0);
 L1: do {
  if ($4) {
   label = 9;
  } else {
   $cpipe$0182 = $pi;
   L2: while(1) {
    $5 = ((($cpipe$0182)) + 40|0);
    $6 = HEAP32[$5>>2]|0;
    switch ($6|0) {
    case 11: case 6:  {
     break;
    }
    default: {
     $$pre = HEAP32[$cpipe$0182>>2]|0;
     $18 = ($$pre|0)==(0|0);
     if ($18) {
      label = 9;
      break L1;
     } else {
      $cpipe$0182 = $$pre;
      continue L2;
     }
    }
    }
    $7 = HEAP32[$cpipe$0182>>2]|0;
    $8 = ($7|0)==(0|0);
    if ($8) {
     label = 4;
     break;
    }
    $11 = ((($7)) + 40|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(9);
    if ($13) {
     $cpipe$0182 = $7;
     continue;
    }
    $14 = ($6|0)!=(11);
    $15 = ($12|0)==(11);
    $or$cond = $15 & $14;
    if ($or$cond) {
     $cpipe$0182 = $7;
    } else {
     label = 7;
     break;
    }
   }
   if ((label|0) == 4) {
    HEAP32[$vararg_buffer>>2] = 4487;
    _bb_error_msg(4235,$vararg_buffer);
    $9 = HEAP32[$1>>2]|0;
    $10 = (($9) + -1)|0;
    HEAP32[$1>>2] = $10;
    $$1 = 1;
    break;
   }
   else if ((label|0) == 7) {
    HEAP32[$vararg_buffer1>>2] = 4487;
    _bb_error_msg(4235,$vararg_buffer1);
    $16 = HEAP32[$1>>2]|0;
    $17 = (($16) + -1)|0;
    HEAP32[$1>>2] = $17;
    $$1 = 1;
    break;
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 1)|0;
  HEAP32[$19>>2] = $21;
  $22 = ((($0)) + 80|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($0)) + 64|0);
  $25 = ((($0)) + 104|0);
  $26 = ((($0)) + 68|0);
  $27 = ((($0)) + 100|0);
  $28 = ((($0)) + 24|0);
  $29 = ((($0)) + 72|0);
  $$026$ph = $pi;$case_word$0$ph = 0;$cond_code$0$ph = 0;$for_lcur$0$ph = 0;$for_list$0$ph = 0;$last_followup$0$ph = 1;$last_rword$0$ph = 17;$loop_top$0$ph = 0;$rcode$0$ph = $23;
  L14: while(1) {
   $$026$ph57 = $$026$ph;$cond_code$0$ph54 = $cond_code$0$ph;$last_followup$0$ph52 = $last_followup$0$ph;$last_rword$0$ph55 = $last_rword$0$ph;$loop_top$0$ph51 = $loop_top$0$ph;$rcode$0$ph53 = $rcode$0$ph;
   L16: while(1) {
    $30 = ($cond_code$0$ph54|0)!=(0);
    $$026 = $$026$ph57;$last_followup$0 = $last_followup$0$ph52;$last_rword$0 = $last_rword$0$ph55;$loop_top$0 = $loop_top$0$ph51;$rcode$0 = $rcode$0$ph53;
    while(1) {
     $31 = ($$026|0)==(0|0);
     if ($31) {
      $case_word$0$ph56289 = $case_word$0$ph;$for_list$4 = $for_list$0$ph;$loop_top$2 = $loop_top$0;$rcode$9 = $rcode$0;
      break L14;
     }
     $32 = HEAP32[$24>>2]|0;
     $33 = ($32|0)==(0);
     if (!($33)) {
      $case_word$0$ph56289 = $case_word$0$ph;$for_list$4 = $for_list$0$ph;$loop_top$2 = $loop_top$0;$rcode$9 = $rcode$0;
      break L14;
     }
     $34 = ((($$026)) + 40|0);
     $35 = HEAP32[$34>>2]|0;
     $$off = (($35) + -7)|0;
     $36 = ($$off>>>0)<(2);
     $37 = ($35|0)==(6);
     $or$cond3 = $37 | $36;
     $38 = ($loop_top$0|0)==(0|0);
     $or$cond5 = $38 & $or$cond3;
     if ($or$cond5) {
      $39 = HEAP32[$25>>2]|0;
      $40 = (($39) + 1)|0;
      HEAP32[$25>>2] = $40;
      $loop_top$1 = $$026;
     } else {
      $loop_top$1 = $loop_top$0;
     }
     $41 = ($35|0)==($last_rword$0|0);
     if ($41) {
      $42 = ($rcode$0|0)==(0);
      $43 = ($last_followup$0|0)==(3);
      $or$cond7 = $43 & $42;
      if ($or$cond7) {
       $$026$lcssa698 = $$026;$last_rword$0$lcssa687 = $last_rword$0;$loop_top$1$lcssa = $loop_top$1;$rcode$0$lcssa185 = 0;
       label = 19;
       break;
      }
      $44 = ($rcode$0|0)!=(0);
      $45 = ($last_followup$0|0)==(2);
      $or$cond9 = $45 & $44;
      if ($or$cond9) {
       $$026$lcssa698 = $$026;$last_rword$0$lcssa687 = $last_rword$0;$loop_top$1$lcssa = $loop_top$1;$rcode$0$lcssa185 = $rcode$0;
       label = 19;
       break;
      }
     }
     $48 = ((($$026)) + 32|0);
     $49 = HEAP32[$48>>2]|0;
     if ($30) {
      $50 = ($35|0)==(2);
      if ($50) {
       $$026$lcssa699 = $$026;$$lcssa = $49;$cond_code$0$ph54$lcssa765 = $cond_code$0$ph54;$loop_top$1$lcssa724 = $loop_top$1;
       label = 22;
       break L16;
      }
     } else {
      $$off29 = (($35) + -3)|0;
      $51 = ($$off29>>>0)<(2);
      if ($51) {
       $case_word$0$ph56289 = $case_word$0$ph;$for_list$4 = $for_list$0$ph;$loop_top$2 = $loop_top$1;$rcode$9 = $rcode$0;
       break L14;
      }
     }
     if ($37) {
      $$026$lcssa700 = $$026;$$lcssa749 = $49;$cond_code$0$ph54$lcssa766 = $cond_code$0$ph54;$loop_top$1$lcssa725 = $loop_top$1;$rcode$0$lcssa677 = $rcode$0;
      label = 25;
      break L16;
     }
     $72 = $35 & -2;
     $73 = ($72|0)==(10);
     if ($73) {
      $$026712 = $$026;$139 = $35;$cond_code$6 = $cond_code$0$ph54;$last_followup$2 = $49;$loop_top$1737 = $loop_top$1;$rcode$8 = $rcode$0;
      break;
     }
     switch ($35|0) {
     case 12:  {
      $$026$lcssa702 = $$026;$$lcssa751 = $49;$cond_code$0$ph54$lcssa767 = $cond_code$0$ph54;$loop_top$1$lcssa727 = $loop_top$1;$rcode$0$lcssa679 = $rcode$0;
      label = 35;
      break L16;
      break;
     }
     case 14:  {
      $$026$lcssa703 = $$026;$$lcssa752 = $49;$cond_code$0$ph54$lcssa768 = $cond_code$0$ph54;$loop_top$1$lcssa728 = $loop_top$1;$rcode$0$lcssa680 = $rcode$0;
      label = 36;
      break L16;
      break;
     }
     default: {
     }
     }
     $94 = ($35|0)==(15);
     $or$cond21 = $30 & $94;
     if ($or$cond21) {
      $$026709 = $$026;$case_word$548 = $case_word$0$ph;$cond_code$646 = $cond_code$0$ph54;$for_lcur$342 = $for_lcur$0$ph;$for_list$343 = $for_list$0$ph;$last_followup$244 = $49;$last_rword$247 = 15;$loop_top$1734 = $loop_top$1;$rcode$845 = $rcode$0;
      break L16;
     }
     $95 = ((($$026)) + 4|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = ($96|0)==(0);
     if ($97) {
      $$026$lcssa705 = $$026;$$lcssa720 = $35;$$lcssa754 = $49;$loop_top$1$lcssa730 = $loop_top$1;$rcode$0$lcssa682 = $rcode$0;
      label = 43;
      break;
     }
     HEAP32[$26>>2] = 0;
     $100 = (_run_pipe($$026)|0);
     $101 = ($100|0)==(-1);
     if ($101) {
      $$026$lcssa706 = $$026;$$lcssa721 = $35;$$lcssa746 = $48;$$lcssa755 = $49;$$lcssa759 = $95;$loop_top$1$lcssa731 = $loop_top$1;
      label = 53;
      break;
     }
     HEAP32[$22>>2] = $100;
     (_check_and_run_traps()|0);
     $102 = HEAP32[$26>>2]|0;
     $103 = ($102|0)==(0);
     if ($103) {
      $$026$lcssa707 = $$026;$$lcssa722 = $35;$$lcssa756 = $49;$$lcssa763 = $100;$loop_top$1$lcssa732 = $loop_top$1;
      label = 51;
      break;
     }
     $104 = ($loop_top$1|0)==(0|0);
     $$pre301 = HEAP32[$27>>2]|0;
     if ($104) {
      $107 = $$pre301;
     } else {
      $105 = (($$pre301) + -1)|0;
      HEAP32[$27>>2] = $105;
      $106 = ($105|0)==(0);
      if (!($106)) {
       $$lcssa764 = $100;$case_word$0$ph$lcssa787 = $case_word$0$ph;$for_list$0$ph$lcssa780 = $for_list$0$ph;$loop_top$1$lcssa733 = $loop_top$1;
       label = 50;
       break L14;
      }
      HEAP32[$26>>2] = 0;
      $107 = 0;
     }
     $108 = ($107|0)!=(0);
     $109 = ($102|0)==(1);
     $or$cond15 = $109 | $108;
     if ($or$cond15) {
      $$lcssa764 = $100;$case_word$0$ph$lcssa787 = $case_word$0$ph;$for_list$0$ph$lcssa780 = $for_list$0$ph;$loop_top$1$lcssa733 = $loop_top$1;
      label = 50;
      break L14;
     } else {
      $$026 = $loop_top$1;$last_followup$0 = $49;$last_rword$0 = $35;$loop_top$0 = $loop_top$1;$rcode$0 = $100;
     }
    }
    do {
     if ((label|0) == 19) {
      label = 0;
      $46 = ((($$026$lcssa698)) + 32|0);
      $47 = HEAP32[$46>>2]|0;
      $$026710 = $$026$lcssa698;$135 = $last_rword$0$lcssa687;$cond_code$5 = $cond_code$0$ph54;$last_followup$1 = $47;$loop_top$1735 = $loop_top$1$lcssa;$rcode$7 = $rcode$0$lcssa185;
      label = 64;
     }
     else if ((label|0) == 43) {
      label = 0;
      $98 = HEAP32[$0>>2]|0;
      $99 = ($98|0)==(0);
      if ($99) {
       $$026712 = $$026$lcssa705;$139 = $$lcssa720;$cond_code$6 = $cond_code$0$ph54;$last_followup$2 = $$lcssa754;$loop_top$1737 = $loop_top$1$lcssa730;$rcode$8 = $rcode$0$lcssa682;
      } else {
       $$026711 = $$026$lcssa705;$150 = $$lcssa754;$151 = $$lcssa720;$cond_code$4 = $cond_code$0$ph54;$loop_top$1736 = $loop_top$1$lcssa730;$rcode$6 = $rcode$0$lcssa682;
       label = 63;
      }
     }
     else if ((label|0) == 51) {
      label = 0;
      $110 = HEAP32[$29>>2]|0;
      $111 = ($110|0)==(1);
      if ($111) {
       $$lcssa763$lcssa = $$lcssa763;$case_word$0$ph$lcssa788 = $case_word$0$ph;$for_list$0$ph$lcssa781 = $for_list$0$ph;$loop_top$1$lcssa732$lcssa = $loop_top$1$lcssa732;
       label = 52;
       break L14;
      } else {
       $$026713 = $$026$lcssa707;$129 = $$lcssa722;$152 = $$lcssa756;$loop_top$1738 = $loop_top$1$lcssa732;$rcode$5$ph = $$lcssa763;
       label = 62;
      }
     }
     else if ((label|0) == 53) {
      label = 0;
      $112 = HEAP32[$$lcssa746>>2]|0;
      $113 = ($112|0)==(4);
      if ($113) {
       (_check_and_run_traps()|0);
       $114 = HEAP32[$19>>2]|0;
       $115 = ($114|0)==(1);
       if ($115) {
        _insert_bg_job($$026$lcssa706);
       }
       $116 = HEAP32[$$lcssa759>>2]|0;
       $117 = (($116) + -1)|0;
       $118 = ((($$026$lcssa706)) + 28|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = (($119) + (($117*36)|0)|0);
       $121 = HEAP32[$120>>2]|0;
       HEAP32[$28>>2] = $121;
       HEAP32[$22>>2] = 0;
       $$026713 = $$026$lcssa706;$129 = $$lcssa721;$152 = $$lcssa755;$loop_top$1738 = $loop_top$1$lcssa731;$rcode$5$ph = 0;
       label = 62;
       break;
      }
      $122 = HEAP32[$19>>2]|0;
      $123 = ($122|0)==(1);
      if ($123) {
       $124 = HEAP32[$0>>2]|0;
       $125 = ($124|0)==(0);
       if ($125) {
        label = 60;
       } else {
        $126 = (_checkjobs_and_fg_shell($$026$lcssa706)|0);
        (_check_and_run_traps()|0);
        $rcode$3 = $126;
       }
      } else {
       label = 60;
      }
      if ((label|0) == 60) {
       label = 0;
       $127 = (_checkjobs($$026$lcssa706)|0);
       (_check_and_run_traps()|0);
       $rcode$3 = $127;
      }
      HEAP32[$22>>2] = $rcode$3;
      $$026713 = $$026$lcssa706;$129 = $$lcssa721;$152 = $$lcssa755;$loop_top$1738 = $loop_top$1$lcssa731;$rcode$5$ph = $rcode$3;
      label = 62;
     }
    } while(0);
    if ((label|0) == 62) {
     label = 0;
     $128 = $129 & -3;
     $130 = ($128|0)==(1);
     $rcode$5$cond_code$0 = $130 ? $rcode$5$ph : $cond_code$0$ph54;
     $$026711 = $$026713;$150 = $152;$151 = $129;$cond_code$4 = $rcode$5$cond_code$0;$loop_top$1736 = $loop_top$1738;$rcode$6 = $rcode$5$ph;
     label = 63;
    }
    if ((label|0) == 63) {
     label = 0;
     (_checkjobs(0)|0);
     $$026710 = $$026711;$135 = $151;$cond_code$5 = $cond_code$4;$last_followup$1 = $150;$loop_top$1735 = $loop_top$1736;$rcode$7 = $rcode$6;
     label = 64;
    }
    if ((label|0) == 64) {
     label = 0;
     $131 = HEAP32[$$026710>>2]|0;
     $132 = ($131|0)==(0|0);
     if ($132) {
      $$026712 = $$026710;$139 = $135;$cond_code$6 = $cond_code$5;$last_followup$2 = $last_followup$1;$loop_top$1737 = $loop_top$1735;$rcode$8 = $rcode$7;
     } else {
      $133 = ((($131)) + 40|0);
      $134 = HEAP32[$133>>2]|0;
      $$off31 = (($134) + -9)|0;
      $switch = ($$off31>>>0)<(2);
      if ($switch) {
       $136 = ($135|0)==(7);
       $137 = ($rcode$7|0)!=(0);
       $or$cond23 = $136 & $137;
       if ($or$cond23) {
        $case_word$0$ph$lcssa791 = $case_word$0$ph;$for_list$0$ph$lcssa784 = $for_list$0$ph;$loop_top$1735$lcssa = $loop_top$1735;
        label = 67;
        break L14;
       }
       $138 = ($135|0)!=(8);
       $or$cond25 = $138 | $137;
       if ($or$cond25) {
        $$026712 = $$026710;$139 = $135;$cond_code$6 = $cond_code$5;$last_followup$2 = $last_followup$1;$loop_top$1737 = $loop_top$1735;$rcode$8 = $rcode$7;
       } else {
        $case_word$0$ph56289 = $case_word$0$ph;$for_list$4 = $for_list$0$ph;$loop_top$2 = $loop_top$1735;$rcode$9 = 0;
        break L14;
       }
      } else {
       $$026712 = $$026710;$139 = $135;$cond_code$6 = $cond_code$5;$last_followup$2 = $last_followup$1;$loop_top$1737 = $loop_top$1735;$rcode$8 = $rcode$7;
      }
     }
    }
    $140 = ($139|0)==(10);
    if ($140) {
     $$026$ph57 = $loop_top$1737;$cond_code$0$ph54 = $cond_code$6;$last_followup$0$ph52 = $last_followup$2;$last_rword$0$ph55 = $139;$loop_top$0$ph51 = $loop_top$1737;$rcode$0$ph53 = $rcode$8;
    } else {
     $$026709 = $$026712;$case_word$548 = $case_word$0$ph;$cond_code$646 = $cond_code$6;$for_lcur$342 = $for_lcur$0$ph;$for_list$343 = $for_list$0$ph;$last_followup$244 = $last_followup$2;$last_rword$247 = $139;$loop_top$1734 = $loop_top$1737;$rcode$845 = $rcode$8;
     break;
    }
   }
   do {
    if ((label|0) == 22) {
     label = 0;
     HEAP32[$22>>2] = 0;
     $$026709 = $$026$lcssa699;$case_word$548 = $case_word$0$ph;$cond_code$646 = $cond_code$0$ph54$lcssa765;$for_lcur$342 = $for_lcur$0$ph;$for_list$343 = $for_list$0$ph;$last_followup$244 = $$lcssa;$last_rword$247 = 2;$loop_top$1734 = $loop_top$1$lcssa724;$rcode$845 = 0;
    }
    else if ((label|0) == 25) {
     label = 0;
     $52 = ($for_lcur$0$ph|0)==(0|0);
     if ($52) {
      $53 = HEAP32[$$026$lcssa700>>2]|0;
      $54 = ((($53)) + 40|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = ($55|0)==(11);
      if ($56) {
       $57 = ((($53)) + 28|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = ((($58)) + 28|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = ($60|0)==(0|0);
       if ($61) {
        $case_word$0$ph$lcssa789 = $case_word$0$ph;$for_list$0$ph$lcssa782 = $for_list$0$ph;$loop_top$1$lcssa725$lcssa = $loop_top$1$lcssa725;
        label = 29;
        break L14;
       } else {
        $vals$0 = $60;
       }
      } else {
       $vals$0 = 44;
      }
      $62 = (_expand_variables($vals$0,3)|0);
      $for_lcur$2 = $62;$for_list$2 = $62;
     } else {
      $for_lcur$2 = $for_lcur$0$ph;$for_list$2 = $for_list$0$ph;
     }
     $63 = HEAP32[$for_lcur$2>>2]|0;
     $64 = ($63|0)==(0|0);
     if ($64) {
      $case_word$0$ph$lcssa790 = $case_word$0$ph;$for_list$2$lcssa = $for_list$2;$loop_top$1$lcssa725$lcssa739 = $loop_top$1$lcssa725;$rcode$0$lcssa677$lcssa686 = $rcode$0$lcssa677;
      label = 31;
      break L14;
     }
     $65 = ((($$026$lcssa700)) + 28|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ((($66)) + 28|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = HEAP32[$68>>2]|0;
     $70 = ((($for_lcur$2)) + 4|0);
     HEAP32[$vararg_buffer4>>2] = $69;
     $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
     HEAP32[$vararg_ptr7>>2] = $63;
     $71 = (_xasprintf(3881,$vararg_buffer4)|0);
     _set_local_var($71,0,0,0);
     $$026709 = $$026$lcssa700;$case_word$548 = $case_word$0$ph;$cond_code$646 = $cond_code$0$ph54$lcssa766;$for_lcur$342 = $70;$for_list$343 = $for_list$2;$last_followup$244 = $$lcssa749;$last_rword$247 = 6;$loop_top$1734 = $loop_top$1$lcssa725;$rcode$845 = $rcode$0$lcssa677;
    }
    else if ((label|0) == 35) {
     label = 0;
     $74 = ((($$026$lcssa702)) + 28|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ((($75)) + 28|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = (_expand_strvec_to_string($77)|0);
     $$026709 = $$026$lcssa702;$case_word$548 = $78;$cond_code$646 = $cond_code$0$ph54$lcssa767;$for_lcur$342 = $for_lcur$0$ph;$for_list$343 = $for_list$0$ph;$last_followup$244 = $$lcssa751;$last_rword$247 = 12;$loop_top$1734 = $loop_top$1$lcssa727;$rcode$845 = $rcode$0$lcssa679;
    }
    else if ((label|0) == 36) {
     label = 0;
     $79 = ($case_word$0$ph|0)==(0|0);
     if ($79) {
      $case_word$0$ph56289 = 0;$for_list$4 = $for_list$0$ph;$loop_top$2 = $loop_top$1$lcssa728;$rcode$9 = $rcode$0$lcssa680;
      break L14;
     }
     $80 = ((($$026$lcssa703)) + 28|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ((($81)) + 28|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)==(0|0);
     if ($85) {
      $$026709 = $$026$lcssa703;$case_word$548 = $case_word$0$ph;$cond_code$646 = $cond_code$0$ph54$lcssa768;$for_lcur$342 = $for_lcur$0$ph;$for_list$343 = $for_list$0$ph;$last_followup$244 = $$lcssa752;$last_rword$247 = 14;$loop_top$1734 = $loop_top$1$lcssa728;$rcode$845 = $rcode$0$lcssa680;
     } else {
      $89 = $84;$argv$0181 = $83;
      while(1) {
       $90 = (_expand_string_to_string($89,1)|0);
       $91 = (_fnmatch($90,$case_word$0$ph,0)|0);
       $92 = ($91|0)!=(0);
       _free($90);
       $87 = ((($argv$0181)) + 4|0);
       if (!($92)) {
        $$lcssa777 = $92;
        label = 40;
        break;
       }
       $86 = HEAP32[$87>>2]|0;
       $88 = ($86|0)==(0|0);
       if ($88) {
        $$lcssa778 = $92;
        label = 70;
        break;
       } else {
        $89 = $86;$argv$0181 = $87;
       }
      }
      if ((label|0) == 40) {
       label = 0;
       $93 = $$lcssa777&1;
       _free($case_word$0$ph);
       $$026709 = $$026$lcssa703;$case_word$548 = 0;$cond_code$646 = $93;$for_lcur$342 = $for_lcur$0$ph;$for_list$343 = $for_list$0$ph;$last_followup$244 = $$lcssa752;$last_rword$247 = 14;$loop_top$1734 = $loop_top$1$lcssa728;$rcode$845 = $rcode$0$lcssa680;
       break;
      }
      else if ((label|0) == 70) {
       label = 0;
       $141 = $$lcssa778&1;
       $$026709 = $$026$lcssa703;$case_word$548 = $case_word$0$ph;$cond_code$646 = $141;$for_lcur$342 = $for_lcur$0$ph;$for_list$343 = $for_list$0$ph;$last_followup$244 = $$lcssa752;$last_rword$247 = 14;$loop_top$1734 = $loop_top$1$lcssa728;$rcode$845 = $rcode$0$lcssa680;
       break;
      }
     }
    }
   } while(0);
   $142 = HEAP32[$$026709>>2]|0;
   $$026$ph = $142;$case_word$0$ph = $case_word$548;$cond_code$0$ph = $cond_code$646;$for_lcur$0$ph = $for_lcur$342;$for_list$0$ph = $for_list$343;$last_followup$0$ph = $last_followup$244;$last_rword$0$ph = $last_rword$247;$loop_top$0$ph = $loop_top$1734;$rcode$0$ph = $rcode$845;
  }
  if ((label|0) == 29) {
   HEAP32[$22>>2] = 0;
   $case_word$0$ph56289 = $case_word$0$ph$lcssa789;$for_list$4 = $for_list$0$ph$lcssa782;$loop_top$2 = $loop_top$1$lcssa725$lcssa;$rcode$9 = 0;
  }
  else if ((label|0) == 31) {
   _free($for_list$2$lcssa);
   $case_word$0$ph56289 = $case_word$0$ph$lcssa790;$for_list$4 = 0;$loop_top$2 = $loop_top$1$lcssa725$lcssa739;$rcode$9 = $rcode$0$lcssa677$lcssa686;
  }
  else if ((label|0) == 50) {
   (_checkjobs(0)|0);
   $case_word$0$ph56289 = $case_word$0$ph$lcssa787;$for_list$4 = $for_list$0$ph$lcssa780;$loop_top$2 = $loop_top$1$lcssa733;$rcode$9 = $$lcssa764;
  }
  else if ((label|0) == 52) {
   (_checkjobs(0)|0);
   $case_word$0$ph56289 = $case_word$0$ph$lcssa788;$for_list$4 = $for_list$0$ph$lcssa781;$loop_top$2 = $loop_top$1$lcssa732$lcssa;$rcode$9 = $$lcssa763$lcssa;
  }
  else if ((label|0) == 67) {
   HEAP32[$22>>2] = 0;
   $case_word$0$ph56289 = $case_word$0$ph$lcssa791;$for_list$4 = $for_list$0$ph$lcssa784;$loop_top$2 = $loop_top$1735$lcssa;$rcode$9 = 0;
  }
  $143 = HEAP32[$19>>2]|0;
  $144 = (($143) + -1)|0;
  HEAP32[$19>>2] = $144;
  $145 = ($loop_top$2|0)==(0|0);
  if (!($145)) {
   $146 = HEAP32[$25>>2]|0;
   $147 = (($146) + -1)|0;
   HEAP32[$25>>2] = $147;
  }
  _free($for_list$4);
  _free($case_word$0$ph56289);
  $148 = HEAP32[$1>>2]|0;
  $149 = (($148) + -1)|0;
  HEAP32[$1>>2] = $149;
  $$1 = $rcode$9;
 }
 STACKTOP = sp;return ($$1|0);
}
function _run_pipe($pi) {
 $pi = $pi|0;
 var $$ = 0, $$0$i$i = 0, $$0$ph = 0, $$1 = 0, $$lcssa = 0, $$lcssa70 = 0, $$lcssa72 = 0, $$pre = 0, $$pre34 = 0, $$pre35 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $argv$021 = 0, $argv_expanded$0 = 0, $argv_expanded$2 = 0, $argv_expanded$238 = 0, $argv_expanded$318 = 0, $argv_expanded$318$lcssa = 0, $cmd_no$020 = 0, $cmd_no$020$lcssa = 0, $funcp1$047 = 0, $input$i = 0, $n$0$i$i = 0, $n$0$i$i$lcssa = 0, $next_infd$019 = 0, $next_infd$019$lcssa = 0, $nommu_save = 0, $old_vars = 0, $pgrp$0 = 0, $phitmp = 0, $phitmp37 = 0, $pipefds = 0;
 var $rc$0$i = 0, $rcode$0 = 0, $rcode$1 = 0, $rcode$2 = 0, $rcode$3 = 0, $rcode$4 = 0, $rcode$5 = 0, $rcode$6 = 0, $run_pipe$null_ptr$ = 0, $squirrel = 0, $sv$i = 0, $var_pp$0$i$ph25 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $input$i = sp + 80|0;
 $sv$i = sp + 64|0;
 $squirrel = sp + 52|0;
 $old_vars = sp + 48|0;
 $pipefds = sp + 40|0;
 $nommu_save = sp + 24|0;
 ;HEAP32[$squirrel>>2]=4294967295|0;HEAP32[$squirrel+4>>2]=4294967295|0;HEAP32[$squirrel+8>>2]=4294967295|0;
 $0 = HEAP32[840>>2]|0;
 $1 = ((($0)) + 280|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[$1>>2] = $3;
 $4 = (_get_local_var_value(4544)|0);
 $5 = ((($0)) + 108|0);
 $6 = ($4|0)==(0|0);
 $$ = $6 ? (6024) : $4;
 HEAP32[$5>>2] = $$;
 $7 = ((($pi)) + 20|0);
 HEAP32[$7>>2] = -1;
 $8 = ((($pi)) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($pi)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($pi)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(1);
 L1: do {
  if ($13) {
   $14 = ((($pi)) + 32|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(4);
   if (!($16)) {
    $17 = ((($10)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)==(1);
    if (!($19)) {
     $20 = ((($pi)) + 8|0);
     HEAP32[$20>>2] = 1;
     $21 = ((($10)) + 16|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($22|0)==(0|0);
     if (!($23)) {
      $24 = ($18|0)==(3);
      if ($24) {
       $25 = ((($10)) + 28|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = HEAP32[$26>>2]|0;
       $28 = (_new_function($27)|0);
       $29 = HEAP32[$21>>2]|0;
       $30 = ((($28)) + 12|0);
       HEAP32[$30>>2] = $29;
       $31 = ((($10)) + 20|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = ((($28)) + 16|0);
       HEAP32[$33>>2] = $32;
       HEAP32[$31>>2] = 0;
       HEAP32[$21>>2] = 0;
       $34 = HEAP32[$25>>2]|0;
       HEAP32[$34>>2] = 0;
       $35 = ((($28)) + 8|0);
       HEAP32[$35>>2] = $10;
       $36 = ((($10)) + 24|0);
       HEAP32[$36>>2] = $28;
       $37 = HEAP32[$1>>2]|0;
       $38 = (($37) + -1)|0;
       HEAP32[$1>>2] = $38;
       $$1 = 0;
       break;
      }
      $39 = (_setup_redirects($10,$squirrel)|0);
      $40 = ($39|0)==(0);
      if ($40) {
       $41 = HEAP32[$21>>2]|0;
       $42 = (_run_list($41)|0);
       $43 = $42 & 255;
       $rcode$0 = $43;
      } else {
       $rcode$0 = 1;
      }
      _restore_redirects($squirrel);
      $44 = ((($pi)) + 36|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = ($45|0)==(0);
      $47 = ($rcode$0|0)==(0);
      $48 = $47&1;
      $rcode$1 = $46 ? $rcode$0 : $48;
      $49 = HEAP32[$1>>2]|0;
      $50 = (($49) + -1)|0;
      HEAP32[$1>>2] = $50;
      $$1 = $rcode$1;
      break;
     }
     $51 = ((($10)) + 28|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==(0|0);
     $run_pipe$null_ptr$ = $53 ? 52 : $52;
     HEAP32[$old_vars>>2] = 0;
     $54 = ((($10)) + 4|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (($run_pipe$null_ptr$) + ($55<<2)|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     do {
      if ($58) {
       $59 = (_setup_redirects($10,$squirrel)|0);
       _restore_redirects($squirrel);
       $60 = ((($0)) + 62|0);
       $61 = HEAP8[$60>>0]|0;
       $62 = ($61<<24>>24)==(0);
       if (!($62)) {
        (_bb_putchar_stderr(43)|0);
       }
       $63 = HEAP32[$run_pipe$null_ptr$>>2]|0;
       $64 = ($63|0)==(0|0);
       if (!($64)) {
        $65 = HEAP32[1116>>2]|0;
        $66 = $63;$argv$021 = $run_pipe$null_ptr$;
        while(1) {
         $67 = (_expand_string_to_string($66,1)|0);
         $68 = HEAP8[$60>>0]|0;
         $69 = ($68<<24>>24)==(0);
         if (!($69)) {
          HEAP32[$vararg_buffer>>2] = $67;
          (_fprintf($65,4548,$vararg_buffer)|0);
         }
         _set_local_var($67,0,0,0);
         $70 = ((($argv$021)) + 4|0);
         $71 = HEAP32[$70>>2]|0;
         $72 = ($71|0)==(0|0);
         if ($72) {
          break;
         } else {
          $66 = $71;$argv$021 = $70;
         }
        }
       }
       $73 = HEAP8[$60>>0]|0;
       $74 = ($73<<24>>24)==(0);
       if (!($74)) {
        (_bb_putchar_stderr(10)|0);
       }
       $75 = ($59|0)==(0);
       if ($75) {
        $76 = ((($0)) + 80|0);
        $77 = HEAP32[$76>>2]|0;
        $rcode$2 = $77;
       } else {
        $rcode$2 = $59;
       }
       $78 = ((($pi)) + 36|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ($79|0)==(0);
       $81 = ($rcode$2|0)==(0);
       $82 = $81&1;
       $rcode$3 = $80 ? $rcode$2 : $82;
       $83 = HEAP32[$1>>2]|0;
       $84 = (($83) + -1)|0;
       HEAP32[$1>>2] = $84;
       $$0$ph = $rcode$3;
      } else {
       $85 = ($18|0)==(2);
       if ($85) {
        $86 = (_expand_variables($56,128)|0);
        $argv_expanded$0 = $86;
       } else {
        $87 = (_expand_variables($56,3)|0);
        $argv_expanded$0 = $87;
       }
       $88 = HEAP32[$argv_expanded$0>>2]|0;
       $89 = ($88|0)==(0|0);
       if ($89) {
        _free($argv_expanded$0);
        $90 = HEAP32[$1>>2]|0;
        $91 = (($90) + -1)|0;
        HEAP32[$1>>2] = $91;
        $92 = ((($0)) + 80|0);
        $93 = HEAP32[$92>>2]|0;
        $$0$ph = $93;
        break;
       }
       $94 = (_find_builtin($88)|0);
       $95 = ($94|0)==(0|0);
       if ($95) {
        $96 = (_find_function_slot($88)|0);
        $97 = HEAP32[$96>>2]|0;
        $98 = ($97|0)==(0|0);
        if ($98) {
         $$pre = HEAP32[$11>>2]|0;
         $186 = $$pre;$argv_expanded$2 = $argv_expanded$0;
         label = 56;
         break L1;
        } else {
         $266 = 1;$funcp1$047 = $97;
         label = 33;
        }
       } else {
        $99 = ((($94)) + 4|0);
        $100 = HEAP32[$99>>2]|0;
        $101 = ($100|0)==(9|0);
        if ($101) {
         $102 = ((($argv_expanded$0)) + 4|0);
         $103 = HEAP32[$102>>2]|0;
         $104 = ($103|0)==(0|0);
         if ($104) {
          $105 = (_setup_redirects($10,0)|0);
          $rcode$5 = $105;
         } else {
          $266 = 0;$funcp1$047 = 0;
          label = 33;
         }
        } else {
         $266 = 0;$funcp1$047 = 0;
         label = 33;
        }
       }
       if ((label|0) == 33) {
        $106 = (_setup_redirects($10,$squirrel)|0);
        $107 = ($106|0)==(0);
        do {
         if ($107) {
          $108 = HEAP32[$51>>2]|0;
          $109 = HEAP32[$54>>2]|0;
          $110 = (_expand_assignments($108,$109)|0);
          _dump_cmd_in_x_mode($110);
          _dump_cmd_in_x_mode($argv_expanded$0);
          $111 = (_set_vars_and_save_old($110)|0);
          HEAP32[$old_vars>>2] = $111;
          if (!($266)) {
           (_fflush_all()|0);
           $112 = ((($94)) + 4|0);
           $113 = HEAP32[$112>>2]|0;
           $114 = (FUNCTION_TABLE_ii[$113 & 63]($argv_expanded$0)|0);
           $115 = $114 & 255;
           (_fflush_all()|0);
           $175 = $110;$rcode$4 = $115;
           break;
          }
          $116 = ((($0)) + 128|0);
          $117 = HEAP32[$116>>2]|0;
          HEAP32[$116>>2] = $old_vars;
          $118 = HEAP32[$argv_expanded$0>>2]|0;
          HEAP32[$sv$i>>2] = $118;
          $119 = ((($0)) + 92|0);
          $120 = HEAP32[$119>>2]|0;
          $121 = ((($sv$i)) + 4|0);
          HEAP32[$121>>2] = $120;
          $122 = ((($0)) + 88|0);
          $123 = HEAP32[$122>>2]|0;
          $124 = ((($sv$i)) + 8|0);
          HEAP32[$124>>2] = $123;
          $125 = ((($0)) + 84|0);
          $126 = HEAP32[$125>>2]|0;
          $127 = ((($sv$i)) + 12|0);
          HEAP32[$127>>2] = $126;
          $128 = $120;
          $129 = HEAP32[$128>>2]|0;
          HEAP32[$argv_expanded$0>>2] = $129;
          HEAP32[$119>>2] = $argv_expanded$0;
          HEAP32[$125>>2] = 0;
          $$0$i$i = $argv_expanded$0;$n$0$i$i = 1;
          while(1) {
           $130 = ((($$0$i$i)) + 4|0);
           $131 = HEAP32[$130>>2]|0;
           $132 = ($131|0)==(0|0);
           $133 = (($n$0$i$i) + 1)|0;
           if ($132) {
            $n$0$i$i$lcssa = $n$0$i$i;
            break;
           } else {
            $$0$i$i = $130;$n$0$i$i = $133;
           }
          }
          HEAP32[$122>>2] = $n$0$i$i$lcssa;
          $134 = ((($0)) + 72|0);
          $135 = HEAP32[$134>>2]|0;
          HEAP32[$134>>2] = -1;
          $136 = ((($0)) + 132|0);
          $137 = HEAP32[$136>>2]|0;
          $138 = (($137) + 1)|0;
          HEAP32[$136>>2] = $138;
          $139 = ((($funcp1$047)) + 12|0);
          $140 = HEAP32[$139>>2]|0;
          $141 = ($140|0)==(0|0);
          if ($141) {
           $142 = ((($funcp1$047)) + 16|0);
           $143 = HEAP32[$142>>2]|0;
           ;HEAP32[$input$i>>2]=0|0;HEAP32[$input$i+4>>2]=0|0;HEAP32[$input$i+8>>2]=0|0;HEAP32[$input$i+12>>2]=0|0;HEAP32[$input$i+16>>2]=0|0;
           $144 = ((($input$i)) + 24|0);
           HEAP32[$144>>2] = 39;
           $145 = ((($input$i)) + 20|0);
           HEAP32[$145>>2] = 40;
           HEAP32[$input$i>>2] = $143;
           _parse_and_run_stream($input$i,0);
           $146 = ((($0)) + 80|0);
           $147 = HEAP32[$146>>2]|0;
           $rc$0$i = $147;
          } else {
           $148 = (_run_list($140)|0);
           $rc$0$i = $148;
          }
          $149 = ((($0)) + 116|0);
          $150 = HEAP32[$149>>2]|0;
          $151 = ($150|0)==(0|0);
          L62: do {
           if (!($151)) {
            $267 = $150;$var_pp$0$i$ph25 = $149;
            while(1) {
             $153 = $267;
             while(1) {
              $152 = ((($153)) + 8|0);
              $154 = HEAP32[$152>>2]|0;
              $155 = HEAP32[$136>>2]|0;
              $156 = ($154>>>0)<($155>>>0);
              if ($156) {
               $$lcssa72 = $153;
               break;
              }
              $159 = ((($153)) + 16|0);
              $160 = HEAP32[$159>>2]|0;
              $161 = ($160|0)==(0);
              if (!($161)) {
               $162 = ((($153)) + 4|0);
               $163 = HEAP32[$162>>2]|0;
               _bb_unsetenv($163);
              }
              $164 = HEAP32[$153>>2]|0;
              HEAP32[$var_pp$0$i$ph25>>2] = $164;
              $165 = ((($153)) + 12|0);
              $166 = HEAP32[$165>>2]|0;
              $167 = ($166|0)==(0);
              if ($167) {
               $168 = ((($153)) + 4|0);
               $169 = HEAP32[$168>>2]|0;
               _free($169);
              }
              _free($153);
              $170 = HEAP32[$var_pp$0$i$ph25>>2]|0;
              $171 = ($170|0)==(0|0);
              if ($171) {
               break L62;
              } else {
               $153 = $170;
              }
             }
             $157 = HEAP32[$$lcssa72>>2]|0;
             $158 = ($157|0)==(0|0);
             if ($158) {
              break;
             } else {
              $267 = $157;$var_pp$0$i$ph25 = $$lcssa72;
             }
            }
           }
          } while(0);
          $172 = HEAP32[$136>>2]|0;
          $173 = (($172) + -1)|0;
          HEAP32[$136>>2] = $173;
          HEAP32[$134>>2] = $135;
          _restore_G_args($sv$i,$argv_expanded$0);
          $174 = $rc$0$i & 255;
          HEAP32[$116>>2] = $117;
          $175 = $110;$rcode$4 = $174;
         } else {
          $175 = 0;$rcode$4 = $106;
         }
        } while(0);
        _unset_vars($175);
        $176 = HEAP32[$old_vars>>2]|0;
        _add_vars($176);
        _restore_redirects($squirrel);
        $rcode$5 = $rcode$4;
       }
       _free($argv_expanded$0);
       $177 = ((($pi)) + 36|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($178|0)==(0);
       $180 = ($rcode$5|0)==(0);
       $181 = $180&1;
       $rcode$6 = $179 ? $rcode$5 : $181;
       $182 = HEAP32[$1>>2]|0;
       $183 = (($182) + -1)|0;
       HEAP32[$1>>2] = $183;
       $$0$ph = $rcode$6;
      }
     } while(0);
     $$1 = $$0$ph;
     break;
    }
   }
   $184 = ((($pi)) + 8|0);
   HEAP32[$184>>2] = 0;
   $219 = $184;$argv_expanded$238 = 0;
   label = 57;
  } else {
   $186 = $12;$argv_expanded$2 = 0;
   label = 56;
  }
 } while(0);
 if ((label|0) == 56) {
  $185 = ((($pi)) + 8|0);
  HEAP32[$185>>2] = 0;
  $187 = ($186|0)>(0);
  if ($187) {
   $219 = $185;$argv_expanded$238 = $argv_expanded$2;
   label = 57;
  } else {
   $263 = $0;$268 = 1;
   label = 93;
  }
 }
 do {
  if ((label|0) == 57) {
   $188 = ((($nommu_save)) + 4|0);
   $189 = ((($nommu_save)) + 8|0);
   $190 = ((($nommu_save)) + 12|0);
   $191 = ((($pipefds)) + 4|0);
   $argv_expanded$318 = $argv_expanded$238;$cmd_no$020 = 0;$next_infd$019 = 0;
   while(1) {
    HEAP32[$nommu_save>>2] = 0;
    HEAP32[$188>>2] = 0;
    HEAP32[$189>>2] = 0;
    HEAP32[$190>>2] = 0;
    $192 = HEAP32[$9>>2]|0;
    $193 = (($192) + (($cmd_no$020*36)|0)|0);
    $194 = (($cmd_no$020) + 1)|0;
    HEAP32[$pipefds>>2] = 0;
    HEAP32[$191>>2] = 1;
    $195 = HEAP32[$11>>2]|0;
    $196 = ($194|0)<($195|0);
    if ($196) {
     _xpipe($pipefds);
    }
    $197 = (_vfork()|0);
    HEAP32[$193>>2] = $197;
    $198 = ($197|0)==(0);
    if ($198) {
     $$lcssa = $192;$$lcssa70 = $193;$argv_expanded$318$lcssa = $argv_expanded$318;$cmd_no$020$lcssa = $cmd_no$020;$next_infd$019$lcssa = $next_infd$019;
     break;
    }
    HEAP32[32>>2] = 38;
    $245 = HEAP32[$189>>2]|0;
    _free($245);
    $246 = HEAP32[$190>>2]|0;
    _free($246);
    $247 = HEAP32[$nommu_save>>2]|0;
    _unset_vars($247);
    $248 = HEAP32[$188>>2]|0;
    _add_vars($248);
    _free($argv_expanded$318);
    $249 = HEAP32[$193>>2]|0;
    $250 = ($249|0)<(0);
    if ($250) {
     _bb_perror_msg(4289,$vararg_buffer3);
    } else {
     $251 = HEAP32[$219>>2]|0;
     $252 = (($251) + 1)|0;
     HEAP32[$219>>2] = $252;
     $253 = HEAP32[$7>>2]|0;
     $254 = ($253|0)<(0);
     if ($254) {
      HEAP32[$7>>2] = $249;
     }
    }
    $255 = ($cmd_no$020|0)>(0);
    if ($255) {
     (_close($next_infd$019)|0);
    }
    $256 = HEAP32[$11>>2]|0;
    $257 = ($194|0)<($256|0);
    if ($257) {
     $258 = HEAP32[$191>>2]|0;
     (_close($258)|0);
     $$pre34 = HEAP32[$11>>2]|0;
     $261 = $$pre34;
    } else {
     $261 = $256;
    }
    $259 = HEAP32[$pipefds>>2]|0;
    $260 = ($194|0)<($261|0);
    if ($260) {
     $argv_expanded$318 = 0;$cmd_no$020 = $194;$next_infd$019 = $259;
    } else {
     label = 92;
     break;
    }
   }
   if ((label|0) == 92) {
    $$pre35 = HEAP32[$219>>2]|0;
    $$pre36 = HEAP32[840>>2]|0;
    $phitmp = ($$pre35|0)==(0);
    $phitmp37 = $phitmp ? 1 : -1;
    $263 = $$pre36;$268 = $phitmp37;
    label = 93;
    break;
   }
   HEAP32[32>>2] = 0;
   $199 = HEAP32[840>>2]|0;
   $200 = ((($199)) + 28|0);
   HEAP32[$200>>2] = 0;
   $201 = ((($199)) + 44|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = ($202|0)==(1);
   if ($203) {
    $204 = HEAP32[$199>>2]|0;
    $205 = ($204|0)==(0);
    if (!($205)) {
     $206 = HEAP32[$7>>2]|0;
     $207 = ($206|0)<(0);
     if ($207) {
      $208 = (_getpid()|0);
      $pgrp$0 = $208;
     } else {
      $pgrp$0 = $206;
     }
     $209 = (_setpgid(0,$pgrp$0)|0);
     $210 = ($209|0)==(0);
     if ($210) {
      $211 = ((($pi)) + 32|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = ($212|0)==(4);
      if (!($213)) {
       $214 = ((($199)) + 52|0);
       $215 = HEAP32[$214>>2]|0;
       $216 = ($215|0)==(0);
       if (!($216)) {
        $217 = HEAP32[$199>>2]|0;
        (_tcsetpgrp($217,$pgrp$0)|0);
       }
      }
     }
    }
   }
   $218 = HEAP32[$219>>2]|0;
   $220 = ($218|0)==(0);
   if ($220) {
    $221 = ((($pi)) + 32|0);
    $222 = HEAP32[$221>>2]|0;
    $223 = ($222|0)==(4);
    if ($223) {
     (_close(0)|0);
     $224 = (_open(4552,0,$vararg_buffer1)|0);
     $225 = ($224|0)==(0);
     if (!($225)) {
      (_xopen(13905,0)|0);
     }
    } else {
     label = 73;
    }
   } else {
    label = 73;
   }
   if ((label|0) == 73) {
    _xmove_fd($next_infd$019$lcssa,0);
   }
   $226 = HEAP32[$191>>2]|0;
   _xmove_fd($226,1);
   $227 = HEAP32[$pipefds>>2]|0;
   $228 = ($227|0)>(1);
   if ($228) {
    (_close($227)|0);
   }
   $229 = (_setup_redirects($$lcssa70,0)|0);
   $230 = ($229|0)==(0);
   if (!($230)) {
    __exit(1);
    // unreachable;
   }
   $231 = (((($$lcssa) + (($cmd_no$020$lcssa*36)|0)|0)) + 28|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = ($232|0)==(0|0);
   if (!($233)) {
    $234 = (((($$lcssa) + (($cmd_no$020$lcssa*36)|0)|0)) + 4|0);
    $235 = HEAP32[$234>>2]|0;
    _pseudo_exec_argv($nommu_save,$232,$235,$argv_expanded$318$lcssa);
    // unreachable;
   }
   $236 = (((($$lcssa) + (($cmd_no$020$lcssa*36)|0)|0)) + 16|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = ($237|0)==(0|0);
   if ($238) {
    __exit(0);
    // unreachable;
   } else {
    $239 = (((($$lcssa) + (($cmd_no$020$lcssa*36)|0)|0)) + 20|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = ((($199)) + 92|0);
    $242 = HEAP32[$241>>2]|0;
    $243 = HEAP32[$242>>2]|0;
    $244 = ((($242)) + 4|0);
    _re_execute_shell($190,$240,$243,$244,0);
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 93) {
  $262 = ((($263)) + 280|0);
  $264 = HEAP32[$262>>2]|0;
  $265 = (($264) + -1)|0;
  HEAP32[$262>>2] = $265;
  $$1 = $268;
 }
 STACKTOP = sp;return ($$1|0);
}
function _checkjobs($fg_pipe) {
 $fg_pipe = $fg_pipe|0;
 var $$ = 0, $$2 = 0, $$lcssa = 0, $$lcssa112 = 0, $$lcssa113 = 0, $$lcssa114 = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$lcssa12 = 0, $$pre = 0, $$pre$pre = 0, $$pre46 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $ex$0 = 0, $i$0 = 0, $i$0$lcssa111 = 0, $i$1 = 0, $i$221 = 0, $or$cond3 = 0, $pi$0 = 0, $pi$0$22 = 0, $pi$023 = 0, $pi$023$lcssa = 0, $rcode$0$ph = 0, $rcode$0$ph123 = 0, $rcode$1 = 0, $rcode$2 = 0, $rcode$3 = 0;
 var $status = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $status = sp + 20|0;
 $0 = ($fg_pipe|0)==(0|0);
 $$ = $0 ? 3 : 2;
 $1 = (___errno_location()|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP32[840>>2]|0;
 $3 = ((($2)) + 56|0);
 $4 = ((($fg_pipe)) + 4|0);
 $5 = ((($fg_pipe)) + 28|0);
 $6 = ((($fg_pipe)) + 8|0);
 $7 = ((($fg_pipe)) + 12|0);
 $8 = ((($2)) + 60|0);
 $9 = ((($fg_pipe)) + 36|0);
 $rcode$0$ph = 0;
 L1: while(1) {
  $10 = (_waitpid(-1,($status|0),($$|0))|0);
  $11 = ($10|0)<(1);
  if ($11) {
   $$lcssa12 = $10;$rcode$0$ph123 = $rcode$0$ph;
   label = 3;
   break;
  } else {
   $28 = $10;
  }
  L3: while(1) {
   $15 = HEAP32[$status>>2]|0;
   $16 = $15 & 127;
   $17 = ($16|0)==(0);
   if ($17) {
    $91 = 1;
   } else {
    $18 = $15 & 65535;
    $19 = (($18) + -1)|0;
    $20 = ($19>>>0)<(255);
    $91 = $20;
   }
   L8: do {
    if ($0) {
     label = 29;
    } else {
     $21 = HEAP32[$4>>2]|0;
     $i$0 = $21;
     while(1) {
      $22 = (($i$0) + -1)|0;
      $23 = ($i$0|0)>(0);
      if (!($23)) {
       label = 29;
       break L8;
      }
      $24 = HEAP32[$5>>2]|0;
      $25 = (($24) + (($22*36)|0)|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($28|0);
      if ($27) {
       $$lcssa = $24;$$lcssa112 = $22;$$lcssa113 = $25;$i$0$lcssa111 = $i$0;
       break;
      } else {
       $i$0 = $22;
      }
     }
     if ($91) {
      HEAP32[$$lcssa113>>2] = 0;
      $29 = HEAP32[$6>>2]|0;
      $30 = (($29) + -1)|0;
      HEAP32[$6>>2] = $30;
      $31 = HEAP32[$status>>2]|0;
      $32 = $31 >>> 8;
      $33 = $32 & 255;
      $34 = $31 & 65535;
      $35 = (($34) + -1)|0;
      $36 = ($35>>>0)<(255);
      if ($36) {
       $37 = $31 & 127;
       $38 = ($i$0$lcssa111|0)==($21|0);
       if ($38) {
        switch ($37|0) {
        case 2: case 13:  {
         $40 = 13904;
         break;
        }
        default: {
         $39 = (_get_signame($37)|0);
         $40 = $39;
        }
        }
        (_puts($40)|0);
        $$pre$pre = HEAP32[$5>>2]|0;
        $$pre = $$pre$pre;
       } else {
        $$pre = $$lcssa;
       }
       $41 = $37 | 128;
       $43 = $$pre;$ex$0 = $41;
      } else {
       $43 = $$lcssa;$ex$0 = $33;
      }
      $42 = (((($43) + (($$lcssa112*36)|0)|0)) + 12|0);
      HEAP32[$42>>2] = $ex$0;
      $$pre46 = HEAP32[$7>>2]|0;
      $48 = $$pre46;$92 = $43;
     } else {
      $44 = HEAP32[$7>>2]|0;
      $45 = (($44) + 1)|0;
      HEAP32[$7>>2] = $45;
      $48 = $45;$92 = $$lcssa;
     }
     $46 = HEAP32[$6>>2]|0;
     $47 = ($46|0)==($48|0);
     if ($47) {
      $$lcssa117 = $92;$$lcssa118 = $48;
      break L3;
     }
    }
   } while(0);
   L27: do {
    if ((label|0) == 29) {
     label = 0;
     $pi$0$22 = HEAP32[$3>>2]|0;
     $64 = ($pi$0$22|0)==(0|0);
     if (!($64)) {
      $pi$023 = $pi$0$22;
      L29: while(1) {
       $65 = ((($pi$023)) + 4|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = ($66|0)>(0);
       if ($67) {
        $68 = ((($pi$023)) + 28|0);
        $69 = HEAP32[$68>>2]|0;
        $i$221 = 0;
        while(1) {
         $72 = (($69) + (($i$221*36)|0)|0);
         $73 = HEAP32[$72>>2]|0;
         $74 = ($73|0)==($28|0);
         $70 = (($i$221) + 1)|0;
         if ($74) {
          $$lcssa114 = $72;$pi$023$lcssa = $pi$023;
          break L29;
         }
         $71 = ($70|0)<($66|0);
         if ($71) {
          $i$221 = $70;
         } else {
          break;
         }
        }
       }
       $pi$0 = HEAP32[$pi$023>>2]|0;
       $75 = ($pi$0|0)==(0|0);
       if ($75) {
        break L27;
       } else {
        $pi$023 = $pi$0;
       }
      }
      if (!($91)) {
       $88 = ((($pi$023$lcssa)) + 12|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = (($89) + 1)|0;
       HEAP32[$88>>2] = $90;
       break;
      }
      HEAP32[$$lcssa114>>2] = 0;
      $76 = ((($pi$023$lcssa)) + 8|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (($77) + -1)|0;
      HEAP32[$76>>2] = $78;
      $79 = ($78|0)==(0);
      if ($79) {
       $82 = HEAP32[$2>>2]|0;
       $83 = ($82|0)==(0);
       if (!($83)) {
        $84 = ((($pi$023$lcssa)) + 16|0);
        $85 = HEAP32[$84>>2]|0;
        $86 = ((($pi$023$lcssa)) + 24|0);
        $87 = HEAP32[$86>>2]|0;
        HEAP32[$vararg_buffer1>>2] = $85;
        $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
        HEAP32[$vararg_ptr3>>2] = 4539;
        $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
        HEAP32[$vararg_ptr4>>2] = $87;
        (_printf(4521,$vararg_buffer1)|0);
       }
       _delete_finished_bg_job($pi$023$lcssa);
      }
     }
    }
   } while(0);
   $80 = (_waitpid(-1,($status|0),($$|0))|0);
   $81 = ($80|0)<(1);
   if ($81) {
    $$lcssa12 = $80;$rcode$0$ph123 = $rcode$0$ph;
    label = 3;
    break L1;
   } else {
    $28 = $80;
   }
  }
  $49 = HEAP32[$4>>2]|0;
  $i$1 = $49;$rcode$1 = $rcode$0$ph;
  while(1) {
   $50 = (($i$1) + -1)|0;
   $51 = ($i$1|0)>(0);
   if (!($51)) {
    $rcode$2 = $rcode$1;
    break;
   }
   $52 = (((($$lcssa117) + (($50*36)|0)|0)) + 12|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = HEAP8[$8>>0]|0;
   $55 = ($54<<24>>24)==(0);
   $56 = ($53|0)!=(0);
   $or$cond3 = $56 | $55;
   if ($or$cond3) {
    $rcode$2 = $53;
    break;
   } else {
    $i$1 = $50;$rcode$1 = 0;
   }
  }
  $57 = HEAP32[$9>>2]|0;
  $58 = ($57|0)==(0);
  $59 = ($rcode$2|0)==(0);
  $60 = $59&1;
  $rcode$3 = $58 ? $rcode$2 : $60;
  $61 = HEAP32[$2>>2]|0;
  $62 = ($61|0)==(0);
  $63 = ($$lcssa118|0)==(0);
  if (!($62)) {
   label = 26;
   break;
  }
  if ($63) {
   $$2 = $rcode$3;
   break;
  } else {
   $rcode$0$ph = $rcode$3;
  }
 }
 if ((label|0) == 3) {
  $12 = ($$lcssa12|0)==(0);
  if ($12) {
   $$2 = $rcode$0$ph123;
  } else {
   $13 = HEAP32[$1>>2]|0;
   $14 = ($13|0)==(10);
   if ($14) {
    $$2 = $rcode$0$ph123;
   } else {
    _bb_perror_msg(4513,$vararg_buffer);
    $$2 = $rcode$0$ph123;
   }
  }
 }
 else if ((label|0) == 26) {
  if ($63) {
   $$2 = $rcode$3;
  } else {
   _insert_bg_job($fg_pipe);
   $$2 = $rcode$3;
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function _insert_bg_job($pi) {
 $pi = $pi|0;
 var $$0$i = 0, $$lcssa = 0, $$lcssa17 = 0, $$ph = 0, $$ph$pn = 0, $$pre = 0, $$pre$i = 0, $$pre10 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $argv$0$i = 0, $argv$1$i = 0, $i$02 = 0, $job$0 = 0;
 var $job$0$3 = 0, $job$04 = 0, $jobp$0$lcssa = 0, $len$0$i = 0, $p$0$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($pi)) + 16|0);
 HEAP32[$0>>2] = 1;
 $1 = HEAP32[840>>2]|0;
 $2 = ((($1)) + 56|0);
 $job$0$3 = HEAP32[$2>>2]|0;
 $3 = ($job$0$3|0)==(0|0);
 if ($3) {
  $$ph = 0;
 } else {
  $7 = 1;$job$04 = $job$0$3;
  while(1) {
   $4 = ((($job$04)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)<($7|0);
   if ($6) {
    $67 = $7;
   } else {
    $8 = (($5) + 1)|0;
    HEAP32[$0>>2] = $8;
    $67 = $8;
   }
   $job$0 = HEAP32[$job$04>>2]|0;
   $9 = ($job$0|0)==(0|0);
   if ($9) {
    $$ph = $job$0$3;
    break;
   } else {
    $7 = $67;$job$04 = $job$0;
   }
  }
 }
 $10 = ($$ph|0)==(0|0);
 if ($10) {
  $jobp$0$lcssa = $2;
 } else {
  $$ph$pn = $$ph;
  while(1) {
   $$pre = HEAP32[$$ph$pn>>2]|0;
   $11 = ($$pre|0)==(0|0);
   if ($11) {
    $jobp$0$lcssa = $$ph$pn;
    break;
   } else {
    $$ph$pn = $$pre;
   }
  }
 }
 $12 = (_xmalloc(44)|0);
 HEAP32[$jobp$0$lcssa>>2] = $12;
 dest=$12; src=$pi; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$12>>2] = 0;
 $13 = ((($pi)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14*36)|0;
 $16 = (_xzalloc($15)|0);
 $17 = ((($12)) + 28|0);
 HEAP32[$17>>2] = $16;
 $18 = HEAP32[$13>>2]|0;
 $19 = ($18|0)>(0);
 if ($19) {
  $20 = ((($pi)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $i$02 = 0;
  while(1) {
   $22 = (($21) + (($i$02*36)|0)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($16) + (($i$02*36)|0)|0);
   HEAP32[$24>>2] = $23;
   $25 = (($i$02) + 1)|0;
   $26 = ($25|0)<($18|0);
   if ($26) {
    $i$02 = $25;
   } else {
    break;
   }
  }
 }
 $27 = ((($pi)) + 24|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 do {
  if ($29) {
   $30 = ((($pi)) + 28|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($31)) + 28|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)==(0|0);
   if (!($34)) {
    $35 = HEAP32[$33>>2]|0;
    $36 = ($35|0)==(0|0);
    if (!($36)) {
     $38 = $35;$argv$0$i = $33;$len$0$i = 0;
     while(1) {
      $39 = (_strlen($38)|0);
      $40 = (($len$0$i) + 1)|0;
      $41 = (($40) + ($39))|0;
      $42 = ((($argv$0$i)) + 4|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ($43|0)==(0|0);
      if ($44) {
       $$lcssa17 = $41;
       break;
      } else {
       $38 = $43;$argv$0$i = $42;$len$0$i = $41;
      }
     }
     $45 = (_xmalloc($$lcssa17)|0);
     HEAP32[$27>>2] = $45;
     $46 = HEAP32[$30>>2]|0;
     $47 = ((($46)) + 28|0);
     $48 = HEAP32[$47>>2]|0;
     $$pre$i = HEAP32[$48>>2]|0;
     $49 = $$pre$i;$argv$1$i = $48;$p$0$i = $45;
     while(1) {
      $50 = (_strlen($49)|0);
      _memcpy(($p$0$i|0),($49|0),($50|0))|0;
      $51 = (($p$0$i) + ($50)|0);
      $52 = ((($51)) + 1|0);
      HEAP8[$51>>0] = 32;
      $53 = ((($argv$1$i)) + 4|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = ($54|0)==(0|0);
      if ($55) {
       $$lcssa = $52;
       break;
      } else {
       $49 = $54;$argv$1$i = $53;$p$0$i = $52;
      }
     }
     $56 = ((($$lcssa)) + -1|0);
     HEAP8[$56>>0] = 0;
     $57 = HEAP32[$27>>2]|0;
     $$0$i = $57;
     break;
    }
   }
   $37 = (_xzalloc(1)|0);
   HEAP32[$27>>2] = $37;
   $$0$i = $37;
  } else {
   $$0$i = $28;
  }
 } while(0);
 $58 = (_xstrdup($$0$i)|0);
 $59 = ((($12)) + 24|0);
 HEAP32[$59>>2] = $58;
 $60 = HEAP32[$1>>2]|0;
 $61 = ($60|0)==(0);
 $$pre10 = ((($12)) + 16|0);
 if (!($61)) {
  $62 = HEAP32[$$pre10>>2]|0;
  $63 = HEAP32[$17>>2]|0;
  $64 = HEAP32[$63>>2]|0;
  HEAP32[$vararg_buffer>>2] = $62;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $64;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $58;
  (_printf(4501,$vararg_buffer)|0);
 }
 $65 = HEAP32[$$pre10>>2]|0;
 $66 = ((($1)) + 48|0);
 HEAP32[$66>>2] = $65;
 STACKTOP = sp;return;
}
function _checkjobs_and_fg_shell($fg_pipe) {
 $fg_pipe = $fg_pipe|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_checkjobs($fg_pipe)|0);
 $1 = HEAP32[840>>2]|0;
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = (_getpgrp()|0);
  $6 = HEAP32[$1>>2]|0;
  (_tcsetpgrp($6,$5)|0);
 }
 return ($0|0);
}
function _delete_finished_bg_job($pi) {
 $pi = $pi|0;
 var $$sink$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $prev_pipe$0$i = 0, $prev_pipe$0$i$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[840>>2]|0;
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($pi|0);
 if ($3) {
  $4 = HEAP32[$pi>>2]|0;
  HEAP32[$1>>2] = $4;
  $5 = $4;
  $9 = $5;
 } else {
  $prev_pipe$0$i = $2;
  while(1) {
   $6 = HEAP32[$prev_pipe$0$i>>2]|0;
   $7 = ($6|0)==($pi|0);
   if ($7) {
    $prev_pipe$0$i$lcssa = $prev_pipe$0$i;
    break;
   } else {
    $prev_pipe$0$i = $6;
   }
  }
  $8 = HEAP32[$pi>>2]|0;
  HEAP32[$prev_pipe$0$i$lcssa>>2] = $8;
  $9 = $2;
 }
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$sink$i = 0;
 } else {
  $11 = ((($9)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $$sink$i = $12;
 }
 $13 = ((($0)) + 48|0);
 HEAP32[$13>>2] = $$sink$i;
 (_free_pipe($pi)|0);
 return;
}
function _setup_redirects($prog,$squirrel) {
 $prog = $prog|0;
 $squirrel = $squirrel|0;
 var $$4 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $openfd$2 = 0, $or$cond = 0, $redir$0 = 0, $redir$0$2 = 0, $redir$04 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($prog)) + 32|0);
 $redir$0$2 = HEAP32[$0>>2]|0;
 $1 = ($redir$0$2|0)==(0|0);
 L1: do {
  if ($1) {
   $$4 = 0;
  } else {
   $2 = ($squirrel|0)==(0|0);
   $3 = ($squirrel|0)!=(0|0);
   $redir$04 = $redir$0$2;
   while(1) {
    $4 = ((($redir$04)) + 16|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)==(5);
    L5: do {
     if ($6) {
      if (!($2)) {
       $7 = ((($redir$04)) + 8|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = ($8|0)<(3);
       if ($9) {
        $10 = (($squirrel) + ($8<<2)|0);
        $11 = HEAP32[$10>>2]|0;
        $12 = ($11|0)<(0);
        if ($12) {
         $13 = (_dup($8)|0);
         $14 = HEAP32[$7>>2]|0;
         $15 = (($squirrel) + ($14<<2)|0);
         HEAP32[$15>>2] = $13;
        }
       }
      }
      _setup_heredoc($redir$04);
     } else {
      $16 = ((($redir$04)) + 12|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = ($17|0)==(-1);
      do {
       if ($18) {
        $19 = ((($redir$04)) + 4|0);
        $20 = HEAP32[$19>>2]|0;
        $21 = ($20|0)==(0|0);
        if ($21) {
         _bb_error_msg(5755,$vararg_buffer);
         break L5;
        } else {
         $22 = (392 + ($5<<3)|0);
         $23 = HEAP32[$22>>2]|0;
         $24 = (_expand_string_to_string($20,1)|0);
         $25 = (_open_or_warn($24,$23)|0);
         _free($24);
         $26 = ($25|0)<(0);
         if ($26) {
          $$4 = 1;
          break L1;
         } else {
          $openfd$2 = $25;
          break;
         }
        }
       } else {
        $openfd$2 = $17;
       }
      } while(0);
      $27 = ((($redir$04)) + 8|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($openfd$2|0)==($28|0);
      if (!($29)) {
       $30 = ($28|0)<(3);
       $or$cond = $3 & $30;
       if ($or$cond) {
        $31 = (($squirrel) + ($28<<2)|0);
        $32 = HEAP32[$31>>2]|0;
        $33 = ($32|0)<(0);
        if ($33) {
         $34 = (_dup($28)|0);
         $35 = HEAP32[$27>>2]|0;
         $36 = (($squirrel) + ($35<<2)|0);
         HEAP32[$36>>2] = $34;
         $$pre = HEAP32[$27>>2]|0;
         $38 = $$pre;
        } else {
         $38 = $28;
        }
       } else {
        $38 = $28;
       }
       $37 = ($openfd$2|0)==(-3);
       if ($37) {
        (_close($38)|0);
        break;
       }
       _xdup2($openfd$2,$38);
       $39 = HEAP32[$16>>2]|0;
       $40 = ($39|0)==(-1);
       if ($40) {
        (_close($openfd$2)|0);
       }
      }
     }
    } while(0);
    $redir$0 = HEAP32[$redir$04>>2]|0;
    $41 = ($redir$0|0)==(0|0);
    if ($41) {
     $$4 = 0;
     break;
    } else {
     $redir$04 = $redir$0;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$4|0);
}
function _restore_redirects($squirrel) {
 $squirrel = $squirrel|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$squirrel>>2]|0;
 $1 = ($0|0)==(-1);
 if (!($1)) {
  _xmove_fd($0,0);
 }
 $2 = ((($squirrel)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(-1);
 if (!($4)) {
  _xmove_fd($3,1);
 }
 $5 = ((($squirrel)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(-1);
 if (!($7)) {
  _xmove_fd($6,2);
 }
 return;
}
function _builtin_exec($argv) {
 $argv = $argv|0;
 var $$$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($argv)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if (!($2)) {
   $3 = HEAP8[$1>>0]|0;
   $4 = ($3<<24>>24)==(45);
   if ($4) {
    $5 = ((($1)) + 1|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==(45);
    if ($7) {
     $8 = ((($1)) + 2|0);
     $9 = HEAP8[$8>>0]|0;
     $10 = ($9<<24>>24)==(0);
     $11 = ((($argv)) + 8|0);
     $$$i = $10 ? $11 : $0;
     $$pre = HEAP32[$$$i>>2]|0;
     $12 = ($$pre|0)==(0|0);
     if ($12) {
      break;
     } else {
      $23 = $$$i;
     }
    } else {
     $23 = $0;
    }
   } else {
    $23 = $0;
   }
   $13 = HEAP32[840>>2]|0;
   $14 = ((($13)) + 52|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if (!($16)) {
    $17 = (_getpid()|0);
    $18 = ((($13)) + 16|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($17|0)==($19|0);
    if ($20) {
     $21 = HEAP32[$13>>2]|0;
     $22 = HEAP32[$14>>2]|0;
     (_tcsetpgrp($21,$22)|0);
    }
   }
   _execvp_or_die($23);
   // unreachable;
  }
 } while(0);
 return 0;
}
function _expand_assignments($argv,$count) {
 $argv = $argv|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond = 0, $i$01 = 0, $p$0$lcssa = 0, $p$02 = 0, $v$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v$i = sp;
 $0 = HEAP32[840>>2]|0;
 $1 = ((($0)) + 120|0);
 HEAP32[$1>>2] = 0;
 $2 = ($count|0)>(0);
 if ($2) {
  $3 = ((($v$i)) + 4|0);
  $i$01 = 0;$p$02 = 0;
  while(1) {
   $4 = (($argv) + ($i$01<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (_expand_string_to_string($5,1)|0);
   HEAP32[$v$i>>2] = $6;
   HEAP32[$3>>2] = 0;
   $7 = (_add_strings_to_strings($p$02,$v$i,0)|0);
   HEAP32[$1>>2] = $7;
   $8 = (($i$01) + 1)|0;
   $exitcond = ($8|0)==($count|0);
   if ($exitcond) {
    $p$0$lcssa = $7;
    break;
   } else {
    $i$01 = $8;$p$02 = $7;
   }
  }
 } else {
  $p$0$lcssa = 0;
 }
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return ($p$0$lcssa|0);
}
function _dump_cmd_in_x_mode($argv) {
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len$0$lcssa = 0, $len$04 = 0, $n$05 = 0, $n$13 = 0, $or$cond = 0, $p$0$lcssa = 0, $p$02 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[840>>2]|0;
 $1 = ((($0)) + 62|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 $4 = ($argv|0)!=(0|0);
 $or$cond = $4 & $3;
 if ($or$cond) {
  $5 = HEAP32[$argv>>2]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   $len$0$lcssa = 3;
  } else {
   $8 = $5;$len$04 = 3;$n$05 = 0;
   while(1) {
    $7 = (($n$05) + 1)|0;
    $9 = (_strlen($8)|0);
    $10 = (($len$04) + 1)|0;
    $11 = (($10) + ($9))|0;
    $12 = (($argv) + ($7<<2)|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)==(0|0);
    if ($14) {
     $len$0$lcssa = $11;
     break;
    } else {
     $8 = $13;$len$04 = $11;$n$05 = $7;
    }
   }
  }
  $15 = (_xmalloc($len$0$lcssa)|0);
  HEAP8[$15>>0] = 43;
  $16 = ((($15)) + 1|0);
  $17 = HEAP32[$argv>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $p$0$lcssa = $16;
  } else {
   $20 = $17;$n$13 = 0;$p$02 = $16;
   while(1) {
    $19 = (($n$13) + 1)|0;
    HEAP32[$vararg_buffer>>2] = $20;
    $21 = (_sprintf($p$02,4548,$vararg_buffer)|0);
    $22 = (($p$02) + ($21)|0);
    $23 = (($argv) + ($19<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==(0|0);
    if ($25) {
     $p$0$lcssa = $22;
     break;
    } else {
     $20 = $24;$n$13 = $19;$p$02 = $22;
    }
   }
  }
  $26 = ((($p$0$lcssa)) + 1|0);
  HEAP8[$p$0$lcssa>>0] = 10;
  HEAP8[$26>>0] = 0;
  $27 = HEAP32[1116>>2]|0;
  (_fputs($15,$27)|0);
  _free($15);
 }
 STACKTOP = sp;return;
}
function _set_vars_and_save_old($strings) {
 $strings = $strings|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $old$01 = 0;
 var $old$1 = 0, $old$2 = 0, $s$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($strings|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = HEAP32[$strings>>2]|0;
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 0;
  } else {
   $3 = $1;$old$01 = 0;$s$02 = $strings;
   while(1) {
    $4 = (_strchr($3,61)|0);
    $5 = ($4|0)==(0|0);
    if ($5) {
     $old$2 = $old$01;
    } else {
     $6 = $4;
     $7 = $3;
     $8 = (($6) - ($7))|0;
     $9 = (_get_ptr_to_local_var($3,$8)|0);
     $10 = ($9|0)==(0|0);
     if ($10) {
      $13 = $3;$old$1 = $old$01;
     } else {
      $11 = HEAP32[$9>>2]|0;
      $12 = HEAP32[$11>>2]|0;
      HEAP32[$9>>2] = $12;
      HEAP32[$11>>2] = $old$01;
      $$pre = HEAP32[$s$02>>2]|0;
      $13 = $$pre;$old$1 = $11;
     }
     _set_local_var($13,1,0,0);
     $old$2 = $old$1;
    }
    $14 = ((($s$02)) + 4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(0|0);
    if ($16) {
     $$0 = $old$2;
     break;
    } else {
     $3 = $15;$old$01 = $old$2;$s$02 = $14;
    }
   }
  }
 }
 return ($$0|0);
}
function _restore_G_args($sv,$argv) {
 $sv = $sv|0;
 $argv = $argv|0;
 var $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[840>>2]|0;
 $1 = ((($0)) + 84|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 $$pre3 = ((($0)) + 92|0);
 if (!($3)) {
  $4 = HEAP32[$$pre3>>2]|0;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   $13 = $4;
  } else {
   $10 = $5;$8 = $6;
   while(1) {
    _free($8);
    $9 = ((($10)) + 4|0);
    $11 = HEAP32[$9>>2]|0;
    $12 = ($11|0)==(0|0);
    if ($12) {
     break;
    } else {
     $10 = $9;$8 = $11;
    }
   }
   $$pre = HEAP32[$$pre3>>2]|0;
   $13 = $$pre;
  }
  _free($13);
 }
 $14 = HEAP32[$sv>>2]|0;
 HEAP32[$argv>>2] = $14;
 $15 = ((($sv)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$$pre3>>2] = $16;
 $17 = ((($sv)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($0)) + 88|0);
 HEAP32[$19>>2] = $18;
 $20 = ((($sv)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$1>>2] = $21;
 return;
}
function _unset_vars($strings) {
 $strings = $strings|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $v$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($strings|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$strings>>2]|0;
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $3 = $1;$v$01 = $strings;
   while(1) {
    $4 = (___strchrnul($3,61)|0);
    $5 = HEAP32[$v$01>>2]|0;
    $6 = $4;
    $7 = $5;
    $8 = (($6) - ($7))|0;
    (_unset_local_var_len($5,$8)|0);
    $9 = ((($v$01)) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==(0|0);
    if ($11) {
     break;
    } else {
     $3 = $10;$v$01 = $9;
    }
   }
  }
  _free($strings);
 }
 return;
}
function _add_vars($var) {
 $var = $var|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($var|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[840>>2]|0;
  $2 = ((($1)) + 116|0);
  $$01 = $var;
  while(1) {
   $3 = HEAP32[$$01>>2]|0;
   $4 = HEAP32[$2>>2]|0;
   HEAP32[$$01>>2] = $4;
   HEAP32[$2>>2] = $$01;
   $5 = ((($$01)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0);
   if (!($7)) {
    $9 = ((($$01)) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    (_putenv(($10|0))|0);
   }
   $8 = ($3|0)==(0|0);
   if ($8) {
    break;
   } else {
    $$01 = $3;
   }
  }
 }
 return;
}
function _pseudo_exec_argv($nommu_save,$argv,$assignment_cnt,$argv_expanded) {
 $nommu_save = $nommu_save|0;
 $argv = $argv|0;
 $assignment_cnt = $assignment_cnt|0;
 $argv_expanded = $argv_expanded|0;
 var $$0 = 0, $$012$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_expand_assignments($argv,$assignment_cnt)|0);
 _dump_cmd_in_x_mode($0);
 $1 = (($argv) + ($assignment_cnt<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _free_strings($0);
  __exit(0);
  // unreachable;
 }
 HEAP32[$nommu_save>>2] = $0;
 $4 = (_set_vars_and_save_old($0)|0);
 $5 = ((($nommu_save)) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = ($argv_expanded|0)==(0|0);
 if ($6) {
  $7 = (_expand_variables($1,3)|0);
  $8 = ((($nommu_save)) + 8|0);
  HEAP32[$8>>2] = $7;
  $$0 = $7;
 } else {
  $$0 = $argv_expanded;
 }
 _dump_cmd_in_x_mode($$0);
 $9 = HEAP32[$$0>>2]|0;
 $$012$i$i = 56;
 while(1) {
  $10 = HEAP32[$$012$i$i>>2]|0;
  $11 = (_strcmp($9,$10)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   label = 8;
   break;
  }
  $13 = ((($$012$i$i)) + 12|0);
  $14 = ($13|0)==((392)|0);
  if ($14) {
   break;
  } else {
   $$012$i$i = $13;
  }
 }
 if ((label|0) == 8) {
  $15 = ((($nommu_save)) + 12|0);
  (_fflush_all()|0);
  $16 = HEAP32[$$0>>2]|0;
  $17 = HEAP32[840>>2]|0;
  $18 = ((($17)) + 92|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($19)) + 4|0);
  _re_execute_shell($15,$16,$20,$21,$$0);
  // unreachable;
 }
 $22 = (_find_function_slot($9)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 if ($24) {
  _execvp_or_die($$0);
  // unreachable;
 } else {
  $25 = ((($nommu_save)) + 12|0);
  $26 = ((($23)) + 16|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[840>>2]|0;
  $29 = ((($28)) + 92|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($$0)) + 4|0);
  _re_execute_shell($25,$27,$31,$32,0);
  // unreachable;
 }
}
function _execvp_or_die($argv) {
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[840>>2]|0;
 $1 = ((($0)) + 136|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 7340032;
 _switch_off_special_sigs($3);
 $4 = HEAP32[$argv>>2]|0;
 (_execvp(($4|0),($argv|0))|0);
 $5 = HEAP32[$argv>>2]|0;
 HEAP32[$vararg_buffer>>2] = $5;
 _bb_perror_msg(4562,$vararg_buffer);
 __exit(127);
 // unreachable;
}
function _builtin_source($argv) {
 $argv = $argv|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg_path$0 = 0, $filename$0 = 0, $input$i = 0, $n$0$i = 0;
 var $n$0$i$lcssa = 0, $sv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $input$i = sp + 16|0;
 $sv = sp;
 $0 = ((($argv)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $$0 = 2;
  } else {
   $3 = HEAP8[$1>>0]|0;
   $4 = ($3<<24>>24)==(45);
   if ($4) {
    $5 = ((($1)) + 1|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==(45);
    if ($7) {
     $8 = ((($1)) + 2|0);
     $9 = HEAP8[$8>>0]|0;
     $10 = ($9<<24>>24)==(0);
     $11 = ((($argv)) + 8|0);
     $$$i = $10 ? $11 : $0;
     $$pre = HEAP32[$$$i>>2]|0;
     $12 = ($$pre|0)==(0|0);
     if ($12) {
      $$0 = 2;
      break;
     } else {
      $13 = $$pre;$25 = $$$i;
     }
    } else {
     $13 = $1;$25 = $0;
    }
   } else {
    $13 = $1;$25 = $0;
   }
   $14 = (_strchr($13,47)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    $16 = (_find_in_path($13)|0);
    $17 = ($16|0)==(0|0);
    $$ = $17 ? $13 : $16;
    $arg_path$0 = $16;$filename$0 = $$;
   } else {
    $arg_path$0 = 0;$filename$0 = $13;
   }
   $18 = (_fopen_or_warn($filename$0,7307)|0);
   _free($arg_path$0);
   $19 = ($18|0)==(0|0);
   if ($19) {
    $$0 = 1;
   } else {
    $20 = (_fileno($18)|0);
    _close_on_exec_on($20);
    $21 = HEAP32[840>>2]|0;
    $22 = ((($21)) + 72|0);
    $23 = HEAP32[$22>>2]|0;
    HEAP32[$22>>2] = -1;
    $24 = ((($25)) + 4|0);
    $26 = HEAP32[$24>>2]|0;
    $27 = ($26|0)==(0|0);
    if (!($27)) {
     $28 = HEAP32[$25>>2]|0;
     HEAP32[$sv>>2] = $28;
     $29 = ((($21)) + 92|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ((($sv)) + 4|0);
     HEAP32[$31>>2] = $30;
     $32 = ((($21)) + 88|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ((($sv)) + 8|0);
     HEAP32[$34>>2] = $33;
     $35 = ((($21)) + 84|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ((($sv)) + 12|0);
     HEAP32[$37>>2] = $36;
     $38 = $30;
     $39 = HEAP32[$38>>2]|0;
     HEAP32[$25>>2] = $39;
     HEAP32[$29>>2] = $25;
     HEAP32[$35>>2] = 0;
     $$0$i = $25;$n$0$i = 1;
     while(1) {
      $40 = ((($$0$i)) + 4|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($41|0)==(0|0);
      $43 = (($n$0$i) + 1)|0;
      if ($42) {
       $n$0$i$lcssa = $n$0$i;
       break;
      } else {
       $$0$i = $40;$n$0$i = $43;
      }
     }
     HEAP32[$32>>2] = $n$0$i$lcssa;
    }
    ;HEAP32[$input$i>>2]=0|0;HEAP32[$input$i+4>>2]=0|0;HEAP32[$input$i+8>>2]=0|0;HEAP32[$input$i+12>>2]=0|0;
    $44 = ((($input$i)) + 24|0);
    HEAP32[$44>>2] = 41;
    $45 = ((($input$i)) + 20|0);
    HEAP32[$45>>2] = 42;
    $46 = ((($input$i)) + 16|0);
    HEAP32[$46>>2] = $18;
    _parse_and_run_stream($input$i,59);
    (_fclose($18)|0);
    $47 = HEAP32[$24>>2]|0;
    $48 = ($47|0)==(0|0);
    if (!($48)) {
     _restore_G_args($sv,$25);
    }
    HEAP32[$22>>2] = $23;
    $49 = ((($21)) + 80|0);
    $50 = HEAP32[$49>>2]|0;
    $$0 = $50;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _builtin_true($argv) {
 $argv = $argv|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _builtin_fg_bg($argv) {
 $argv = $argv|0;
 var $$0 = 0, $$pre = 0, $$sink$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $7 = 0, $8 = 0, $9 = 0, $jobnum = 0, $pi$0 = 0, $pi$0$4 = 0, $pi$05 = 0, $pi$1 = 0, $pi$1$6 = 0, $pi$17 = 0, $pi$2 = 0, $prev_pipe$0$i = 0, $prev_pipe$0$i$lcssa = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0;
 var $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $jobnum = sp + 36|0;
 $0 = HEAP32[840>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$0 = 1;
  } else {
   $3 = ((($argv)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   L3: do {
    if ($5) {
     $6 = ((($0)) + 56|0);
     $pi$0$4 = HEAP32[$6>>2]|0;
     $7 = ($pi$0$4|0)==(0|0);
     if (!($7)) {
      $8 = ((($0)) + 48|0);
      $9 = HEAP32[$8>>2]|0;
      $pi$05 = $pi$0$4;
      while(1) {
       $10 = ((($pi$05)) + 16|0);
       $11 = HEAP32[$10>>2]|0;
       $12 = ($11|0)==($9|0);
       if ($12) {
        $pi$2 = $pi$05;
        break L3;
       }
       $pi$0 = HEAP32[$pi$05>>2]|0;
       $13 = ($pi$0|0)==(0|0);
       if ($13) {
        break;
       } else {
        $pi$05 = $pi$0;
       }
      }
     }
     $14 = HEAP32[$argv>>2]|0;
     HEAP32[$vararg_buffer>>2] = $14;
     _bb_error_msg(5674,$vararg_buffer);
     $$0 = 1;
     break L1;
    } else {
     HEAP32[$vararg_buffer1>>2] = $jobnum;
     $15 = (_sscanf($4,5693,$vararg_buffer1)|0);
     $16 = ($15|0)==(1);
     if (!($16)) {
      $17 = HEAP32[$argv>>2]|0;
      $18 = HEAP32[$3>>2]|0;
      HEAP32[$vararg_buffer4>>2] = $17;
      $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
      HEAP32[$vararg_ptr7>>2] = $18;
      _bb_error_msg(5698,$vararg_buffer4);
      $$0 = 1;
      break L1;
     }
     $19 = ((($0)) + 56|0);
     $pi$1$6 = HEAP32[$19>>2]|0;
     $20 = ($pi$1$6|0)==(0|0);
     $$pre = HEAP32[$jobnum>>2]|0;
     if (!($20)) {
      $pi$17 = $pi$1$6;
      while(1) {
       $21 = ((($pi$17)) + 16|0);
       $22 = HEAP32[$21>>2]|0;
       $23 = ($22|0)==($$pre|0);
       if ($23) {
        $pi$2 = $pi$17;
        break L3;
       }
       $pi$1 = HEAP32[$pi$17>>2]|0;
       $24 = ($pi$1|0)==(0|0);
       if ($24) {
        break;
       } else {
        $pi$17 = $pi$1;
       }
      }
     }
     $25 = HEAP32[$argv>>2]|0;
     HEAP32[$vararg_buffer8>>2] = $25;
     $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
     HEAP32[$vararg_ptr11>>2] = $$pre;
     _bb_error_msg(5720,$vararg_buffer8);
     $$0 = 1;
     break L1;
    }
   } while(0);
   $26 = HEAP32[$argv>>2]|0;
   $27 = HEAP8[$26>>0]|0;
   $28 = ($27<<24>>24)==(102);
   if ($28) {
    $29 = ((($0)) + 52|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)==(0);
    if (!($31)) {
     $32 = HEAP32[$0>>2]|0;
     $33 = ((($pi$2)) + 20|0);
     $34 = HEAP32[$33>>2]|0;
     (_tcsetpgrp($32,$34)|0);
    }
   }
   $35 = ((($pi$2)) + 12|0);
   HEAP32[$35>>2] = 0;
   $36 = ((($pi$2)) + 20|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (0 - ($37))|0;
   $39 = (_kill(($38|0),18)|0);
   $40 = ($39|0)<(0);
   do {
    if ($40) {
     $41 = (___errno_location()|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==(3);
     if ($43) {
      _delete_finished_bg_job($pi$2);
      $$0 = 0;
      break L1;
     } else {
      _bb_perror_msg(5740,$vararg_buffer12);
      break;
     }
    }
   } while(0);
   $44 = HEAP32[$argv>>2]|0;
   $45 = HEAP8[$44>>0]|0;
   $46 = ($45<<24>>24)==(102);
   if ($46) {
    $47 = ((($0)) + 56|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)==($pi$2|0);
    if ($49) {
     $50 = HEAP32[$pi$2>>2]|0;
     HEAP32[$47>>2] = $50;
     $51 = $50;
     $55 = $51;
    } else {
     $prev_pipe$0$i = $48;
     while(1) {
      $52 = HEAP32[$prev_pipe$0$i>>2]|0;
      $53 = ($52|0)==($pi$2|0);
      if ($53) {
       $prev_pipe$0$i$lcssa = $prev_pipe$0$i;
       break;
      } else {
       $prev_pipe$0$i = $52;
      }
     }
     $54 = HEAP32[$pi$2>>2]|0;
     HEAP32[$prev_pipe$0$i$lcssa>>2] = $54;
     $55 = $48;
    }
    $56 = ($55|0)==(0|0);
    if ($56) {
     $$sink$i = 0;
    } else {
     $57 = ((($55)) + 16|0);
     $58 = HEAP32[$57>>2]|0;
     $$sink$i = $58;
    }
    $59 = ((($0)) + 48|0);
    HEAP32[$59>>2] = $$sink$i;
    $60 = (_checkjobs_and_fg_shell($pi$2)|0);
    $$0 = $60;
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _builtin_break($argv) {
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[840>>2]|0;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = HEAP32[$argv>>2]|0;
  HEAP32[$vararg_buffer>>2] = $4;
  _bb_error_msg(5644,$vararg_buffer);
 } else {
  $5 = ((($0)) + 68|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 1)|0;
  HEAP32[$5>>2] = $7;
  $8 = (_parse_numeric_argv1($argv,1,1)|0);
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = $8;
  $10 = ($8|0)==(-1);
  if ($10) {
   HEAP32[$5>>2] = 1;
  }
  $11 = HEAP32[$1>>2]|0;
  $12 = ($11>>>0)<($8>>>0);
  if ($12) {
   HEAP32[$9>>2] = $11;
  }
 }
 STACKTOP = sp;return 0;
}
function _builtin_cd($argv) {
 $argv = $argv|0;
 var $$$i = 0, $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $newdir$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($argv)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  label = 5;
 } else {
  $3 = HEAP8[$1>>0]|0;
  $4 = ($3<<24>>24)==(45);
  if ($4) {
   $5 = ((($1)) + 1|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(45);
   if ($7) {
    $8 = ((($1)) + 2|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($argv)) + 8|0);
    $$$i = $10 ? $11 : $0;
    $$pre = HEAP32[$$$i>>2]|0;
    $12 = ($$pre|0)==(0|0);
    if ($12) {
     label = 5;
    } else {
     $newdir$0 = $$pre;
    }
   } else {
    $newdir$0 = $1;
   }
  } else {
   $newdir$0 = $1;
  }
 }
 if ((label|0) == 5) {
  $13 = (_get_local_var_value(3946)|0);
  $14 = ($13|0)!=(0|0);
  $15 = $14 ? $13 : 13905;
  $newdir$0 = $15;
 }
 $16 = (_chdir($newdir$0)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  _set_pwd_var(0);
  $$0 = 0;
 } else {
  HEAP32[$vararg_buffer>>2] = $newdir$0;
  _bb_perror_msg(5637,$vararg_buffer);
  $$0 = 1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _builtin_continue($argv) {
 $argv = $argv|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[840>>2]|0;
 $1 = ((($0)) + 68|0);
 HEAP32[$1>>2] = 1;
 (_builtin_break($argv)|0);
 return 0;
}
function _builtin_exit($argv) {
 $argv = $argv|0;
 var $$$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($argv)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if (!($2)) {
   $3 = HEAP8[$1>>0]|0;
   $4 = ($3<<24>>24)==(45);
   if ($4) {
    $5 = ((($1)) + 1|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==(45);
    if ($7) {
     $8 = ((($1)) + 2|0);
     $9 = HEAP8[$8>>0]|0;
     $10 = ($9<<24>>24)==(0);
     $11 = ((($argv)) + 8|0);
     $$$i = $10 ? $11 : $0;
     $$pre = HEAP32[$$$i>>2]|0;
     $12 = ($$pre|0)==(0|0);
     if ($12) {
      break;
     } else {
      $17 = $$$i;
     }
    } else {
     $17 = $0;
    }
   } else {
    $17 = $0;
   }
   HEAP8[3631>>0] = -1;
   $16 = HEAP32[$17>>2]|0;
   $18 = (_xatol($16)|0);
   $19 = $18 & 255;
   _hush_exit($19);
   // unreachable;
  }
 } while(0);
 $13 = HEAP32[840>>2]|0;
 $14 = ((($13)) + 80|0);
 $15 = HEAP32[$14>>2]|0;
 _hush_exit($15);
 // unreachable;
 return (0)|0;
}
function _builtin_export($argv) {
 $argv = $argv|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e$01 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_getopt32($argv,5622,$vararg_buffer)|0);
 $1 = ($0|0)==(-1);
 do {
  if ($1) {
   $$0 = 1;
  } else {
   $2 = HEAP32[1092>>2]|0;
   $3 = (($argv) + ($2<<2)|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if (!($5)) {
    $21 = ($0|0)!=(0);
    $22 = $21 ? -1 : 1;
    _helper_export_local($3,$22,0);
    $$0 = 0;
    break;
   }
   $6 = HEAP32[_environ>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$0 = 0;
   } else {
    $8 = HEAP32[$6>>2]|0;
    $9 = ($8|0)==(0|0);
    if ($9) {
     $$0 = 0;
    } else {
     $11 = $8;$e$01 = $6;
     while(1) {
      $10 = ((($e$01)) + 4|0);
      $12 = (_strchr($11,61)|0);
      $13 = ($12|0)==(0|0);
      if (!($13)) {
       $16 = $12;
       $17 = $11;
       $18 = (1 - ($17))|0;
       $19 = (($18) + ($16))|0;
       HEAP32[$vararg_buffer1>>2] = $19;
       $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
       HEAP32[$vararg_ptr3>>2] = $11;
       (_printf(5625,$vararg_buffer1)|0);
       $20 = ((($12)) + 1|0);
       _print_escaped($20);
       (_putchar_unlocked(10)|0);
      }
      $14 = HEAP32[$10>>2]|0;
      $15 = ($14|0)==(0|0);
      if ($15) {
       $$0 = 0;
       break;
      } else {
       $11 = $14;$e$01 = $10;
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _builtin_help($argv) {
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $x$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 (_puts(5575)|0);
 $x$01 = 56;
 while(1) {
  $0 = ((($x$01)) + 8|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $3 = HEAP32[$x$01>>2]|0;
   HEAP32[$vararg_buffer>>2] = $3;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $1;
   (_printf(5613,$vararg_buffer)|0);
  }
  $4 = ((($x$01)) + 12|0);
  $5 = ($4|0)==((392)|0);
  if ($5) {
   break;
  } else {
   $x$01 = $4;
  }
 }
 (_bb_putchar(10)|0);
 STACKTOP = sp;return 0;
}
function _builtin_history($argv) {
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[840>>2]|0;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 _show_history($2);
 return 0;
}
function _builtin_jobs($argv) {
 $argv = $argv|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $job$0 = 0, $job$0$1 = 0, $job$02 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[840>>2]|0;
 $1 = ((($0)) + 56|0);
 $job$0$1 = HEAP32[$1>>2]|0;
 $2 = ($job$0$1|0)==(0|0);
 if (!($2)) {
  $job$02 = $job$0$1;
  while(1) {
   $3 = ((($job$02)) + 8|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ((($job$02)) + 12|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4|0)==($6|0);
   $$ = $7 ? 5559 : 5567;
   $8 = ((($job$02)) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($job$02)) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer>>2] = $9;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $$;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $11;
   (_printf(4521,$vararg_buffer)|0);
   $job$0 = HEAP32[$job$02>>2]|0;
   $12 = ($job$0|0)==(0|0);
   if ($12) {
    break;
   } else {
    $job$02 = $job$0;
   }
  }
 }
 STACKTOP = sp;return 0;
}
function _builtin_local($argv) {
 $argv = $argv|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[840>>2]|0;
 $1 = ((($0)) + 132|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = HEAP32[$argv>>2]|0;
  HEAP32[$vararg_buffer>>2] = $4;
  _bb_error_msg(5533,$vararg_buffer);
  $$0 = 1;
 } else {
  _helper_export_local($argv,0,$2);
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _builtin_memleak($argv) {
 $argv = $argv|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(240)|0);
 _free($0);
 $1 = (_malloc(3400)|0);
 $2 = ($0>>>0)<($1>>>0);
 $$2 = $2 ? $1 : $0;
 $l$0 = $$2;
 _free($1);
 $3 = HEAP32[840>>2]|0;
 $4 = ((($3)) + 276|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  HEAP32[$4>>2] = $l$0;
  $8 = $l$0;
 } else {
  $8 = $5;
 }
 $7 = (($l$0) - ($8))|0;
 $9 = ($7|0)<(0);
 $$ = $9 ? 0 : $7;
 $10 = $$ >>> 10;
 $11 = ($10>>>0)>(127);
 $$1 = $11 ? 127 : $10;
 return ($$1|0);
}
function _builtin_read($argv) {
 $argv = $argv|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $opt_n = 0;
 var $opt_p = 0, $opt_t = 0, $opt_u = 0, $r$0 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $opt_n = sp + 32|0;
 $opt_p = sp + 28|0;
 $opt_t = sp + 24|0;
 $opt_u = sp + 20|0;
 HEAP32[$opt_n>>2] = 0;
 HEAP32[$opt_p>>2] = 0;
 HEAP32[$opt_t>>2] = 0;
 HEAP32[$opt_u>>2] = 0;
 HEAP32[$vararg_buffer>>2] = $opt_n;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $opt_p;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $opt_t;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $opt_u;
 $0 = (_getopt32($argv,5518,$vararg_buffer)|0);
 $1 = ($0|0)==(-1);
 if ($1) {
  $$0 = 1;
 } else {
  $2 = HEAP32[1092>>2]|0;
  $3 = (($argv) + ($2<<2)|0);
  $4 = (_get_local_var_value(4544)|0);
  L3: while(1) {
   $5 = HEAP32[$opt_n>>2]|0;
   $6 = HEAP32[$opt_p>>2]|0;
   $7 = HEAP32[$opt_t>>2]|0;
   $8 = HEAP32[$opt_u>>2]|0;
   $9 = (_shell_builtin_read(45,$3,$4,$0,$5,$6,$7,$8)|0);
   $10 = ($9|0)==((1)|0);
   if (!($10)) {
    $$lcssa = $9;
    label = 6;
    break;
   }
   $11 = (___errno_location()|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(4);
   if (!($13)) {
    $r$0 = (1);
    break;
   }
   $14 = (_check_and_run_traps()|0);
   switch ($14|0) {
   case 0: case 2:  {
    $r$0 = (1);
    break L3;
    break;
   }
   default: {
   }
   }
  }
  if ((label|0) == 6) {
   $15 = ($$lcssa>>>0)>((1)>>>0);
   if ($15) {
    HEAP32[$vararg_buffer4>>2] = $$lcssa;
    _bb_error_msg(5530,$vararg_buffer4);
    $r$0 = (1);
   } else {
    $r$0 = $$lcssa;
   }
  }
  $16 = $r$0;
  $$0 = $16;
 }
 STACKTOP = sp;return ($$0|0);
}
function _builtin_return($argv) {
 $argv = $argv|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[840>>2]|0;
 $1 = ((($0)) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(-1);
 if ($3) {
  HEAP32[$1>>2] = 1;
  $5 = ((($0)) + 80|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_parse_numeric_argv1($argv,$6,0)|0);
  $$0 = $7;
 } else {
  $4 = HEAP32[$argv>>2]|0;
  HEAP32[$vararg_buffer>>2] = $4;
  _bb_error_msg(5460,$vararg_buffer);
  $$0 = 1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _builtin_set($argv) {
 $argv = $argv|0;
 var $$0 = 0, $$01 = 0, $$1$ = 0, $$1$lcssa = 0, $$11954 = 0, $$2 = 0, $$4 = 0, $$lcssa = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $arg$0 = 0, $arg$086 = 0, $e$0 = 0, $e$0$16 = 0, $e$017 = 0, $g_argv$0 = 0, $n$02053 = 0;
 var $n$1 = 0, $n$1$lcssa = 0, $pp$1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($argv)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   $3 = HEAP32[840>>2]|0;
   $4 = ((($3)) + 116|0);
   $e$0$16 = HEAP32[$4>>2]|0;
   $5 = ($e$0$16|0)==(0|0);
   if ($5) {
    $$01 = 0;
   } else {
    $e$017 = $e$0$16;
    while(1) {
     $6 = ((($e$017)) + 4|0);
     $7 = HEAP32[$6>>2]|0;
     (_puts($7)|0);
     $e$0 = HEAP32[$e$017>>2]|0;
     $8 = ($e$0|0)==(0|0);
     if ($8) {
      $$01 = 0;
      break;
     } else {
      $e$017 = $e$0;
     }
    }
   }
  } else {
   $$0 = $0;$19 = $argv;$arg$0 = $1;
   L5: while(1) {
    $9 = (_strcmp($arg$0,5433)|0);
    $10 = ($9|0)==(0);
    if ($10) {
     $$lcssa = $19;
     label = 5;
     break;
    }
    $12 = HEAP8[$arg$0>>0]|0;
    switch ($12<<24>>24) {
    case 45: case 43:  {
     break;
    }
    default: {
     $$4 = $$0;
     break L5;
    }
    }
    $13 = ((($arg$0)) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = ($14<<24>>24)==(0);
    L9: do {
     if ($15) {
      $$1$lcssa = $$0;
     } else {
      $16 = ($12<<24>>24)==(45);
      $17 = $16&1;
      $18 = ((($19)) + 8|0);
      $20 = HEAP32[$18>>2]|0;
      $21 = (_set_mode($17,$14,$20)|0);
      $22 = ($21|0)==(0);
      if ($22) {
       $$11954 = $$0;$24 = $13;$27 = $18;$n$02053 = 1;
      } else {
       $arg$086 = $arg$0;
       label = 22;
       break L5;
      }
      while(1) {
       $23 = HEAP8[$24>>0]|0;
       $25 = ($23<<24>>24)==(111);
       if ($25) {
        $26 = HEAP32[$27>>2]|0;
        $28 = ($26|0)==(0|0);
        $$1$ = $28 ? $$11954 : $27;
        $$2 = $$1$;
       } else {
        $$2 = $$11954;
       }
       $29 = (($n$02053) + 1)|0;
       $30 = (($arg$0) + ($29)|0);
       $31 = HEAP8[$30>>0]|0;
       $32 = ($31<<24>>24)==(0);
       if ($32) {
        $$1$lcssa = $$2;
        break L9;
       }
       $$pre = HEAP8[$arg$0>>0]|0;
       $33 = ($$pre<<24>>24)==(45);
       $34 = $33&1;
       $35 = ((($$2)) + 4|0);
       $36 = HEAP32[$35>>2]|0;
       $37 = (_set_mode($34,$31,$36)|0);
       $38 = ($37|0)==(0);
       if ($38) {
        $$11954 = $$2;$24 = $30;$27 = $35;$n$02053 = $29;
       } else {
        $arg$086 = $arg$0;
        label = 22;
        break L5;
       }
      }
     }
    } while(0);
    $39 = ((($$1$lcssa)) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)==(0|0);
    if ($41) {
     $$01 = 0;
     break L1;
    } else {
     $$0 = $39;$19 = $$1$lcssa;$arg$0 = $40;
    }
   }
   if ((label|0) == 5) {
    $11 = ((($$lcssa)) + 8|0);
    $$4 = $11;
   }
   else if ((label|0) == 22) {
    HEAP32[$vararg_buffer>>2] = $arg$086;
    _bb_error_msg(5436,$vararg_buffer);
    $$01 = 1;
    break;
   }
   $42 = HEAP32[840>>2]|0;
   $43 = ((($42)) + 92|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($42)) + 84|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==(0);
   if ($47) {
    HEAP32[$45>>2] = 1;
    $56 = (_xzalloc(8)|0);
    $57 = HEAP32[$44>>2]|0;
    HEAP32[$56>>2] = $57;
    $g_argv$0 = $56;
   } else {
    $48 = ((($44)) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)==(0|0);
    if (!($50)) {
     $51 = $49;$53 = $48;
     while(1) {
      _free($51);
      $52 = ((($53)) + 4|0);
      $54 = HEAP32[$52>>2]|0;
      $55 = ($54|0)==(0|0);
      if ($55) {
       break;
      } else {
       $51 = $54;$53 = $52;
      }
     }
    }
    HEAP32[$48>>2] = 0;
    $g_argv$0 = $44;
   }
   $58 = (_add_strings_to_strings($g_argv$0,$$4,1)|0);
   HEAP32[$43>>2] = $58;
   $n$1 = 1;$pp$1 = $58;
   while(1) {
    $59 = ((($pp$1)) + 4|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ($60|0)==(0|0);
    $62 = (($n$1) + 1)|0;
    if ($61) {
     $n$1$lcssa = $n$1;
     break;
    } else {
     $n$1 = $62;$pp$1 = $59;
    }
   }
   $63 = ((($42)) + 88|0);
   HEAP32[$63>>2] = $n$1$lcssa;
   $$01 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$01|0);
}
function _builtin_shift($argv) {
 $argv = $argv|0;
 var $$$i = 0, $$0 = 0, $$pre = 0, $$pre4$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $m$03 = 0, $n$01 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($argv)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $n$01 = 1;
   label = 6;
  } else {
   $3 = HEAP8[$1>>0]|0;
   $4 = ($3<<24>>24)==(45);
   if ($4) {
    $5 = ((($1)) + 1|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==(45);
    if ($7) {
     $8 = ((($1)) + 2|0);
     $9 = HEAP8[$8>>0]|0;
     $10 = ($9<<24>>24)==(0);
     $11 = ((($argv)) + 8|0);
     $$$i = $10 ? $11 : $0;
     $$pre = HEAP32[$$$i>>2]|0;
     $12 = ($$pre|0)==(0|0);
     if ($12) {
      $n$01 = 1;
      label = 6;
      break;
     } else {
      $13 = $$pre;
     }
    } else {
     $13 = $1;
    }
   } else {
    $13 = $1;
   }
   $14 = (_atoi($13)|0);
   $15 = ($14|0)>(-1);
   if ($15) {
    $n$01 = $14;
    label = 6;
   } else {
    $$0 = 1;
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $16 = HEAP32[840>>2]|0;
  $17 = ((($16)) + 88|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($n$01|0)<($18|0);
  if ($19) {
   $20 = ((($16)) + 84|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(0);
   $23 = ($n$01|0)<(1);
   $or$cond = $22 | $23;
   if ($or$cond) {
    $30 = $18;
   } else {
    $24 = ((($16)) + 92|0);
    $m$03 = 1;
    while(1) {
     $25 = (($m$03) + 1)|0;
     $26 = HEAP32[$24>>2]|0;
     $27 = (($26) + ($m$03<<2)|0);
     $28 = HEAP32[$27>>2]|0;
     _free($28);
     $exitcond = ($m$03|0)==($n$01|0);
     if ($exitcond) {
      break;
     } else {
      $m$03 = $25;
     }
    }
    $$pre4$pre = HEAP32[$17>>2]|0;
    $30 = $$pre4$pre;
   }
   $29 = (($30) - ($n$01))|0;
   HEAP32[$17>>2] = $29;
   $31 = ((($16)) + 92|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 4|0);
   $34 = (($n$01) + 1)|0;
   $35 = (($32) + ($34<<2)|0);
   $36 = $29 << 2;
   _memmove(($33|0),($35|0),($36|0))|0;
   $$0 = 0;
  } else {
   $$0 = 1;
  }
 }
 return ($$0|0);
}
function _builtin_type($argv) {
 $argv = $argv|0;
 var $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $path$0 = 0, $ret$0$ph$lcssa = 0, $ret$0$ph3 = 0, $type$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($argv)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   $ret$0$ph$lcssa = 0;
  } else {
   $20 = $1;$21 = $0;$ret$0$ph3 = 0;
   while(1) {
    $12 = $21;$3 = $20;
    while(1) {
     $4 = (_find_function_slot($3)|0);
     $5 = HEAP32[$4>>2]|0;
     $6 = ($5|0)==(0|0);
     if ($6) {
      $7 = (_find_builtin($3)|0);
      $8 = ($7|0)==(0|0);
      if ($8) {
       $9 = (_find_in_path($3)|0);
       $10 = ($9|0)==(0|0);
       $11 = HEAP32[$12>>2]|0;
       if ($10) {
        $$lcssa = $12;$$lcssa19 = $11;
        break;
       } else {
        $16 = $11;$path$0 = $9;$type$0 = $9;
       }
      } else {
       $16 = $3;$path$0 = 0;$type$0 = 5399;
      }
     } else {
      $16 = $3;$path$0 = 0;$type$0 = 5388;
     }
     HEAP32[$vararg_buffer1>>2] = $16;
     $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
     HEAP32[$vararg_ptr4>>2] = $type$0;
     (_printf(5415,$vararg_buffer1)|0);
     _free($path$0);
     $17 = ((($12)) + 4|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($18|0)==(0|0);
     if ($19) {
      $ret$0$ph$lcssa = $ret$0$ph3;
      break L1;
     } else {
      $12 = $17;$3 = $18;
     }
    }
    HEAP32[$vararg_buffer>>2] = $$lcssa19;
    _bb_error_msg(5368,$vararg_buffer);
    $13 = ((($$lcssa)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0|0);
    if ($15) {
     $ret$0$ph$lcssa = 1;
     break;
    } else {
     $20 = $14;$21 = $13;$ret$0$ph3 = 1;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($ret$0$ph$lcssa|0);
}
function _builtin_umask($argv) {
 $argv = $argv|0;
 var $$ = 0, $$$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mask$1 = 0, $mask$3 = 0, $rc$1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_umask(0)|0);
 $1 = ((($argv)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   label = 7;
  } else {
   $4 = HEAP8[$2>>0]|0;
   $5 = ($4<<24>>24)==(45);
   if ($5) {
    $6 = ((($2)) + 1|0);
    $7 = HEAP8[$6>>0]|0;
    $8 = ($7<<24>>24)==(45);
    if ($8) {
     $9 = ((($2)) + 2|0);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ((($argv)) + 8|0);
     $$$i = $11 ? $12 : $1;
     $$pre = HEAP32[$$$i>>2]|0;
     $13 = ($$pre|0)==(0|0);
     if ($13) {
      label = 7;
      break;
     } else {
      $15 = $$pre;$23 = $$$i;
     }
    } else {
     $15 = $2;$23 = $1;
    }
   } else {
    $15 = $2;$23 = $1;
   }
   $14 = HEAP8[$15>>0]|0;
   $16 = $14&255;
   $17 = (($16) + 208)|0;
   $18 = $17 & 254;
   $19 = ($18>>>0)<(10);
   $20 = $0 ^ 511;
   $$ = $19 ? $0 : $20;
   $21 = (_bb_parse_mode($15,$$)|0);
   $22 = HEAP32[$23>>2]|0;
   $24 = HEAP8[$22>>0]|0;
   $25 = $24&255;
   $26 = (($25) + 208)|0;
   $27 = $26 & 254;
   $28 = ($27>>>0)<(10);
   $29 = $21 ^ 511;
   $mask$1 = $28 ? $21 : $29;
   $30 = ($mask$1>>>0)>(511);
   if ($30) {
    HEAP32[$vararg_buffer>>2] = 5161;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $22;
    _bb_error_msg(5340,$vararg_buffer);
    $mask$3 = $0;$rc$1 = 1;
   } else {
    $mask$3 = $mask$1;$rc$1 = 0;
   }
  }
 } while(0);
 if ((label|0) == 7) {
  HEAP32[$vararg_buffer2>>2] = $0;
  (_printf(5362,$vararg_buffer2)|0);
  $mask$3 = $0;$rc$1 = 0;
 }
 (_umask($mask$3)|0);
 STACKTOP = sp;return ($rc$1|0);
}
function _builtin_unset($argv) {
 $argv = $argv|0;
 var $$0 = 0, $$01$i$i = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret$0$ = 0, $ret$03 = 0, $ret$1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_getopt32($argv,5282,$vararg_buffer)|0);
 switch ($0|0) {
 case -1:  {
  $$0 = 1;
  break;
 }
 case 3:  {
  _bb_error_msg(5287,$vararg_buffer1);
  $$0 = 1;
  break;
 }
 default: {
  $1 = HEAP32[1092>>2]|0;
  $2 = (($argv) + ($1<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0 = 0;
  } else {
   $5 = $0 & 2;
   $6 = ($5|0)==(0);
   $$012 = $2;$7 = $3;$ret$03 = 0;
   while(1) {
    if ($6) {
     $8 = (_strlen($7)|0);
     $9 = (_unset_local_var_len($7,$8)|0);
     $10 = ($9|0)==(0);
     $ret$0$ = $10 ? $ret$03 : 1;
     $ret$1 = $ret$0$;
    } else {
     $11 = (_find_function_slot($7)|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ($12|0)==(0|0);
     if ($13) {
      $ret$1 = $ret$03;
     } else {
      $14 = HEAP32[$12>>2]|0;
      HEAP32[$11>>2] = $14;
      $15 = ((($12)) + 12|0);
      $16 = HEAP32[$15>>2]|0;
      $17 = ($16|0)==(0|0);
      if (!($17)) {
       $$01$i$i = $16;
       while(1) {
        $18 = (_free_pipe($$01$i$i)|0);
        $19 = ($18|0)==(0|0);
        if ($19) {
         break;
        } else {
         $$01$i$i = $18;
        }
       }
       $20 = ((($12)) + 4|0);
       $21 = HEAP32[$20>>2]|0;
       _free($21);
       $22 = ((($12)) + 16|0);
       $23 = HEAP32[$22>>2]|0;
       _free($23);
      }
      _free($12);
      $ret$1 = $ret$03;
     }
    }
    $24 = ((($$012)) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)==(0|0);
    if ($26) {
     $$0 = $ret$1;
     break;
    } else {
     $$012 = $24;$7 = $25;$ret$03 = $ret$1;
    }
   }
  }
 }
 }
 STACKTOP = sp;return ($$0|0);
}
function _builtin_wait($argv) {
 $argv = $argv|0;
 var $$$i = 0, $$039 = 0, $$039$lcssa = 0, $$2 = 0, $$lcssa = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $allsigs = 0, $oldset = 0, $ret$3 = 0, $status = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $status = sp + 272|0;
 $oldset = sp + 144|0;
 $allsigs = sp + 16|0;
 $0 = ((($argv)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   label = 6;
  } else {
   $3 = HEAP8[$1>>0]|0;
   $4 = ($3<<24>>24)==(45);
   if ($4) {
    $5 = ((($1)) + 1|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==(45);
    if ($7) {
     $8 = ((($1)) + 2|0);
     $9 = HEAP8[$8>>0]|0;
     $10 = ($9<<24>>24)==(0);
     $11 = ((($argv)) + 8|0);
     $$$i = $10 ? $11 : $0;
     $$pre = HEAP32[$$$i>>2]|0;
     $12 = ($$pre|0)==(0|0);
     if ($12) {
      label = 6;
      break;
     } else {
      $36 = $$$i;$37 = $$pre;
     }
    } else {
     $36 = $0;$37 = $1;
    }
   } else {
    $36 = $0;$37 = $1;
   }
   $13 = (___errno_location()|0);
   $$039 = $36;$16 = $37;
   while(1) {
    $17 = (_bb_strtoul($16,0,10)|0);
    $18 = HEAP32[$13>>2]|0;
    $19 = ($18|0)==(0);
    if (!($19)) {
     $$039$lcssa = $$039;
     break;
    }
    $20 = (_waitpid(($17|0),($status|0),0)|0);
    $21 = ($20|0)==($17|0);
    if ($21) {
     $22 = HEAP32[$status>>2]|0;
     $23 = $22 >>> 8;
     $24 = $23 & 255;
     $25 = $22 & 65535;
     $26 = (($25) + -1)|0;
     $27 = ($26>>>0)<(255);
     if ($27) {
      $28 = $22 & 127;
      $29 = $28 | 128;
      $ret$3 = $29;
     } else {
      $ret$3 = $24;
     }
    } else {
     $30 = HEAP32[$$039>>2]|0;
     HEAP32[$vararg_buffer>>2] = $30;
     _bb_perror_msg(5234,$vararg_buffer);
     $ret$3 = 127;
    }
    $31 = ((($$039)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)==(0|0);
    if ($33) {
     $$2 = $ret$3;
     break L1;
    } else {
     $$039 = $31;$16 = $32;
    }
   }
   $34 = HEAP32[$$039$lcssa>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $34;
   _bb_error_msg(5242,$vararg_buffer1);
   $$2 = 1;
  }
 } while(0);
 if ((label|0) == 6) {
  while(1) {
   (_sigfillset(($allsigs|0))|0);
   (_sigprocmask(2,($allsigs|0),($oldset|0))|0);
   (_sigprocmask(2,($oldset|0),(0|0))|0);
   $14 = (_check_and_run_traps()|0);
   $15 = ($14|0)==(0);
   if (!($15)) {
    $$lcssa = $14;
    break;
   }
  }
  $35 = (($$lcssa) + 128)|0;
  $$2 = $35;
 }
 STACKTOP = sp;return ($$2|0);
}
function _unset_local_var_len($name,$name_len) {
 $name = $name|0;
 $name_len = $name_len|0;
 var $$$i = 0, $$0 = 0, $$1$i = 0, $$lcssa = 0, $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $var_pp$03 = 0, $var_pp$03$lcssa = 0, $var_pp$03$phi = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($name|0)==(0|0);
 L1: do {
  if ($0) {
   $$0 = 0;
  } else {
   $1 = HEAP32[840>>2]|0;
   $2 = ((($1)) + 116|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(0|0);
   if ($4) {
    $$0 = 0;
   } else {
    $6 = $3;$var_pp$03 = $2;
    while(1) {
     $5 = ((($6)) + 4|0);
     $7 = HEAP32[$5>>2]|0;
     $8 = (_strncmp($7,$name,$name_len)|0);
     $9 = ($8|0)==(0);
     if ($9) {
      $10 = (($7) + ($name_len)|0);
      $11 = HEAP8[$10>>0]|0;
      $12 = ($11<<24>>24)==(61);
      if ($12) {
       $$lcssa = $6;$$lcssa22 = $5;$var_pp$03$lcssa = $var_pp$03;
       break;
      }
     }
     $35 = HEAP32[$6>>2]|0;
     $36 = ($35|0)==(0|0);
     if ($36) {
      $$0 = 0;
      break L1;
     } else {
      $var_pp$03$phi = $6;$6 = $35;$var_pp$03 = $var_pp$03$phi;
     }
    }
    $13 = ((($$lcssa)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0);
    if (!($15)) {
     HEAP32[$vararg_buffer>>2] = $name;
     _bb_error_msg(5318,$vararg_buffer);
     $$0 = 1;
     break;
    }
    $16 = HEAP32[$$lcssa>>2]|0;
    HEAP32[$var_pp$03$lcssa>>2] = $16;
    $17 = HEAP32[$$lcssa22>>2]|0;
    _bb_unsetenv($17);
    $18 = ($name_len|0)==(3);
    if ($18) {
     $19 = HEAP32[$$lcssa22>>2]|0;
     $20 = HEAP8[$19>>0]|0;
     $21 = ($20<<24>>24)==(80);
     if ($21) {
      $22 = ((($19)) + 1|0);
      $23 = HEAP8[$22>>0]|0;
      $24 = ($23<<24>>24)==(83);
      if ($24) {
       $25 = (_get_local_var_value(3887)|0);
       $26 = ((($1)) + 4|0);
       $27 = ($25|0)==(0|0);
       $$$i = $27 ? 3891 : $25;
       HEAP32[$26>>2] = $$$i;
       $28 = (_get_local_var_value(3898)|0);
       $29 = ((($1)) + 8|0);
       $30 = ($28|0)==(0|0);
       $$1$i = $30 ? 3902 : $28;
       HEAP32[$29>>2] = $$1$i;
      }
     }
    }
    $31 = ((($$lcssa)) + 12|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)==(0);
    if ($33) {
     $34 = HEAP32[$$lcssa22>>2]|0;
     _free($34);
    }
    _free($$lcssa);
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _find_in_path($arg) {
 $arg = $arg|0;
 var $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $PATH$0 = 0, $ret$0 = 0, $ret$1 = 0, $ret$1$lcssa8 = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_get_local_var_value(6921)|0);
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   $$2 = 0;
  } else {
   $PATH$0 = $0;$ret$0 = 0;
   while(1) {
    $2 = (___strchrnul($PATH$0,58)|0);
    _free($ret$0);
    $3 = ($2|0)==($PATH$0|0);
    if ($3) {
     $8 = (_xstrdup($arg)|0);
     $ret$1 = $8;
    } else {
     $4 = $2;
     $5 = $PATH$0;
     $6 = (($4) - ($5))|0;
     HEAP32[$vararg_buffer>>2] = $6;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $PATH$0;
     $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
     HEAP32[$vararg_ptr2>>2] = $arg;
     $7 = (_xasprintf(5425,$vararg_buffer)|0);
     $ret$1 = $7;
    }
    $9 = (_access($ret$1,0)|0);
    $10 = ($9|0)==(0);
    if ($10) {
     $$2 = $ret$1;
     break L1;
    }
    $11 = HEAP8[$2>>0]|0;
    $12 = ($11<<24>>24)==(0);
    $13 = ((($2)) + 1|0);
    if ($12) {
     $ret$1$lcssa8 = $ret$1;
     break;
    } else {
     $PATH$0 = $13;$ret$0 = $ret$1;
    }
   }
   _free($ret$1$lcssa8);
   $$2 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$2|0);
}
function _add_strings_to_strings($strings,$add,$need_to_dup) {
 $strings = $strings|0;
 $add = $add|0;
 $need_to_dup = $need_to_dup|0;
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count1$06 = 0, $count1$1 = 0, $count2$0$lcssa = 0, $count2$01 = 0, $v$07 = 0, $v$12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($strings|0)==(0|0);
 if ($0) {
  $count1$1 = 0;
 } else {
  $1 = HEAP32[$strings>>2]|0;
  $2 = ($1|0)==(0|0);
  if ($2) {
   $count1$1 = 0;
  } else {
   $count1$06 = 0;$v$07 = $strings;
   while(1) {
    $3 = (($count1$06) + 1)|0;
    $4 = ((($v$07)) + 4|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)==(0|0);
    if ($6) {
     $count1$1 = $3;
     break;
    } else {
     $count1$06 = $3;$v$07 = $4;
    }
   }
  }
 }
 $7 = HEAP32[$add>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $count2$0$lcssa = 0;
 } else {
  $count2$01 = 0;$v$12 = $add;
  while(1) {
   $9 = (($count2$01) + 1)|0;
   $10 = ((($v$12)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    $count2$0$lcssa = $9;
    break;
   } else {
    $count2$01 = $9;$v$12 = $10;
   }
  }
 }
 $13 = (($count2$0$lcssa) + ($count1$1))|0;
 $14 = $13 << 2;
 $15 = (($14) + 4)|0;
 $16 = (_xrealloc($strings,$15)|0);
 $17 = (($16) + ($13<<2)|0);
 HEAP32[$17>>2] = 0;
 $18 = ($count2$0$lcssa|0)>(0);
 if ($18) {
  $19 = ($need_to_dup|0)==(0);
  $$in = $count2$0$lcssa;
  while(1) {
   $20 = (($$in) + -1)|0;
   $21 = (($add) + ($20<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   if ($19) {
    $26 = $22;
   } else {
    $23 = (_xstrdup($22)|0);
    $26 = $23;
   }
   $24 = (($20) + ($count1$1))|0;
   $25 = (($16) + ($24<<2)|0);
   HEAP32[$25>>2] = $26;
   $27 = ($$in|0)>(1);
   if ($27) {
    $$in = $20;
   } else {
    break;
   }
  }
 }
 return ($16|0);
}
function _parse_numeric_argv1($argv,$def,$def_min) {
 $argv = $argv|0;
 $def = $def|0;
 $def_min = $def_min|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($argv)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $$0 = $def;
  } else {
   $3 = (_bb_strtoul($1,0,10)|0);
   $4 = (___errno_location()|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)!=(0);
   $7 = ($3>>>0)<($def_min>>>0);
   $or$cond = $7 | $6;
   if (!($or$cond)) {
    $8 = ((($argv)) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)==(0|0);
    if ($10) {
     $$0 = $3;
     break;
    }
   }
   $11 = HEAP32[$argv>>2]|0;
   HEAP32[$vararg_buffer>>2] = $11;
   _bb_error_msg(5500,$vararg_buffer);
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _set_local_var_from_halves($name,$val) {
 $name = $name|0;
 $val = $val|0;
 var $0 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $name;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $val;
 $0 = (_xasprintf(3881,$vararg_buffer)|0);
 _set_local_var($0,0,0,0);
 STACKTOP = sp;return;
}
function _helper_export_local($argv,$exp,$lvl) {
 $argv = $argv|0;
 $exp = $exp|0;
 $lvl = $lvl|0;
 var $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $name$1 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($exp|0)==(-1);
 $1 = ($exp|0)==(1);
 $$pre = HEAP32[$argv>>2]|0;
 $$02 = $argv;$2 = $$pre;
 while(1) {
  $3 = (___strchrnul($2,61)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  do {
   if ($5) {
    $6 = $3;
    $7 = $2;
    $8 = (($6) - ($7))|0;
    $9 = (_get_ptr_to_local_var($2,$8)|0);
    $10 = ($9|0)==(0|0);
    if ($10) {
     $12 = 0;
    } else {
     $11 = HEAP32[$9>>2]|0;
     $12 = $11;
    }
    if ($0) {
     $13 = ($12|0)==(0|0);
     if ($13) {
      break;
     }
     $14 = ((($12)) + 16|0);
     HEAP32[$14>>2] = 0;
     (_unsetenv(($2|0))|0);
     break;
    }
    $15 = ($12|0)!=(0|0);
    $or$cond = $1 & $15;
    if ($or$cond) {
     $16 = ((($12)) + 16|0);
     HEAP32[$16>>2] = 1;
     $17 = ((($12)) + 4|0);
     $18 = HEAP32[$17>>2]|0;
     (_putenv(($18|0))|0);
     break;
    } else {
     HEAP32[$vararg_buffer>>2] = $2;
     $19 = (_xasprintf(5555,$vararg_buffer)|0);
     $name$1 = $19;
     label = 12;
     break;
    }
   } else {
    $20 = (_xstrdup($2)|0);
    $name$1 = $20;
    label = 12;
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   _set_local_var($name$1,$exp,$lvl,0);
  }
  $21 = ((($$02)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0|0);
  if ($23) {
   break;
  } else {
   $$02 = $21;$2 = $22;
  }
 }
 STACKTOP = sp;return;
}
function _get_ptr_to_local_var($name,$len) {
 $name = $name|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pp$01 = 0, $pp$01$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[840>>2]|0;
 $1 = ((($0)) + 116|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 L1: do {
  if ($3) {
   $$0 = 0;
  } else {
   $5 = $2;$pp$01 = $1;
   while(1) {
    $4 = ((($5)) + 4|0);
    $6 = HEAP32[$4>>2]|0;
    $7 = (_strncmp($6,$name,$len)|0);
    $8 = ($7|0)==(0);
    if ($8) {
     $9 = (($6) + ($len)|0);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)==(61);
     if ($11) {
      $$0 = $pp$01;
      break L1;
     }
    }
    $12 = HEAP32[$5>>2]|0;
    $13 = ($12|0)==(0|0);
    if ($13) {
     $$0 = 0;
     break;
    } else {
     $pp$01$phi = $5;$5 = $12;$pp$01 = $pp$01$phi;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _setup_heredoc($redir) {
 $redir = $redir|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expanded$0 = 0, $heredoc$0 = 0, $heredoc$1$lcssa = 0;
 var $heredoc$12 = 0, $len$03 = 0, $pair = 0, $to_free = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $pair = sp + 16|0;
 $to_free = sp + 12|0;
 $0 = ((($redir)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($redir)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 2;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (_encode_then_expand_string($1,1,1)|0);
  $7 = ($6|0)==(0|0);
  $$ = $7 ? $1 : $6;
  $expanded$0 = $6;$heredoc$0 = $$;
 } else {
  $expanded$0 = 0;$heredoc$0 = $1;
 }
 $8 = (_strlen($heredoc$0)|0);
 $9 = ((($redir)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 (_close($10)|0);
 _xpipe($pair);
 $11 = HEAP32[$pair>>2]|0;
 $12 = HEAP32[$9>>2]|0;
 _xmove_fd($11,$12);
 $13 = ((($pair)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 (_ndelay_on($14)|0);
 $15 = HEAP32[$13>>2]|0;
 $16 = (_write($15,$heredoc$0,$8)|0);
 $17 = ($16|0)<(1);
 L4: do {
  if ($17) {
   $heredoc$1$lcssa = $heredoc$0;
   label = 7;
  } else {
   $19 = $16;$heredoc$12 = $heredoc$0;$len$03 = $8;
   while(1) {
    $18 = ($len$03|0)==($19|0);
    if ($18) {
     break;
    }
    $21 = (($len$03) - ($19))|0;
    $22 = (($heredoc$12) + ($19)|0);
    $23 = HEAP32[$13>>2]|0;
    $24 = (_write($23,$22,$21)|0);
    $25 = ($24|0)<(1);
    if ($25) {
     $heredoc$1$lcssa = $22;
     label = 7;
     break L4;
    } else {
     $19 = $24;$heredoc$12 = $22;$len$03 = $21;
    }
   }
   $20 = HEAP32[$13>>2]|0;
   (_close($20)|0);
   _free($expanded$0);
  }
 } while(0);
 do {
  if ((label|0) == 7) {
   $26 = HEAP32[$13>>2]|0;
   (_ndelay_off($26)|0);
   HEAP32[$to_free>>2] = 0;
   $27 = (_vfork()|0);
   $28 = ($27|0)<(0);
   if ($28) {
    _bb_perror_msg_and_die(4289,$vararg_buffer);
    // unreachable;
   }
   $29 = ($27|0)==(0);
   if (!($29)) {
    HEAP32[32>>2] = 38;
    $35 = HEAP32[$13>>2]|0;
    (_close($35)|0);
    _free($expanded$0);
    (_wait((0|0))|0);
    break;
   }
   HEAP32[32>>2] = 0;
   $30 = (_vfork()|0);
   $31 = ($30|0)<(0);
   if ($31) {
    _bb_perror_msg_and_die(4289,$vararg_buffer1);
    // unreachable;
   }
   $32 = ($30|0)==(0);
   if ($32) {
    $33 = HEAP32[$9>>2]|0;
    (_close($33)|0);
    $34 = HEAP32[$13>>2]|0;
    _xmove_fd($34,1);
    _re_execute_shell($to_free,$heredoc$1$lcssa,0,0,0);
    // unreachable;
   } else {
    __exit(0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _done_command($ctx) {
 $ctx = $ctx|0;
 var $$phi$trans$insert = 0, $$pre = 0, $$pre$phi3Z2D = 0, $$pre$phiZ2D = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $command$0 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($ctx)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if ($4) {
   $$phi$trans$insert = ((($1)) + 4|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$pre$phiZ2D = $$phi$trans$insert;$20 = $$pre;
   label = 8;
  } else {
   $5 = ((($3)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = ((($3)) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)==(0|0);
    if ($10) {
     $11 = ((($3)) + 32|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ($12|0)==(0|0);
     if ($13) {
      $$pre2 = ((($1)) + 4|0);
      $$pre$phi3Z2D = $$pre2;$command$0 = $3;
      break;
     }
    }
   }
   $14 = ((($1)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($15) + 1)|0;
   HEAP32[$14>>2] = $16;
   $$pre$phiZ2D = $14;$20 = $16;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $17 = ((($1)) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($20*36)|0;
  $21 = (($19) + 36)|0;
  $22 = (_xrealloc($18,$21)|0);
  HEAP32[$17>>2] = $22;
  $23 = HEAP32[$$pre$phiZ2D>>2]|0;
  $24 = (($22) + (($23*36)|0)|0);
  HEAP32[$2>>2] = $24;
  $$pre$phi3Z2D = $$pre$phiZ2D;$command$0 = $24;
 }
 dest=$command$0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $25 = HEAP32[$$pre$phi3Z2D>>2]|0;
 return ($25|0);
}
function _done_word($word,$ctx) {
 $word = $word|0;
 $ctx = $ctx|0;
 var $$$0$i = 0, $$$i = 0, $$0$i = 0, $$1 = 0, $$pr = 0, $$pre$i = 0, $$pre$phi$iZ2D = 0, $$pre$phi6$iZ2D = 0, $$pre13 = 0, $$pre5$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $dst$0$i = 0, $or$cond = 0, $p$08 = 0, $r$0$i17 = 0, $r$0$i18 = 0, $r$01$i$i = 0, $r$01$i$i$lcssa = 0, $storemerge = 0, $str$0$i = 0;
 var $str$0$i$lcssa = 0, $v$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $v$i = sp + 32|0;
 $0 = ((($ctx)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($word)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($word)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   $$1 = 0;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 L3: do {
  if ((label|0) == 3) {
   $8 = ((($ctx)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $33 = ((($ctx)) + 52|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==(0);
    if ($35) {
     label = 13;
    } else {
     $36 = HEAP32[$word>>2]|0;
     $37 = (_strcmp($36,5843)|0);
     $38 = ($37|0)==(0);
     if ($38) {
      label = 13;
     } else {
      HEAP32[$33>>2] = 0;
     }
    }
    L10: do {
     if ((label|0) == 13) {
      $39 = ((($1)) + 28|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)==(0|0);
      if ($41) {
       $42 = ((($ctx)) + 44|0);
       $43 = HEAP32[$42>>2]|0;
       switch ($43|0) {
       case 12: case 11: case 6:  {
        break L10;
        break;
       }
       default: {
       }
       }
       $44 = ((($word)) + 16|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = ($45|0)==(0);
       $47 = HEAP32[$word>>2]|0;
       L14: do {
        if ($46) {
         $r$01$i$i = 432;
         while(1) {
          $48 = (_strcmp($47,$r$01$i$i)|0);
          $49 = ($48|0)==(0);
          if ($49) {
           $r$01$i$i$lcssa = $r$01$i$i;
           break;
          }
          $50 = ((($r$01$i$i)) + 12|0);
          $51 = ($50>>>0)<((600)>>>0);
          if ($51) {
           $r$01$i$i = $50;
          } else {
           break L14;
          }
         }
         $52 = ((($r$01$i$i$lcssa)) + 6|0);
         $53 = HEAP8[$52>>0]|0;
         $54 = ($53<<24>>24)==(11);
         $55 = ($43|0)==(13);
         $or$cond = $54 & $55;
         do {
          if ($or$cond) {
           $179 = (608);$r$0$i18 = 600;
           label = 25;
          } else {
           $56 = ((($r$01$i$i$lcssa)) + 8|0);
           $57 = HEAP32[$56>>2]|0;
           $58 = ($57|0)==(0);
           if (!($58)) {
            $62 = ((($r$01$i$i$lcssa)) + 8|0);
            $63 = $57 & 131072;
            $64 = ($63|0)==(0);
            if ($64) {
             $179 = $62;$r$0$i18 = $r$01$i$i$lcssa;
             label = 25;
             break;
            }
            $65 = (_xmalloc(64)|0);
            dest=$65; src=$ctx; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
            dest=$ctx; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
            $66 = (_xzalloc(44)|0);
            HEAP32[$ctx>>2] = $66;
            $67 = ((($ctx)) + 4|0);
            HEAP32[$67>>2] = $66;
            (_done_command($ctx)|0);
            $68 = ((($ctx)) + 60|0);
            HEAP32[$68>>2] = $65;
            $$pre$i = ((($r$01$i$i$lcssa)) + 6|0);
            $$pre5$i = ((($ctx)) + 56|0);
            $$pre$phi$iZ2D = $$pre$i;$$pre$phi6$iZ2D = $$pre5$i;$83 = $62;$r$0$i17 = $r$01$i$i$lcssa;
            label = 29;
            break;
           }
           $59 = ((($ctx)) + 48|0);
           $60 = HEAP32[$59>>2]|0;
           $61 = ($60|0)==(0);
           if (!($61)) {
            HEAP32[$vararg_buffer>>2] = 5919;
            _bb_error_msg(4235,$vararg_buffer);
            HEAP32[$42>>2] = 18;
           }
           HEAP32[$59>>2] = 1;
          }
         } while(0);
         do {
          if ((label|0) == 25) {
           $69 = ((($ctx)) + 56|0);
           $70 = HEAP32[$69>>2]|0;
           $71 = ((($r$0$i18)) + 6|0);
           $72 = HEAP8[$71>>0]|0;
           $73 = $72&255;
           $74 = 1 << $73;
           $75 = $74 & $70;
           $76 = ($75|0)==(0);
           if ($76) {
            HEAP32[$vararg_buffer1>>2] = $47;
            _bb_error_msg(5931,$vararg_buffer1);
            HEAP32[$42>>2] = 18;
            break;
           }
           $77 = ((($1)) + 16|0);
           $78 = HEAP32[$77>>2]|0;
           $79 = ($78|0)==(0|0);
           if ($79) {
            $$pre$phi$iZ2D = $71;$$pre$phi6$iZ2D = $69;$83 = $179;$r$0$i17 = $r$0$i18;
            label = 29;
           } else {
            _done_pipe($ctx,1);
            $$pre$phi$iZ2D = $71;$$pre$phi6$iZ2D = $69;$83 = $179;$r$0$i17 = $r$0$i18;
            label = 29;
           }
          }
         } while(0);
         if ((label|0) == 29) {
          $80 = HEAP8[$$pre$phi$iZ2D>>0]|0;
          $81 = $80&255;
          HEAP32[$42>>2] = $81;
          $82 = HEAP32[$83>>2]|0;
          HEAP32[$$pre$phi6$iZ2D>>2] = $82;
          $84 = ((($r$0$i17)) + 7|0);
          $85 = HEAP8[$84>>0]|0;
          $86 = $85&255;
          $87 = ((($word)) + 24|0);
          HEAP32[$87>>2] = $86;
          $88 = $82 & 1;
          $89 = ($88|0)==(0);
          if (!($89)) {
           _done_pipe($ctx,1);
           $90 = ((($ctx)) + 60|0);
           $91 = HEAP32[$90>>2]|0;
           $92 = HEAP32[$ctx>>2]|0;
           $93 = ((($91)) + 8|0);
           $94 = HEAP32[$93>>2]|0;
           $95 = ((($94)) + 16|0);
           HEAP32[$95>>2] = $92;
           $96 = ((($94)) + 8|0);
           HEAP32[$96>>2] = 0;
           $97 = ((($91)) + 16|0);
           $98 = ((($91)) + 20|0);
           $99 = HEAP32[$98>>2]|0;
           $100 = ((($ctx)) + 16|0);
           $101 = HEAP32[$100>>2]|0;
           $102 = (_strlen($101)|0);
           _o_grow_by($97,$102);
           $103 = HEAP32[$98>>2]|0;
           $104 = HEAP32[$97>>2]|0;
           $105 = (($104) + ($103)|0);
           _memcpy(($105|0),($101|0),($102|0))|0;
           $106 = HEAP32[$98>>2]|0;
           $107 = (($106) + ($102))|0;
           HEAP32[$98>>2] = $107;
           $108 = HEAP32[$97>>2]|0;
           $109 = (($108) + ($107)|0);
           HEAP8[$109>>0] = 0;
           $110 = HEAP32[$100>>2]|0;
           _free($110);
           $111 = HEAP32[$97>>2]|0;
           $112 = (($111) + ($99)|0);
           $113 = ($99|0)>(0);
           $114 = ((($112)) + -1|0);
           $$$i = $113 ? $114 : $112;
           $str$0$i = $$$i;
           while(1) {
            $115 = ($str$0$i>>>0)>($111>>>0);
            if (!($115)) {
             $str$0$i$lcssa = $str$0$i;
             break;
            }
            $116 = ((($str$0$i)) + -1|0);
            $117 = HEAP8[$116>>0]|0;
            $118 = $117&255;
            $119 = $118 | 32;
            $120 = (($119) + 159)|0;
            $121 = $120 & 254;
            $122 = ($121>>>0)<(26);
            if ($122) {
             $str$0$i = $116;
            } else {
             $str$0$i$lcssa = $str$0$i;
             break;
            }
           }
           $123 = (_xstrdup($str$0$i$lcssa)|0);
           $124 = HEAP32[$93>>2]|0;
           $125 = ((($124)) + 20|0);
           HEAP32[$125>>2] = $123;
           dest=$ctx; src=$91; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
           _free($91);
          }
         }
         HEAP32[$2>>2] = 0;
         HEAP32[$44>>2] = 0;
         $126 = HEAP32[$word>>2]|0;
         $127 = ($126|0)==(0|0);
         if (!($127)) {
          HEAP8[$126>>0] = 0;
         }
         $131 = HEAP32[$42>>2]|0;
         $132 = ($131|0)==(18);
         $133 = $132&1;
         $$1 = $133;
         break L3;
        }
       } while(0);
       $128 = (_strcmp($47,5952)|0);
       $129 = ($128|0)==(0);
       if ($129) {
        $130 = ((($1)) + 8|0);
        HEAP32[$130>>2] = 2;
       }
      }
     }
    } while(0);
    $134 = ((($1)) + 16|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ($135|0)==(0|0);
    if (!($136)) {
     $137 = HEAP32[$word>>2]|0;
     HEAP32[$vararg_buffer4>>2] = $137;
     _bb_error_msg(5931,$vararg_buffer4);
     $$1 = 1;
     break;
    }
    $138 = ((($word)) + 24|0);
    $139 = HEAP32[$138>>2]|0;
    switch ($139|0) {
    case 3: case 1:  {
     $140 = ($139|0)==(1);
     if ($140) {
      $141 = ((($1)) + 4|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($142) + 1)|0;
      HEAP32[$141>>2] = $143;
      $storemerge = 0;
     } else {
      $storemerge = 0;
     }
     break;
    }
    default: {
     $storemerge = 2;
    }
    }
    HEAP32[$138>>2] = $storemerge;
    $144 = ((($word)) + 16|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ($145|0)==(0);
    $$pre13 = HEAP32[$word>>2]|0;
    L55: do {
     if (!($146)) {
      $147 = HEAP8[$$pre13>>0]|0;
      $cond = ($147<<24>>24)==(3);
      if ($cond) {
       $p$08 = $$pre13;
       while(1) {
        $151 = ((($p$08)) + 1|0);
        $152 = HEAP8[$151>>0]|0;
        $153 = $152 & 127;
        $154 = ($153<<24>>24)==(64);
        if (!($154)) {
         break L55;
        }
        $155 = ((($p$08)) + 2|0);
        $156 = HEAP8[$155>>0]|0;
        $157 = ($156<<24>>24)==(3);
        $149 = ((($p$08)) + 3|0);
        if (!($157)) {
         break L55;
        }
        $148 = HEAP8[$149>>0]|0;
        $150 = ($148<<24>>24)==(3);
        if ($150) {
         $p$08 = $149;
        } else {
         break;
        }
       }
      }
     }
    } while(0);
    $158 = ((($1)) + 28|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = (_xstrdup($$pre13)|0);
    HEAP32[$v$i>>2] = $160;
    $161 = ((($v$i)) + 4|0);
    HEAP32[$161>>2] = 0;
    $162 = (_add_strings_to_strings($159,$v$i,0)|0);
    HEAP32[$158>>2] = $162;
   } else {
    $11 = HEAP32[$word>>2]|0;
    $12 = (_xstrdup($11)|0);
    $13 = HEAP32[$8>>2]|0;
    $14 = ((($13)) + 4|0);
    HEAP32[$14>>2] = $12;
    $15 = ((($13)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(4);
    if ($17) {
     $18 = (___strchrnul($12,92)|0);
     $$0$i = $18;$dst$0$i = $18;
     while(1) {
      $19 = HEAP8[$$0$i>>0]|0;
      $20 = ($19<<24>>24)==(92);
      $21 = ((($$0$i)) + 1|0);
      $$$0$i = $20 ? $21 : $$0$i;
      $22 = ((($$$0$i)) + 1|0);
      $23 = HEAP8[$$$0$i>>0]|0;
      $24 = ((($dst$0$i)) + 1|0);
      HEAP8[$dst$0$i>>0] = $23;
      $25 = ($23<<24>>24)==(0);
      if ($25) {
       break;
      } else {
       $$0$i = $22;$dst$0$i = $24;
      }
     }
     $26 = ((($word)) + 16|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($27|0)==(0);
     if (!($28)) {
      $29 = HEAP32[$8>>2]|0;
      $30 = ((($29)) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = $31 | 2;
      HEAP32[$30>>2] = $32;
     }
    }
    HEAP32[$8>>2] = 0;
   }
   $163 = ((($ctx)) + 44|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = ($164|0)==(6);
   do {
    if ($165) {
     $166 = ((($word)) + 16|0);
     $167 = HEAP32[$166>>2]|0;
     $168 = ($167|0)==(0);
     if ($168) {
      $169 = ((($1)) + 28|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = HEAP32[$170>>2]|0;
      $172 = (_is_well_formed_var_name($171,0)|0);
      $173 = ($172|0)==(0);
      if (!($173)) {
       _done_pipe($ctx,1);
       $$pr = HEAP32[$163>>2]|0;
       $174 = $$pr;
       break;
      }
     }
     HEAP32[$vararg_buffer7>>2] = 5955;
     _bb_error_msg(4235,$vararg_buffer7);
     $$1 = 1;
     break L3;
    } else {
     $174 = $164;
    }
   } while(0);
   $175 = ($174|0)==(12);
   if ($175) {
    _done_pipe($ctx,1);
   }
   HEAP32[$2>>2] = 0;
   $176 = ((($word)) + 16|0);
   HEAP32[$176>>2] = 0;
   $177 = HEAP32[$word>>2]|0;
   $178 = ($177|0)==(0|0);
   if ($178) {
    $$1 = 0;
   } else {
    HEAP8[$177>>0] = 0;
    $$1 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function _done_pipe($ctx,$type) {
 $ctx = $ctx|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_done_command($ctx)|0);
 $1 = ((($ctx)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 32|0);
 HEAP32[$3>>2] = $type;
 $4 = ((($ctx)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($2)) + 36|0);
 HEAP32[$6>>2] = $5;
 HEAP32[$4>>2] = 0;
 $7 = ((($ctx)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($2)) + 40|0);
 HEAP32[$9>>2] = $8;
 $10 = ($0|0)==(0);
 if ($10) {
  switch ($8|0) {
  case 16: case 11: case 6: case 10: case 5:  {
   label = 3;
   break;
  }
  default: {
  }
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $11 = (_xzalloc(44)|0);
  $12 = HEAP32[$1>>2]|0;
  HEAP32[$12>>2] = $11;
  HEAP32[$1>>2] = $11;
  $13 = HEAP32[$7>>2]|0;
  switch ($13|0) {
  case 11: case 6:  {
   HEAP32[$7>>2] = 0;
   break;
  }
  case 14:  {
   HEAP32[$7>>2] = 15;
   break;
  }
  case 12:  {
   HEAP32[$7>>2] = 13;
   break;
  }
  default: {
  }
  }
  $14 = ((($ctx)) + 8|0);
  HEAP32[$14>>2] = 0;
  (_done_command($ctx)|0);
 }
 return;
}
function _redirect_opt_num($o) {
 $o = $o|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$o>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (_bb_strtoul($0,0,10)|0);
  $3 = (___errno_location()|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)!=(0);
  $6 = ($2|0)<(0);
  $or$cond = $6 | $5;
  if ($or$cond) {
   $$0 = -1;
  } else {
   $7 = ((($o)) + 4|0);
   HEAP32[$7>>2] = 0;
   $8 = ((($o)) + 16|0);
   HEAP32[$8>>2] = 0;
   $9 = HEAP32[$o>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $$0 = $2;
   } else {
    HEAP8[$9>>0] = 0;
    $$0 = $2;
   }
  }
 }
 return ($$0|0);
}
function _parse_redirect($ctx,$fd,$style,$input) {
 $ctx = $ctx|0;
 $fd = $fd|0;
 $style = $style|0;
 $input = $input|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ch$03$i = 0, $d$04$i = 0, $d$04$i$lcssa = 0, $dup_num$0 = 0, $dup_num$06 = 0, $ok$05$i = 0, $ok$05$i$lcssa = 0, $or$cond = 0, $or$cond3 = 0, $redirp$0 = 0, $redirp$0$lcssa = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($ctx)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($style|0)!=(4);
 L1: do {
  if ($2) {
   $3 = ((($ctx)) + 16|0);
   $4 = ((($input)) + 24|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (FUNCTION_TABLE_ii[$5 & 63]($input)|0);
   $7 = ($6|0)==(38);
   L3: do {
    if ($7) {
     $8 = ((($input)) + 20|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (FUNCTION_TABLE_ii[$9 & 63]($input)|0);
     _o_grow_by($3,1);
     $11 = $10&255;
     $12 = ((($ctx)) + 20|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = HEAP32[$3>>2]|0;
     $15 = (($14) + ($13)|0);
     HEAP8[$15>>0] = $11;
     $16 = HEAP32[$12>>2]|0;
     $17 = (($16) + 1)|0;
     HEAP32[$12>>2] = $17;
     $18 = HEAP32[$3>>2]|0;
     $19 = (($18) + ($17)|0);
     HEAP8[$19>>0] = 0;
     $20 = HEAP32[$4>>2]|0;
     $21 = (FUNCTION_TABLE_ii[$20 & 63]($input)|0);
     switch ($21|0) {
     case 45:  {
      $22 = HEAP32[$8>>2]|0;
      $23 = (FUNCTION_TABLE_ii[$22 & 63]($input)|0);
      _o_grow_by($3,1);
      $24 = $23&255;
      $25 = HEAP32[$12>>2]|0;
      $26 = HEAP32[$3>>2]|0;
      $27 = (($26) + ($25)|0);
      HEAP8[$27>>0] = $24;
      $28 = HEAP32[$12>>2]|0;
      $29 = (($28) + 1)|0;
      HEAP32[$12>>2] = $29;
      $30 = HEAP32[$3>>2]|0;
      $31 = (($30) + ($29)|0);
      HEAP8[$31>>0] = 0;
      $dup_num$06 = -3;
      label = 15;
      break L1;
      break;
     }
     case -1:  {
      break;
     }
     default: {
      $ch$03$i = $21;$d$04$i = 0;$ok$05$i = 0;
      label = 5;
     }
     }
     do {
      if ((label|0) == 5) {
       while(1) {
        label = 0;
        $32 = (($ch$03$i) + -48)|0;
        $33 = $32 & 254;
        $34 = ($33>>>0)<(10);
        if (!($34)) {
         $d$04$i$lcssa = $d$04$i;$ok$05$i$lcssa = $ok$05$i;
         label = 7;
         break;
        }
        $35 = ($d$04$i*10)|0;
        $36 = (($32) + ($35))|0;
        $37 = HEAP32[$8>>2]|0;
        $38 = (FUNCTION_TABLE_ii[$37 & 63]($input)|0);
        _o_grow_by($3,1);
        $39 = $38&255;
        $40 = HEAP32[$12>>2]|0;
        $41 = HEAP32[$3>>2]|0;
        $42 = (($41) + ($40)|0);
        HEAP8[$42>>0] = $39;
        $43 = HEAP32[$12>>2]|0;
        $44 = (($43) + 1)|0;
        HEAP32[$12>>2] = $44;
        $45 = HEAP32[$3>>2]|0;
        $46 = (($45) + ($44)|0);
        HEAP8[$46>>0] = 0;
        $47 = HEAP32[$4>>2]|0;
        $48 = (FUNCTION_TABLE_ii[$47 & 63]($input)|0);
        $49 = ($48|0)==(-1);
        if ($49) {
         $$0$i = $36;
         break;
        } else {
         $ch$03$i = $48;$d$04$i = $36;$ok$05$i = 1;
         label = 5;
        }
       }
       if ((label|0) == 7) {
        $50 = ($ok$05$i$lcssa|0)==(0);
        if ($50) {
         break;
        } else {
         $$0$i = $d$04$i$lcssa;
        }
       }
       $51 = ($$0$i|0)==(-2);
       if ($51) {
        $$0 = 1;
        break L1;
       } else {
        $dup_num$0 = $$0$i;
        break L3;
       }
      }
     } while(0);
     _bb_error_msg(5900,$vararg_buffer);
     $$0 = 1;
     break L1;
    } else {
     $dup_num$0 = -1;
    }
   } while(0);
   $71 = ($style|0)==(1);
   $72 = ($dup_num$0|0)==(-1);
   $or$cond = $71 & $72;
   if ($or$cond) {
    $73 = HEAP32[$4>>2]|0;
    $74 = (FUNCTION_TABLE_ii[$73 & 63]($input)|0);
    $75 = ($74|0)==(124);
    if ($75) {
     $76 = ((($input)) + 20|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = (FUNCTION_TABLE_ii[$77 & 63]($input)|0);
     _o_grow_by($3,1);
     $79 = $78&255;
     $80 = ((($ctx)) + 20|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = HEAP32[$3>>2]|0;
     $83 = (($82) + ($81)|0);
     HEAP8[$83>>0] = $79;
     $84 = HEAP32[$80>>2]|0;
     $85 = (($84) + 1)|0;
     HEAP32[$80>>2] = $85;
     $86 = HEAP32[$3>>2]|0;
     $87 = (($86) + ($85)|0);
     HEAP8[$87>>0] = 0;
     $dup_num$06 = -1;
     label = 15;
    } else {
     $dup_num$06 = -1;
     label = 15;
    }
   } else {
    $dup_num$06 = $dup_num$0;
    label = 15;
   }
  } else {
   $52 = ((($input)) + 24|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (FUNCTION_TABLE_ii[$53 & 63]($input)|0);
   $55 = ($54|0)==(45);
   $56 = $55&1;
   if ($55) {
    $57 = ((($input)) + 20|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (FUNCTION_TABLE_ii[$58 & 63]($input)|0);
    $60 = ((($ctx)) + 16|0);
    _o_grow_by($60,1);
    $61 = $59&255;
    $62 = ((($ctx)) + 20|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = HEAP32[$60>>2]|0;
    $65 = (($64) + ($63)|0);
    HEAP8[$65>>0] = $61;
    $66 = HEAP32[$62>>2]|0;
    $67 = (($66) + 1)|0;
    HEAP32[$62>>2] = $67;
    $68 = HEAP32[$60>>2]|0;
    $69 = (($68) + ($67)|0);
    HEAP8[$69>>0] = 0;
    $70 = HEAP32[$52>>2]|0;
    (FUNCTION_TABLE_ii[$70 & 63]($input)|0);
    $dup_num$06 = $56;
    label = 15;
   } else {
    $dup_num$06 = $56;
    label = 15;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  $88 = ((($1)) + 32|0);
  $redirp$0 = $88;
  while(1) {
   $89 = HEAP32[$redirp$0>>2]|0;
   $90 = ($89|0)==(0|0);
   if ($90) {
    $redirp$0$lcssa = $redirp$0;
    break;
   } else {
    $redirp$0 = $89;
   }
  }
  $91 = (_xzalloc(20)|0);
  HEAP32[$redirp$0$lcssa>>2] = $91;
  $92 = ((($91)) + 16|0);
  HEAP32[$92>>2] = $style;
  $93 = ($fd|0)==(-1);
  if ($93) {
   $94 = (((392 + ($style<<3)|0)) + 4|0);
   $95 = HEAP8[$94>>0]|0;
   $96 = $95 << 24 >> 24;
   $98 = $96;
  } else {
   $98 = $fd;
  }
  $97 = ((($91)) + 8|0);
  HEAP32[$97>>2] = $98;
  $99 = ((($91)) + 12|0);
  HEAP32[$99>>2] = $dup_num$06;
  $100 = ($dup_num$06|0)!=(-1);
  $or$cond3 = $2 & $100;
  if ($or$cond3) {
   $$0 = 0;
  } else {
   $101 = ((($ctx)) + 12|0);
   HEAP32[$101>>2] = $91;
   $$0 = 0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _builtin_test($argv) {
 $argv = $argv|0;
 var $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $argc$0$lcssa$i = 0, $argc$02$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$argv>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0$lcssa$i = $argv;$argc$0$lcssa$i = 0;
 } else {
  $$01$i = $argv;$argc$02$i = 0;
  while(1) {
   $2 = (($argc$02$i) + 1)|0;
   $3 = ((($$01$i)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if ($5) {
    $$0$lcssa$i = $3;$argc$0$lcssa$i = $2;
    break;
   } else {
    $$01$i = $3;$argc$02$i = $2;
   }
  }
 }
 $6 = (0 - ($argc$0$lcssa$i))|0;
 $7 = (($$0$lcssa$i) + ($6<<2)|0);
 $8 = (_test_main($argc$0$lcssa$i,$7)|0);
 return ($8|0);
}
function _builtin_echo($argv) {
 $argv = $argv|0;
 var $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $argc$0$lcssa$i = 0, $argc$02$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$argv>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0$lcssa$i = $argv;$argc$0$lcssa$i = 0;
 } else {
  $$01$i = $argv;$argc$02$i = 0;
  while(1) {
   $2 = (($argc$02$i) + 1)|0;
   $3 = ((($$01$i)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if ($5) {
    $$0$lcssa$i = $3;$argc$0$lcssa$i = $2;
    break;
   } else {
    $$01$i = $3;$argc$02$i = $2;
   }
  }
 }
 $6 = (0 - ($argc$0$lcssa$i))|0;
 $7 = (($$0$lcssa$i) + ($6<<2)|0);
 $8 = (_echo_main($argc$0$lcssa$i,$7)|0);
 return ($8|0);
}
function _builtin_pwd($argv) {
 $argv = $argv|0;
 var $$$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[840>>2]|0;
 $1 = ((($0)) + 112|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (_xrealloc_getcwd_or_warn(0)|0);
  $5 = ($4|0)==(0|0);
  $$$i = $5 ? 3692 : $4;
  HEAP32[$1>>2] = $$$i;
  $6 = $$$i;
 } else {
  $6 = $2;
 }
 (_puts($6)|0);
 return 0;
}
function _scan_and_match($string,$pattern,$flags) {
 $string = $string|0;
 $pattern = $pattern|0;
 $flags = $flags|0;
 var $$2 = 0, $$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $early_exit$09 = 0, $early_exit$2$ph = 0, $early_exit$25 = 0, $end$0$ph = 0, $loc$0$ph = 0, $loc$04 = 0, $loc$1 = 0, $r$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($string)|0);
 $1 = ($flags|0)==(9);
 L1: do {
  if ($1) {
   $2 = HEAP8[$pattern>>0]|0;
   $3 = ($2<<24>>24)==(42);
   $4 = $3&1;
   $37 = $4;
   label = 4;
  } else {
   $5 = $flags & 1;
   $6 = ($5|0)==(0);
   $7 = (($string) + ($0)|0);
   if ($6) {
    $10 = ((($string)) + -1|0);
    $11 = ($flags|0)==(6);
    if ($11) {
     $12 = (_strlen($pattern)|0);
     $13 = (($pattern) + ($12)|0);
     $14 = ((($13)) + -1|0);
     $15 = ($14>>>0)<($pattern>>>0);
     if ($15) {
      $$ph = 0;$early_exit$2$ph = 0;$end$0$ph = $10;$loc$0$ph = $7;
     } else {
      $16 = HEAP8[$14>>0]|0;
      $17 = ($16<<24>>24)==(42);
      if ($17) {
       $18 = ((($14)) + -1|0);
       $19 = ($18>>>0)<($pattern>>>0);
       if ($19) {
        $$ph = 0;$early_exit$2$ph = 1;$end$0$ph = $10;$loc$0$ph = $7;
       } else {
        $24 = $18;$early_exit$09 = 1;
        while(1) {
         $23 = HEAP8[$24>>0]|0;
         $25 = ($23<<24>>24)==(92);
         if (!($25)) {
          $$ph = 0;$early_exit$2$ph = $early_exit$09;$end$0$ph = $10;$loc$0$ph = $7;
          break L1;
         }
         $26 = $early_exit$09 ^ 1;
         $27 = ((($24)) + -1|0);
         $28 = ($27>>>0)<($pattern>>>0);
         if ($28) {
          $$ph = 0;$early_exit$2$ph = $26;$end$0$ph = $10;$loc$0$ph = $7;
          break;
         } else {
          $24 = $27;$early_exit$09 = $26;
         }
        }
       }
      } else {
       $$ph = 0;$early_exit$2$ph = 0;$end$0$ph = $10;$loc$0$ph = $7;
      }
     }
    } else {
     $$ph = 0;$early_exit$2$ph = 0;$end$0$ph = $10;$loc$0$ph = $7;
    }
   } else {
    $37 = 0;
    label = 4;
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $8 = (($string) + ($0)|0);
  $9 = ((($8)) + 1|0);
  $$ph = 1;$early_exit$2$ph = $37;$end$0$ph = $9;$loc$0$ph = $string;
 }
 $20 = ($loc$0$ph|0)==($end$0$ph|0);
 L14: do {
  if ($20) {
   $$2 = 0;
  } else {
   $21 = $flags & 4;
   $22 = ($21|0)==(0);
   $early_exit$25 = $early_exit$2$ph;$loc$04 = $loc$0$ph;
   while(1) {
    if ($22) {
     $31 = (_fnmatch($pattern,$loc$04,0)|0);
     $r$0 = $31;
    } else {
     $29 = HEAP8[$loc$04>>0]|0;
     HEAP8[$loc$04>>0] = 0;
     $30 = (_fnmatch($pattern,$string,0)|0);
     HEAP8[$loc$04>>0] = $29;
     $r$0 = $30;
    }
    $32 = ($r$0|0)==(0);
    if ($32) {
     $$2 = $loc$04;
     break L14;
    }
    $33 = ($early_exit$25|0)==(0);
    if (!($33)) {
     $$2 = 0;
     break L14;
    }
    $34 = ((($loc$04)) + 1|0);
    $35 = ((($loc$04)) + -1|0);
    $loc$1 = $$ph ? $34 : $35;
    $36 = ($loc$1|0)==($end$0$ph|0);
    if ($36) {
     $$2 = 0;
     break;
    } else {
     $early_exit$25 = 0;$loc$04 = $loc$1;
    }
   }
  }
 } while(0);
 return ($$2|0);
}
function _next_random($rnd) {
 $rnd = $rnd|0;
 var $$ = 0, $$lcssa = 0, $$lcssa14 = 0, $$phi$trans$insert = 0, $$phi$trans$insert6 = 0, $$pre = 0, $$pre$phi10Z2D = 0, $$pre$phi9Z2D = 0, $$pre$phiZ2D = 0, $$pre5 = 0, $$pre8 = 0, $$promoted = 0, $$promoted2 = 0, $$promoted2$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $16$phi = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$rnd>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_getpid()|0);
  $3 = ((($rnd)) + 8|0);
  HEAP32[$3>>2] = $2;
  HEAP32[$rnd>>2] = $2;
  $4 = (_monotonic_us()|0);
  $5 = tempRet0;
  $6 = ((($rnd)) + 12|0);
  HEAP32[$6>>2] = $4;
  $7 = ((($rnd)) + 4|0);
  HEAP32[$7>>2] = $4;
  $$pre5 = HEAP32[$rnd>>2]|0;
  $$pre$phi10Z2D = $6;$$pre$phi9Z2D = $3;$$pre$phiZ2D = $7;$$promoted2 = $4;$12 = $$pre5;$9 = $4;
 } else {
  $$phi$trans$insert = ((($rnd)) + 4|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $$phi$trans$insert6 = ((($rnd)) + 12|0);
  $$promoted2$pre = HEAP32[$$phi$trans$insert6>>2]|0;
  $$pre8 = ((($rnd)) + 8|0);
  $$pre$phi10Z2D = $$phi$trans$insert6;$$pre$phi9Z2D = $$pre8;$$pre$phiZ2D = $$phi$trans$insert;$$promoted2 = $$promoted2$pre;$12 = $0;$9 = $$pre;
 }
 $8 = Math_imul($9, 1664525)|0;
 $10 = (($8) + 1013904223)|0;
 HEAP32[$$pre$phiZ2D>>2] = $10;
 $11 = $12 << 1;
 $13 = ($12|0)<(0);
 $14 = $11 ^ -2147483637;
 $$ = $13 ? $14 : $11;
 HEAP32[$rnd>>2] = $$;
 $$promoted = HEAP32[$$pre$phi9Z2D>>2]|0;
 $16 = $$promoted;$19 = $$promoted2;
 while(1) {
  $15 = $16 << 2;
  $17 = $15 ^ $16;
  $18 = $19 >>> 3;
  $20 = $18 ^ $19;
  $21 = $20 ^ $17;
  $22 = $17 >>> 7;
  $23 = $21 ^ $22;
  $24 = ($21|0)==($22|0);
  $25 = ($19>>>0)<(3);
  $or$cond = $24 & $25;
  if ($or$cond) {
   $16$phi = $19;$19 = $23;$16 = $16$phi;
  } else {
   $$lcssa = $19;$$lcssa14 = $23;
   break;
  }
 }
 HEAP32[$$pre$phi9Z2D>>2] = $$lcssa;
 HEAP32[$$pre$phi10Z2D>>2] = $$lcssa14;
 $26 = (($$) - ($10))|0;
 $27 = (($26) + ($$lcssa14))|0;
 $28 = $27 & 32767;
 return ($28|0);
}
function _is_well_formed_var_name($s,$terminator) {
 $s = $s|0;
 $terminator = $terminator|0;
 var $$0 = 0, $$01 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = HEAP8[$s>>0]|0;
  $2 = $1&255;
  $3 = $2 | 32;
  $4 = (($3) + 159)|0;
  $5 = $4 & 254;
  $6 = ($5>>>0)<(26);
  $7 = ($1<<24>>24)==(95);
  $or$cond = $7 | $6;
  if ($or$cond) {
   $$01 = $s;
   while(1) {
    $8 = ((($$01)) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = $9&255;
    $11 = (($10) + 208)|0;
    $12 = $11 & 254;
    $13 = ($12>>>0)<(10);
    if ($13) {
     $$01 = $8;
     continue;
    }
    $14 = $10 | 32;
    $15 = (($14) + 159)|0;
    $16 = $15 & 254;
    $17 = ($16>>>0)<(26);
    $18 = ($9<<24>>24)==(95);
    $or$cond2 = $17 | $18;
    if ($or$cond2) {
     $$01 = $8;
    } else {
     $$lcssa = $9;
     break;
    }
   }
   $19 = ($$lcssa<<24>>24)==($terminator<<24>>24);
   $20 = $19&1;
   $$0 = $20;
  } else {
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _shell_builtin_read($setvar,$argv,$ifs,$read_flags,$opt_n,$opt_p,$opt_t,$opt_u) {
 $setvar = $setvar|0;
 $argv = $argv|0;
 $ifs = $ifs|0;
 $read_flags = $read_flags|0;
 $opt_n = $opt_n|0;
 $opt_p = $opt_p|0;
 $opt_t = $opt_t|0;
 $opt_u = $opt_u|0;
 var $$0 = 0, $$07 = 0, $$07$lcssa146 = 0, $$07149 = 0, $$09 = 0, $$15 = 0, $$3$ph = 0, $$332 = 0, $$ifs = 0, $$lcssa = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $backslash$0 = 0, $backslash$2$ph = 0, $buffer$0 = 0, $buffer$1 = 0, $buffer$1$lcssa150 = 0, $buffer$1$lcssa151 = 0, $buffer$1154 = 0, $buffer$1155 = 0, $buffer$1156 = 0, $buffer$1157 = 0, $bufpos$0 = 0;
 var $bufpos$0$lcssa141 = 0, $bufpos$0144 = 0, $bufpos$3$ph = 0, $bufpos$325 = 0, $bufpos$4 = 0, $bufpos$4$lcssa = 0, $end_ms$0 = 0, $end_ms$1 = 0, $err$1 = 0, $err$1$ph = 0, $err$129 = 0, $err$130 = 0, $fd$0 = 0, $nchars$0 = 0, $nchars$1 = 0, $old_tty = 0, $or$cond = 0, $or$cond13 = 0, $or$cond14 = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $pfd = 0, $pp$062 = 0, $retval$1$ph = 0, $retval$123 = 0, $retval$124 = 0, $startword$0 = 0, $startword$2 = 0, $startword$3$ph = 0, $timeout$0 = 0, $tty = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tty = sp + 76|0;
 $old_tty = sp + 16|0;
 $pfd = sp + 8|0;
 $0 = (___errno_location()|0);
 HEAP32[$0>>2] = 0;
 $1 = HEAP32[$argv>>2]|0;
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   label = 5;
  } else {
   $6 = $1;$pp$062 = $argv;
   while(1) {
    $7 = (_is_well_formed_var_name($6,0)|0);
    $8 = ($7|0)==(0);
    $4 = ((($pp$062)) + 4|0);
    if ($8) {
     $$lcssa = $6;
     break;
    }
    $3 = HEAP32[$4>>2]|0;
    $5 = ($3|0)==(0|0);
    if ($5) {
     label = 5;
     break L1;
    } else {
     $6 = $3;$pp$062 = $4;
    }
   }
   HEAP32[$vararg_buffer>>2] = $$lcssa;
   _bb_error_msg(6028,$vararg_buffer);
   $$0 = (1);
  }
 } while(0);
 do {
  if ((label|0) == 5) {
   $9 = ($opt_n|0)==(0|0);
   if ($9) {
    $nchars$0 = 0;
   } else {
    $10 = (_bb_strtoul($opt_n,0,10)|0);
    $11 = ($10|0)<(0);
    if ($11) {
     $$0 = 6069;
     break;
    }
    $12 = HEAP32[$0>>2]|0;
    $13 = ($12|0)==(0);
    if ($13) {
     $nchars$0 = $10;
    } else {
     $$0 = 6069;
     break;
    }
   }
   $14 = ($opt_t|0)==(0|0);
   if ($14) {
    $end_ms$0 = 0;
   } else {
    $15 = (_bb_strtoul($opt_t,0,10)|0);
    $16 = HEAP32[$0>>2]|0;
    $17 = ($16|0)!=(0);
    $18 = ($15>>>0)>(2097151);
    $or$cond = $18 | $17;
    if ($or$cond) {
     $$0 = 6083;
     break;
    }
    $19 = ($15*1000)|0;
    $end_ms$0 = $19;
   }
   $20 = ($opt_u|0)==(0|0);
   if ($20) {
    $fd$0 = 0;
   } else {
    $21 = (_bb_strtoul($opt_u,0,10)|0);
    $22 = ($21|0)<(0);
    if ($22) {
     $$0 = 6099;
     break;
    }
    $23 = HEAP32[$0>>2]|0;
    $24 = ($23|0)==(0);
    if ($24) {
     $fd$0 = $21;
    } else {
     $$0 = 6099;
     break;
    }
   }
   $25 = ($opt_p|0)==(0|0);
   if (!($25)) {
    $26 = (_isatty($fd$0)|0);
    $27 = ($26|0)==(0);
    if (!($27)) {
     $28 = HEAP32[1116>>2]|0;
     (_fputs($opt_p,$28)|0);
     (_fflush_all()|0);
    }
   }
   $29 = ($ifs|0)==(0|0);
   $$ifs = $29 ? (6024) : $ifs;
   $30 = ($nchars$0|0)!=(0);
   $$not = $30 ^ 1;
   $31 = $read_flags & 1;
   $32 = ($31|0)==(0);
   $or$cond13 = $32 & $$not;
   if ($or$cond13) {
    $$09 = $read_flags;
   } else {
    (_tcgetattr($fd$0,$tty)|0);
    dest=$old_tty; src=$tty; stop=dest+60|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    if ($30) {
     $33 = ((($tty)) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = $34 & -3;
     HEAP32[$33>>2] = $35;
     $36 = ((($tty)) + 23|0);
     HEAP8[$36>>0] = 1;
     $37 = ((($tty)) + 22|0);
     HEAP8[$37>>0] = 0;
    }
    if (!($32)) {
     $38 = ((($tty)) + 12|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = $39 & -105;
     HEAP32[$38>>2] = $40;
    }
    $41 = $read_flags | 1;
    (_tcsetattr($fd$0,0,$tty)|0);
    $$09 = $41;
   }
   $42 = ($end_ms$0|0)==(0);
   if ($42) {
    $end_ms$1 = 0;
   } else {
    $43 = (_monotonic_ms()|0);
    $44 = tempRet0;
    $45 = (($43) + ($end_ms$0))|0;
    $46 = $45 | 1;
    $end_ms$1 = $46;
   }
   $47 = ($end_ms$1|0)==(0);
   $48 = ((($pfd)) + 4|0);
   $49 = $$09 & 2;
   $50 = ($49|0)==(0);
   $$07 = $argv;$backslash$0 = 0;$buffer$0 = 0;$bufpos$0 = 0;$nchars$1 = $nchars$0;$startword$0 = 1;
   L36: while(1) {
    $51 = $bufpos$0 & 255;
    $52 = ($51|0)==(0);
    if ($52) {
     $53 = (($bufpos$0) + 257)|0;
     $54 = (_xrealloc($buffer$0,$53)|0);
     $buffer$1 = $54;
    } else {
     $buffer$1 = $buffer$0;
    }
    if ($47) {
     $timeout$0 = -1;
    } else {
     $55 = (_monotonic_ms()|0);
     $56 = tempRet0;
     $57 = (($end_ms$1) - ($55))|0;
     $58 = ($57|0)<(1);
     if ($58) {
      $buffer$1157 = $buffer$1;$err$1 = 0;
      label = 47;
      break;
     } else {
      $timeout$0 = $57;
     }
    }
    HEAP32[$0>>2] = 0;
    HEAP32[$pfd>>2] = $fd$0;
    HEAP16[$48>>1] = 1;
    $59 = (_poll($pfd,1,$timeout$0)|0);
    $60 = ($59|0)==(1);
    if (!($60)) {
     $buffer$1$lcssa150 = $buffer$1;
     label = 31;
     break;
    }
    $62 = (($buffer$1) + ($bufpos$0)|0);
    $63 = (_read($fd$0,$62,1)|0);
    $64 = ($63|0)==(1);
    if (!($64)) {
     $$07$lcssa146 = $$07;$buffer$1$lcssa151 = $buffer$1;$bufpos$0$lcssa141 = $bufpos$0;
     label = 33;
     break;
    }
    $66 = HEAP8[$62>>0]|0;
    $67 = $66 << 24 >> 24;
    $68 = ($66<<24>>24)==(0);
    L46: do {
     if ($68) {
      $$3$ph = $$07;$backslash$2$ph = $backslash$0;$bufpos$3$ph = $bufpos$0;$startword$3$ph = $startword$0;
     } else {
      $69 = ($backslash$0|0)==(0);
      do {
       if ($69) {
        $71 = ($66<<24>>24)==(92);
        $or$cond14 = $50 & $71;
        if ($or$cond14) {
         $$3$ph = $$07;$backslash$2$ph = 1;$bufpos$3$ph = $bufpos$0;$startword$3$ph = $startword$0;
         break L46;
        }
        $72 = ($66<<24>>24)==(10);
        if ($72) {
         $$07149 = $$07;$buffer$1156 = $buffer$1;$bufpos$0144 = $bufpos$0;$err$1$ph = 0;$retval$1$ph = 0;
         label = 46;
         break L36;
        }
        $73 = HEAP32[$$07>>2]|0;
        $74 = ($73|0)==(0|0);
        if ($74) {
         $startword$2 = $startword$0;
        } else {
         $75 = (_strchr($$ifs,$67)|0);
         $76 = ($startword$0|0)!=(0);
         $77 = ($75|0)!=(0|0);
         $or$cond3 = $76 & $77;
         if ($or$cond3) {
          $78 = (($67) + 247)|0;
          $79 = $78 & 255;
          switch ($79|0) {
          case 0: case 1: case 2: case 3: case 4: case 23:  {
           $$3$ph = $$07;$backslash$2$ph = 0;$bufpos$3$ph = $bufpos$0;$startword$3$ph = $startword$0;
           break L46;
           break;
          }
          default: {
          }
          }
          $80 = ($startword$0|0)==(2);
          if ($80) {
           $$3$ph = $$07;$backslash$2$ph = 0;$bufpos$3$ph = $bufpos$0;$startword$3$ph = 1;
           break L46;
          }
         }
         $81 = ((($$07)) + 4|0);
         $82 = HEAP32[$81>>2]|0;
         $83 = ($82|0)!=(0|0);
         $or$cond5 = $77 & $83;
         if (!($or$cond5)) {
          $startword$2 = 0;
          break;
         }
         HEAP8[$62>>0] = 0;
         $84 = HEAP32[$$07>>2]|0;
         FUNCTION_TABLE_vii[$setvar & 63]($84,$buffer$1);
         $85 = (($67) + 247)|0;
         $86 = $85 & 255;
         $87 = ($86|0)==(23);
         $88 = ($86>>>0)<(5);
         $$15 = $87 | $88;
         $89 = $$15 ? 2 : 1;
         $$3$ph = $81;$backslash$2$ph = 0;$bufpos$3$ph = 0;$startword$3$ph = $89;
         break L46;
        }
       } else {
        $70 = ($66<<24>>24)==(10);
        if ($70) {
         $$3$ph = $$07;$backslash$2$ph = 0;$bufpos$3$ph = $bufpos$0;$startword$3$ph = $startword$0;
         break L46;
        } else {
         $startword$2 = $startword$0;
        }
       }
      } while(0);
      $90 = (($bufpos$0) + 1)|0;
      $$3$ph = $$07;$backslash$2$ph = 0;$bufpos$3$ph = $90;$startword$3$ph = $startword$2;
     }
    } while(0);
    $91 = (($nchars$1) + -1)|0;
    $92 = ($91|0)==(0);
    if ($92) {
     $$332 = $$3$ph;$buffer$1155 = $buffer$1;$bufpos$325 = $bufpos$3$ph;$err$130 = 0;$retval$124 = 0;
     label = 49;
     break;
    } else {
     $$07 = $$3$ph;$backslash$0 = $backslash$2$ph;$buffer$0 = $buffer$1;$bufpos$0 = $bufpos$3$ph;$nchars$1 = $91;$startword$0 = $startword$3$ph;
    }
   }
   if ((label|0) == 31) {
    $61 = HEAP32[$0>>2]|0;
    $buffer$1157 = $buffer$1$lcssa150;$err$1 = $61;
    label = 47;
   }
   else if ((label|0) == 33) {
    $65 = HEAP32[$0>>2]|0;
    $$07149 = $$07$lcssa146;$buffer$1156 = $buffer$1$lcssa151;$bufpos$0144 = $bufpos$0$lcssa141;$err$1$ph = $65;$retval$1$ph = (1);
    label = 46;
   }
   if ((label|0) == 46) {
    $$332 = $$07149;$buffer$1155 = $buffer$1156;$bufpos$325 = $bufpos$0144;$err$130 = $err$1$ph;$retval$124 = $retval$1$ph;
    label = 49;
   }
   else if ((label|0) == 47) {
    $buffer$1154 = $buffer$1157;$err$129 = $err$1;$retval$123 = (1);
   }
   do {
    if ((label|0) == 49) {
     $93 = HEAP32[$$332>>2]|0;
     $94 = ($93|0)==(0|0);
     if ($94) {
      $115 = (($buffer$1155) + ($bufpos$325)|0);
      HEAP8[$115>>0] = 0;
      FUNCTION_TABLE_vii[$setvar & 63](6063,$buffer$1155);
      $buffer$1154 = $buffer$1155;$err$129 = $err$130;$retval$123 = $retval$124;
      break;
     } else {
      $bufpos$4 = $bufpos$325;
     }
     L71: while(1) {
      $95 = (($bufpos$4) + -1)|0;
      $96 = ($bufpos$4|0)>(0);
      if (!($96)) {
       $bufpos$4$lcssa = $bufpos$4;
       break;
      }
      $97 = (($buffer$1155) + ($95)|0);
      $98 = HEAP8[$97>>0]|0;
      $99 = $98&255;
      $100 = (($99) + 247)|0;
      $101 = $100 & 255;
      switch ($101|0) {
      case 0: case 1: case 2: case 3: case 4: case 23:  {
       break;
      }
      default: {
       $bufpos$4$lcssa = $bufpos$4;
       break L71;
      }
      }
      $102 = $98 << 24 >> 24;
      $103 = (_strchr($$ifs,$102)|0);
      $104 = ($103|0)==(0|0);
      if ($104) {
       $bufpos$4$lcssa = $bufpos$4;
       break;
      } else {
       $bufpos$4 = $95;
      }
     }
     $105 = (($buffer$1155) + ($bufpos$4$lcssa)|0);
     HEAP8[$105>>0] = 0;
     $106 = HEAP32[$$332>>2]|0;
     FUNCTION_TABLE_vii[$setvar & 63]($106,$buffer$1155);
     $107 = ((($$332)) + 4|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = ($108|0)==(0|0);
     if ($109) {
      $buffer$1154 = $buffer$1155;$err$129 = $err$130;$retval$123 = $retval$124;
     } else {
      $110 = $108;$112 = $107;
      while(1) {
       FUNCTION_TABLE_vii[$setvar & 63]($110,13904);
       $111 = ((($112)) + 4|0);
       $113 = HEAP32[$111>>2]|0;
       $114 = ($113|0)==(0|0);
       if ($114) {
        $buffer$1154 = $buffer$1155;$err$129 = $err$130;$retval$123 = $retval$124;
        break;
       } else {
        $110 = $113;$112 = $111;
       }
      }
     }
    }
   } while(0);
   _free($buffer$1154);
   $116 = $$09 & 1;
   $117 = ($116|0)==(0);
   if (!($117)) {
    (_tcsetattr($fd$0,0,$old_tty)|0);
   }
   HEAP32[$0>>2] = $err$129;
   $$0 = $retval$123;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _shell_builtin_ulimit($argv) {
 $argv = $argv|0;
 var $$6 = 0, $$lcssa76 = 0, $$lcssa79 = 0, $$lcssa80 = 0, $$opts$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $argc$0 = 0, $argc$0$lcssa = 0, $l$040 = 0, $l$139 = 0, $l$139$lcssa = 0, $l$139$lcssa$lcssa74 = 0, $l$139$lcssa75 = 0, $limit = 0, $opt_char$0 = 0;
 var $opts$0$ph = 0, $opts$6$ph = 0, $val_str$06 = 0, $val_str$06$lcssa = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $limit = sp;
 HEAP32[1092>>2] = 1;
 $argc$0 = 1;
 while(1) {
  $0 = (($argv) + ($argc$0<<2)|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = ($1|0)==(0|0);
  $3 = (($argc$0) + 1)|0;
  if ($2) {
   $argc$0$lcssa = $argc$0;
   break;
  } else {
   $argc$0 = $3;
  }
 }
 $4 = ((($limit)) + 8|0);
 $opts$0$ph = 0;
 L4: while(1) {
  L6: while(1) {
   $5 = (_getopt($argc$0$lcssa,$argv,6123)|0);
   switch ($5|0) {
   case -1:  {
    label = 5;
    break L4;
    break;
   }
   case 72:  {
    label = 6;
    break L6;
    break;
   }
   case 83:  {
    label = 7;
    break L6;
    break;
   }
   case 97:  {
    $l$040 = 660;
    label = 8;
    break L6;
    break;
   }
   case 1:  {
    $opt_char$0 = 102;
    break;
   }
   default: {
    $opt_char$0 = $5;
   }
   }
   $l$139 = 660;
   while(1) {
    $17 = ((($l$139)) + 2|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = $18 << 24 >> 24;
    $20 = ($opt_char$0|0)==($19|0);
    if ($20) {
     $l$139$lcssa = $l$139;
     break;
    }
    $64 = ((($l$139)) + 8|0);
    $65 = ($64|0)==((764)|0);
    if ($65) {
     label = 11;
     break L4;
    } else {
     $l$139 = $64;
    }
   }
   $21 = HEAP8[$l$139$lcssa>>0]|0;
   $22 = $21&255;
   (_getrlimit($22,$limit)|0);
   $23 = HEAP32[1112>>2]|0;
   $24 = ($23|0)==(0|0);
   if (!($24)) {
    $60 = $l$139$lcssa;$l$139$lcssa75 = $l$139$lcssa;$val_str$06 = $23;
    break;
   }
   $25 = HEAP32[1092>>2]|0;
   $26 = (($argv) + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0|0);
   if (!($28)) {
    $29 = HEAP8[$27>>0]|0;
    $30 = ($29<<24>>24)==(45);
    if (!($30)) {
     $$lcssa76 = $l$139$lcssa;$$lcssa79 = $25;$$lcssa80 = $27;$l$139$lcssa$lcssa74 = $l$139$lcssa;
     label = 16;
     break;
    }
   }
   _printlim($opts$0$ph,$limit,$l$139$lcssa);
  }
  if ((label|0) == 6) {
   label = 0;
   $6 = $opts$0$ph | 1;
   $opts$6$ph = $6;
   label = 29;
  }
  else if ((label|0) == 7) {
   label = 0;
   $7 = $opts$0$ph | 2;
   $opts$6$ph = $7;
   label = 29;
  }
  else if ((label|0) == 8) {
   while(1) {
    label = 0;
    $8 = HEAP8[$l$040>>0]|0;
    $9 = $8&255;
    (_getrlimit($9,$limit)|0);
    $10 = ((($l$040)) + 2|0);
    $11 = HEAP8[$10>>0]|0;
    $12 = $11 << 24 >> 24;
    $13 = ((($l$040)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    HEAP32[$vararg_buffer>>2] = $12;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $14;
    (_printf(6167,$vararg_buffer)|0);
    _printlim($opts$0$ph,$limit,$l$040);
    $15 = ((($l$040)) + 8|0);
    $16 = ($15|0)==((764)|0);
    if ($16) {
     $opts$6$ph = $opts$0$ph;
     label = 29;
     break;
    } else {
     $l$040 = $15;
     label = 8;
    }
   }
  }
  else if ((label|0) == 16) {
   label = 0;
   $31 = (($$lcssa79) + 1)|0;
   HEAP32[1092>>2] = $31;
   $60 = $$lcssa76;$l$139$lcssa75 = $l$139$lcssa$lcssa74;$val_str$06 = $$lcssa80;
  }
  if ((label|0) == 29) {
   label = 0;
   $opts$0$ph = $opts$6$ph;
   continue;
  }
  $32 = (_strcmp($val_str$06,6179)|0);
  $33 = ($32|0)==(0);
  if ($33) {
   $49 = -1;$52 = -1;
  } else {
   $34 = (_bb_strtoull($val_str$06,0,10)|0);
   $35 = tempRet0;
   $36 = (___errno_location()|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(0);
   if (!($38)) {
    $val_str$06$lcssa = $val_str$06;
    label = 19;
    break;
   }
   $39 = ((($l$139$lcssa75)) + 1|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = (_bitshift64Shl(($34|0),($35|0),($41|0))|0);
   $43 = tempRet0;
   $49 = $42;$52 = $43;
  }
  $44 = ($opts$0$ph|0)==(0);
  $$opts$0 = $44 ? 3 : $opts$0$ph;
  $45 = $$opts$0 & 1;
  $46 = ($45|0)==(0);
  if (!($46)) {
   $47 = $4;
   $48 = $47;
   HEAP32[$48>>2] = $49;
   $50 = (($47) + 4)|0;
   $51 = $50;
   HEAP32[$51>>2] = $52;
  }
  $53 = $$opts$0 & 2;
  $54 = ($53|0)==(0);
  if (!($54)) {
   $55 = $limit;
   $56 = $55;
   HEAP32[$56>>2] = $49;
   $57 = (($55) + 4)|0;
   $58 = $57;
   HEAP32[$58>>2] = $52;
  }
  $59 = HEAP8[$60>>0]|0;
  $61 = $59&255;
  $62 = (_setrlimit($61,$limit)|0);
  $63 = ($62|0)<(0);
  if ($63) {
   label = 26;
   break;
  }
  $opts$0$ph = $$opts$0;
 }
 if ((label|0) == 5) {
  $$6 = 0;
 }
 else if ((label|0) == 11) {
  $$6 = 0;
 }
 else if ((label|0) == 19) {
  HEAP32[$vararg_buffer2>>2] = $val_str$06$lcssa;
  _bb_error_msg(7348,$vararg_buffer2);
  label = 30;
 }
 else if ((label|0) == 26) {
  _bb_perror_msg(6189,$vararg_buffer5);
  label = 30;
 }
 if ((label|0) == 30) {
  $$6 = 1;
 }
 STACKTOP = sp;return ($$6|0);
}
function _printlim($opts,$limit,$l) {
 $opts = $opts|0;
 $limit = $limit|0;
 $l = $l|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($limit)) + 8|0);
 $1 = $opts & 1;
 $2 = ($1|0)==(0);
 $$ = $2 ? $limit : $0;
 $3 = $$;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)==(-1);
 $10 = ($8|0)==(-1);
 $11 = $9 & $10;
 if ($11) {
  (_puts(6179)|0);
 } else {
  $12 = ((($l)) + 1|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = (_bitshift64Lshr(($5|0),($8|0),($14|0))|0);
  $16 = tempRet0;
  $17 = $vararg_buffer;
  $18 = $17;
  HEAP32[$18>>2] = $15;
  $19 = (($17) + 4)|0;
  $20 = $19;
  HEAP32[$20>>2] = $16;
  (_printf(6209,$vararg_buffer)|0);
 }
 STACKTOP = sp;return;
}
function _echo_main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $$01 = 0, $$024 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buflen$0$lcssa = 0, $buflen$08 = 0, $out$03 = 0, $out$2 = 0, $phitmp = 0, $pp$07 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($argv)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $buflen$0$lcssa = 1;
 } else {
  $3 = $1;$buflen$08 = 0;$pp$07 = $0;
  while(1) {
   $4 = (_strlen($3)|0);
   $5 = (($buflen$08) + 1)|0;
   $6 = (($5) + ($4))|0;
   $7 = ((($pp$07)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $$lcssa = $6;
    break;
   } else {
    $3 = $8;$buflen$08 = $6;$pp$07 = $7;
   }
  }
  $phitmp = (($$lcssa) + 1)|0;
  $buflen$0$lcssa = $phitmp;
 }
 $10 = (_xmalloc($buflen$0$lcssa)|0);
 $11 = HEAP32[$0>>2]|0;
 $12 = ($11|0)==(0|0);
 L6: do {
  if ($12) {
   $out$2 = $10;
  } else {
   $$024 = $0;$13 = $11;$out$03 = $10;
   while(1) {
    $14 = (___stpcpy($out$03,$13)|0);
    $15 = ((($$024)) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(0|0);
    if ($17) {
     $out$2 = $14;
     break L6;
    }
    $18 = ((($14)) + 1|0);
    HEAP8[$14>>0] = 32;
    $19 = HEAP32[$15>>2]|0;
    $20 = ($19|0)==(0|0);
    if ($20) {
     $out$2 = $18;
     break;
    } else {
     $$024 = $15;$13 = $19;$out$03 = $18;
    }
   }
  }
 } while(0);
 $21 = ((($out$2)) + 1|0);
 HEAP8[$out$2>>0] = 10;
 $22 = (___errno_location()|0);
 HEAP32[$22>>2] = 0;
 $23 = $21;
 $24 = $10;
 $25 = (($23) - ($24))|0;
 (_full_write(1,$10,$25)|0);
 _free($10);
 $26 = HEAP32[$22>>2]|0;
 $27 = ($26|0)==(0);
 if ($27) {
  $$01 = 0;
 } else {
  _bb_perror_msg(6445,$vararg_buffer);
  $$01 = 1;
 }
 STACKTOP = sp;return ($$01|0);
}
function _test_main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $$01$reg2mem$0 = 0, $$0213$reg2mem138$0 = 0, $$pre = 0, $$pre26 = 0, $$reg2mem128$0 = 0, $$reg2mem130$0 = 0, $$reg2mem136$0 = 0, $$reg2mem136$0$phi = 0, $$reg2mem142$0 = 0, $$reg2mem144$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond1 = 0, $cond10 = 0, $cond11 = 0, $cond12 = 0, $cond2 = 0;
 var $cond3 = 0, $cond4 = 0, $cond5 = 0, $cond6 = 0, $cond7 = 0, $cond8 = 0, $cond9 = 0, $negate$014$reg2mem140$0 = 0, $negate$09$reg2mem$0 = 0, $res$0$reg2mem$0 = 0, $res$2$reg2mem126$0 = 0, $vararg_buffer = 0, $vararg_buffer146 = 0, $vararg_buffer148 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer148 = sp + 16|0;
 $vararg_buffer146 = sp + 8|0;
 $vararg_buffer = sp;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $0 = HEAP32[$argv>>2]|0;
 __THREW__ = 0;
 $1 = (invoke_ii(46,($0|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 if ((($2|0) != 0) & ((threwValue|0) != 0)) { $3 = _testSetjmp(HEAP32[$2>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3|0) == 0) { _longjmp($2|0, threwValue|0); } tempRet0 = (threwValue); } else { $3 = -1; };
 $4 = tempRet0;
 $cond = ($3|0)==(1);
 L1: do {
  if ($cond) {
   $$reg2mem144$0 = $4;
   label = 17;
  } else {
   $5 = HEAP8[$1>>0]|0;
   $6 = ($5<<24>>24)==(91);
   if ($6) {
    $7 = (($argc) + -1)|0;
    $8 = ((($1)) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = (($argv) + ($7<<2)|0);
    $12 = HEAP32[$11>>2]|0;
    do {
     if ($10) {
      $13 = HEAP8[$12>>0]|0;
      $14 = ($13<<24>>24)==(93);
      if ($14) {
       $15 = ((($12)) + 1|0);
       $16 = HEAP8[$15>>0]|0;
       $17 = ($16<<24>>24)==(0);
       if ($17) {
        break;
       }
      }
      __THREW__ = 0;
      invoke_vii(47,(6457|0),($vararg_buffer|0));
      $18 = __THREW__; __THREW__ = 0;
      if ((($18|0) != 0) & ((threwValue|0) != 0)) { $19 = _testSetjmp(HEAP32[$18>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($19|0) == 0) { _longjmp($18|0, threwValue|0); } tempRet0 = (threwValue); } else { $19 = -1; };
      $20 = tempRet0;
      $cond6 = ($19|0)==(1);
      if ($cond6) {
       $$reg2mem144$0 = $20;
       label = 17;
       break L1;
      }
      $$01$reg2mem$0 = 2;
      break L1;
     } else {
      __THREW__ = 0;
      $21 = (invoke_iii(48,($12|0),(6467|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      if ((($22|0) != 0) & ((threwValue|0) != 0)) { $23 = _testSetjmp(HEAP32[$22>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($23|0) == 0) { _longjmp($22|0, threwValue|0); } tempRet0 = (threwValue); } else { $23 = -1; };
      $24 = tempRet0;
      $cond4 = ($23|0)==(1);
      if ($cond4) {
       $$reg2mem144$0 = $24;
       label = 17;
       break L1;
      }
      $25 = ($21|0)==(0);
      if (!($25)) {
       __THREW__ = 0;
       invoke_vii(47,(6470|0),($vararg_buffer146|0));
       $26 = __THREW__; __THREW__ = 0;
       if ((($26|0) != 0) & ((threwValue|0) != 0)) { $27 = _testSetjmp(HEAP32[$26>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($27|0) == 0) { _longjmp($26|0, threwValue|0); } tempRet0 = (threwValue); } else { $27 = -1; };
       $28 = tempRet0;
       $cond5 = ($27|0)==(1);
       if ($cond5) {
        $$reg2mem144$0 = $28;
        label = 17;
        break L1;
       }
       $$01$reg2mem$0 = 2;
       break L1;
      }
     }
    } while(0);
    HEAP32[$11>>2] = 0;
   }
   __THREW__ = 0;
   $29 = (invoke_ii(49,172)|0);
   $30 = __THREW__; __THREW__ = 0;
   if ((($30|0) != 0) & ((threwValue|0) != 0)) { $31 = _testSetjmp(HEAP32[$30>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($31|0) == 0) { _longjmp($30|0, threwValue|0); } tempRet0 = (threwValue); } else { $31 = -1; };
   $32 = tempRet0;
   $cond1 = ($31|0)==(1);
   if ($cond1) {
    $$reg2mem144$0 = $32;
    label = 17;
   } else {
    HEAP32[764>>2] = $29;
    __THREW__ = 0;
    /* asm() memory 'barrier' */;
    $33 = __THREW__; __THREW__ = 0;
    if ((($33|0) != 0) & ((threwValue|0) != 0)) { $34 = _testSetjmp(HEAP32[$33>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($34|0) == 0) { _longjmp($33|0, threwValue|0); } tempRet0 = (threwValue); } else { $34 = -1; };
    $35 = tempRet0;
    $cond2 = ($34|0)==(1);
    if ($cond2) {
     $$reg2mem144$0 = $35;
     label = 17;
    } else {
     $36 = ((($29)) + 16|0);
     _setjmpTable = _saveSetjmp($36,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
     __THREW__ = 0;
     $37 = __THREW__; __THREW__ = 0;
     if ((($37|0) != 0) & ((threwValue|0) != 0)) { $38 = _testSetjmp(HEAP32[$37>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($38|0) == 0) { _longjmp($37|0, threwValue|0); } tempRet0 = (threwValue); } else { $38 = -1; };
     $39 = tempRet0;
     $cond3 = ($38|0)==(1);
     if ($cond3) {
      $$reg2mem144$0 = $39;
      label = 17;
     } else {
      $$reg2mem144$0 = 0;
      label = 17;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 17) {
  L21: while(1) {
   label = 0;
   $40 = ($$reg2mem144$0|0)==(0);
   L23: do {
    if ($40) {
     $41 = ((($argv)) + 4|0);
     $42 = HEAP32[764>>2]|0;
     HEAP32[$42>>2] = $41;
     $43 = HEAP32[$41>>2]|0;
     $44 = ($43|0)==(0|0);
     L25: do {
      if ($44) {
       $negate$09$reg2mem$0 = 0;$res$0$reg2mem$0 = 1;
      } else {
       $45 = ((($42)) + 4|0);
       $$0213$reg2mem138$0 = $41;$$reg2mem136$0 = $argv;$$reg2mem142$0 = $43;$negate$014$reg2mem140$0 = 0;
       while(1) {
        $46 = ((($$0213$reg2mem138$0)) + 4|0);
        $47 = HEAP32[$46>>2]|0;
        $48 = ($47|0)==(0|0);
        if ($48) {
         label = 22;
         break;
        }
        $52 = ((($$reg2mem136$0)) + 12|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = ($53|0)==(0|0);
        if ($54) {
         $$reg2mem130$0 = $$reg2mem142$0;
        } else {
         $55 = ((($$reg2mem136$0)) + 16|0);
         $56 = HEAP32[$55>>2]|0;
         $57 = ($56|0)==(0|0);
         if ($57) {
          __THREW__ = 0;
          (invoke_ii(50,($47|0))|0);
          $58 = __THREW__; __THREW__ = 0;
          if ((($58|0) != 0) & ((threwValue|0) != 0)) { $59 = _testSetjmp(HEAP32[$58>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($59|0) == 0) { _longjmp($58|0, threwValue|0); } tempRet0 = (threwValue); } else { $59 = -1; };
          $60 = tempRet0;
          $cond8 = ($59|0)==(1);
          if ($cond8) {
           $$reg2mem144$0 = $60;
           label = 17;
           continue L21;
          }
          $61 = HEAP32[$45>>2]|0;
          $62 = ((($61)) + 1|0);
          $63 = HEAP8[$62>>0]|0;
          $64 = ($63<<24>>24)==(1);
          if ($64) {
           label = 28;
           break;
          }
          $$pre = HEAP32[$$0213$reg2mem138$0>>2]|0;
          $$reg2mem130$0 = $$pre;
         } else {
          $$reg2mem130$0 = $$reg2mem142$0;
         }
        }
        $71 = HEAP8[$$reg2mem130$0>>0]|0;
        $72 = ($71<<24>>24)==(33);
        if (!($72)) {
         label = 34;
         break;
        }
        $73 = ((($$reg2mem130$0)) + 1|0);
        $74 = HEAP8[$73>>0]|0;
        $75 = ($74<<24>>24)==(0);
        if (!($75)) {
         label = 34;
         break;
        }
        $76 = $negate$014$reg2mem140$0 ^ 1;
        $77 = HEAP32[$46>>2]|0;
        $78 = ($77|0)==(0|0);
        if ($78) {
         $negate$09$reg2mem$0 = $76;$res$0$reg2mem$0 = 1;
         break L25;
        } else {
         $$reg2mem136$0$phi = $$0213$reg2mem138$0;$$0213$reg2mem138$0 = $46;$$reg2mem142$0 = $77;$negate$014$reg2mem140$0 = $76;$$reg2mem136$0 = $$reg2mem136$0$phi;
        }
       }
       if ((label|0) == 22) {
        label = 0;
        $49 = HEAP8[$$reg2mem142$0>>0]|0;
        $50 = ($49<<24>>24)==(0);
        $51 = $50&1;
        $negate$09$reg2mem$0 = $negate$014$reg2mem140$0;$res$0$reg2mem$0 = $51;
        break;
       }
       else if ((label|0) == 28) {
        label = 0;
        HEAP32[$42>>2] = $$0213$reg2mem138$0;
        __THREW__ = 0;
        $65 = (invoke_i(51)|0);
        $66 = __THREW__; __THREW__ = 0;
        if ((($66|0) != 0) & ((threwValue|0) != 0)) { $67 = _testSetjmp(HEAP32[$66>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($67|0) == 0) { _longjmp($66|0, threwValue|0); } tempRet0 = (threwValue); } else { $67 = -1; };
        $68 = tempRet0;
        $cond9 = ($67|0)==(1);
        if ($cond9) {
         $$reg2mem144$0 = $68;
         label = 17;
         continue L21;
        }
        $69 = ($65|0)==(0);
        $70 = $69&1;
        $negate$09$reg2mem$0 = $negate$014$reg2mem140$0;$res$0$reg2mem$0 = $70;
        break;
       }
       else if ((label|0) == 34) {
        label = 0;
        $80 = HEAP32[$42>>2]|0;
        $81 = HEAP32[$80>>2]|0;
        __THREW__ = 0;
        $82 = (invoke_ii(50,($81|0))|0);
        $83 = __THREW__; __THREW__ = 0;
        if ((($83|0) != 0) & ((threwValue|0) != 0)) { $84 = _testSetjmp(HEAP32[$83>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($84|0) == 0) { _longjmp($83|0, threwValue|0); } tempRet0 = (threwValue); } else { $84 = -1; };
        $85 = tempRet0;
        $cond10 = ($84|0)==(1);
        if ($cond10) {
         $$reg2mem144$0 = $85;
         label = 17;
         continue L21;
        }
        __THREW__ = 0;
        $86 = (invoke_ii(52,($82|0))|0);
        $87 = __THREW__; __THREW__ = 0;
        if ((($87|0) != 0) & ((threwValue|0) != 0)) { $88 = _testSetjmp(HEAP32[$87>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($88|0) == 0) { _longjmp($87|0, threwValue|0); } tempRet0 = (threwValue); } else { $88 = -1; };
        $89 = tempRet0;
        $cond11 = ($88|0)==(1);
        if ($cond11) {
         $$reg2mem144$0 = $89;
         label = 17;
         continue L21;
        }
        $90 = ($86|0)==(0);
        $91 = $90&1;
        $92 = HEAP32[$42>>2]|0;
        $93 = HEAP32[$92>>2]|0;
        $94 = ($93|0)==(0|0);
        if ($94) {
         $$reg2mem128$0 = $42;$res$2$reg2mem126$0 = $91;
         break L23;
        }
        $95 = ((($92)) + 4|0);
        HEAP32[$42>>2] = $95;
        $96 = HEAP32[$95>>2]|0;
        $97 = ($96|0)==(0|0);
        if ($97) {
         $$reg2mem128$0 = $42;$res$2$reg2mem126$0 = $91;
         break L23;
        }
        __THREW__ = 0;
        HEAP32[$vararg_buffer148>>2] = $96;
        invoke_vii(47,(6481|0),($vararg_buffer148|0));
        $98 = __THREW__; __THREW__ = 0;
        if ((($98|0) != 0) & ((threwValue|0) != 0)) { $99 = _testSetjmp(HEAP32[$98>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($99|0) == 0) { _longjmp($98|0, threwValue|0); } tempRet0 = (threwValue); } else { $99 = -1; };
        $100 = tempRet0;
        $cond12 = ($99|0)==(1);
        if ($cond12) {
         $$reg2mem144$0 = $100;
         label = 17;
         continue L21;
        }
        $$reg2mem128$0 = $42;$res$2$reg2mem126$0 = 2;
        break L23;
       }
      }
     } while(0);
     $79 = $res$0$reg2mem$0 ^ $negate$09$reg2mem$0;
     $$reg2mem128$0 = $42;$res$2$reg2mem126$0 = $79;
    } else {
     $$pre26 = HEAP32[764>>2]|0;
     $$reg2mem128$0 = $$pre26;$res$2$reg2mem126$0 = $$reg2mem144$0;
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(53,($$reg2mem128$0|0));
   $101 = __THREW__; __THREW__ = 0;
   if ((($101|0) != 0) & ((threwValue|0) != 0)) { $102 = _testSetjmp(HEAP32[$101>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($102|0) == 0) { _longjmp($101|0, threwValue|0); } tempRet0 = (threwValue); } else { $102 = -1; };
   $103 = tempRet0;
   $cond7 = ($102|0)==(1);
   if ($cond7) {
    $$reg2mem144$0 = $103;
    label = 17;
   } else {
    break;
   }
  }
  $$01$reg2mem$0 = $res$2$reg2mem126$0;
 }
 _free(_setjmpTable|0);
 STACKTOP = sp;return ($$01$reg2mem$0|0);
}
function _check_operator($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[764>>2]|0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 6573;
 $2 = ($s|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_index_in_strings(6575,$s)|0);
  $4 = ($3|0)<(0);
  if ($4) {
   $$0 = 39;
  } else {
   $5 = (6699 + ($3<<1)|0);
   HEAP32[$1>>2] = $5;
   $6 = HEAP8[$5>>0]|0;
   $7 = $6&255;
   $$0 = $7;
  }
 }
 return ($$0|0);
}
function _binop() {
 var $$0 = 0, $$1 = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $b1 = 0, $b2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b1 = sp + 76|0;
 $b2 = sp;
 $0 = HEAP32[764>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 HEAP32[$0>>2] = $3;
 $4 = HEAP32[$3>>2]|0;
 (_check_operator($4)|0);
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($7)) + 4|0);
 HEAP32[$0>>2] = $8;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = HEAP32[$7>>2]|0;
  _syntax($11,6501);
  // unreachable;
 }
 $12 = HEAP8[$6>>0]|0;
 $13 = $12&255;
 $14 = (($13) + 228)|0;
 $15 = $14 & 254;
 $16 = ($15>>>0)<(6);
 L4: do {
  if ($16) {
   $17 = (_getn($2)|0);
   $18 = (_getn($9)|0);
   $19 = HEAP8[$6>>0]|0;
   switch ($19<<24>>24) {
   case 28:  {
    $20 = ($17|0)==($18|0);
    $21 = $20&1;
    $$1 = $21;
    break L4;
    break;
   }
   case 29:  {
    $22 = ($17|0)!=($18|0);
    $23 = $22&1;
    $$1 = $23;
    break L4;
    break;
   }
   case 30:  {
    $24 = ($17|0)>=($18|0);
    $25 = $24&1;
    $$1 = $25;
    break L4;
    break;
   }
   case 31:  {
    $26 = ($17|0)>($18|0);
    $27 = $26&1;
    $$1 = $27;
    break L4;
    break;
   }
   case 32:  {
    $28 = ($17|0)<=($18|0);
    $29 = $28&1;
    $$1 = $29;
    break L4;
    break;
   }
   default: {
    $30 = ($17|0)<($18|0);
    $31 = $30&1;
    $$1 = $31;
    break L4;
   }
   }
  } else {
   $32 = (($13) + 234)|0;
   $33 = $32 & 254;
   $34 = ($33>>>0)<(6);
   if ($34) {
    $35 = (_strcmp($2,$9)|0);
    switch ($12<<24>>24) {
    case 24:  {
     $36 = ($35|0)==(0);
     $37 = $36&1;
     $$1 = $37;
     break L4;
     break;
    }
    case 25:  {
     $38 = ($35|0)!=(0);
     $39 = $38&1;
     $$1 = $39;
     break L4;
     break;
    }
    case 26:  {
     $$lobit = $35 >>> 31;
     $$1 = $$lobit;
     break L4;
     break;
    }
    default: {
     $40 = ($35|0)>(0);
     $41 = $40&1;
     $$1 = $41;
     break L4;
    }
    }
   }
   $42 = (_stat($2,$b1)|0);
   $43 = ($42|0)==(0);
   L22: do {
    if ($43) {
     $44 = (_stat($9,$b2)|0);
     $45 = ($44|0)==(0);
     if ($45) {
      $46 = HEAP8[$6>>0]|0;
      switch ($46<<24>>24) {
      case 17:  {
       $47 = ((($b1)) + 56|0);
       $48 = HEAP32[$47>>2]|0;
       $49 = ((($b2)) + 56|0);
       $50 = HEAP32[$49>>2]|0;
       $51 = ($48|0)>($50|0);
       $52 = $51&1;
       $$0 = $52;
       break L22;
       break;
      }
      case 18:  {
       $53 = ((($b1)) + 56|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ((($b2)) + 56|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = ($54|0)<($56|0);
       $58 = $57&1;
       $$0 = $58;
       break L22;
       break;
      }
      default: {
       $59 = HEAP32[$b1>>2]|0;
       $60 = HEAP32[$b2>>2]|0;
       $61 = ($59|0)==($60|0);
       if ($61) {
        $62 = ((($b1)) + 72|0);
        $63 = HEAP32[$62>>2]|0;
        $64 = ((($b2)) + 72|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = ($63|0)==($65|0);
        $68 = $66;
       } else {
        $68 = 0;
       }
       $67 = $68&1;
       $$0 = $67;
       break L22;
      }
      }
     } else {
      $$0 = 0;
     }
    } else {
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function _oexpr($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_aexpr($n)|0);
 $1 = HEAP32[764>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 HEAP32[$1>>2] = $3;
 $4 = HEAP32[$3>>2]|0;
 $5 = (_check_operator($4)|0);
 $6 = ($5|0)==(36);
 $7 = HEAP32[$1>>2]|0;
 if ($6) {
  $8 = ((($7)) + 4|0);
  HEAP32[$1>>2] = $8;
  $9 = HEAP32[$8>>2]|0;
  $10 = (_check_operator($9)|0);
  $11 = (_oexpr($10)|0);
  $12 = $11 | $0;
  $13 = ($12|0)!=(0);
  $14 = $13&1;
  return ($14|0);
 } else {
  $15 = ((($7)) + -4|0);
  HEAP32[$1>>2] = $15;
  return ($0|0);
 }
 return (0)|0;
}
function _aexpr($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_nexpr($n)|0);
 $1 = HEAP32[764>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 HEAP32[$1>>2] = $3;
 $4 = HEAP32[$3>>2]|0;
 $5 = (_check_operator($4)|0);
 $6 = ($5|0)==(35);
 $7 = HEAP32[$1>>2]|0;
 if ($6) {
  $8 = ((($7)) + 4|0);
  HEAP32[$1>>2] = $8;
  $9 = HEAP32[$8>>2]|0;
  $10 = (_check_operator($9)|0);
  $11 = (_aexpr($10)|0);
  $12 = ($11|0)!=(0);
  $13 = ($0|0)!=(0);
  $14 = $13 & $12;
  $15 = $14&1;
  return ($15|0);
 } else {
  $16 = ((($7)) + -4|0);
  HEAP32[$1>>2] = $16;
  return ($0|0);
 }
 return (0)|0;
}
function _nexpr($n) {
 $n = $n|0;
 var $$$i$6$i$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$01$i$i$i = 0, $$i$1$i$i = 0, $$i$10$i$i = 0, $$i$4$i$i = 0, $$i$6$i$i = 0, $$phi$trans$insert$i$i$i$i = 0, $$pre = 0, $$pre$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$01$i$i$i$i = 0, $i$1$i$i = 0, $i$10$i$i = 0, $i$4$i$i = 0, $i$6$i$i = 0, $i$8$i$i = 0, $mode$$i$i$i = 0, $phitmp$i$i = 0, $s$i$i = 0, $st$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $st$i$i$i = sp + 76|0;
 $s$i$i = sp;
 L1: do {
  switch ($n|0) {
  case 34:  {
   $0 = HEAP32[764>>2]|0;
   $1 = HEAP32[$0>>2]|0;
   $2 = ((($1)) + 4|0);
   HEAP32[$0>>2] = $2;
   $3 = HEAP32[$2>>2]|0;
   $4 = (_check_operator($3)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    $6 = HEAP32[$0>>2]|0;
    $7 = ((($6)) + -4|0);
    HEAP32[$0>>2] = $7;
    $$0 = 1;
    break L1;
   } else {
    $8 = (_nexpr($4)|0);
    $9 = ($8|0)==(0);
    $10 = $9&1;
    $$0 = $10;
    break L1;
   }
   break;
  }
  case 0:  {
   _syntax(0,6501);
   // unreachable;
   break;
  }
  default: {
   $11 = ($n|0)==(37);
   $12 = HEAP32[764>>2]|0;
   if ($11) {
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($13)) + 4|0);
    HEAP32[$12>>2] = $14;
    $15 = HEAP32[$14>>2]|0;
    $16 = (_check_operator($15)|0);
    $17 = (_oexpr($16)|0);
    $18 = HEAP32[$12>>2]|0;
    $19 = ((($18)) + 4|0);
    HEAP32[$12>>2] = $19;
    $20 = HEAP32[$19>>2]|0;
    $21 = (_check_operator($20)|0);
    $22 = ($21|0)==(38);
    if ($22) {
     $$0 = $17;
     break L1;
    }
    _syntax(0,6519);
    // unreachable;
   }
   $23 = ((($12)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[$12>>2]|0;
   $26 = ((($25)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (_check_operator($27)|0);
   $29 = ($28|0)==(0);
   if (!($29)) {
    $30 = HEAP32[$12>>2]|0;
    $31 = ((($30)) + 8|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)==(0|0);
    if (!($33)) {
     $34 = HEAP32[$23>>2]|0;
     $35 = ((($34)) + 1|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = ($36<<24>>24)==(1);
     if ($37) {
      $38 = (_binop()|0);
      $$0 = $38;
      break L1;
     }
    }
   }
   $39 = ((($24)) + 1|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = ($40<<24>>24)==(0);
   do {
    if ($41) {
     $42 = HEAP32[$12>>2]|0;
     $43 = ((($42)) + 4|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ($44|0)==(0|0);
     if ($45) {
      $152 = $42;
     } else {
      HEAP32[$12>>2] = $43;
      switch ($n|0) {
      case 22:  {
       $46 = HEAP32[$43>>2]|0;
       $47 = HEAP8[$46>>0]|0;
       $48 = ($47<<24>>24)==(0);
       $49 = $48&1;
       $$0 = $49;
       break L1;
       break;
      }
      case 23:  {
       $50 = HEAP32[$43>>2]|0;
       $51 = HEAP8[$50>>0]|0;
       $52 = ($51<<24>>24)!=(0);
       $53 = $52&1;
       $$0 = $53;
       break L1;
       break;
      }
      default: {
       $54 = ($n|0)==(13);
       $55 = HEAP32[$43>>2]|0;
       if ($54) {
        $56 = (_getn($55)|0);
        $57 = (_isatty($56)|0);
        $$0 = $57;
        break L1;
       }
       $58 = ($n|0)==(11);
       L20: do {
        if ($58) {
         $59 = (_lstat($55,$s$i$i)|0);
         $60 = ($59|0)==(0);
         if ($60) {
          $i$8$i$i = 40960;
          label = 45;
         } else {
          $$0$i$i = 0;
         }
        } else {
         $61 = (_stat($55,$s$i$i)|0);
         $62 = ($61|0)==(0);
         if ($62) {
          $63 = ($n|0)==(4);
          if ($63) {
           $$0$i$i = 1;
          } else {
           $64 = (($n) + 255)|0;
           $65 = $64 & 255;
           $66 = ($65>>>0)<(3);
           if (!($66)) {
            $109 = (($n) + 251)|0;
            $110 = $109 & 254;
            $111 = ($110>>>0)<(6);
            if ($111) {
             $112 = ($n|0)==(6);
             $i$4$i$i = $112 ? 16384 : 32768;
             $113 = ($n|0)==(7);
             $$i$4$i$i = $113 ? 8192 : $i$4$i$i;
             $114 = ($n|0)==(8);
             $i$6$i$i = $114 ? 24576 : $$i$4$i$i;
             $115 = ($n|0)==(9);
             $$i$6$i$i = $115 ? 4096 : $i$6$i$i;
             $116 = ($n|0)==(10);
             $$$i$6$i$i = $116 ? 49152 : $$i$6$i$i;
             $i$8$i$i = $$$i$6$i$i;
             label = 45;
             break;
            }
            $122 = (($n) + 242)|0;
            $123 = $122 & 255;
            $124 = ($123>>>0)<(3);
            if ($124) {
             $125 = ($n|0)==(15);
             $i$10$i$i = $125 ? 1024 : 2048;
             $126 = ($n|0)==(16);
             $$i$10$i$i = $126 ? 512 : $i$10$i$i;
             $127 = ((($s$i$i)) + 12|0);
             $128 = HEAP32[$127>>2]|0;
             $129 = $128 & $$i$10$i$i;
             $130 = ($129|0)!=(0);
             $131 = $130&1;
             $$0$i$i = $131;
             break;
            }
            switch ($n|0) {
            case 12:  {
             $132 = ((($s$i$i)) + 36|0);
             $133 = HEAP32[$132>>2]|0;
             $134 = ($133|0)>(0);
             $135 = $134&1;
             $$0$i$i = $135;
             break L20;
             break;
            }
            case 20:  {
             $136 = ((($s$i$i)) + 20|0);
             $137 = HEAP32[$136>>2]|0;
             $138 = (_geteuid()|0);
             $139 = ($137|0)==($138|0);
             $140 = $139&1;
             $$0$i$i = $140;
             break L20;
             break;
            }
            case 21:  {
             $141 = ((($s$i$i)) + 24|0);
             $142 = HEAP32[$141>>2]|0;
             $143 = (_getegid()|0);
             $144 = ($142|0)==($143|0);
             $145 = $144&1;
             $$0$i$i = $145;
             break L20;
             break;
            }
            default: {
             $$0$i$i = 1;
             break L20;
            }
            }
           }
           $67 = ($n|0)==(2);
           $i$1$i$i = $67 ? 2 : 4;
           $68 = ($n|0)==(3);
           $$i$1$i$i = $68 ? 1 : $i$1$i$i;
           $69 = (_geteuid()|0);
           $70 = (_stat($55,$st$i$i$i)|0);
           $71 = ($70|0)<(0);
           do {
            if ($71) {
             $$0$i$i$i = 0;
            } else {
             $72 = ($69|0)==(0);
             if ($72) {
              if (!($68)) {
               $$0$i$i$i = 1;
               break;
              }
              $73 = ((($st$i$i$i)) + 12|0);
              $74 = HEAP32[$73>>2]|0;
              $75 = $74 & 73;
              $76 = ($75|0)==(0);
              if (!($76)) {
               $$0$i$i$i = 1;
               break;
              }
             }
             $77 = ((($st$i$i$i)) + 20|0);
             $78 = HEAP32[$77>>2]|0;
             $79 = ($78|0)==($69|0);
             if ($79) {
              $80 = $$i$1$i$i << 6;
              $$01$i$i$i = $80;
             } else {
              $81 = ((($st$i$i$i)) + 24|0);
              $82 = HEAP32[$81>>2]|0;
              $83 = (_getgid()|0);
              $84 = ($83|0)==($82|0);
              L47: do {
               if ($84) {
                $$0$i$i$i$i = 0;
               } else {
                $85 = (_getegid()|0);
                $86 = ($85|0)==($82|0);
                if ($86) {
                 $$0$i$i$i$i = 0;
                 break;
                }
                $87 = ((($12)) + 12|0);
                $88 = HEAP32[$87>>2]|0;
                $89 = ($88|0)==(0);
                if ($89) {
                 HEAP32[$87>>2] = 32;
                 $90 = ((($12)) + 8|0);
                 $93 = 32;
                 while(1) {
                  $91 = HEAP32[$90>>2]|0;
                  $92 = $93 << 2;
                  $94 = (_xrealloc($91,$92)|0);
                  HEAP32[$90>>2] = $94;
                  $95 = (_getgroups($93,$94)|0);
                  HEAP32[$87>>2] = $95;
                  $96 = ($95|0)>($93|0);
                  if ($96) {
                   $93 = $95;
                  } else {
                   $97 = $95;
                   break;
                  }
                 }
                } else {
                 $97 = $88;
                }
                $98 = ($97|0)>(0);
                if (!($98)) {
                 $$0$i$i$i$i = 1;
                 break;
                }
                $$phi$trans$insert$i$i$i$i = ((($12)) + 8|0);
                $$pre$i$i$i$i = HEAP32[$$phi$trans$insert$i$i$i$i>>2]|0;
                $i$01$i$i$i$i = 0;
                while(1) {
                 $101 = (($$pre$i$i$i$i) + ($i$01$i$i$i$i<<2)|0);
                 $102 = HEAP32[$101>>2]|0;
                 $103 = ($102|0)==($82|0);
                 $99 = (($i$01$i$i$i$i) + 1)|0;
                 if ($103) {
                  $$0$i$i$i$i = 0;
                  break L47;
                 }
                 $100 = ($99|0)<($97|0);
                 if ($100) {
                  $i$01$i$i$i$i = $99;
                 } else {
                  $$0$i$i$i$i = 1;
                  break;
                 }
                }
               }
              } while(0);
              $104 = $$i$1$i$i << 3;
              $mode$$i$i$i = $$0$i$i$i$i ? $$i$1$i$i : $104;
              $$01$i$i$i = $mode$$i$i$i;
             }
             $105 = ((($st$i$i$i)) + 12|0);
             $106 = HEAP32[$105>>2]|0;
             $107 = $106 & $$01$i$i$i;
             $phitmp$i$i = ($107|0)!=(0);
             $$0$i$i$i = $phitmp$i$i;
            }
           } while(0);
           $108 = $$0$i$i$i&1;
           $$0$i$i = $108;
          }
         } else {
          $$0$i$i = 0;
         }
        }
       } while(0);
       if ((label|0) == 45) {
        $117 = ((($s$i$i)) + 12|0);
        $118 = HEAP32[$117>>2]|0;
        $119 = $118 & 61440;
        $120 = ($119|0)==($i$8$i$i|0);
        $121 = $120&1;
        $$0$i$i = $121;
       }
       $$0 = $$0$i$i;
       break L1;
      }
      }
     }
    } else {
     $146 = HEAP32[$23>>2]|0;
     $147 = ((($146)) + 1|0);
     $148 = HEAP8[$147>>0]|0;
     $149 = ($148<<24>>24)==(1);
     if ($149) {
      $150 = (_binop()|0);
      $$0 = $150;
      break L1;
     } else {
      $$pre = HEAP32[$12>>2]|0;
      $152 = $$pre;
      break;
     }
    }
   } while(0);
   $151 = HEAP32[$152>>2]|0;
   $153 = HEAP8[$151>>0]|0;
   $154 = ($153<<24>>24)!=(0);
   $155 = $154&1;
   $$0 = $155;
  }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _syntax($op,$msg) {
 $op = $op|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($op|0)==(0|0);
 if ($0) {
  label = 4;
 } else {
  $1 = HEAP8[$op>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   label = 4;
  } else {
   HEAP32[$vararg_buffer>>2] = $op;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $msg;
   _bb_error_msg(6566,$vararg_buffer);
  }
 }
 if ((label|0) == 4) {
  HEAP32[$vararg_buffer2>>2] = $msg;
  _bb_error_msg((6570),$vararg_buffer2);
 }
 $3 = HEAP32[764>>2]|0;
 $4 = ((($3)) + 16|0);
 _longjmp(($4|0),2);
 // unreachable;
}
function _getn($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p = sp;
 $0 = (___errno_location()|0);
 HEAP32[$0>>2] = 0;
 $1 = (_strtol($s,$p,10)|0);
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _syntax($s,6542);
  // unreachable;
 }
 $4 = HEAP32[$p>>2]|0;
 $5 = ($4|0)==($s|0);
 if (!($5)) {
  $6 = (_skip_whitespace($4)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(0);
  if ($8) {
   STACKTOP = sp;return ($1|0);
  }
 }
 _syntax($s,6555);
 // unreachable;
 return (0)|0;
}
function _getopt32($argv,$applet_opts,$varargs) {
 $argv = $argv|0;
 $applet_opts = $applet_opts|0;
 $varargs = $varargs|0;
 var $$0 = 0, $$15 = 0, $$alloca_mul = 0, $$applet_opts = 0, $$lcssa261 = 0, $$lcssa50 = 0, $$off = 0, $$off10 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $argc$0 = 0, $argc$0$lcssa = 0, $arglist_current = 0, $arglist_current2 = 0;
 var $arglist_current5 = 0, $arglist_next = 0, $arglist_next3 = 0, $arglist_next6 = 0, $argv$pn = 0, $c$0$lcssa = 0, $c$0106 = 0, $c$190 = 0, $c$2 = 0, $complementary = 0, $count$0102 = 0, $count$0102$lcssa = 0, $expanded = 0, $expanded10 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded16 = 0, $expanded17 = 0, $expanded19 = 0;
 var $expanded20 = 0, $expanded21 = 0, $expanded3 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded9 = 0, $flags$0$lcssa146 = 0, $flags$067 = 0, $flags$067$lcssa = 0, $flags$1 = 0, $flags$2$lcssa = 0, $flags$257 = 0, $i$098 = 0, $l_o$092 = 0, $long_options$0 = 0, $max_arg$0$lcssa144 = 0, $max_arg$070 = 0, $max_arg$070$lcssa = 0, $max_arg$1 = 0;
 var $max_arg$2 = 0, $min_arg$0$lcssa145 = 0, $min_arg$069 = 0, $min_arg$069$lcssa = 0, $min_arg$2 = 0, $on_off$0108 = 0, $on_off$1$lcssa = 0, $on_off$185 = 0, $on_off$259 = 0, $on_off$259$lcssa = 0, $on_off$364 = 0, $on_off$364$lcssa = 0, $on_off$4$lcssa = 0, $on_off$454 = 0, $on_off$553 = 0, $optstr$0101 = 0, $optstr$197 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond14 = 0;
 var $or$cond7 = 0, $p = 0, $pair_switch$0$ph = 0, $pargv$0 = 0, $requires$0$lcssa147 = 0, $requires$066 = 0, $requires$066$lcssa = 0, $requires$1 = 0, $s$0$ph = 0, $s$0107 = 0, $s$1 = 0, $s$2 = 0, $s$368 = 0, $s$4 = 0, $s$6 = 0, $s$6$pn = 0, $s$6$pn$ph = 0, $s$7 = 0, $s$7$lcssa244 = 0, $s$8 = 0;
 var $spec_flgs$071 = 0, $spec_flgs$071$lcssa = 0, $spec_flgs$1 = 0, $spec_flgs$3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $complementary = sp + 24|0;
 $p = sp + 8|0;
 $argc$0 = 1;
 while(1) {
  $0 = (($argv) + ($argc$0<<2)|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = ($1|0)==(0|0);
  $3 = (($argc$0) + 1)|0;
  if ($2) {
   $argc$0$lcssa = $argc$0;
   break;
  } else {
   $argc$0 = $3;
  }
 }
 HEAP32[$p>>2] = $varargs;
 _memset(($complementary|0),0,1056)|0;
 $4 = HEAP8[$applet_opts>>0]|0;
 $5 = ($4<<24>>24)==(33);
 $6 = ((($applet_opts)) + 1|0);
 $$applet_opts = $5 ? $6 : $applet_opts;
 $7 = HEAP8[$$applet_opts>>0]|0;
 switch ($7<<24>>24) {
 case 45: case 43:  {
  $8 = ((($$applet_opts)) + 1|0);
  $$pre = HEAP8[$8>>0]|0;
  $9 = $$pre;$s$0$ph = $8;
  break;
 }
 default: {
  $9 = $7;$s$0$ph = $$applet_opts;
 }
 }
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $c$0$lcssa = 0;
 } else {
  $11 = $9;$c$0106 = 0;$on_off$0108 = $complementary;$s$0107 = $s$0$ph;
  while(1) {
   HEAP8[$on_off$0108>>0] = $11;
   $12 = 1 << $c$0106;
   $13 = ((($on_off$0108)) + 8|0);
   HEAP32[$13>>2] = $12;
   $14 = ((($s$0107)) + 1|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = ($15<<24>>24)==(58);
   if ($16) {
    $arglist_current = HEAP32[$p>>2]|0;
    $17 = $arglist_current;
    $18 = ((0) + 4|0);
    $expanded3 = $18;
    $expanded = (($expanded3) - 1)|0;
    $19 = (($17) + ($expanded))|0;
    $20 = ((0) + 4|0);
    $expanded7 = $20;
    $expanded6 = (($expanded7) - 1)|0;
    $expanded5 = $expanded6 ^ -1;
    $21 = $19 & $expanded5;
    $22 = $21;
    $23 = HEAP32[$22>>2]|0;
    $arglist_next = ((($22)) + 4|0);
    HEAP32[$p>>2] = $arglist_next;
    $24 = ((($on_off$0108)) + 24|0);
    HEAP32[$24>>2] = $23;
    $s$1 = $14;
    while(1) {
     $25 = ((($s$1)) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(58);
     if ($27) {
      $s$1 = $25;
     } else {
      $30 = $26;$s$2 = $25;
      break;
     }
    }
   } else {
    $30 = $15;$s$2 = $14;
   }
   $28 = ((($on_off$0108)) + 32|0);
   $29 = (($c$0106) + 1)|0;
   $31 = ($30<<24>>24)==(0);
   $32 = ($c$0106|0)>(30);
   $or$cond7 = $32 | $31;
   if ($or$cond7) {
    $c$0$lcssa = $29;
    break;
   } else {
    $11 = $30;$c$0106 = $29;$on_off$0108 = $28;$s$0107 = $s$2;
   }
  }
 }
 $33 = HEAP32[768>>2]|0;
 $34 = ($33|0)==(0|0);
 if ($34) {
  $long_options$0 = 780;
 } else {
  $35 = HEAP8[$33>>0]|0;
  $36 = ($35<<24>>24)==(0);
  if ($36) {
   $37 = STACKTOP; STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
   ;HEAP32[$37>>2]=0|0;HEAP32[$37+4>>2]=0|0;HEAP32[$37+8>>2]=0|0;HEAP32[$37+12>>2]=0|0;
   $246 = $37;$48 = $37;
  } else {
   $count$0102 = 1;$optstr$0101 = $33;
   while(1) {
    $38 = (_strlen($optstr$0101)|0);
    $39 = (($38) + 3)|0;
    $40 = (($optstr$0101) + ($39)|0);
    $41 = (($count$0102) + 1)|0;
    $42 = HEAP8[$40>>0]|0;
    $43 = ($42<<24>>24)==(0);
    if ($43) {
     $$lcssa261 = $41;$count$0102$lcssa = $count$0102;
     break;
    } else {
     $count$0102 = $41;$optstr$0101 = $40;
    }
   }
   $44 = $$lcssa261 << 4;
   $$alloca_mul = $44;
   $45 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
   _memset(($45|0),0,($44|0))|0;
   $46 = ($count$0102$lcssa|0)==(0);
   if ($46) {
    $246 = $45;$48 = $45;
   } else {
    $64 = $count$0102$lcssa;$i$098 = 0;$optstr$197 = $33;
    while(1) {
     $50 = (($45) + ($i$098<<4)|0);
     HEAP32[$50>>2] = $optstr$197;
     $51 = (_strlen($optstr$197)|0);
     $52 = (($51) + 1)|0;
     $53 = (($optstr$197) + ($52)|0);
     $54 = ((($53)) + 1|0);
     $55 = HEAP8[$53>>0]|0;
     $56 = $55&255;
     $57 = (((($45) + ($i$098<<4)|0)) + 4|0);
     HEAP32[$57>>2] = $56;
     $58 = ((($54)) + 1|0);
     $59 = HEAP8[$54>>0]|0;
     $60 = $59&255;
     $61 = (((($45) + ($i$098<<4)|0)) + 12|0);
     HEAP32[$61>>2] = $60;
     $62 = (($i$098) + 1)|0;
     $63 = (($64) + -1)|0;
     $65 = ($63|0)==(0);
     if ($65) {
      $246 = $45;$48 = $45;
      break;
     } else {
      $64 = $63;$i$098 = $62;$optstr$197 = $58;
     }
    }
   }
  }
  $47 = HEAP32[$48>>2]|0;
  $49 = ($47|0)==(0|0);
  L26: do {
   if (!($49)) {
    $c$190 = $c$0$lcssa;$l_o$092 = $246;
    while(1) {
     $66 = ((($l_o$092)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)==(0|0);
     L29: do {
      if ($68) {
       $69 = HEAP8[$complementary>>0]|0;
       $70 = ($69<<24>>24)==(0);
       if ($70) {
        $$lcssa50 = $complementary;$on_off$1$lcssa = $complementary;
       } else {
        $71 = ((($l_o$092)) + 12|0);
        $72 = HEAP32[$71>>2]|0;
        $74 = $69;$on_off$185 = $complementary;
        while(1) {
         $73 = $74&255;
         $75 = ($73|0)==($72|0);
         if ($75) {
          $c$2 = $c$190;
          break L29;
         }
         $76 = ((($on_off$185)) + 32|0);
         $77 = HEAP8[$76>>0]|0;
         $78 = ($77<<24>>24)==(0);
         if ($78) {
          $$lcssa50 = $76;$on_off$1$lcssa = $76;
          break;
         } else {
          $74 = $77;$on_off$185 = $76;
         }
        }
       }
       $79 = ($c$190|0)>(31);
       if ($79) {
        break L26;
       }
       $80 = ((($l_o$092)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = $81&255;
       HEAP8[$$lcssa50>>0] = $82;
       $83 = 1 << $c$190;
       $84 = ((($on_off$1$lcssa)) + 8|0);
       HEAP32[$84>>2] = $83;
       $85 = ((($l_o$092)) + 4|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = ($86|0)==(0);
       if (!($87)) {
        $arglist_current2 = HEAP32[$p>>2]|0;
        $88 = $arglist_current2;
        $89 = ((0) + 4|0);
        $expanded10 = $89;
        $expanded9 = (($expanded10) - 1)|0;
        $90 = (($88) + ($expanded9))|0;
        $91 = ((0) + 4|0);
        $expanded14 = $91;
        $expanded13 = (($expanded14) - 1)|0;
        $expanded12 = $expanded13 ^ -1;
        $92 = $90 & $expanded12;
        $93 = $92;
        $94 = HEAP32[$93>>2]|0;
        $arglist_next3 = ((($93)) + 4|0);
        HEAP32[$p>>2] = $arglist_next3;
        $95 = ((($on_off$1$lcssa)) + 24|0);
        HEAP32[$95>>2] = $94;
       }
       $96 = (($c$190) + 1)|0;
       $c$2 = $96;
      } else {
       $c$2 = $c$190;
      }
     } while(0);
     $97 = ((($l_o$092)) + 16|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = ($98|0)==(0|0);
     if ($99) {
      break;
     } else {
      $c$190 = $c$2;$l_o$092 = $97;
     }
    }
   }
  } while(0);
  HEAP32[768>>2] = 0;
  $long_options$0 = $246;
 }
 $100 = HEAP32[772>>2]|0;
 $101 = ($100|0)==(0|0);
 L44: do {
  if ($101) {
   HEAP32[772>>2] = 0;
   $flags$0$lcssa146 = 0;$max_arg$0$lcssa144 = -1;$min_arg$0$lcssa145 = 0;$requires$0$lcssa147 = 0;
  } else {
   $flags$067 = 0;$max_arg$070 = -1;$min_arg$069 = 0;$requires$066 = 0;$s$368 = $100;$spec_flgs$071 = 0;
   L46: while(1) {
    $102 = HEAP8[$s$368>>0]|0;
    L48: do {
     switch ($102<<24>>24) {
     case 0:  {
      $flags$067$lcssa = $flags$067;$max_arg$070$lcssa = $max_arg$070;$min_arg$069$lcssa = $min_arg$069;$requires$066$lcssa = $requires$066;$spec_flgs$071$lcssa = $spec_flgs$071;
      break L46;
      break;
     }
     case 58:  {
      $flags$1 = $flags$067;$max_arg$2 = $max_arg$070;$min_arg$2 = $min_arg$069;$requires$1 = $requires$066;$s$8 = $s$368;$spec_flgs$3 = $spec_flgs$071;
      break;
     }
     default: {
      $103 = ((($s$368)) + 1|0);
      $104 = HEAP8[$103>>0]|0;
      $105 = $104&255;
      switch ($102<<24>>24) {
      case 63:  {
       $$off10 = (($104) + -48)<<24>>24;
       $108 = ($$off10&255)>(9);
       $109 = (($105) + -48)|0;
       $s$4 = $108 ? $s$368 : $103;
       $max_arg$1 = $108 ? $max_arg$070 : $109;
       $110 = $108&1;
       $spec_flgs$1 = $110 | $spec_flgs$071;
       $flags$1 = $flags$067;$max_arg$2 = $max_arg$1;$min_arg$2 = $min_arg$069;$requires$1 = $requires$066;$s$8 = $s$4;$spec_flgs$3 = $spec_flgs$1;
       break L48;
       break;
      }
      case 45:  {
       $$off = (($104) + -48)<<24>>24;
       $111 = ($$off&255)>(9);
       if (!($111)) {
        $115 = (($105) + -48)|0;
        $flags$1 = $flags$067;$max_arg$2 = $max_arg$070;$min_arg$2 = $115;$requires$1 = $requires$066;$s$8 = $103;$spec_flgs$3 = $spec_flgs$071;
        break L48;
       }
       $112 = ($104<<24>>24)==(45);
       if ($112) {
        $113 = $spec_flgs$071 | 4;
        $flags$1 = $flags$067;$max_arg$2 = $max_arg$070;$min_arg$2 = $min_arg$069;$requires$1 = $requires$066;$s$8 = $103;$spec_flgs$3 = $113;
        break L48;
       } else {
        $114 = $spec_flgs$071 | 2;
        $flags$1 = $flags$067;$max_arg$2 = $max_arg$070;$min_arg$2 = $min_arg$069;$requires$1 = $requires$066;$s$8 = $s$368;$spec_flgs$3 = $114;
        break L48;
       }
       break;
      }
      case 61:  {
       $116 = (($105) + -48)|0;
       $flags$1 = $flags$067;$max_arg$2 = $116;$min_arg$2 = $116;$requires$1 = $requires$066;$s$8 = $103;$spec_flgs$3 = $spec_flgs$071;
       break L48;
       break;
      }
      default: {
       $106 = HEAP8[$complementary>>0]|0;
       $107 = ($106<<24>>24)==(0);
       if ($107) {
        $123 = $102;
        label = 42;
        break L46;
       } else {
        $117 = $106;$on_off$259 = $complementary;
       }
       while(1) {
        $118 = ($117<<24>>24)==($102<<24>>24);
        if ($118) {
         $on_off$259$lcssa = $on_off$259;
         break;
        }
        $119 = ((($on_off$259)) + 32|0);
        $120 = HEAP8[$119>>0]|0;
        $121 = ($120<<24>>24)==(0);
        if ($121) {
         $123 = $102;
         label = 42;
         break L46;
        } else {
         $117 = $120;$on_off$259 = $119;
        }
       }
       L56: do {
        switch ($104<<24>>24) {
        case 58:  {
         $124 = ((($s$368)) + 2|0);
         $125 = HEAP8[$124>>0]|0;
         $126 = ($125<<24>>24)==(58);
         if ($126) {
          $127 = ((($on_off$259$lcssa)) + 4|0);
          HEAP32[$127>>2] = 1;
          $flags$1 = $flags$067;$max_arg$2 = $max_arg$070;$min_arg$2 = $min_arg$069;$requires$1 = $requires$066;$s$8 = $s$368;$spec_flgs$3 = $spec_flgs$071;
          break L48;
         } else {
          label = 48;
         }
         break;
        }
        case 43:  {
         $128 = ((($s$368)) + 2|0);
         $129 = HEAP8[$128>>0]|0;
         switch ($129<<24>>24) {
         case 0: case 58:  {
          break;
         }
         default: {
          break L56;
         }
         }
         $130 = ((($on_off$259$lcssa)) + 4|0);
         HEAP32[$130>>2] = 2;
         $flags$1 = $flags$067;$max_arg$2 = $max_arg$070;$min_arg$2 = $min_arg$069;$requires$1 = $requires$066;$s$8 = $103;$spec_flgs$3 = $spec_flgs$071;
         break L48;
         break;
        }
        case 0:  {
         label = 48;
         break;
        }
        case 45:  {
         $134 = ((($s$368)) + 2|0);
         $135 = HEAP8[$134>>0]|0;
         switch ($135<<24>>24) {
         case 0: case 58:  {
          break;
         }
         default: {
          break L56;
         }
         }
         $136 = ((($on_off$259$lcssa)) + 8|0);
         $137 = HEAP32[$136>>2]|0;
         $138 = $137 | $flags$067;
         $139 = ((($on_off$259$lcssa)) + 16|0);
         $140 = HEAP32[$139>>2]|0;
         $141 = $140 | $137;
         HEAP32[$139>>2] = $141;
         $flags$1 = $138;$max_arg$2 = $max_arg$070;$min_arg$2 = $min_arg$069;$requires$1 = $requires$066;$s$8 = $103;$spec_flgs$3 = $spec_flgs$071;
         break L48;
         break;
        }
        default: {
        }
        }
       } while(0);
       if ((label|0) == 48) {
        label = 0;
        $131 = ((($on_off$259$lcssa)) + 8|0);
        $132 = HEAP32[$131>>2]|0;
        $133 = $132 | $requires$066;
        $flags$1 = $flags$067;$max_arg$2 = $max_arg$070;$min_arg$2 = $min_arg$069;$requires$1 = $133;$s$8 = $s$368;$spec_flgs$3 = $spec_flgs$071;
        break L48;
       }
       $142 = ($104<<24>>24)==($102<<24>>24);
       if ($142) {
        $arglist_current5 = HEAP32[$p>>2]|0;
        $143 = $arglist_current5;
        $144 = ((0) + 4|0);
        $expanded17 = $144;
        $expanded16 = (($expanded17) - 1)|0;
        $145 = (($143) + ($expanded16))|0;
        $146 = ((0) + 4|0);
        $expanded21 = $146;
        $expanded20 = (($expanded21) - 1)|0;
        $expanded19 = $expanded20 ^ -1;
        $147 = $145 & $expanded19;
        $148 = $147;
        $149 = HEAP32[$148>>2]|0;
        $arglist_next6 = ((($148)) + 4|0);
        HEAP32[$p>>2] = $arglist_next6;
        $150 = ((($on_off$259$lcssa)) + 28|0);
        HEAP32[$150>>2] = $149;
        $s$6 = $103;
       } else {
        $s$6 = $s$368;
       }
       $151 = ((($on_off$259$lcssa)) + 8|0);
       $152 = ((($on_off$259$lcssa)) + 20|0);
       $153 = ((($on_off$259$lcssa)) + 12|0);
       $154 = ((($on_off$259$lcssa)) + 16|0);
       $pair_switch$0$ph = $151;$s$6$pn$ph = $s$6;
       L69: while(1) {
        $s$6$pn = $s$6$pn$ph;
        L71: while(1) {
         $s$7 = ((($s$6$pn)) + 1|0);
         $155 = HEAP8[$s$7>>0]|0;
         switch ($155<<24>>24) {
         case 0: case 58:  {
          $flags$1 = $flags$067;$max_arg$2 = $max_arg$070;$min_arg$2 = $min_arg$069;$requires$1 = $requires$066;$s$8 = $s$6$pn;$spec_flgs$3 = $spec_flgs$071;
          break L48;
          break;
         }
         case 63:  {
          $pair_switch$0$ph = $152;$s$6$pn$ph = $s$7;
          continue L69;
          break;
         }
         case 45:  {
          $s$7$lcssa244 = $s$7;
          break L71;
          break;
         }
         default: {
          $157 = $106;$on_off$364 = $complementary;
         }
         }
         while(1) {
          $158 = ($157<<24>>24)==($155<<24>>24);
          if ($158) {
           $on_off$364$lcssa = $on_off$364;
           break;
          }
          $163 = ((($on_off$364)) + 32|0);
          $164 = HEAP8[$163>>0]|0;
          $165 = ($164<<24>>24)==(0);
          if ($165) {
           $s$6$pn = $s$7;
           continue L71;
          } else {
           $157 = $164;$on_off$364 = $163;
          }
         }
         $159 = ((($on_off$364$lcssa)) + 8|0);
         $160 = HEAP32[$159>>2]|0;
         $161 = HEAP32[$pair_switch$0$ph>>2]|0;
         $162 = $161 | $160;
         HEAP32[$pair_switch$0$ph>>2] = $162;
         $s$6$pn = $s$7;
        }
        $156 = ($pair_switch$0$ph|0)==($153|0);
        $$15 = $156 ? $154 : $153;
        $pair_switch$0$ph = $$15;$s$6$pn$ph = $s$7$lcssa244;
       }
      }
      }
     }
     }
    } while(0);
    $166 = ((($s$8)) + 1|0);
    $flags$067 = $flags$1;$max_arg$070 = $max_arg$2;$min_arg$069 = $min_arg$2;$requires$066 = $requires$1;$s$368 = $166;$spec_flgs$071 = $spec_flgs$3;
   }
   if ((label|0) == 42) {
    $122 = $123&255;
    HEAP32[$vararg_buffer>>2] = $122;
    _bb_error_msg_and_die(6779,$vararg_buffer);
    // unreachable;
   }
   HEAP32[772>>2] = 0;
   $167 = $spec_flgs$071$lcssa & 6;
   $168 = ($167|0)==(0);
   if ($168) {
    $flags$0$lcssa146 = $flags$067$lcssa;$max_arg$0$lcssa144 = $max_arg$070$lcssa;$min_arg$0$lcssa145 = $min_arg$069$lcssa;$requires$0$lcssa147 = $requires$066$lcssa;
   } else {
    $169 = $spec_flgs$071$lcssa & 2;
    $170 = ($169|0)==(0);
    $argv$pn = $argv;
    while(1) {
     $pargv$0 = ((($argv$pn)) + 4|0);
     $171 = HEAP32[$pargv$0>>2]|0;
     $172 = ($171|0)==(0|0);
     if ($172) {
      $flags$0$lcssa146 = $flags$067$lcssa;$max_arg$0$lcssa144 = $max_arg$070$lcssa;$min_arg$0$lcssa145 = $min_arg$069$lcssa;$requires$0$lcssa147 = $requires$066$lcssa;
      break L44;
     }
     $173 = HEAP8[$171>>0]|0;
     switch ($173<<24>>24) {
     case 0: case 45:  {
      break;
     }
     default: {
      $174 = (_strlen($171)|0);
      $175 = (($174) + 2)|0;
      $176 = (_xmalloc($175)|0);
      HEAP8[$176>>0] = 45;
      $177 = ((($176)) + 1|0);
      $178 = HEAP32[$pargv$0>>2]|0;
      (_strcpy($177,$178)|0);
      HEAP32[$pargv$0>>2] = $176;
     }
     }
     if ($170) {
      $flags$0$lcssa146 = $flags$067$lcssa;$max_arg$0$lcssa144 = $max_arg$070$lcssa;$min_arg$0$lcssa145 = $min_arg$069$lcssa;$requires$0$lcssa147 = $requires$066$lcssa;
      break L44;
     } else {
      $argv$pn = $pargv$0;
     }
    }
   }
  }
 } while(0);
 HEAP32[1092>>2] = 1;
 $179 = (_getopt_long($argc$0$lcssa,$argv,$$applet_opts,$long_options$0,0)|0);
 $180 = ($179|0)==(-1);
 L99: do {
  if ($180) {
   $flags$2$lcssa = $flags$0$lcssa146;
   label = 69;
  } else {
   $183 = $179;$flags$257 = $flags$0$lcssa146;
   while(1) {
    $181 = HEAP8[$complementary>>0]|0;
    $182 = $183&255;
    $184 = ($181<<24>>24)==($182<<24>>24);
    if ($184) {
     $on_off$4$lcssa = $complementary;
    } else {
     $187 = $181;$on_off$454 = $complementary;
     while(1) {
      $188 = ($187<<24>>24)==(0);
      if ($188) {
       label = 89;
       break L99;
      }
      $189 = ((($on_off$454)) + 32|0);
      $190 = HEAP8[$189>>0]|0;
      $191 = ($190<<24>>24)==($182<<24>>24);
      if ($191) {
       $on_off$4$lcssa = $189;
       break;
      } else {
       $187 = $190;$on_off$454 = $189;
      }
     }
    }
    $192 = ((($on_off$4$lcssa)) + 16|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = $193 & $flags$257;
    $195 = ($194|0)==(0);
    if (!($195)) {
     label = 89;
     break L99;
    }
    $196 = ((($on_off$4$lcssa)) + 8|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = ((($on_off$4$lcssa)) + 12|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = $199 & $197;
    $201 = $199 ^ -1;
    $202 = $200 ^ $201;
    $203 = $202 & $flags$257;
    $204 = $200 ^ $197;
    $205 = $203 | $204;
    $206 = $205 ^ $200;
    $207 = ((($on_off$4$lcssa)) + 28|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = ($208|0)==(0|0);
    if (!($209)) {
     $210 = HEAP32[$208>>2]|0;
     $211 = (($210) + 1)|0;
     HEAP32[$208>>2] = $211;
    }
    $212 = HEAP32[1112>>2]|0;
    $213 = ($212|0)==(0|0);
    L111: do {
     if (!($213)) {
      $214 = ((($on_off$4$lcssa)) + 4|0);
      $215 = HEAP32[$214>>2]|0;
      switch ($215|0) {
      case 1:  {
       $216 = ((($on_off$4$lcssa)) + 24|0);
       $217 = HEAP32[$216>>2]|0;
       _llist_add_to_end($217,$212);
       break L111;
       break;
      }
      case 2:  {
       $220 = (_xatoi_positive($212)|0);
       $221 = ((($on_off$4$lcssa)) + 24|0);
       $222 = HEAP32[$221>>2]|0;
       HEAP32[$222>>2] = $220;
       break L111;
       break;
      }
      default: {
       $223 = ((($on_off$4$lcssa)) + 24|0);
       $224 = HEAP32[$223>>2]|0;
       $225 = ($224|0)==(0|0);
       if ($225) {
        break L111;
       }
       HEAP32[$224>>2] = $212;
       break L111;
      }
      }
     }
    } while(0);
    $218 = (_getopt_long($argc$0$lcssa,$argv,$$applet_opts,$long_options$0,0)|0);
    $219 = ($218|0)==(-1);
    if ($219) {
     $flags$2$lcssa = $206;
     label = 69;
     break;
    } else {
     $183 = $218;$flags$257 = $206;
    }
   }
  }
 } while(0);
 L119: do {
  if ((label|0) == 69) {
   $185 = HEAP8[$complementary>>0]|0;
   $186 = ($185<<24>>24)==(0);
   if (!($186)) {
    $on_off$553 = $complementary;
    while(1) {
     $226 = ((($on_off$553)) + 20|0);
     $227 = HEAP32[$226>>2]|0;
     $228 = ($227|0)==(0);
     if (!($228)) {
      $229 = ((($on_off$553)) + 8|0);
      $230 = HEAP32[$229>>2]|0;
      $231 = $230 & $flags$2$lcssa;
      $232 = ($231|0)!=(0);
      $233 = $227 & $flags$2$lcssa;
      $234 = ($233|0)==(0);
      $or$cond = $234 & $232;
      if ($or$cond) {
       label = 89;
       break L119;
      }
     }
     $235 = ((($on_off$553)) + 32|0);
     $236 = HEAP8[$235>>0]|0;
     $237 = ($236<<24>>24)==(0);
     if ($237) {
      break;
     } else {
      $on_off$553 = $235;
     }
    }
   }
   $238 = ($requires$0$lcssa147|0)!=(0);
   $239 = $flags$2$lcssa & $requires$0$lcssa147;
   $240 = ($239|0)==(0);
   $or$cond13 = $238 & $240;
   if ($or$cond13) {
    label = 89;
   } else {
    $241 = HEAP32[1092>>2]|0;
    $242 = (($argc$0$lcssa) - ($241))|0;
    $243 = ($242|0)<($min_arg$0$lcssa145|0);
    if ($243) {
     label = 89;
    } else {
     $244 = ($max_arg$0$lcssa144|0)>(-1);
     $245 = ($242|0)>($max_arg$0$lcssa144|0);
     $or$cond14 = $244 & $245;
     if ($or$cond14) {
      label = 89;
     } else {
      HEAP32[776>>2] = $flags$2$lcssa;
      $$0 = $flags$2$lcssa;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 89) {
  if ($5) {
   $$0 = -1;
  } else {
   _bb_show_usage();
   // unreachable;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _new_line_input_t($flags) {
 $flags = $flags|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_xzalloc(1052)|0);
 HEAP32[$0>>2] = $flags;
 $1 = ((($0)) + 16|0);
 HEAP32[$1>>2] = 255;
 return ($0|0);
}
function _size_from_HISTFILESIZE($hp) {
 $hp = $hp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $size$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($hp|0)==(0|0);
 if ($0) {
  $size$0 = 255;
  label = 4;
 } else {
  $1 = (_atoi($hp)|0);
  $2 = ($1|0)<(1);
  if ($2) {
   $$0 = 1;
  } else {
   $3 = ($1|0)>(255);
   if ($3) {
    $$0 = 255;
   } else {
    $size$0 = $1;
    label = 4;
   }
  }
 }
 if ((label|0) == 4) {
  $$0 = $size$0;
 }
 return ($$0|0);
}
function _show_history($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i$01 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($st|0)==(0|0);
 if (!($0)) {
  $1 = ((($st)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)>(0);
  if ($3) {
   $i$01 = 0;
   while(1) {
    $4 = (((($st)) + 28|0) + ($i$01<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    HEAP32[$vararg_buffer>>2] = $i$01;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $5;
    (_printf(6790,$vararg_buffer)|0);
    $6 = (($i$01) + 1)|0;
    $7 = HEAP32[$1>>2]|0;
    $8 = ($6|0)<($7|0);
    if ($8) {
     $i$01 = $6;
    } else {
     break;
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _read_line_input($st,$prompt,$command,$maxsize,$timeout) {
 $st = $st|0;
 $prompt = $prompt|0;
 $command = $command|0;
 $maxsize = $maxsize|0;
 $timeout = $timeout|0;
 var $$$i = 0, $$0 = 0, $$0$i = 0, $$1$i = 0, $$3$i = 0, $$6 = 0, $$lcssa269 = 0, $$lcssa270 = 0, $$lcssa275 = 0, $$lcssa276 = 0, $$lcssa277 = 0, $$lcssa278 = 0, $$lcssa279 = 0, $$maxsize = 0, $$neg17 = 0, $$off$i = 0, $$phi$trans$insert$i$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$13 = 0;
 var $$pre$i$i = 0, $$pre115 = 0, $$pre3$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $h$0$i = 0;
 var $h$0$i$lcssa = 0, $h$1$i = 0, $h$2$i = 0, $h$3$i = 0, $i$01$i = 0, $i$01$i$i = 0, $i$01$i$i$i = 0, $i$1$i = 0, $ic$0 = 0, $ic$0$i = 0, $ic$0$i$lcssa = 0, $ic$0$lcssa = 0, $ic$0$lcssa286 = 0, $ic$0$lcssa299 = 0, $ic$0$lcssa300 = 0, $ic$0$off = 0, $ic$0304 = 0, $ic$1$i = 0, $ic$2$i = 0, $ic$3$i = 0;
 var $ic$4$i = 0, $ic$4$i$lcssa263 = 0, $ic$4$i267 = 0, $initial_settings = 0, $lastWasTab = 0, $len$0 = 0, $match_buf$i = 0, $match_buf_len$1$i = 0, $match_buf_len$2$i = 0, $match_buf_len$2$i$lcssa = 0, $match_buf_len$3$i = 0, $match_buf_len$4$i = 0, $match_buf_len$5$i = 0, $matched_history_line$0$i = 0, $matched_history_line$0$i$lcssa280 = 0, $new_settings = 0, $or$cond = 0, $or$cond9 = 0, $phitmp = 0, $read_key_buffer = 0;
 var $read_key_buffer$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $width$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $match_buf$i = sp + 216|0;
 $read_key_buffer$i = sp + 200|0;
 $width$i = sp + 176|0;
 $lastWasTab = sp + 172|0;
 $initial_settings = sp + 112|0;
 $new_settings = sp + 52|0;
 $read_key_buffer = sp + 184|0;
 HEAP32[$lastWasTab>>2] = 0;
 $0 = (_xzalloc(60)|0);
 HEAP32[796>>2] = $0;
 /* asm() memory 'barrier' */;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 80;
 $2 = HEAP32[796>>2]|0;
 $3 = ((($2)) + 48|0);
 HEAP32[$3>>2] = 13904;
 $4 = (_tcgetattr(0,$initial_settings)|0);
 $5 = ($4|0)<(0);
 if ($5) {
  label = 3;
 } else {
  $6 = ((($initial_settings)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 10;
  $9 = ($8|0)==(2);
  if ($9) {
   label = 3;
  } else {
   $14 = ($maxsize|0)>(1024);
   $$maxsize = $14 ? 1024 : $maxsize;
   $15 = ((($2)) + 32|0);
   HEAP32[$15>>2] = $$maxsize;
   $16 = ($st|0)!=(0|0);
   $17 = $16 ? $st : 20;
   HEAP32[$2>>2] = $17;
   $18 = ((($17)) + 24|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0|0);
   if ($20) {
    $25 = $17;
   } else {
    $21 = ((($17)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0);
    if ($23) {
     _load_history($17);
     $$pre = HEAP32[$2>>2]|0;
     $25 = $$pre;
    } else {
     $25 = $17;
    }
   }
   $24 = HEAP32[$25>>2]|0;
   $26 = $24 & 1;
   $27 = ($26|0)==(0);
   if (!($27)) {
    $28 = ((($25)) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ((($25)) + 12|0);
    HEAP32[$30>>2] = $29;
   }
   $31 = ((($2)) + 16|0);
   HEAP32[$31>>2] = 0;
   $32 = ((($2)) + 28|0);
   HEAP32[$32>>2] = 0;
   $33 = ((($2)) + 36|0);
   HEAP32[$33>>2] = $command;
   HEAP8[$command>>0] = 0;
   dest=$new_settings; src=$initial_settings; stop=dest+60|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $34 = ((($new_settings)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $35 & -76;
   HEAP32[$34>>2] = $36;
   $37 = ((($new_settings)) + 23|0);
   HEAP8[$37>>0] = 1;
   $38 = ((($new_settings)) + 22|0);
   HEAP8[$38>>0] = 0;
   (_tcsetattr_stdin_TCSANOW($new_settings)|0);
   $39 = (_geteuid()|0);
   $40 = (_getpwuid(($39|0))|0);
   $41 = ($40|0)==(0|0);
   if (!($41)) {
    $42 = HEAP32[$40>>2]|0;
    $43 = (_xstrdup($42)|0);
    $44 = ((($2)) + 44|0);
    HEAP32[$44>>2] = $43;
    $45 = ((($40)) + 20|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (_xstrdup($46)|0);
    HEAP32[$3>>2] = $47;
   }
   _parse_and_put_prompt($prompt);
   $48 = ((($2)) + 8|0);
   HEAP32[$48>>2] = 0;
   $49 = (___errno_location()|0);
   $50 = HEAP32[$49>>2]|0;
   (_get_terminal_width_height(0,$width$i,0)|0);
   $51 = HEAP32[$width$i>>2]|0;
   $52 = ((($2)) + 4|0);
   HEAP32[$52>>2] = $51;
   HEAP32[$49>>2] = $50;
   HEAP8[$read_key_buffer>>0] = 0;
   $53 = HEAP32[796>>2]|0;
   $54 = ((($53)) + 40|0);
   $55 = ((($53)) + 20|0);
   $56 = ((($53)) + 16|0);
   $57 = ((($53)) + 28|0);
   $58 = ((($53)) + 24|0);
   $59 = ((($53)) + 36|0);
   $60 = ((($53)) + 32|0);
   $61 = ((($initial_settings)) + 17|0);
   $62 = ((($initial_settings)) + 21|0);
   $63 = (($$maxsize) + -2)|0;
   L14: while(1) {
    (_fflush_all()|0);
    $64 = (_read_key(0,$read_key_buffer,$timeout)|0);
    $65 = tempRet0;
    $ic$0 = $64;
    L16: while(1) {
     switch ($ic$0|0) {
     case 13: case 10:  {
      label = 97;
      break L14;
      break;
     }
     case -1:  {
      label = 88;
      break L14;
      break;
     }
     case 1:  {
      label = 17;
      break L16;
      break;
     }
     case 2:  {
      label = 18;
      break L16;
      break;
     }
     case 5:  {
      label = 19;
      break L16;
      break;
     }
     case 6:  {
      label = 20;
      break L16;
      break;
     }
     case 127: case 8:  {
      $ic$0$lcssa286 = $ic$0;
      label = 22;
      break L16;
      break;
     }
     case -9:  {
      label = 23;
      break L16;
      break;
     }
     case 9:  {
      label = 24;
      break L16;
      break;
     }
     case 11:  {
      label = 25;
      break L16;
      break;
     }
     case 12:  {
      label = 26;
      break L16;
      break;
     }
     case 14:  {
      label = 27;
      break L16;
      break;
     }
     case 16:  {
      label = 28;
      break L16;
      break;
     }
     case 21:  {
      label = 29;
      break L16;
      break;
     }
     case 23:  {
      label = 16;
      break L16;
      break;
     }
     case -2:  {
      label = 56;
      break L16;
      break;
     }
     case -3:  {
      label = 58;
      break L16;
      break;
     }
     case -4:  {
      label = 60;
      break L16;
      break;
     }
     case -5:  {
      label = 62;
      break L16;
      break;
     }
     case -37: case -69:  {
      $ic$0$lcssa299 = $ic$0;
      label = 63;
      break L16;
      break;
     }
     case -36: case -68:  {
      $ic$0$lcssa300 = $ic$0;
      label = 71;
      break L16;
      break;
     }
     case -6:  {
      label = 81;
      break L16;
      break;
     }
     case -7:  {
      label = 82;
      break L16;
      break;
     }
     case 18:  {
      break;
     }
     default: {
      $ic$0$lcssa = $ic$0;
      label = 83;
      break L16;
     }
     }
     HEAP8[$read_key_buffer$i>>0] = 0;
     HEAP8[$match_buf$i>>0] = 0;
     $112 = HEAP32[$54>>2]|0;
     $113 = HEAP32[$55>>2]|0;
     $h$1$i = 0;$ic$1$i = 0;$match_buf_len$3$i = 0;$matched_history_line$0$i = 0;
     L19: while(1) {
      HEAP32[$vararg_buffer3>>2] = $match_buf$i;
      $150 = (_xasprintf(6806,$vararg_buffer3)|0);
      HEAP32[$54>>2] = $150;
      $151 = (_strlen($150)|0);
      HEAP32[$55>>2] = $151;
      $$0$i = 9;$h$2$i = $h$1$i;$ic$2$i = $ic$1$i;$match_buf_len$4$i = $match_buf_len$3$i;
      while(1) {
       switch ($$0$i|0) {
       case 0:  {
        $h$3$i = $h$2$i;$ic$3$i = $ic$2$i;$match_buf_len$5$i = $match_buf_len$4$i;
        label = 48;
        break;
       }
       case 9:  {
        $154 = HEAP32[$56>>2]|0;
        $155 = HEAP32[$57>>2]|0;
        $156 = HEAP32[$58>>2]|0;
        $157 = (($155) - ($156))|0;
        _redraw($154,$157);
        $$1$i = 0;$ic$4$i = $ic$2$i;
        label = 51;
        break;
       }
       default: {
        $$1$i = $$0$i;$ic$4$i = $ic$2$i;
        label = 51;
       }
       }
       L25: while(1) {
        if ((label|0) == 48) {
         label = 0;
         $152 = (($h$3$i) + -1)|0;
         $h$0$i = $152;$ic$0$i = $ic$3$i;$match_buf_len$2$i = $match_buf_len$5$i;
        }
        else if ((label|0) == 51) {
         label = 0;
         switch ($$1$i|0) {
         case 6:  {
          $ic$4$i$lcssa263 = $ic$4$i;$matched_history_line$0$i$lcssa280 = $matched_history_line$0$i;
          label = 52;
          break L19;
          break;
         }
         case 3: case 0:  {
          break;
         }
         default: {
          $ic$4$i267 = $ic$4$i;
          break L19;
         }
         }
         $114 = (_strlen($match_buf$i)|0);
         (_fflush_all()|0);
         $115 = (_read_key(0,$read_key_buffer$i,-1)|0);
         $116 = tempRet0;
         switch ($115|0) {
         case 18:  {
          $130 = 18;$match_buf_len$1$i = $114;
          break;
         }
         case 127: case 8:  {
          $$lcssa269 = $114;$$lcssa275 = $115;
          $117 = ($$lcssa269|0)==(0);
          $118 = (($$lcssa269) + -1)|0;
          $$$i = $117 ? 0 : $118;
          $119 = (($match_buf$i) + ($$$i)|0);
          HEAP8[$119>>0] = 0;
          $130 = $$lcssa275;$match_buf_len$1$i = $$$i;
          break;
         }
         default: {
          $$off$i = (($115) + -32)|0;
          $120 = ($$off$i>>>0)>(223);
          if ($120) {
           $$1$i = 6;$ic$4$i = $115;
           label = 51;
           continue L25;
          } else {
           $$lcssa270 = $114;$$lcssa276 = $115;$123 = $115;$374 = $116;
          }
          $121 = ($$lcssa270>>>0)<(127);
          if ($121) {
           $122 = $123&255;
           $124 = (($match_buf$i) + ($$lcssa270)|0);
           HEAP8[$124>>0] = $122;
           $125 = (($$lcssa270) + 1)|0;
           $126 = (($match_buf$i) + ($125)|0);
           HEAP8[$126>>0] = 0;
           $130 = $$lcssa276;$match_buf_len$1$i = $$lcssa270;
          } else {
           $130 = $$lcssa276;$match_buf_len$1$i = $$lcssa270;
          }
         }
         }
         $127 = HEAP32[$53>>2]|0;
         $128 = ((($127)) + 12|0);
         $129 = HEAP32[$128>>2]|0;
         $131 = ($130|0)==(18);
         $132 = $131 << 31 >> 31;
         $$3$i = (($129) + ($132))|0;
         $h$0$i = $$3$i;$ic$0$i = $130;$match_buf_len$2$i = $match_buf_len$1$i;
        }
        $133 = ($h$0$i|0)>(-1);
        if ($133) {
         $134 = HEAP32[$53>>2]|0;
         $135 = (((($134)) + 28|0) + ($h$0$i<<2)|0);
         $136 = HEAP32[$135>>2]|0;
         $137 = ($136|0)==(0|0);
         if ($137) {
          $h$3$i = $h$0$i;$ic$3$i = $ic$0$i;$match_buf_len$5$i = $match_buf_len$2$i;
          label = 48;
          continue;
         } else {
          break;
         }
        } else {
         $153 = (($match_buf$i) + ($match_buf_len$2$i)|0);
         HEAP8[$153>>0] = 0;
         (_bb_putchar(7)|0);
         $$1$i = 3;$ic$4$i = $ic$0$i;
         label = 51;
         continue;
        }
       }
       $138 = (_strstr($136,$match_buf$i)|0);
       $139 = ($138|0)==(0|0);
       if ($139) {
        $$0$i = 0;$h$2$i = $h$0$i;$ic$2$i = $ic$0$i;$match_buf_len$4$i = $match_buf_len$2$i;
       } else {
        $$lcssa277 = $134;$$lcssa278 = $135;$$lcssa279 = $138;$h$0$i$lcssa = $h$0$i;$ic$0$i$lcssa = $ic$0$i;$match_buf_len$2$i$lcssa = $match_buf_len$2$i;
        break;
       }
      }
      $140 = ((($$lcssa277)) + 12|0);
      HEAP32[$140>>2] = $h$0$i$lcssa;
      $141 = HEAP32[$$lcssa278>>2]|0;
      $142 = HEAP32[$59>>2]|0;
      $143 = HEAP32[$60>>2]|0;
      (_safe_strncpy($142,$141,$143)|0);
      $144 = HEAP32[$59>>2]|0;
      $145 = (_strlen($144)|0);
      HEAP32[$57>>2] = $145;
      $146 = $$lcssa279;
      $147 = $141;
      $148 = (($146) - ($147))|0;
      HEAP32[$58>>2] = $148;
      $149 = HEAP32[$54>>2]|0;
      _free($149);
      $h$1$i = $h$0$i$lcssa;$ic$1$i = $ic$0$i$lcssa;$match_buf_len$3$i = $match_buf_len$2$i$lcssa;$matched_history_line$0$i = $141;
     }
     if ((label|0) == 52) {
      label = 0;
      $158 = ($matched_history_line$0$i$lcssa280|0)==(0|0);
      if (!($158)) {
       $159 = HEAP32[$59>>2]|0;
       $160 = HEAP32[$60>>2]|0;
       (_safe_strncpy($159,$matched_history_line$0$i$lcssa280,$160)|0);
       $161 = HEAP32[$59>>2]|0;
       $162 = (_strlen($161)|0);
       HEAP32[$57>>2] = $162;
      }
      $163 = HEAP32[$54>>2]|0;
      _free($163);
      HEAP32[$54>>2] = $112;
      HEAP32[$55>>2] = $113;
      $164 = HEAP32[$56>>2]|0;
      $165 = HEAP32[$57>>2]|0;
      $166 = HEAP32[$58>>2]|0;
      $167 = (($165) - ($166))|0;
      _redraw($164,$167);
      $ic$4$i267 = $ic$4$i$lcssa263;
     }
     $ic$0 = $ic$4$i267;
    }
    L48:     switch (label|0) {
     case 16: {
      label = 0;
      $66 = HEAP32[$58>>2]|0;
      $67 = ($66|0)==(0);
      if (!($67)) {
       $93 = $66;
       L75: while(1) {
        $92 = (($93) + -1)|0;
        $94 = HEAP32[$59>>2]|0;
        $95 = (($94) + ($92)|0);
        $96 = HEAP8[$95>>0]|0;
        $97 = $96&255;
        $98 = (($97) + 247)|0;
        $99 = $98 & 255;
        switch ($99|0) {
        case 0: case 1: case 2: case 3: case 4: case 23:  {
         break;
        }
        default: {
         $103 = $93;
         break L75;
        }
        }
        _input_backspace();
        $100 = HEAP32[$58>>2]|0;
        $101 = ($100|0)==(0);
        if ($101) {
         break L48;
        } else {
         $93 = $100;
        }
       }
       while(1) {
        $102 = (($103) + -1)|0;
        $104 = HEAP32[$59>>2]|0;
        $105 = (($104) + ($102)|0);
        $106 = HEAP8[$105>>0]|0;
        $107 = $106&255;
        $108 = (($107) + 247)|0;
        $109 = $108 & 255;
        switch ($109|0) {
        case 0: case 1: case 2: case 3: case 4: case 23:  {
         break L48;
         break;
        }
        default: {
        }
        }
        _input_backspace();
        $110 = HEAP32[$58>>2]|0;
        $111 = ($110|0)==(0);
        if ($111) {
         break L48;
        } else {
         $103 = $110;
        }
       }
      }
      break;
     }
     case 17: {
      label = 0;
      $68 = HEAP32[$58>>2]|0;
      _input_backward($68);
      break;
     }
     case 18: {
      label = 0;
      _input_backward(1);
      break;
     }
     case 19: {
      label = 0;
      _put_till_end_and_adv_cursor();
      break;
     }
     case 20: {
      label = 0;
      $69 = HEAP32[$58>>2]|0;
      $70 = HEAP32[$57>>2]|0;
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       _put_cur_glyph_and_inc_cursor();
      }
      break;
     }
     case 22: {
      label = 0;
      _input_backspace();
      $ic$0304 = $ic$0$lcssa286;
      label = 95;
      break;
     }
     case 23: {
      label = 0;
      _input_delete();
      break;
     }
     case 24: {
      label = 0;
      _input_tab($lastWasTab);
      continue L14;
      break;
     }
     case 25: {
      label = 0;
      $72 = HEAP32[$58>>2]|0;
      $73 = HEAP32[$59>>2]|0;
      $74 = (($73) + ($72)|0);
      HEAP8[$74>>0] = 0;
      $75 = HEAP32[$58>>2]|0;
      HEAP32[$57>>2] = $75;
      (_printf(6798,$vararg_buffer)|0);
      break;
     }
     case 26: {
      label = 0;
      (_printf(6802,$vararg_buffer1)|0);
      $76 = HEAP32[$57>>2]|0;
      $77 = HEAP32[$58>>2]|0;
      $78 = (($76) - ($77))|0;
      _redraw(0,$78);
      break;
     }
     case 27: {
      label = 0;
      $79 = (_get_next_history()|0);
      $80 = ($79|0)==(0);
      if (!($80)) {
       label = 59;
      }
      break;
     }
     case 28: {
      label = 0;
      $81 = (_get_previous_history()|0);
      $82 = ($81|0)==(0);
      if (!($82)) {
       label = 59;
      }
      break;
     }
     case 29: {
      label = 0;
      $83 = HEAP32[$58>>2]|0;
      $84 = ($83|0)==(0);
      if (!($84)) {
       $85 = HEAP32[$57>>2]|0;
       $86 = (($85) - ($83))|0;
       HEAP32[$57>>2] = $86;
       $87 = HEAP32[$59>>2]|0;
       $88 = (($87) + ($83)|0);
       $89 = (($86) + 1)|0;
       _memmove(($87|0),($88|0),($89|0))|0;
       $90 = HEAP32[$56>>2]|0;
       $91 = HEAP32[$57>>2]|0;
       _redraw($90,$91);
      }
      break;
     }
     case 56: {
      label = 0;
      $168 = (_get_previous_history()|0);
      $169 = ($168|0)==(0);
      if ($169) {
       (_bb_putchar(7)|0);
      } else {
       label = 59;
      }
      break;
     }
     case 58: {
      label = 0;
      $170 = (_get_next_history()|0);
      $171 = ($170|0)==(0);
      if (!($171)) {
       label = 59;
      }
      break;
     }
     case 60: {
      label = 0;
      $183 = HEAP32[$58>>2]|0;
      $184 = HEAP32[$57>>2]|0;
      $185 = ($183>>>0)<($184>>>0);
      if ($185) {
       _put_cur_glyph_and_inc_cursor();
      }
      break;
     }
     case 62: {
      label = 0;
      _input_backward(1);
      break;
     }
     case 63: {
      label = 0;
      $186 = HEAP32[$59>>2]|0;
      _input_backward(1);
      $187 = HEAP32[$58>>2]|0;
      $188 = ($187|0)==(0);
      if (!($188)) {
       $190 = $187;
       while(1) {
        $189 = (($186) + ($190)|0);
        $191 = HEAP8[$189>>0]|0;
        $192 = ($191<<24>>24)==(32);
        if (!($192)) {
         $195 = $191 << 24 >> 24;
         $196 = (___strchrnul(6831,$195)|0);
         $197 = HEAP8[$196>>0]|0;
         $198 = ($197<<24>>24)==(0);
         if ($198) {
          break;
         }
        }
        _input_backward(1);
        $193 = HEAP32[$58>>2]|0;
        $194 = ($193|0)==(0);
        if ($194) {
         $ic$0304 = $ic$0$lcssa299;
         label = 95;
         break L48;
        } else {
         $190 = $193;
        }
       }
       $$pre$i = HEAP32[$58>>2]|0;
       $200 = $$pre$i;
       while(1) {
        $199 = (($200) + -1)|0;
        $201 = (($186) + ($199)|0);
        $202 = HEAP8[$201>>0]|0;
        $203 = ($202<<24>>24)==(32);
        if ($203) {
         $ic$0304 = $ic$0$lcssa299;
         label = 95;
         break L48;
        }
        $204 = $202 << 24 >> 24;
        $205 = (___strchrnul(6831,$204)|0);
        $206 = HEAP8[$205>>0]|0;
        $207 = ($206<<24>>24)==(0);
        if (!($207)) {
         $ic$0304 = $ic$0$lcssa299;
         label = 95;
         break L48;
        }
        _input_backward(1);
        $208 = HEAP32[$58>>2]|0;
        $209 = ($208|0)==(0);
        if ($209) {
         $ic$0304 = $ic$0$lcssa299;
         label = 95;
         break;
        } else {
         $200 = $208;
        }
       }
      }
      break;
     }
     case 71: {
      label = 0;
      $210 = HEAP32[$59>>2]|0;
      L99: while(1) {
       $211 = HEAP32[$58>>2]|0;
       $212 = (($210) + ($211)|0);
       $213 = HEAP8[$212>>0]|0;
       switch ($213<<24>>24) {
       case 0:  {
        $ic$0304 = $ic$0$lcssa300;
        label = 95;
        break L48;
        break;
       }
       case 32:  {
        $229 = $211;
        break;
       }
       default: {
        $214 = $213 << 24 >> 24;
        $215 = (___strchrnul(6831,$214)|0);
        $216 = HEAP8[$215>>0]|0;
        $217 = ($216<<24>>24)==(0);
        if ($217) {
         break L99;
        }
        $$pre$i$13 = HEAP32[$58>>2]|0;
        $229 = $$pre$i$13;
       }
       }
       $228 = HEAP32[$57>>2]|0;
       $230 = ($229>>>0)<($228>>>0);
       if (!($230)) {
        continue;
       }
       _put_cur_glyph_and_inc_cursor();
      }
      while(1) {
       $218 = HEAP32[$58>>2]|0;
       $219 = HEAP32[$57>>2]|0;
       $220 = ($218>>>0)<($219>>>0);
       if ($220) {
        _put_cur_glyph_and_inc_cursor();
        $$pre3$i = HEAP32[$58>>2]|0;
        $222 = $$pre3$i;
       } else {
        $222 = $218;
       }
       $221 = (($210) + ($222)|0);
       $223 = HEAP8[$221>>0]|0;
       switch ($223<<24>>24) {
       case 32: case 0:  {
        $ic$0304 = $ic$0$lcssa300;
        label = 95;
        break L48;
        break;
       }
       default: {
       }
       }
       $224 = $223 << 24 >> 24;
       $225 = (___strchrnul(6831,$224)|0);
       $226 = HEAP8[$225>>0]|0;
       $227 = ($226<<24>>24)==(0);
       if (!($227)) {
        $ic$0304 = $ic$0$lcssa300;
        label = 95;
        break L48;
       }
      }
      break;
     }
     case 81: {
      label = 0;
      $231 = HEAP32[$58>>2]|0;
      _input_backward($231);
      break;
     }
     case 82: {
      label = 0;
      _put_till_end_and_adv_cursor();
      break;
     }
     case 83: {
      label = 0;
      $232 = HEAP8[$61>>0]|0;
      $233 = ($232<<24>>24)!=(0);
      $234 = $232&255;
      $235 = ($ic$0$lcssa|0)==($234|0);
      $or$cond = $233 & $235;
      if ($or$cond) {
       label = 84;
       break L14;
      }
      $236 = HEAP8[$62>>0]|0;
      $237 = ($236<<24>>24)!=(0);
      $238 = $236&255;
      $239 = ($ic$0$lcssa|0)==($238|0);
      $or$cond9 = $237 & $239;
      if ($or$cond9) {
       $240 = HEAP32[$57>>2]|0;
       $241 = ($240|0)==(0);
       if ($241) {
        label = 87;
        break L14;
       }
       _input_delete();
       $ic$0304 = $ic$0$lcssa;
       label = 95;
       break;
      }
      $ic$0$off = (($ic$0$lcssa) + -32)|0;
      $242 = ($ic$0$off>>>0)>(223);
      if ($242) {
       $ic$0304 = $ic$0$lcssa;
       label = 95;
      } else {
       $243 = HEAP32[$57>>2]|0;
       $244 = ($243|0)<($63|0);
       if ($244) {
        $245 = (($243) + 1)|0;
        HEAP32[$57>>2] = $245;
        $246 = HEAP32[$58>>2]|0;
        $247 = ($246|0)==($243|0);
        if ($247) {
         $248 = $ic$0$lcssa&255;
         $249 = HEAP32[$59>>2]|0;
         $250 = (($249) + ($243)|0);
         HEAP8[$250>>0] = $248;
         $251 = HEAP32[$58>>2]|0;
         $252 = (($251) + 1)|0;
         $253 = HEAP32[$59>>2]|0;
         $254 = (($253) + ($252)|0);
         HEAP8[$254>>0] = 0;
         _put_cur_glyph_and_inc_cursor();
         $ic$0304 = $ic$0$lcssa;
         label = 95;
         break;
        } else {
         $255 = HEAP32[$59>>2]|0;
         $256 = (($255) + ($246)|0);
         $257 = ((($256)) + 1|0);
         $258 = (($245) - ($246))|0;
         _memmove(($257|0),($256|0),($258|0))|0;
         $259 = $ic$0$lcssa&255;
         $260 = HEAP32[$59>>2]|0;
         $261 = (($260) + ($246)|0);
         HEAP8[$261>>0] = $259;
         _put_till_end_and_adv_cursor();
         $262 = HEAP32[$58>>2]|0;
         $$neg17 = $246 ^ -1;
         $263 = (($262) + ($$neg17))|0;
         _input_backward($263);
         $ic$0304 = $ic$0$lcssa;
         label = 95;
         break;
        }
       } else {
        $ic$0304 = $ic$0$lcssa;
        label = 95;
       }
      }
      break;
     }
    }
    if ((label|0) == 59) {
     label = 0;
     $172 = HEAP32[$53>>2]|0;
     $173 = ((($172)) + 12|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = (((($172)) + 28|0) + ($174<<2)|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = ($176|0)==(0|0);
     $$6 = $177 ? 13904 : $176;
     $178 = HEAP32[$59>>2]|0;
     $179 = HEAP32[$60>>2]|0;
     (_safe_strncpy($178,$$6,$179)|0);
     $180 = HEAP32[$59>>2]|0;
     $181 = (_strlen($180)|0);
     HEAP32[$57>>2] = $181;
     $182 = HEAP32[$56>>2]|0;
     _redraw($182,0);
    }
    else if ((label|0) == 95) {
     label = 0;
     $264 = ($ic$0304|0)==(9);
     if ($264) {
      continue;
     }
    }
    HEAP32[$lastWasTab>>2] = 0;
   }
   if ((label|0) == 84) {
    _goto_new_line();
    HEAP32[$57>>2] = 0;
   }
   else if ((label|0) == 87) {
    HEAP32[$49>>2] = 0;
    label = 88;
   }
   else if ((label|0) == 97) {
    _goto_new_line();
    $$pre115 = HEAP32[$57>>2]|0;
    $phitmp = ($$pre115|0)>(0);
    do {
     if ($phitmp) {
      $265 = HEAP32[$53>>2]|0;
      $266 = HEAP32[$265>>2]|0;
      $267 = $266 & 1;
      $268 = ($267|0)==(0);
      if (!($268)) {
       $269 = HEAP8[$command>>0]|0;
       $270 = ($269<<24>>24)==(0);
       if (!($270)) {
        $271 = ((($265)) + 8|0);
        $272 = HEAP32[$271>>2]|0;
        $273 = ($272|0)==(0);
        if (!($273)) {
         $274 = (($272) + -1)|0;
         $275 = (((($265)) + 28|0) + ($274<<2)|0);
         $276 = HEAP32[$275>>2]|0;
         $277 = (_strcmp($276,$command)|0);
         $278 = ($277|0)==(0);
         if ($278) {
          break;
         }
        }
        $279 = ((($265)) + 16|0);
        $280 = HEAP32[$279>>2]|0;
        $281 = (((($265)) + 28|0) + ($280<<2)|0);
        $282 = HEAP32[$281>>2]|0;
        _free($282);
        $283 = HEAP32[$53>>2]|0;
        $284 = ((($283)) + 16|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = (((($283)) + 28|0) + ($285<<2)|0);
        HEAP32[$286>>2] = 0;
        $287 = HEAP32[$53>>2]|0;
        $288 = ((($287)) + 16|0);
        $289 = HEAP32[$288>>2]|0;
        $290 = ($272|0)<($289|0);
        if ($290) {
         $i$1$i = $272;
        } else {
         $291 = ((($287)) + 28|0);
         $292 = HEAP32[$291>>2]|0;
         _free($292);
         $293 = HEAP32[$53>>2]|0;
         $294 = ((($293)) + 16|0);
         $295 = HEAP32[$294>>2]|0;
         $296 = ($295|0)>(1);
         if ($296) {
          $299 = $293;$i$01$i = 0;
          while(1) {
           $297 = (($i$01$i) + 1)|0;
           $298 = (((($299)) + 28|0) + ($297<<2)|0);
           $300 = HEAP32[$298>>2]|0;
           $301 = (((($299)) + 28|0) + ($i$01$i<<2)|0);
           HEAP32[$301>>2] = $300;
           $302 = HEAP32[$53>>2]|0;
           $303 = ((($302)) + 16|0);
           $304 = HEAP32[$303>>2]|0;
           $305 = (($304) + -1)|0;
           $306 = ($297|0)<($305|0);
           if ($306) {
            $299 = $302;$i$01$i = $297;
           } else {
            $i$1$i = $297;
            break;
           }
          }
         } else {
          $i$1$i = 0;
         }
        }
        $307 = (_xstrdup($command)|0);
        $308 = (($i$1$i) + 1)|0;
        $309 = HEAP32[$53>>2]|0;
        $310 = (((($309)) + 28|0) + ($i$1$i<<2)|0);
        HEAP32[$310>>2] = $307;
        $311 = HEAP32[$53>>2]|0;
        $312 = ((($311)) + 12|0);
        HEAP32[$312>>2] = $308;
        $313 = ((($311)) + 8|0);
        HEAP32[$313>>2] = $308;
        $314 = ((($311)) + 24|0);
        $315 = HEAP32[$314>>2]|0;
        $316 = ($315|0)==(0|0);
        if (!($316)) {
         HEAP32[$vararg_buffer5>>2] = 384;
         $317 = (_open($315,1089,$vararg_buffer5)|0);
         $318 = ($317|0)<(0);
         if (!($318)) {
          (_xlseek($317,0,2)|0);
          $319 = (_strlen($command)|0);
          $320 = (($command) + ($319)|0);
          HEAP8[$320>>0] = 10;
          $321 = (($319) + 1)|0;
          $322 = (_full_write($317,$command,$321)|0);
          HEAP8[$320>>0] = 0;
          (_close($317)|0);
          $323 = ($322|0)==($321|0);
          if ($323) {
           $324 = HEAP32[$53>>2]|0;
           $325 = ((($324)) + 20|0);
           $326 = HEAP32[$325>>2]|0;
           $327 = (($326) + 1)|0;
           HEAP32[$325>>2] = $327;
           $328 = ((($324)) + 16|0);
           $329 = HEAP32[$328>>2]|0;
           $330 = $329 << 2;
           $331 = ($327>>>0)>($330>>>0);
           if ($331) {
            $332 = HEAP32[$324>>2]|0;
            $333 = (_xzalloc(1052)|0);
            HEAP32[$333>>2] = $332;
            $334 = ((($333)) + 16|0);
            $335 = HEAP32[$53>>2]|0;
            $336 = ((($335)) + 24|0);
            $337 = HEAP32[$336>>2]|0;
            $338 = ((($333)) + 24|0);
            HEAP32[$338>>2] = $337;
            $339 = ((($335)) + 16|0);
            $340 = HEAP32[$339>>2]|0;
            HEAP32[$334>>2] = $340;
            _load_history($333);
            $341 = HEAP32[$53>>2]|0;
            $342 = ((($341)) + 24|0);
            $343 = HEAP32[$342>>2]|0;
            $344 = (_getpid()|0);
            HEAP32[$vararg_buffer8>>2] = $343;
            $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
            HEAP32[$vararg_ptr11>>2] = $344;
            $345 = (_xasprintf(6864,$vararg_buffer8)|0);
            HEAP32[$vararg_buffer12>>2] = 384;
            $346 = (_open($345,577,$vararg_buffer12)|0);
            $347 = ($346|0)>(-1);
            do {
             if ($347) {
              $348 = (_xfdopen_for_write($346)|0);
              $349 = ((($333)) + 8|0);
              $350 = HEAP32[$349>>2]|0;
              $351 = ($350|0)>(0);
              if ($351) {
               $i$01$i$i = 0;
               while(1) {
                $352 = (((($333)) + 28|0) + ($i$01$i$i<<2)|0);
                $353 = HEAP32[$352>>2]|0;
                HEAP32[$vararg_buffer15>>2] = $353;
                (_fprintf($348,6874,$vararg_buffer15)|0);
                $354 = (($i$01$i$i) + 1)|0;
                $exitcond$i = ($354|0)==($350|0);
                if ($exitcond$i) {
                 break;
                } else {
                 $i$01$i$i = $354;
                }
               }
              }
              (_fclose($348)|0);
              $355 = HEAP32[$53>>2]|0;
              $356 = ((($355)) + 24|0);
              $357 = HEAP32[$356>>2]|0;
              $358 = (_rename($345,$357)|0);
              $359 = ($358|0)==(0);
              if (!($359)) {
               $362 = $350;
               break;
              }
              $360 = HEAP32[$53>>2]|0;
              $361 = ((($360)) + 20|0);
              HEAP32[$361>>2] = $350;
              $362 = $350;
             } else {
              $$phi$trans$insert$i$i = ((($333)) + 8|0);
              $$pre$i$i = HEAP32[$$phi$trans$insert$i$i>>2]|0;
              $362 = $$pre$i$i;
             }
            } while(0);
            _free($345);
            $363 = ($362|0)>(0);
            if ($363) {
             $i$01$i$i$i = $362;
             while(1) {
              $364 = (($i$01$i$i$i) + -1)|0;
              $365 = (((($333)) + 28|0) + ($364<<2)|0);
              $366 = HEAP32[$365>>2]|0;
              _free($366);
              $367 = ($i$01$i$i$i|0)>(1);
              if ($367) {
               $i$01$i$i$i = $364;
              } else {
               break;
              }
             }
            }
            _free($333);
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    $368 = HEAP32[$57>>2]|0;
    $369 = (($368) + 1)|0;
    HEAP32[$57>>2] = $369;
    $370 = (($command) + ($368)|0);
    HEAP8[$370>>0] = 10;
    $371 = HEAP32[$57>>2]|0;
    $372 = (($command) + ($371)|0);
    HEAP8[$372>>0] = 0;
   }
   if ((label|0) == 88) {
    HEAP32[$57>>2] = -1;
   }
   _free_tab_completion_data();
   (_tcsetattr_stdin_TCSANOW($initial_settings)|0);
   (_fflush_all()|0);
   $373 = HEAP32[$57>>2]|0;
   _deinit_S();
   $$0 = $373;
  }
 }
 if ((label|0) == 3) {
  _parse_and_put_prompt($prompt);
  $10 = HEAP32[1120>>2]|0;
  $11 = (_fgets($command,$maxsize,$10)|0);
  $12 = ($11|0)==(0|0);
  if ($12) {
   $len$0 = -1;
  } else {
   $13 = (_strlen($command)|0);
   $len$0 = $13;
  }
  _deinit_S();
  $$0 = $len$0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _parse_and_put_prompt($prmt_ptr) {
 $prmt_ptr = $prmt_ptr|0;
 var $$ = 0, $$3 = 0, $$lcssa = 0, $$lcssa92 = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf2 = 0, $c$3 = 0, $cbuf = 0, $cwd_buf$0$ph38 = 0, $cwd_buf$019 = 0, $cwd_buf$01954 = 0, $cwd_buf$029 = 0, $cwd_buf$029$lcssa = 0, $cwd_buf$029$lcssa90 = 0, $cwd_buf$1 = 0, $cwd_buf$4 = 0, $flg_not_length$0$ph37 = 0, $free_me$2 = 0;
 var $pbuf = 0, $prmt_mem_ptr$0$ph39 = 0, $prmt_mem_ptr$022 = 0, $prmt_mem_ptr$02252 = 0, $prmt_mem_ptr$02253 = 0, $prmt_mem_ptr$030 = 0, $prmt_mem_ptr$030$lcssa = 0, $prmt_mem_ptr$030$lcssa88 = 0, $prmt_size$0$ph40 = 0, $prmt_size$032 = 0, $prmt_size$032$lcssa86 = 0, $sext$mask = 0, $timebuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $cbuf = sp + 22|0;
 $timebuf = sp + 12|0;
 $pbuf = sp;
 $buf2 = sp + 8|0;
 HEAP32[$0>>2] = $prmt_ptr;
 $1 = (_xzalloc(1)|0);
 $2 = ((($cbuf)) + 1|0);
 HEAP8[$2>>0] = 0;
 $3 = HEAP8[$prmt_ptr>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $cwd_buf$01954 = 0;$prmt_mem_ptr$02252 = $1;
  label = 37;
 } else {
  $5 = HEAP32[796>>2]|0;
  $6 = ((($5)) + 44|0);
  $7 = ((($5)) + 48|0);
  $8 = $buf2;
  $9 = ((($5)) + 20|0);
  $10 = ((($buf2)) + 1|0);
  $11 = ((($buf2)) + 1|0);
  $12 = ((($buf2)) + 2|0);
  $13 = ((($buf2)) + 2|0);
  $14 = ((($buf2)) + 3|0);
  $100 = $prmt_ptr;$cwd_buf$0$ph38 = 0;$flg_not_length$0$ph37 = 91;$prmt_mem_ptr$0$ph39 = $1;$prmt_size$0$ph40 = 0;
  L3: while(1) {
   $15 = ($flg_not_length$0$ph37<<24>>24)==(93);
   $17 = $100;$cwd_buf$029 = $cwd_buf$0$ph38;$prmt_mem_ptr$030 = $prmt_mem_ptr$0$ph39;$prmt_size$032 = $prmt_size$0$ph40;
   L5: while(1) {
    HEAP32[$pbuf>>2] = $cbuf;
    $16 = ((($17)) + 1|0);
    HEAP32[$0>>2] = $16;
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(92);
    L7: do {
     if ($19) {
      $20 = HEAP8[$16>>0]|0;
      $21 = ($20<<24>>24)==(116);
      if (!($21)) {
       $22 = (_bb_process_escape_sequence($0)|0);
       $$pre = HEAP32[$0>>2]|0;
       $23 = ($$pre|0)==($16|0);
       if (!($23)) {
        $67 = $cbuf;$c$3 = $22;$cwd_buf$4 = $cwd_buf$029;$free_me$2 = 0;
        break;
       }
       $$pr = HEAP8[$16>>0]|0;
       $24 = ($$pr<<24>>24)==(0);
       if ($24) {
        $cwd_buf$029$lcssa = $cwd_buf$029;$prmt_mem_ptr$030$lcssa = $prmt_mem_ptr$030;
        label = 8;
        break L3;
       }
      }
      $25 = ((($17)) + 2|0);
      HEAP32[$0>>2] = $25;
      $26 = HEAP8[$16>>0]|0;
      $27 = $26 << 24 >> 24;
      switch ($27|0) {
      case 117:  {
       $28 = HEAP32[$6>>2]|0;
       $29 = ($28|0)==(0|0);
       $$3 = $29 ? 13904 : $28;
       HEAP32[$pbuf>>2] = $$3;
       $67 = $$3;$c$3 = $26;$cwd_buf$4 = $cwd_buf$029;$free_me$2 = 0;
       break L7;
       break;
      }
      case 104: case 72:  {
       $30 = (_safe_gethostname()|0);
       HEAP32[$pbuf>>2] = $30;
       $31 = ($26<<24>>24)==(104);
       if (!($31)) {
        $67 = $30;$c$3 = $26;$cwd_buf$4 = $cwd_buf$029;$free_me$2 = $30;
        break L7;
       }
       $32 = (___strchrnul($30,46)|0);
       HEAP8[$32>>0] = 0;
       $67 = $30;$c$3 = 104;$cwd_buf$4 = $cwd_buf$029;$free_me$2 = $30;
       break L7;
       break;
      }
      case 36:  {
       $33 = (_geteuid()|0);
       $34 = ($33|0)==(0);
       $35 = $34 ? 35 : 36;
       $67 = $cbuf;$c$3 = $35;$cwd_buf$4 = $cwd_buf$029;$free_me$2 = 0;
       break L7;
       break;
      }
      case 116: case 65: case 64: case 84:  {
       $36 = (_strftime_HHMMSS($timebuf,9,0)|0);
       $37 = ((($36)) + -3|0);
       HEAP8[$37>>0] = 0;
       HEAP32[$pbuf>>2] = $timebuf;
       $67 = $timebuf;$c$3 = $26;$cwd_buf$4 = $cwd_buf$029;$free_me$2 = 0;
       break L7;
       break;
      }
      case 87: case 119:  {
       $38 = ($cwd_buf$029|0)==(0|0);
       L20: do {
        if ($38) {
         $39 = (_xrealloc_getcwd_or_warn(0)|0);
         $40 = ($39|0)==(0|0);
         if ($40) {
          $cwd_buf$1 = 3692;
         } else {
          $41 = HEAP32[$7>>2]|0;
          $42 = HEAP8[$41>>0]|0;
          $43 = ($42<<24>>24)==(0);
          if ($43) {
           $cwd_buf$1 = $39;
          } else {
           $44 = (_is_prefixed_with($39,$41)|0);
           $45 = ($44|0)==(0|0);
           if ($45) {
            $cwd_buf$1 = $39;
           } else {
            $46 = HEAP8[$44>>0]|0;
            switch ($46<<24>>24) {
            case 0: case 47:  {
             break;
            }
            default: {
             $cwd_buf$1 = $39;
             break L20;
            }
            }
            HEAP8[$39>>0] = 126;
            $47 = ((($39)) + 1|0);
            _overlapping_strcpy($47,$44);
            $cwd_buf$1 = $39;
           }
          }
         }
        } else {
         $cwd_buf$1 = $cwd_buf$029;
        }
       } while(0);
       HEAP32[$pbuf>>2] = $cwd_buf$1;
       $48 = ($26<<24>>24)==(119);
       if ($48) {
        $67 = $cwd_buf$1;$c$3 = 119;$cwd_buf$4 = $cwd_buf$1;$free_me$2 = 0;
        break L7;
       }
       $49 = (_strrchr($cwd_buf$1,47)|0);
       $50 = ($49|0)==(0|0);
       if ($50) {
        $67 = $cwd_buf$1;$c$3 = $26;$cwd_buf$4 = $cwd_buf$1;$free_me$2 = 0;
        break L7;
       }
       $51 = ((($49)) + 1|0);
       HEAP32[$pbuf>>2] = $51;
       $67 = $51;$c$3 = $26;$cwd_buf$4 = $cwd_buf$1;$free_me$2 = 0;
       break L7;
       break;
      }
      case 88: case 120:  {
       $52 = HEAP8[$25>>0]|0;
       HEAP8[$buf2>>0] = $52;
       HEAP8[$10>>0] = 0;
       $53 = (_strtoul($buf2,$pbuf,16)|0);
       $54 = ($53>>>0)>(255);
       if ($54) {
        $$lcssa = $buf2;
        label = 26;
       } else {
        $55 = HEAP32[$pbuf>>2]|0;
        $56 = (($55) - ($8))|0;
        $57 = ($56|0)<(1);
        if ($57) {
         $$lcssa = $buf2;
         label = 26;
        } else {
         $58 = HEAP32[$0>>2]|0;
         $59 = ((($58)) + 1|0);
         HEAP32[$0>>2] = $59;
         $60 = HEAP8[$59>>0]|0;
         HEAP8[$11>>0] = $60;
         HEAP8[$12>>0] = 0;
         $61 = (_strtoul($buf2,$pbuf,16)|0);
         $62 = ($61>>>0)>(255);
         if ($62) {
          $$lcssa = $11;
          label = 26;
         } else {
          $87 = HEAP32[$pbuf>>2]|0;
          $88 = (($87) - ($8))|0;
          $89 = ($88|0)<(2);
          if ($89) {
           $$lcssa = $11;
           label = 26;
          } else {
           $90 = HEAP32[$0>>2]|0;
           $91 = ((($90)) + 1|0);
           HEAP32[$0>>2] = $91;
           $92 = HEAP8[$91>>0]|0;
           HEAP8[$13>>0] = $92;
           HEAP8[$14>>0] = 0;
           $93 = (_strtoul($buf2,$pbuf,16)|0);
           $94 = ($93>>>0)>(255);
           if ($94) {
            $$lcssa = $13;
            label = 26;
           } else {
            $95 = HEAP32[$pbuf>>2]|0;
            $96 = (($95) - ($8))|0;
            $97 = ($96|0)<(3);
            if ($97) {
             $$lcssa = $13;
             label = 26;
            } else {
             $98 = HEAP32[$0>>2]|0;
             $99 = ((($98)) + 1|0);
             HEAP32[$0>>2] = $99;
            }
           }
          }
         }
        }
       }
       if ((label|0) == 26) {
        label = 0;
        HEAP8[$$lcssa>>0] = 0;
       }
       $63 = (_strtoul($buf2,0,16)|0);
       $64 = $63&255;
       $sext$mask = $63 & 255;
       $65 = ($sext$mask|0)==(0);
       HEAP32[$pbuf>>2] = $cbuf;
       $$ = $65 ? 63 : $64;
       $67 = $cbuf;$c$3 = $$;$cwd_buf$4 = $cwd_buf$029;$free_me$2 = 0;
       break L7;
       break;
      }
      case 93: case 91:  {
       $66 = ($26<<24>>24)==($flg_not_length$0$ph37<<24>>24);
       if ($66) {
        $$lcssa92 = $25;$cwd_buf$029$lcssa90 = $cwd_buf$029;$prmt_mem_ptr$030$lcssa88 = $prmt_mem_ptr$030;$prmt_size$032$lcssa86 = $prmt_size$032;
        break L5;
       } else {
        $67 = $cbuf;$c$3 = $26;$cwd_buf$4 = $cwd_buf$029;$free_me$2 = 0;
        break L7;
       }
       break;
      }
      default: {
       $67 = $cbuf;$c$3 = $26;$cwd_buf$4 = $cwd_buf$029;$free_me$2 = 0;
       break L7;
      }
      }
     } else {
      $67 = $cbuf;$c$3 = $18;$cwd_buf$4 = $cwd_buf$029;$free_me$2 = 0;
     }
    } while(0);
    HEAP8[$cbuf>>0] = $c$3;
    $68 = (_strlen($67)|0);
    $69 = (($68) + ($prmt_size$032))|0;
    $70 = ($c$3<<24>>24)==(10);
    if ($70) {
     HEAP32[$9>>2] = 0;
    } else {
     if (!($15)) {
      $71 = HEAP32[$9>>2]|0;
      $72 = (($71) + ($68))|0;
      HEAP32[$9>>2] = $72;
     }
    }
    $73 = (($69) + 1)|0;
    $74 = (_xrealloc($prmt_mem_ptr$030,$73)|0);
    $75 = (_strcat($74,$67)|0);
    _free($free_me$2);
    $76 = HEAP32[$0>>2]|0;
    $77 = HEAP8[$76>>0]|0;
    $78 = ($77<<24>>24)==(0);
    if ($78) {
     $cwd_buf$019 = $cwd_buf$4;$prmt_mem_ptr$022 = $75;
     break L3;
    } else {
     $17 = $76;$cwd_buf$029 = $cwd_buf$4;$prmt_mem_ptr$030 = $75;$prmt_size$032 = $69;
    }
   }
   $79 = $flg_not_length$0$ph37&255;
   $80 = $79 ^ 6;
   $81 = $80&255;
   $82 = HEAP8[$$lcssa92>>0]|0;
   $83 = ($82<<24>>24)==(0);
   if ($83) {
    $cwd_buf$019 = $cwd_buf$029$lcssa90;$prmt_mem_ptr$022 = $prmt_mem_ptr$030$lcssa88;
    break;
   } else {
    $100 = $$lcssa92;$cwd_buf$0$ph38 = $cwd_buf$029$lcssa90;$flg_not_length$0$ph37 = $81;$prmt_mem_ptr$0$ph39 = $prmt_mem_ptr$030$lcssa88;$prmt_size$0$ph40 = $prmt_size$032$lcssa86;
   }
  }
  if ((label|0) == 8) {
   $cwd_buf$019 = $cwd_buf$029$lcssa;$prmt_mem_ptr$022 = $prmt_mem_ptr$030$lcssa;
  }
  $84 = ($cwd_buf$019|0)==(3692|0);
  if ($84) {
   $prmt_mem_ptr$02253 = $prmt_mem_ptr$022;
  } else {
   $cwd_buf$01954 = $cwd_buf$019;$prmt_mem_ptr$02252 = $prmt_mem_ptr$022;
   label = 37;
  }
 }
 if ((label|0) == 37) {
  _free($cwd_buf$01954);
  $prmt_mem_ptr$02253 = $prmt_mem_ptr$02252;
 }
 $85 = HEAP32[796>>2]|0;
 $86 = ((($85)) + 40|0);
 HEAP32[$86>>2] = $prmt_mem_ptr$02253;
 _put_prompt();
 STACKTOP = sp;return;
}
function _deinit_S() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[796>>2]|0;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 $3 = ((($0)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(13904|0);
 if (!($7)) {
  _free($6);
 }
 _free($0);
 return;
}
function _load_history($st_parm) {
 $st_parm = $st_parm|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$06 = 0, $idx$018 = 0, $idx$1$ph$lcssa = 0, $idx$1$ph16 = 0, $idx$29 = 0, $idx$4$ph = 0, $idx$45 = 0, $temp_h = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp_h = sp;
 $0 = ((($st_parm)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_fopen_for_read($1)|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($st_parm)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  if (!($6)) {
   $idx$018 = $5;
   while(1) {
    $7 = (($idx$018) + -1)|0;
    $8 = (((($st_parm)) + 28|0) + ($7<<2)|0);
    $9 = HEAP32[$8>>2]|0;
    _free($9);
    HEAP32[$8>>2] = 0;
    $10 = ($7|0)==(0);
    if ($10) {
     break;
    } else {
     $idx$018 = $7;
    }
   }
  }
  _memset(($temp_h|0),0,1020)|0;
  $11 = ((($st_parm)) + 20|0);
  HEAP32[$11>>2] = 0;
  $12 = (_xmalloc_fgetline($2)|0);
  $13 = ($12|0)==(0|0);
  L7: do {
   if ($13) {
    $idx$1$ph$lcssa = 0;
   } else {
    $14 = ((($st_parm)) + 16|0);
    $57 = $12;$idx$1$ph16 = 0;
    while(1) {
     $16 = $57;
     while(1) {
      $15 = HEAP8[$16>>0]|0;
      $17 = ($15<<24>>24)==(0);
      if (!($17)) {
       $$lcssa = $16;
       break;
      }
      _free($16);
      $18 = (_xmalloc_fgetline($2)|0);
      $19 = ($18|0)==(0|0);
      if ($19) {
       $idx$1$ph$lcssa = $idx$1$ph16;
       break L7;
      } else {
       $16 = $18;
      }
     }
     $20 = (($temp_h) + ($idx$1$ph16<<2)|0);
     $21 = HEAP32[$20>>2]|0;
     _free($21);
     HEAP32[$20>>2] = $$lcssa;
     $22 = HEAP32[$11>>2]|0;
     $23 = (($22) + 1)|0;
     HEAP32[$11>>2] = $23;
     $24 = (($idx$1$ph16) + 1)|0;
     $25 = HEAP32[$14>>2]|0;
     $26 = ($24|0)==($25|0);
     $$ = $26 ? 0 : $24;
     $27 = (_xmalloc_fgetline($2)|0);
     $28 = ($27|0)==(0|0);
     if ($28) {
      $idx$1$ph$lcssa = $$;
      break;
     } else {
      $57 = $27;$idx$1$ph16 = $$;
     }
    }
   }
  } while(0);
  (_fclose($2)|0);
  $29 = HEAP32[$11>>2]|0;
  $30 = ($29|0)==(0);
  if ($30) {
   $idx$4$ph = $idx$1$ph$lcssa;
  } else {
   $31 = (($temp_h) + ($idx$1$ph$lcssa<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0|0);
   if ($33) {
    $34 = ((($st_parm)) + 16|0);
    $35 = HEAP32[$34>>2]|0;
    $idx$29 = $idx$1$ph$lcssa;
    while(1) {
     $39 = (($idx$29) + 1)|0;
     $40 = ($39|0)==($35|0);
     $$1 = $40 ? 0 : $39;
     $41 = (($temp_h) + ($$1<<2)|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==(0|0);
     if ($43) {
      $idx$29 = $$1;
     } else {
      $idx$4$ph = $$1;
      break;
     }
    }
   } else {
    $idx$4$ph = $idx$1$ph$lcssa;
   }
  }
  $36 = ((($st_parm)) + 16|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(0);
  L22: do {
   if ($38) {
    $i$0$lcssa = 0;
   } else {
    $49 = $37;$i$06 = 0;$idx$45 = $idx$4$ph;
    while(1) {
     $44 = (($temp_h) + ($idx$45<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45|0)==(0|0);
     if ($46) {
      $i$0$lcssa = $i$06;
      break L22;
     }
     $47 = (($idx$45) + 1)|0;
     $48 = ($47|0)==($49|0);
     $$2 = $48 ? 0 : $47;
     $50 = (_strlen($45)|0);
     $51 = ($50>>>0)>(1023);
     if ($51) {
      $52 = ((($45)) + 1023|0);
      HEAP8[$52>>0] = 0;
     }
     $53 = (($i$06) + 1)|0;
     $54 = (((($st_parm)) + 28|0) + ($i$06<<2)|0);
     HEAP32[$54>>2] = $45;
     $55 = HEAP32[$36>>2]|0;
     $56 = ($53>>>0)<($55>>>0);
     if ($56) {
      $49 = $55;$i$06 = $53;$idx$45 = $$2;
     } else {
      $i$0$lcssa = $53;
      break;
     }
    }
   }
  } while(0);
  HEAP32[$4>>2] = $i$0$lcssa;
 }
 STACKTOP = sp;return;
}
function _input_backward($num) {
 $num = $num|0;
 var $$1 = 0, $$num = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[796>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2>>>0)<($num>>>0);
 $$num = $3 ? $2 : $num;
 $4 = ($$num|0)==(0);
 do {
  if (!($4)) {
   $5 = (($2) - ($$num))|0;
   HEAP32[$1>>2] = $5;
   $6 = ((($0)) + 12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($$num>>>0);
   if ($8) {
    $13 = (($$num) - ($7))|0;
    $14 = ((($0)) + 4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (($13) + -1)|0;
    $17 = (($16>>>0) / ($15>>>0))&-1;
    $18 = (($17) + 1)|0;
    $19 = ((($0)) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = Math_imul($20, $15)|0;
    $22 = (($21) - ($13))|0;
    $23 = (($22>>>0) % ($15>>>0))&-1;
    HEAP32[$6>>2] = $23;
    $24 = (($20) - ($18))|0;
    HEAP32[$19>>2] = $24;
    HEAP32[$vararg_buffer1>>2] = $18;
    (_printf(6934,$vararg_buffer1)|0);
    $25 = HEAP32[$6>>2]|0;
    $26 = ($25|0)==(0);
    if ($26) {
     break;
    }
    HEAP32[$vararg_buffer4>>2] = $25;
    (_printf(6941,$vararg_buffer4)|0);
    break;
   }
   $9 = (($7) - ($$num))|0;
   HEAP32[$6>>2] = $9;
   $10 = ($$num>>>0)<(5);
   if ($10) {
    $$1 = $$num;
    while(1) {
     (_bb_putchar(8)|0);
     $11 = (($$1) + -1)|0;
     $12 = ($11|0)==(0);
     if ($12) {
      break;
     } else {
      $$1 = $11;
     }
    }
   } else {
    HEAP32[$vararg_buffer>>2] = $$num;
    (_printf(6928,$vararg_buffer)|0);
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _put_till_end_and_adv_cursor() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[796>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 if ($5) {
  while(1) {
   _put_cur_glyph_and_inc_cursor();
   $6 = HEAP32[$1>>2]|0;
   $7 = HEAP32[$3>>2]|0;
   $8 = ($6>>>0)<($7>>>0);
   if (!($8)) {
    break;
   }
  }
 }
 return;
}
function _put_cur_glyph_and_inc_cursor() {
 var $$phi$trans$insert = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[796>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$phi$trans$insert = ((($0)) + 12|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $$pre$phiZ2D = $$phi$trans$insert;$15 = $$pre;$c$0 = 32;
 } else {
  $8 = (($2) + 1)|0;
  HEAP32[$1>>2] = $8;
  $9 = ((($0)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $$pre$phiZ2D = $9;$15 = $11;$c$0 = $6;
 }
 $12 = ((($0)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($15) - ($13))|0;
 $16 = $c$0 << 24 >> 24;
 (_bb_putchar($16)|0);
 $17 = ($14|0)>(-1);
 if ($17) {
  (_puts(6926)|0);
  $18 = ((($0)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 1)|0;
  HEAP32[$18>>2] = $20;
  HEAP32[$$pre$phiZ2D>>2] = 0;
 }
 return;
}
function _input_backspace() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[796>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _input_backward(1);
  _input_delete();
 }
 return;
}
function _input_delete() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[796>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($2)|0);
  $9 = ((($8)) + 1|0);
  $10 = (($4) - ($2))|0;
  _memmove(($8|0),($9|0),($10|0))|0;
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + -1)|0;
  HEAP32[$3>>2] = $12;
  _put_till_end_and_adv_cursor();
  (_printf(6798,$vararg_buffer)|0);
  $13 = HEAP32[$1>>2]|0;
  $14 = (($13) - ($2))|0;
  _input_backward($14);
 }
 STACKTOP = sp;return;
}
function _input_tab($lastWasTab) {
 $lastWasTab = $lastWasTab|0;
 var $$$i = 0, $$column_width$0$i = 0, $$column_width$0$i$lcssa = 0, $$lcssa = 0, $$lcssa$i = 0, $$lcssa109 = 0, $$lcssa111 = 0, $$lcssa113 = 0, $$lcssa115 = 0, $$lcssa6 = 0, $$neg1 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre49 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $chosen_match$1 = 0;
 var $chosen_match$2 = 0, $column_width$0$lcssa$i = 0, $column_width$04$i = 0, $cp$011 = 0, $cp$04 = 0, $exitcond$i = 0, $exitcond11$i = 0, $i$0$ph22 = 0, $i$013 = 0, $len_found$1 = 0, $match_pfx_len$0 = 0, $match_pfx_len$1$ = 0, $match_pfx_len$1$lcssa = 0, $match_pfx_len$127 = 0, $memchr$i = 0, $n$0$ph$lcssa = 0, $n$0$ph23 = 0, $n1$010 = 0, $nc$01$i = 0, $ncols$0$i = 0;
 var $not$ = 0, $not$$i = 0, $nrows$0$i = 0, $phitmp$i = 0, $row$05$i = 0, $row$12$i = 0, $s$028 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[796>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 2;
 $4 = ($3|0)==(0);
 do {
  if (!($4)) {
   $5 = HEAP32[$lastWasTab>>2]|0;
   $6 = ($5|0)==(0);
   if (!($6)) {
    $7 = ((($0)) + 56|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==(0);
    if ($9) {
     break;
    }
    $10 = ((($0)) + 24|0);
    $11 = HEAP32[$10>>2]|0;
    _goto_new_line();
    $12 = HEAP32[$7>>2]|0;
    $13 = ($12|0)>(0);
    if ($13) {
     $14 = ((($0)) + 52|0);
     $15 = HEAP32[$14>>2]|0;
     $column_width$04$i = 0;$row$05$i = 0;
     while(1) {
      $16 = (($15) + ($row$05$i<<2)|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = (_strlen($17)|0);
      $19 = ($column_width$04$i|0)<($18|0);
      $$column_width$0$i = $19 ? $18 : $column_width$04$i;
      $20 = (($row$05$i) + 1)|0;
      $exitcond11$i = ($20|0)==($12|0);
      if ($exitcond11$i) {
       $$column_width$0$i$lcssa = $$column_width$0$i;
       break;
      } else {
       $column_width$04$i = $$column_width$0$i;$row$05$i = $20;
      }
     }
     $phitmp$i = (($$column_width$0$i$lcssa) + 2)|0;
     $column_width$0$lcssa$i = $phitmp$i;
    } else {
     $column_width$0$lcssa$i = 2;
    }
    $21 = ((($0)) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (($22>>>0) / ($column_width$0$lcssa$i>>>0))&-1;
    $24 = ($23|0)>(1);
    if ($24) {
     $25 = (($12|0) / ($23|0))&-1;
     $26 = (($12|0) % ($23|0))&-1;
     $not$$i = ($26|0)!=(0);
     $27 = $not$$i&1;
     $$$i = (($27) + ($25))|0;
     $ncols$0$i = $23;$nrows$0$i = $$$i;
    } else {
     $ncols$0$i = 1;$nrows$0$i = $12;
    }
    $28 = ($nrows$0$i|0)>(0);
    if ($28) {
     $29 = ($ncols$0$i|0)>(1);
     $30 = ((($0)) + 52|0);
     $row$12$i = 0;
     while(1) {
      $31 = (($row$12$i) + ($nrows$0$i))|0;
      $32 = ($31|0)<($12|0);
      $33 = $29 & $32;
      $34 = HEAP32[$30>>2]|0;
      $35 = (($34) + ($row$12$i<<2)|0);
      $36 = HEAP32[$35>>2]|0;
      if ($33) {
       $37 = $36;$43 = $31;$nc$01$i = 1;
       while(1) {
        $38 = (_strlen($37)|0);
        $39 = (($column_width$0$lcssa$i) - ($38))|0;
        HEAP32[$vararg_buffer>>2] = $37;
        $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
        HEAP32[$vararg_ptr1>>2] = $39;
        $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
        HEAP32[$vararg_ptr2>>2] = 13904;
        (_printf(6884,$vararg_buffer)|0);
        $40 = (($nc$01$i) + 1)|0;
        $41 = ($40|0)<($ncols$0$i|0);
        $42 = (($43) + ($nrows$0$i))|0;
        $44 = ($42|0)<($12|0);
        $45 = $44 & $41;
        $46 = HEAP32[$30>>2]|0;
        $47 = (($46) + ($43<<2)|0);
        $48 = HEAP32[$47>>2]|0;
        if ($45) {
         $37 = $48;$43 = $42;$nc$01$i = $40;
        } else {
         $$lcssa$i = $48;
         break;
        }
       }
      } else {
       $$lcssa$i = $36;
      }
      (_puts($$lcssa$i)|0);
      $49 = (($row$12$i) + 1)|0;
      $exitcond$i = ($49|0)==($nrows$0$i|0);
      if ($exitcond$i) {
       break;
      } else {
       $row$12$i = $49;
      }
     }
    }
    $50 = ((($0)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($51) - ($11))|0;
    _redraw(0,$52);
    break;
   }
   HEAP32[$lastWasTab>>2] = 1;
   $53 = (_xmalloc(2048)|0);
   $54 = ((($0)) + 24|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55) + 1)|0;
   $57 = ((($0)) + 36|0);
   $58 = HEAP32[$57>>2]|0;
   (_safe_strncpy($53,$58,$56)|0);
   $59 = (_build_match_prefix($53)|0);
   _free_tab_completion_data();
   $60 = ((($0)) + 52|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)==(0|0);
   if ($62) {
    $63 = (_complete_cmd_dir_file($53,$59)|0);
    $match_pfx_len$0 = $63;
   } else {
    $match_pfx_len$0 = 0;
   }
   $64 = (_strlen($53)|0);
   $65 = (($53) + ($64)|0);
   $66 = (0 - ($match_pfx_len$0))|0;
   $67 = ($66|0)<(0);
   if ($67) {
    $68 = (($65) + ($66)|0);
    $match_pfx_len$127 = $match_pfx_len$0;$s$028 = $68;
    while(1) {
     $69 = ((($s$028)) + 1|0);
     $70 = HEAP8[$s$028>>0]|0;
     $71 = $70 << 24 >> 24;
     $memchr$i = (_memchr(6891,$71,25)|0);
     $not$ = ($memchr$i|0)!=(0|0);
     $72 = $not$&1;
     $match_pfx_len$1$ = (($72) + ($match_pfx_len$127))|0;
     $73 = ($69>>>0)<($65>>>0);
     if ($73) {
      $match_pfx_len$127 = $match_pfx_len$1$;$s$028 = $69;
     } else {
      $match_pfx_len$1$lcssa = $match_pfx_len$1$;
      break;
     }
    }
   } else {
    $match_pfx_len$1$lcssa = $match_pfx_len$0;
   }
   $74 = HEAP32[$60>>2]|0;
   $75 = ($74|0)==(0|0);
   $$phi$trans$insert = ((($0)) + 56|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($75) {
    $102 = $$pre;
   } else {
    _qsort_string_vector($74,$$pre);
    $76 = HEAP32[$$phi$trans$insert>>2]|0;
    $77 = ($76|0)==(1);
    $78 = HEAP32[$60>>2]|0;
    $79 = HEAP32[$78>>2]|0;
    L35: do {
     if ($77) {
      $$lcssa = $78;$$lcssa6 = $79;$n$0$ph$lcssa = 0;
     } else {
      $161 = $76;$162 = $79;$163 = $78;$i$0$ph22 = 0;$n$0$ph23 = 0;
      while(1) {
       $164 = $161;$82 = $163;$84 = $162;$i$013 = $i$0$ph22;
       while(1) {
        $80 = (($i$013) + 1)|0;
        $81 = (($82) + ($80<<2)|0);
        $83 = HEAP32[$81>>2]|0;
        $85 = (_strcmp($84,$83)|0);
        $86 = ($85|0)==(0);
        if (!($86)) {
         $$lcssa109 = $164;$$lcssa111 = $84;$$lcssa113 = $82;$$lcssa115 = $80;
         break;
        }
        _free($84);
        $87 = HEAP32[$$phi$trans$insert>>2]|0;
        $88 = (($87) + -1)|0;
        $89 = ($80>>>0)<($88>>>0);
        $90 = HEAP32[$60>>2]|0;
        $91 = (($90) + ($80<<2)|0);
        $92 = HEAP32[$91>>2]|0;
        if ($89) {
         $164 = $87;$82 = $90;$84 = $92;$i$013 = $80;
        } else {
         $$lcssa = $90;$$lcssa6 = $92;$n$0$ph$lcssa = $n$0$ph23;
         break L35;
        }
       }
       $93 = (($n$0$ph23) + 1)|0;
       $94 = (($$lcssa113) + ($n$0$ph23<<2)|0);
       HEAP32[$94>>2] = $$lcssa111;
       $95 = (($$lcssa109) + -1)|0;
       $96 = ($$lcssa115>>>0)<($95>>>0);
       $97 = HEAP32[$60>>2]|0;
       $98 = (($97) + ($$lcssa115<<2)|0);
       $99 = HEAP32[$98>>2]|0;
       if ($96) {
        $161 = $$lcssa109;$162 = $99;$163 = $97;$i$0$ph22 = $$lcssa115;$n$0$ph23 = $93;
       } else {
        $$lcssa = $97;$$lcssa6 = $99;$n$0$ph$lcssa = $93;
        break;
       }
      }
     }
    } while(0);
    $100 = (($n$0$ph$lcssa) + 1)|0;
    $101 = (($$lcssa) + ($n$0$ph$lcssa<<2)|0);
    HEAP32[$101>>2] = $$lcssa6;
    HEAP32[$$phi$trans$insert>>2] = $100;
    $102 = $100;
   }
   $103 = ($102|0)==(1);
   if ($103) {
    HEAP32[$lastWasTab>>2] = 0;
    $129 = HEAP32[$60>>2]|0;
    $130 = HEAP32[$129>>2]|0;
    $131 = (_quote_special_chars($130)|0);
    $132 = (_strlen($131)|0);
    $133 = (($132) + -1)|0;
    $134 = (($131) + ($133)|0);
    $135 = HEAP8[$134>>0]|0;
    $136 = ($135<<24>>24)==(47);
    if ($136) {
     $chosen_match$1 = $131;$len_found$1 = $132;
     label = 41;
    } else {
     $137 = (($131) + ($132)|0);
     HEAP8[$137>>0] = 32;
     $138 = (($132) + 1)|0;
     $139 = (($131) + ($138)|0);
     HEAP8[$139>>0] = 0;
     $chosen_match$1 = $131;$len_found$1 = $138;
     label = 41;
    }
   } else {
    (_bb_putchar(7)|0);
    $104 = HEAP32[$60>>2]|0;
    $105 = ($104|0)==(0|0);
    if ($105) {
     $chosen_match$2 = 0;
    } else {
     $106 = HEAP32[$104>>2]|0;
     $107 = (_xstrdup($106)|0);
     $108 = HEAP8[$107>>0]|0;
     $109 = ($108<<24>>24)==(0);
     if ($109) {
      $chosen_match$2 = $107;
     } else {
      $110 = HEAP32[$$phi$trans$insert>>2]|0;
      $111 = ($110>>>0)>(1);
      $112 = $107;
      $122 = $108;$cp$011 = $107;
      L50: while(1) {
       if ($111) {
        $113 = $cp$011;
        $114 = (($113) - ($112))|0;
        $$pre49 = HEAP32[$60>>2]|0;
        $n1$010 = 1;
        while(1) {
         $117 = (($$pre49) + ($n1$010<<2)|0);
         $118 = HEAP32[$117>>2]|0;
         $119 = (($118) + ($114)|0);
         $120 = HEAP8[$119>>0]|0;
         $121 = ($120<<24>>24)==($122<<24>>24);
         $115 = (($n1$010) + 1)|0;
         if (!($121)) {
          $cp$04 = $cp$011;
          break L50;
         }
         $116 = ($115>>>0)<($110>>>0);
         if ($116) {
          $n1$010 = $115;
         } else {
          break;
         }
        }
       }
       $123 = ((($cp$011)) + 1|0);
       $124 = HEAP8[$123>>0]|0;
       $125 = ($124<<24>>24)==(0);
       if ($125) {
        $cp$04 = $123;
        break;
       } else {
        $122 = $124;$cp$011 = $123;
       }
      }
      $126 = ($cp$04|0)==($107|0);
      if ($126) {
       $chosen_match$2 = $107;
      } else {
       HEAP8[$cp$04>>0] = 0;
       $127 = (_quote_special_chars($107)|0);
       _free($107);
       $128 = (_strlen($127)|0);
       $chosen_match$1 = $127;$len_found$1 = $128;
       label = 41;
      }
     }
    }
   }
   if ((label|0) == 41) {
    $140 = (($len_found$1) - ($match_pfx_len$1$lcssa))|0;
    $141 = ((($0)) + 28|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = (($140) + ($142))|0;
    $144 = ((($0)) + 32|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ($143|0)<($145|0);
    if ($146) {
     $147 = HEAP32[$54>>2]|0;
     $148 = HEAP32[$57>>2]|0;
     $149 = (($148) + ($147)|0);
     (_strcpy($53,$149)|0);
     $150 = HEAP32[$54>>2]|0;
     $151 = HEAP32[$57>>2]|0;
     $152 = (($151) + ($150)|0);
     $153 = (($chosen_match$1) + ($match_pfx_len$1$lcssa)|0);
     HEAP32[$vararg_buffer3>>2] = $153;
     $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
     HEAP32[$vararg_ptr6>>2] = $53;
     (_sprintf($152,6916,$vararg_buffer3)|0);
     $154 = HEAP32[$57>>2]|0;
     $155 = (_strlen($154)|0);
     HEAP32[$141>>2] = $155;
     $156 = HEAP32[$54>>2]|0;
     $157 = ((($0)) + 16|0);
     $158 = HEAP32[$157>>2]|0;
     $$neg1 = (($match_pfx_len$1$lcssa) - ($len_found$1))|0;
     $159 = (($$neg1) + ($155))|0;
     $160 = (($159) - ($156))|0;
     _redraw($158,$160);
     $chosen_match$2 = $chosen_match$1;
    } else {
     $chosen_match$2 = $chosen_match$1;
    }
   }
   _free($chosen_match$2);
   _free($53);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _redraw($y,$back_cursor) {
 $y = $y|0;
 $back_cursor = $back_cursor|0;
 var $0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($y|0)>(0);
 if ($0) {
  HEAP32[$vararg_buffer>>2] = $y;
  (_printf(6878,$vararg_buffer)|0);
 }
 (_bb_putchar(13)|0);
 _put_prompt();
 _put_till_end_and_adv_cursor();
 (_printf(6798,$vararg_buffer1)|0);
 _input_backward($back_cursor);
 STACKTOP = sp;return;
}
function _get_next_history() {
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[796>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  label = 4;
 } else {
  $5 = ((($1)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($1)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6|0)<($8|0);
  if ($9) {
   _save_command_ps_at_cur_history();
   $10 = HEAP32[$0>>2]|0;
   $11 = ((($10)) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($12) + 1)|0;
   HEAP32[$11>>2] = $13;
   $$0 = $13;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  (_bb_putchar(7)|0);
  $$0 = 0;
 }
 return ($$0|0);
}
function _get_previous_history() {
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[796>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  label = 4;
 } else {
  $5 = ((($1)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   label = 4;
  } else {
   _save_command_ps_at_cur_history();
   $8 = HEAP32[$0>>2]|0;
   $9 = ((($8)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + -1)|0;
   HEAP32[$9>>2] = $11;
   $$0 = 1;
  }
 }
 if ((label|0) == 4) {
  (_bb_putchar(7)|0);
  $$0 = 0;
 }
 return ($$0|0);
}
function _goto_new_line() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _put_till_end_and_adv_cursor();
 $0 = HEAP32[796>>2]|0;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  (_bb_putchar(10)|0);
 }
 return;
}
function _free_tab_completion_data() {
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[796>>2]|0;
 $1 = ((($0)) + 52|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($0)) + 56|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   $18 = $2;
  } else {
   $7 = (($5) + -1)|0;
   HEAP32[$4>>2] = $7;
   $8 = (($2) + ($7<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   _free($9);
   $10 = HEAP32[$4>>2]|0;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $13 = $10;
    while(1) {
     $$pre = HEAP32[$1>>2]|0;
     $12 = (($13) + -1)|0;
     HEAP32[$4>>2] = $12;
     $14 = (($$pre) + ($12<<2)|0);
     $15 = HEAP32[$14>>2]|0;
     _free($15);
     $16 = HEAP32[$4>>2]|0;
     $17 = ($16|0)==(0);
     if ($17) {
      break;
     } else {
      $13 = $16;
     }
    }
   }
   $$pre2 = HEAP32[$1>>2]|0;
   $18 = $$pre2;
  }
  _free($18);
  HEAP32[$1>>2] = 0;
 }
 return;
}
function _save_command_ps_at_cur_history() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[796>>2]|0;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if (!($4)) {
  $5 = HEAP32[$0>>2]|0;
  $6 = ((($5)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (((($5)) + 28|0) + ($7<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  _free($9);
  $10 = HEAP32[$1>>2]|0;
  $11 = (_xstrdup($10)|0);
  $12 = HEAP32[$0>>2]|0;
  $13 = (((($12)) + 28|0) + ($7<<2)|0);
  HEAP32[$13>>2] = $11;
 }
 return;
}
function _put_prompt() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[796>>2]|0;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[1124>>2]|0;
 (_fputs($2,$3)|0);
 (_fflush_all()|0);
 $4 = ((($0)) + 24|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8>>>0) / ($6>>>0))&-1;
 $10 = ((($0)) + 16|0);
 HEAP32[$10>>2] = $9;
 $11 = (($8>>>0) % ($6>>>0))&-1;
 $12 = ((($0)) + 12|0);
 HEAP32[$12>>2] = $11;
 return;
}
function _build_match_prefix($match_buf) {
 $match_buf = $match_buf|0;
 var $$012$i = 0, $$012$i$29 = 0, $$012$i$34 = 0, $$012$i$39 = 0, $$012$i$44 = 0, $$012$i$49 = 0, $$012$i$54 = 0, $$012$i$59 = 0, $$03$i = 0, $$03$i$28 = 0, $$03$i$33 = 0, $$03$i$38 = 0, $$03$i$43 = 0, $$03$i$48 = 0, $$03$i$53 = 0, $$03$i$58 = 0, $$lcssa = 0, $$lcssa131 = 0, $$lcssa132 = 0, $$lcssa135 = 0;
 var $$pr = 0, $$pre = 0, $$pre93 = 0, $$pre94 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $command_mode$0 = 0, $command_mode$1 = 0, $command_mode$2 = 0, $cond = 0, $i$0 = 0, $i$1 = 0, $i$10 = 0, $i$11 = 0, $i$11$lcssa = 0, $i$12 = 0;
 var $i$13 = 0, $i$14 = 0, $i$14$in = 0, $i$14$in$lcssa129 = 0, $i$15 = 0, $i$2$ph82 = 0, $i$278 = 0, $i$278$lcssa = 0, $i$477 = 0, $i$7 = 0, $i$8 = 0, $i$9 = 0, $in_quote$0$ph81 = 0, $j$0 = 0, $j$0$lcssa130 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond25 = 0, $or$cond27 = 0;
 var $or$cond9 = 0, $sext$mask = 0, $sext$mask24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($match_buf)|0);
 $i$0 = $0;
 while(1) {
  $1 = (($match_buf) + ($i$0)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = (($match_buf) + ($i$0<<1)|0);
  HEAP16[$4>>1] = $3;
  $5 = (($i$0) + -1)|0;
  $6 = ($i$0|0)>(0);
  if ($6) {
   $i$0 = $5;
  } else {
   $i$1 = 0;
   break;
  }
 }
 L3: while(1) {
  $7 = (($match_buf) + ($i$1<<1)|0);
  $8 = HEAP16[$7>>1]|0;
  switch ($8<<16>>16) {
  case 0:  {
   break L3;
   break;
  }
  case 92:  {
   break;
  }
  default: {
   $$pre93 = (($i$1) + 1)|0;
   $i$1 = $$pre93;
   continue L3;
  }
  }
  $11 = (($i$1) + 1)|0;
  $12 = (($match_buf) + ($11<<1)|0);
  $13 = HEAP16[$12>>1]|0;
  HEAP16[$7>>1] = $13;
  $14 = ($13<<16>>16)==(0);
  if ($14) {
   $22 = 0;
  } else {
   $$012$i = $i$1;$$03$i = $11;
   while(1) {
    $15 = (($$012$i) + 1)|0;
    $16 = (($$03$i) + 1)|0;
    $17 = (($match_buf) + ($16<<1)|0);
    $18 = HEAP16[$17>>1]|0;
    $19 = (($match_buf) + ($15<<1)|0);
    HEAP16[$19>>1] = $18;
    $20 = ($18<<16>>16)==(0);
    if ($20) {
     break;
    } else {
     $$012$i = $15;$$03$i = $16;
    }
   }
   $$pre = HEAP16[$7>>1]|0;
   $22 = $$pre;
  }
  $21 = $22&65535;
  $23 = $21 | 256;
  $24 = $23&65535;
  HEAP16[$7>>1] = $24;
  $i$1 = $11;
 }
 $9 = HEAP16[$match_buf>>1]|0;
 $10 = ($9<<16>>16)==(0);
 L14: do {
  if ($10) {
   $i$8 = 0;
  } else {
   $164 = $9;$165 = $match_buf;$i$2$ph82 = 0;$in_quote$0$ph81 = 0;
   L15: while(1) {
    $25 = ($in_quote$0$ph81|0)==(0);
    $28 = $164;$46 = $165;$i$278 = $i$2$ph82;
    L17: while(1) {
     $27 = $28 << 16 >> 16;
     switch ($28<<16>>16) {
     case 34: case 39:  {
      $29 = ($27|0)==($in_quote$0$ph81|0);
      $or$cond25 = $25 | $29;
      if ($or$cond25) {
       $$lcssa132 = $46;$$lcssa135 = $27;$i$278$lcssa = $i$278;
       break L17;
      }
      break;
     }
     default: {
     }
     }
     if (!($25)) {
      $44 = $27 | 256;
      $45 = $44&65535;
      HEAP16[$46>>1] = $45;
     }
     $47 = (($i$278) + 1)|0;
     $48 = (($match_buf) + ($47<<1)|0);
     $49 = HEAP16[$48>>1]|0;
     $50 = ($49<<16>>16)==(0);
     if ($50) {
      break L15;
     } else {
      $28 = $49;$46 = $48;$i$278 = $47;
     }
    }
    $30 = $$lcssa135 ^ $in_quote$0$ph81;
    $31 = (($i$278$lcssa) + 1)|0;
    $32 = (($match_buf) + ($31<<1)|0);
    $33 = HEAP16[$32>>1]|0;
    HEAP16[$$lcssa132>>1] = $33;
    $34 = ($33<<16>>16)==(0);
    if (!($34)) {
     $$012$i$59 = $i$278$lcssa;$$03$i$58 = $31;
     while(1) {
      $38 = (($$012$i$59) + 1)|0;
      $39 = (($$03$i$58) + 1)|0;
      $40 = (($match_buf) + ($39<<1)|0);
      $41 = HEAP16[$40>>1]|0;
      $42 = (($match_buf) + ($38<<1)|0);
      HEAP16[$42>>1] = $41;
      $43 = ($41<<16>>16)==(0);
      if ($43) {
       break;
      } else {
       $$012$i$59 = $38;$$03$i$58 = $39;
      }
     }
    }
    $35 = (($match_buf) + ($i$278$lcssa<<1)|0);
    $36 = HEAP16[$35>>1]|0;
    $37 = ($36<<16>>16)==(0);
    if ($37) {
     break;
    } else {
     $164 = $36;$165 = $35;$i$2$ph82 = $i$278$lcssa;$in_quote$0$ph81 = $30;
    }
   }
   $$pr = HEAP16[$match_buf>>1]|0;
   $26 = ($$pr<<16>>16)==(0);
   if ($26) {
    $i$8 = 0;
   } else {
    $51 = $$pr;$i$477 = 0;
    while(1) {
     $52 = ($51<<16>>16)==(38);
     $53 = ($51<<16>>16)==(124);
     switch ($51<<16>>16) {
     case 38: case 59: case 124:  {
      $54 = ($i$477|0)==(0);
      if ($54) {
       $60 = 0;
      } else {
       $55 = (($i$477) + -1)|0;
       $56 = (($match_buf) + ($55<<1)|0);
       $57 = HEAP16[$56>>1]|0;
       $58 = $57 << 16 >> 16;
       $60 = $58;
      }
      $59 = $60 & -3;
      $61 = ($59|0)==(60);
      $or$cond27 = $52 & $61;
      $62 = ($60|0)==(62);
      $or$cond9 = $53 & $62;
      $or$cond = $or$cond9 | $or$cond27;
      if ($or$cond) {
       $i$7 = $i$477;
      } else {
       $63 = (($i$477) + 1)|0;
       $64 = (($match_buf) + ($63<<1)|0);
       $65 = HEAP16[$64>>1]|0;
       $66 = ($51<<16>>16)==($65<<16>>16);
       $67 = $66&1;
       $68 = (($67) + ($63))|0;
       $69 = ($68|0)==(0);
       if ($69) {
        $i$7 = -1;
       } else {
        $70 = (($match_buf) + ($68<<1)|0);
        $71 = HEAP16[$70>>1]|0;
        HEAP16[$match_buf>>1] = $71;
        $72 = ($71<<16>>16)==(0);
        if ($72) {
         $i$7 = -1;
        } else {
         $$012$i$54 = 0;$$03$i$53 = $68;
         while(1) {
          $73 = (($$012$i$54) + 1)|0;
          $74 = (($$03$i$53) + 1)|0;
          $75 = (($match_buf) + ($74<<1)|0);
          $76 = HEAP16[$75>>1]|0;
          $77 = (($match_buf) + ($73<<1)|0);
          HEAP16[$77>>1] = $76;
          $78 = ($76<<16>>16)==(0);
          if ($78) {
           $i$7 = -1;
           break;
          } else {
           $$012$i$54 = $73;$$03$i$53 = $74;
          }
         }
        }
       }
      }
      break;
     }
     default: {
      $i$7 = $i$477;
     }
     }
     $79 = (($i$7) + 1)|0;
     $80 = (($match_buf) + ($79<<1)|0);
     $81 = HEAP16[$80>>1]|0;
     $82 = ($81<<16>>16)==(0);
     if ($82) {
      $i$8 = 0;
      break L14;
     } else {
      $51 = $81;$i$477 = $79;
     }
    }
   }
  }
 } while(0);
 L43: while(1) {
  $83 = (($match_buf) + ($i$8<<1)|0);
  $84 = HEAP16[$83>>1]|0;
  switch ($84<<16>>16) {
  case 0:  {
   $i$9 = 0;
   break L43;
   break;
  }
  case 96:  {
   break;
  }
  default: {
   $$pre94 = (($i$8) + 1)|0;
   $i$8 = $$pre94;
   continue L43;
  }
  }
  $85 = (($i$8) + 1)|0;
  $j$0 = $85;
  L48: while(1) {
   $86 = (($match_buf) + ($j$0<<1)|0);
   $87 = HEAP16[$86>>1]|0;
   switch ($87<<16>>16) {
   case 0:  {
    $$lcssa131 = $85;
    label = 36;
    break L43;
    break;
   }
   case 96:  {
    $j$0$lcssa130 = $j$0;
    break L48;
    break;
   }
   default: {
   }
   }
   $95 = (($j$0) + 1)|0;
   $j$0 = $95;
  }
  $88 = ($i$8|0)==($j$0$lcssa130|0);
  if ($88) {
   $i$8 = $85;
   continue;
  }
  HEAP16[$83>>1] = 96;
  $$012$i$49 = $i$8;$$03$i$48 = $j$0$lcssa130;
  while(1) {
   $89 = (($$012$i$49) + 1)|0;
   $90 = (($$03$i$48) + 1)|0;
   $91 = (($match_buf) + ($90<<1)|0);
   $92 = HEAP16[$91>>1]|0;
   $93 = (($match_buf) + ($89<<1)|0);
   HEAP16[$93>>1] = $92;
   $94 = ($92<<16>>16)==(0);
   if ($94) {
    $i$8 = $85;
    continue L43;
   } else {
    $$012$i$49 = $89;$$03$i$48 = $90;
   }
  }
 }
 if ((label|0) == 36) {
  $96 = ($$lcssa131|0)==(0);
  if ($96) {
   $i$9 = 0;
  } else {
   $97 = (($match_buf) + ($$lcssa131<<1)|0);
   $98 = HEAP16[$97>>1]|0;
   HEAP16[$match_buf>>1] = $98;
   $99 = ($98<<16>>16)==(0);
   if ($99) {
    $i$9 = 0;
   } else {
    $$012$i$44 = 0;$$03$i$43 = $$lcssa131;
    while(1) {
     $100 = (($$012$i$44) + 1)|0;
     $101 = (($$03$i$43) + 1)|0;
     $102 = (($match_buf) + ($101<<1)|0);
     $103 = HEAP16[$102>>1]|0;
     $104 = (($match_buf) + ($100<<1)|0);
     HEAP16[$104>>1] = $103;
     $105 = ($103<<16>>16)==(0);
     if ($105) {
      $i$9 = 0;
      break;
     } else {
      $$012$i$44 = $100;$$03$i$43 = $101;
     }
    }
   }
  }
 }
 L60: while(1) {
  $106 = (($match_buf) + ($i$9<<1)|0);
  $107 = HEAP16[$106>>1]|0;
  switch ($107<<16>>16) {
  case 0:  {
   $i$11 = 0;
   break L60;
   break;
  }
  case 123: case 40:  {
   $108 = (($i$9) + 1)|0;
   $109 = ($108|0)==(0);
   if ($109) {
    $i$10 = -1;
   } else {
    $110 = (($match_buf) + ($108<<1)|0);
    $111 = HEAP16[$110>>1]|0;
    HEAP16[$match_buf>>1] = $111;
    $112 = ($111<<16>>16)==(0);
    if ($112) {
     $i$10 = -1;
    } else {
     $$012$i$39 = 0;$$03$i$38 = $108;
     while(1) {
      $113 = (($$012$i$39) + 1)|0;
      $114 = (($$03$i$38) + 1)|0;
      $115 = (($match_buf) + ($114<<1)|0);
      $116 = HEAP16[$115>>1]|0;
      $117 = (($match_buf) + ($113<<1)|0);
      HEAP16[$117>>1] = $116;
      $118 = ($116<<16>>16)==(0);
      if ($118) {
       $i$10 = -1;
       break;
      } else {
       $$012$i$39 = $113;$$03$i$38 = $114;
      }
     }
    }
   }
   break;
  }
  default: {
   $i$10 = $i$9;
  }
  }
  $119 = (($i$10) + 1)|0;
  $i$9 = $119;
 }
 while(1) {
  $120 = (($match_buf) + ($i$11<<1)|0);
  $121 = HEAP16[$120>>1]|0;
  $cond = ($121<<16>>16)==(32);
  $122 = (($i$11) + 1)|0;
  if ($cond) {
   $i$11 = $122;
  } else {
   $$lcssa = $121;$i$11$lcssa = $i$11;
   break;
  }
 }
 $123 = ($i$11$lcssa|0)==(0);
 if (!($123)) {
  HEAP16[$match_buf>>1] = $$lcssa;
  $124 = ($$lcssa<<16>>16)==(0);
  if (!($124)) {
   $$012$i$34 = 0;$$03$i$33 = $i$11$lcssa;
   while(1) {
    $125 = (($$012$i$34) + 1)|0;
    $126 = (($$03$i$33) + 1)|0;
    $127 = (($match_buf) + ($126<<1)|0);
    $128 = HEAP16[$127>>1]|0;
    $129 = (($match_buf) + ($125<<1)|0);
    HEAP16[$129>>1] = $128;
    $130 = ($128<<16>>16)==(0);
    if ($130) {
     break;
    } else {
     $$012$i$34 = $125;$$03$i$33 = $126;
    }
   }
  }
 }
 $131 = ((($match_buf)) + 2|0);
 $command_mode$0 = 0;$i$12 = 0;
 L76: while(1) {
  $132 = (($match_buf) + ($i$12<<1)|0);
  $133 = HEAP16[$132>>1]|0;
  switch ($133<<16>>16) {
  case 0:  {
   $command_mode$2 = $command_mode$0;
   break L76;
   break;
  }
  case 62: case 60: case 32:  {
   $134 = ($133<<16>>16)==(32);
   $135 = ($command_mode$0|0)==(0);
   $or$cond11 = $135 & $134;
   if (!($or$cond11)) {
    $command_mode$2 = 2;
    break L76;
   }
   $136 = HEAP16[$match_buf>>1]|0;
   $sext$mask = $136 & 255;
   $137 = ($sext$mask<<16>>16)==(99);
   if (!($137)) {
    $command_mode$2 = 2;
    break L76;
   }
   $138 = HEAP16[$131>>1]|0;
   $sext$mask24 = $138 & 255;
   $139 = ($sext$mask24<<16>>16)==(100);
   $140 = ($i$12|0)==(2);
   $or$cond13 = $140 & $139;
   if ($or$cond13) {
    $command_mode$1 = 1;
   } else {
    $command_mode$2 = 2;
    break L76;
   }
   break;
  }
  default: {
   $command_mode$1 = $command_mode$0;
  }
  }
  $141 = (($i$12) + 1)|0;
  $command_mode$0 = $command_mode$1;$i$12 = $141;
 }
 $i$13 = 0;
 while(1) {
  $142 = (($match_buf) + ($i$13<<1)|0);
  $143 = HEAP16[$142>>1]|0;
  $144 = ($143<<16>>16)==(0);
  $145 = (($i$13) + 1)|0;
  if ($144) {
   $i$14$in = $i$13;
   break;
  } else {
   $i$13 = $145;
  }
 }
 L86: while(1) {
  $i$14 = (($i$14$in) + -1)|0;
  $146 = ($i$14$in|0)>(0);
  if (!($146)) {
   $i$15 = 0;
   break;
  }
  $147 = (($match_buf) + ($i$14<<1)|0);
  $148 = HEAP16[$147>>1]|0;
  switch ($148<<16>>16) {
  case 32: case 38: case 60: case 62: case 124:  {
   $i$14$in$lcssa129 = $i$14$in;
   label = 58;
   break L86;
   break;
  }
  default: {
   $i$14$in = $i$14;
  }
  }
 }
 if ((label|0) == 58) {
  $149 = (($match_buf) + ($i$14$in$lcssa129<<1)|0);
  $150 = HEAP16[$149>>1]|0;
  HEAP16[$match_buf>>1] = $150;
  $151 = ($150<<16>>16)==(0);
  if ($151) {
   $i$15 = 0;
  } else {
   $$012$i$29 = 0;$$03$i$28 = $i$14$in$lcssa129;
   while(1) {
    $152 = (($$012$i$29) + 1)|0;
    $153 = (($$03$i$28) + 1)|0;
    $154 = (($match_buf) + ($153<<1)|0);
    $155 = HEAP16[$154>>1]|0;
    $156 = (($match_buf) + ($152<<1)|0);
    HEAP16[$156>>1] = $155;
    $157 = ($155<<16>>16)==(0);
    if ($157) {
     $i$15 = 0;
     break;
    } else {
     $$012$i$29 = $152;$$03$i$28 = $153;
    }
   }
  }
 }
 while(1) {
  $158 = (($match_buf) + ($i$15<<1)|0);
  $159 = HEAP16[$158>>1]|0;
  $160 = $159&255;
  $161 = (($match_buf) + ($i$15)|0);
  HEAP8[$161>>0] = $160;
  $162 = ($160<<24>>24)==(0);
  $163 = (($i$15) + 1)|0;
  if ($162) {
   break;
  } else {
   $i$15 = $163;
  }
 }
 return ($command_mode$2|0);
}
function _complete_cmd_dir_file($command,$type) {
 $command = $command|0;
 $type = $type|0;
 var $$ph = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $dirbuf$0$ph = 0, $dirbuf$0510 = 0, $dirbuf$059 = 0, $dirbuf$06 = 0, $exitcond = 0, $found$0 = 0, $i$02 = 0, $npaths$1 = 0, $npaths$18 = 0, $npth$0$lcssa$i = 0, $npth$04$i = 0, $npth$11$i = 0, $path1 = 0, $pfind$0$ph = 0, $pfind$07 = 0, $pth$0$i = 0, $st = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $path1 = sp + 76|0;
 $st = sp;
 HEAP32[$path1>>2] = 18460;
 $0 = (_strrchr($command,47)|0);
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   $2 = ($type|0)==(0);
   if ($2) {
    $3 = HEAP32[796>>2]|0;
    $4 = HEAP32[$3>>2]|0;
    $5 = HEAP32[$4>>2]|0;
    $6 = $5 & 16;
    $7 = ($6|0)==(0);
    if ($7) {
     $10 = (_getenv((6921|0))|0);
     $pth$0$i = $10;
    } else {
     $8 = ((($4)) + 4|0);
     $9 = HEAP32[$8>>2]|0;
     $pth$0$i = $9;
    }
    $11 = ($pth$0$i|0)==(0|0);
    if ($11) {
     $$ph = $path1;$dirbuf$0$ph = 0;$pfind$0$ph = $command;
     label = 16;
    } else {
     $12 = HEAP8[$pth$0$i>>0]|0;
     switch ($12<<24>>24) {
     case 0:  {
      $$ph = $path1;$dirbuf$0$ph = 0;$pfind$0$ph = $command;
      label = 16;
      break L1;
      break;
     }
     case 58:  {
      $13 = ((($pth$0$i)) + 1|0);
      $14 = HEAP8[$13>>0]|0;
      $15 = ($14<<24>>24)==(0);
      if ($15) {
       $$ph = $path1;$dirbuf$0$ph = 0;$pfind$0$ph = $command;
       label = 16;
       break L1;
      }
      break;
     }
     default: {
     }
     }
     $16 = (_strchr($pth$0$i,58)|0);
     $17 = ($16|0)==(0|0);
     L12: do {
      if ($17) {
       $npth$0$lcssa$i = 1;
      } else {
       $19 = $16;$npth$04$i = 1;
       while(1) {
        $18 = ((($19)) + 1|0);
        $20 = HEAP8[$18>>0]|0;
        $21 = ($20<<24>>24)==(0);
        if ($21) {
         $npth$0$lcssa$i = $npth$04$i;
         break L12;
        }
        $22 = (($npth$04$i) + 1)|0;
        $23 = (_strchr($18,58)|0);
        $24 = ($23|0)==(0|0);
        if ($24) {
         $npth$0$lcssa$i = $22;
         break;
        } else {
         $19 = $23;$npth$04$i = $22;
        }
       }
      }
     } while(0);
     $25 = $npth$0$lcssa$i << 2;
     $26 = (_xmalloc($25)|0);
     $27 = (_xstrdup($pth$0$i)|0);
     HEAP32[$26>>2] = $27;
     $28 = (_strchr($27,58)|0);
     $29 = ($28|0)==(0|0);
     if ($29) {
      $$ph = $26;$dirbuf$0$ph = 0;$pfind$0$ph = $command;
      label = 16;
     } else {
      $31 = $28;$npth$11$i = 1;
      while(1) {
       $30 = ((($31)) + 1|0);
       HEAP8[$31>>0] = 0;
       $32 = HEAP8[$30>>0]|0;
       $33 = ($32<<24>>24)==(0);
       if ($33) {
        $npaths$1 = $npth$11$i;
        break;
       }
       $34 = (($npth$11$i) + 1)|0;
       $35 = (($26) + ($npth$11$i<<2)|0);
       HEAP32[$35>>2] = $30;
       $36 = (_strchr($30,58)|0);
       $37 = ($36|0)==(0|0);
       if ($37) {
        $npaths$1 = $34;
        break;
       } else {
        $31 = $36;$npth$11$i = $34;
       }
      }
      $44 = (_strlen($command)|0);
      $45 = ($npaths$1|0)>(0);
      if ($45) {
       $52 = $26;$99 = $44;$dirbuf$06 = 0;$npaths$18 = $npaths$1;$pfind$07 = $command;
       label = 18;
      } else {
       $100 = $44;$97 = $26;$dirbuf$059 = 0;
       label = 37;
      }
     }
    }
   } else {
    $$ph = $path1;$dirbuf$0$ph = 0;$pfind$0$ph = $command;
    label = 16;
   }
  } else {
   $38 = ((($0)) + 1|0);
   $39 = $38;
   $40 = $command;
   $41 = (($39) - ($40))|0;
   $42 = (_xstrndup($command,$41)|0);
   HEAP32[$path1>>2] = $42;
   $$ph = $path1;$dirbuf$0$ph = $42;$pfind$0$ph = $38;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $43 = (_strlen($pfind$0$ph)|0);
  $52 = $$ph;$99 = $43;$dirbuf$06 = $dirbuf$0$ph;$npaths$18 = 1;$pfind$07 = $pfind$0$ph;
  label = 18;
 }
 if ((label|0) == 18) {
  $46 = ((($st)) + 12|0);
  $47 = HEAP32[796>>2]|0;
  $48 = ((($47)) + 52|0);
  $49 = ((($47)) + 56|0);
  $50 = ($type|0)==(1);
  $i$02 = 0;
  while(1) {
   $51 = (($52) + ($i$02<<2)|0);
   $53 = HEAP32[$51>>2]|0;
   $54 = (_opendir($53)|0);
   $55 = ($54|0)==(0|0);
   if (!($55)) {
    $56 = (_readdir($54)|0);
    $57 = ($56|0)==(0|0);
    if (!($57)) {
     $59 = $56;
     while(1) {
      $58 = ((($59)) + 11|0);
      $60 = HEAP8[$pfind$07>>0]|0;
      $61 = ($60<<24>>24)==(0);
      L33: do {
       if ($61) {
        $62 = HEAP8[$58>>0]|0;
        $63 = ($62<<24>>24)==(46);
        if ($63) {
         $64 = ((($59)) + 12|0);
         $65 = HEAP8[$64>>0]|0;
         switch ($65<<24>>24) {
         case 0:  {
          break L33;
          break;
         }
         case 46:  {
          break;
         }
         default: {
          label = 25;
          break L33;
         }
         }
         $66 = ((($59)) + 13|0);
         $67 = HEAP8[$66>>0]|0;
         $68 = ($67<<24>>24)==(0);
         if (!($68)) {
          label = 25;
         }
        } else {
         label = 25;
        }
       } else {
        label = 25;
       }
      } while(0);
      L37: do {
       if ((label|0) == 25) {
        label = 0;
        $69 = (_is_prefixed_with($58,$pfind$07)|0);
        $70 = ($69|0)==(0|0);
        if (!($70)) {
         $73 = HEAP32[$51>>2]|0;
         $74 = (_concat_path_file($73,$58)|0);
         $75 = (_stat($74,$st)|0);
         $76 = ($75|0)==(0);
         if ($76) {
          label = 29;
         } else {
          $77 = (_lstat($74,$st)|0);
          $78 = ($77|0)==(0);
          if ($78) {
           label = 29;
          } else {
           $found$0 = $74;
          }
         }
         do {
          if ((label|0) == 29) {
           label = 0;
           $79 = (_strlen($58)|0);
           $80 = (($79) + 2)|0;
           $81 = (_xrealloc($74,$80)|0);
           (_strcpy($81,$58)|0);
           $82 = HEAP32[$46>>2]|0;
           $83 = $82 & 61440;
           $84 = ($83|0)==(16384);
           if ($84) {
            $85 = (($81) + ($79)|0);
            HEAP8[$85>>0] = 47;
            $86 = (($79) + 1)|0;
            $87 = (($81) + ($86)|0);
            HEAP8[$87>>0] = 0;
           } else {
            if ($50) {
             $found$0 = $81;
             break;
            }
           }
           $88 = HEAP32[$48>>2]|0;
           $89 = HEAP32[$49>>2]|0;
           $90 = (_xrealloc_vector_helper($88,1028,$89)|0);
           HEAP32[$48>>2] = $90;
           $91 = HEAP32[$49>>2]|0;
           $92 = (($90) + ($91<<2)|0);
           HEAP32[$92>>2] = $81;
           $93 = (($91) + 1)|0;
           HEAP32[$49>>2] = $93;
           break L37;
          }
         } while(0);
         _free($found$0);
        }
       }
      } while(0);
      $71 = (_readdir($54)|0);
      $72 = ($71|0)==(0|0);
      if ($72) {
       break;
      } else {
       $59 = $71;
      }
     }
    }
    (_closedir($54)|0);
   }
   $94 = (($i$02) + 1)|0;
   $exitcond = ($94|0)==($npaths$18|0);
   if ($exitcond) {
    break;
   } else {
    $i$02 = $94;
   }
  }
  $95 = ($52|0)==($path1|0);
  if ($95) {
   $98 = $99;$dirbuf$0510 = $dirbuf$06;
  } else {
   $100 = $99;$97 = $52;$dirbuf$059 = $dirbuf$06;
   label = 37;
  }
 }
 if ((label|0) == 37) {
  $96 = HEAP32[$97>>2]|0;
  _free($96);
  _free($97);
  $98 = $100;$dirbuf$0510 = $dirbuf$059;
 }
 _free($dirbuf$0510);
 STACKTOP = sp;return ($98|0);
}
function _quote_special_chars($found) {
 $found = $found|0;
 var $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$01 = 0;
 var $l$1 = 0, $memchr$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($found)|0);
 $1 = $0 << 1;
 $2 = (($1) + 2)|0;
 $3 = (_xzalloc($2)|0);
 $4 = HEAP8[$found>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if (!($5)) {
  $$02 = $found;$7 = $4;$l$01 = 0;
  while(1) {
   $6 = $7 << 24 >> 24;
   $memchr$i = (_memchr(6891,$6,25)|0);
   $8 = ($memchr$i|0)==(0|0);
   if ($8) {
    $14 = $7;$l$1 = $l$01;
   } else {
    $9 = (($l$01) + 1)|0;
    $10 = (($3) + ($l$01)|0);
    HEAP8[$10>>0] = 92;
    $$pre = HEAP8[$$02>>0]|0;
    $14 = $$pre;$l$1 = $9;
   }
   $11 = ((($$02)) + 1|0);
   $12 = (($l$1) + 1)|0;
   $13 = (($3) + ($l$1)|0);
   HEAP8[$13>>0] = $14;
   $15 = HEAP8[$11>>0]|0;
   $16 = ($15<<24>>24)==(0);
   if ($16) {
    break;
   } else {
    $$02 = $11;$7 = $15;$l$01 = $12;
   }
  }
 }
 return ($3|0);
}
function _llist_add_to_end($list_head,$data) {
 $list_head = $list_head|0;
 $data = $data|0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $list_head;
 while(1) {
  $0 = HEAP32[$$0>>2]|0;
  $1 = ($0|0)==(0|0);
  if ($1) {
   $$0$lcssa = $$0;
   break;
  } else {
   $$0 = $0;
  }
 }
 $2 = (_xzalloc(8)|0);
 HEAP32[$$0$lcssa>>2] = $2;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = $data;
 return;
}
function _bb_parse_mode($s,$current_mode) {
 $s = $s|0;
 $current_mode = $current_mode|0;
 var $$ = 0, $$02 = 0, $$02$ph = 0, $$1 = 0, $$13 = 0, $$13$lcssa = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$lcssa82 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $e = 0, $new_mode$0$ph = 0, $new_mode$1 = 0, $new_mode$2 = 0, $new_mode$3 = 0, $new_mode$4 = 0, $or$cond = 0, $p$0$lcssa = 0, $p$1$lcssa = 0, $p$2$lcssa46 = 0, $permlist$1$ = 0, $permlist$1$$1 = 0, $permlist$1$$2 = 0;
 var $permlist$3 = 0, $permlist$4 = 0, $permlist$5 = 0, $tmp1$0 = 0, $wholist$0 = 0, $wholist$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $e = sp;
 $0 = HEAP8[$s>>0]|0;
 $1 = $0&255;
 $2 = (($1) + 208)|0;
 $3 = $2 & 248;
 $4 = ($3>>>0)<(8);
 L1: do {
  if ($4) {
   $5 = (_strtoul($s,$e,8)|0);
   $6 = HEAP32[$e>>2]|0;
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)!=(0);
   $9 = ($5>>>0)>(4095);
   $or$cond = $9 | $8;
   $$ = $or$cond ? -1 : $5;
   $$1 = $$;
  } else {
   $$02$ph = $s;$74 = $0;$new_mode$0$ph = $current_mode;
   L3: while(1) {
    $$02 = $$02$ph;$10 = $74;
    L5: while(1) {
     switch ($10<<24>>24) {
     case 0:  {
      $$1 = $new_mode$0$ph;
      break L1;
      break;
     }
     case 44:  {
      break;
     }
     default: {
      $$13 = $$02;$12 = $10;$wholist$0 = 0;
      break L5;
     }
     }
     $11 = ((($$02)) + 1|0);
     $$pre = HEAP8[$11>>0]|0;
     $$02 = $11;$10 = $$pre;
    }
    while(1) {
     $13 = ($12<<24>>24)==(97);
     if ($13) {
      $p$0$lcssa = 6947;
     } else {
      $22 = ($12<<24>>24)==(117);
      if ($22) {
       $p$0$lcssa = (6948);
      } else {
       $65 = ($12<<24>>24)==(103);
       if ($65) {
        $p$0$lcssa = (6949);
       } else {
        $66 = ($12<<24>>24)==(111);
        if ($66) {
         $p$0$lcssa = (6950);
        } else {
         $$13$lcssa = $$13;$$lcssa82 = $12;$wholist$0$lcssa = $wholist$0;
         break;
        }
       }
      }
     }
     $14 = $p$0$lcssa;
     $15 = (($14) - (6947))|0;
     $16 = (800 + ($15<<2)|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = $17 | $wholist$0;
     $19 = ((($$13)) + 1|0);
     $20 = HEAP8[$19>>0]|0;
     $21 = ($20<<24>>24)==(0);
     if ($21) {
      $$1 = -1;
      break L1;
     } else {
      $$13 = $19;$12 = $20;$wholist$0 = $18;
     }
    }
    $67 = ($wholist$0$lcssa|0)==(0);
    $68 = $wholist$0$lcssa ^ -1;
    $$5 = $67 ? -4096 : $68;
    $$2 = $$13$lcssa;$23 = $$lcssa82;$new_mode$1 = $new_mode$0$ph;
    while(1) {
     switch ($23<<24>>24) {
     case 45: case 43:  {
      $new_mode$2 = $new_mode$1;
      break;
     }
     case 61:  {
      $24 = $new_mode$1 & $$5;
      $new_mode$2 = $24;
      break;
     }
     default: {
      $$1 = -1;
      break L1;
     }
     }
     $25 = ((($$2)) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(117);
     L21: do {
      if ($27) {
       $p$1$lcssa = (6948);
       label = 12;
      } else {
       $44 = ($26<<24>>24)==(103);
       if ($44) {
        $p$1$lcssa = (6949);
        label = 12;
       } else {
        $69 = ($26<<24>>24)==(111);
        if ($69) {
         $p$1$lcssa = (6950);
         label = 12;
        } else {
         $70 = $new_mode$2 & 16457;
         $71 = ($70|0)==(0);
         $$3 = $25;$45 = $26;$permlist$3 = 0;
         while(1) {
          $46 = ($45<<24>>24)==(114);
          L27: do {
           if ($46) {
            $p$2$lcssa46 = 6952;
            label = 16;
           } else {
            $55 = ($45<<24>>24)==(119);
            if ($55) {
             $p$2$lcssa46 = (6953);
             label = 16;
            } else {
             switch ($45<<24>>24) {
             case 120:  {
              $p$2$lcssa46 = (6954);
              label = 16;
              break L27;
              break;
             }
             case 88:  {
              if ($71) {
               $permlist$4 = $permlist$3;
               break L27;
              } else {
               $p$2$lcssa46 = (6955);
               label = 16;
               break L27;
              }
              break;
             }
             default: {
             }
             }
             $72 = ($45<<24>>24)==(115);
             if ($72) {
              $p$2$lcssa46 = (6956);
              label = 16;
             } else {
              $73 = ($45<<24>>24)==(116);
              if ($73) {
               $p$2$lcssa46 = (6957);
               label = 16;
              } else {
               $$4 = $$3;$permlist$5 = $permlist$3;
               break L21;
              }
             }
            }
           }
          } while(0);
          if ((label|0) == 16) {
           label = 0;
           $47 = $p$2$lcssa46;
           $48 = (($47) - (6952))|0;
           $49 = (816 + ($48<<2)|0);
           $50 = HEAP32[$49>>2]|0;
           $51 = $50 | $permlist$3;
           $permlist$4 = $51;
          }
          $52 = ((($$3)) + 1|0);
          $53 = HEAP8[$52>>0]|0;
          $54 = ($53<<24>>24)==(0);
          if ($54) {
           $$4 = $52;$permlist$5 = $permlist$4;
           break;
          } else {
           $$3 = $52;$45 = $53;$permlist$3 = $permlist$4;
          }
         }
        }
       }
      }
     } while(0);
     if ((label|0) == 12) {
      label = 0;
      $28 = $p$1$lcssa;
      $29 = (($28) - (6947))|0;
      $30 = (800 + ($29<<2)|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = $new_mode$2 & 511;
      $33 = $32 & $31;
      $34 = $33 & 292;
      $35 = ($34|0)==(0);
      $36 = $35 ? 0 : 292;
      $permlist$1$ = $36 | $33;
      $37 = $33 & 146;
      $38 = ($37|0)==(0);
      $39 = $38 ? 0 : 146;
      $permlist$1$$1 = $39 | $permlist$1$;
      $40 = $33 & 73;
      $41 = ($40|0)==(0);
      $42 = $41 ? 0 : 73;
      $permlist$1$$2 = $42 | $permlist$1$$1;
      $43 = ((($$2)) + 2|0);
      $$4 = $43;$permlist$5 = $permlist$1$$2;
     }
     $56 = ($permlist$5|0)==(0);
     if ($56) {
      $new_mode$4 = $new_mode$2;
     } else {
      if ($67) {
       $57 = (_umask(0)|0);
       (_umask($57)|0);
       $58 = $57 ^ -1;
       $tmp1$0 = $58;
      } else {
       $tmp1$0 = $wholist$0$lcssa;
      }
      $59 = $tmp1$0 & $permlist$5;
      $60 = ($23<<24>>24)==(45);
      $61 = $59 ^ -1;
      $62 = $new_mode$2 & $61;
      $63 = $59 | $new_mode$2;
      $new_mode$3 = $60 ? $62 : $63;
      $new_mode$4 = $new_mode$3;
     }
     $64 = HEAP8[$$4>>0]|0;
     switch ($64<<24>>24) {
     case 44: case 0:  {
      $$02$ph = $$4;$74 = $64;$new_mode$0$ph = $new_mode$4;
      continue L3;
      break;
     }
     default: {
      $$2 = $$4;$23 = $64;$new_mode$1 = $new_mode$4;
     }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function _bb_process_escape_sequence($ptr) {
 $ptr = $ptr|0;
 var $$ = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0 = 0;
 var $n$0$lcssa = 0, $n$073 = 0, $n$2 = 0, $num_digits$0 = 0, $num_digits$0$lcssa = 0, $num_digits$070 = 0, $p$0$lcssa = 0, $p$1 = 0, $q$0 = 0, $q$0$lcssa = 0, $q$067 = 0, $q$2 = 0, $q$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ptr>>2]|0;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(120);
 $3 = ((($0)) + 1|0);
 $$ = $2 ? $3 : $0;
 $$3 = $2&1;
 $$4 = $2 ? 16 : 8;
 $n$0 = 0;$num_digits$0 = $$3;$q$0 = $$;
 while(1) {
  $4 = HEAP8[$q$0>>0]|0;
  $5 = $4&255;
  $6 = $5 | 32;
  $7 = (($6) + -48)|0;
  $8 = ($7>>>0)>(9);
  $9 = (($6) + -87)|0;
  $$5 = $8 ? $9 : $7;
  $10 = ($$5>>>0)<($$4>>>0);
  if (!($10)) {
   $n$0$lcssa = $n$0;$num_digits$0$lcssa = $num_digits$0;$q$0$lcssa = $q$0;
   label = 3;
   break;
  }
  $12 = Math_imul($n$0, $$4)|0;
  $13 = (($$5) + ($12))|0;
  $14 = ($13>>>0)>(255);
  $15 = ((($q$0)) + 1|0);
  if ($14) {
   $n$073 = $n$0;$num_digits$070 = $num_digits$0;$q$067 = $q$0;
   label = 7;
   break;
  }
  $16 = (($num_digits$0) + 1)|0;
  $17 = ($16>>>0)<(3);
  if ($17) {
   $n$0 = $13;$num_digits$0 = $16;$q$0 = $15;
  } else {
   $n$2 = $13;$q$3 = $15;
   label = 12;
   break;
  }
 }
 if ((label|0) == 3) {
  if ($2) {
   $11 = ($num_digits$0$lcssa|0)==(1);
   if ($11) {
    $$2 = 92;
   } else {
    $n$2 = $n$0$lcssa;$q$3 = $q$0$lcssa;
    label = 12;
   }
  } else {
   $n$073 = $n$0$lcssa;$num_digits$070 = $num_digits$0$lcssa;$q$067 = $q$0$lcssa;
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $18 = ($num_digits$070|0)==(0);
  if ($18) {
   $19 = HEAP8[$q$067>>0]|0;
   $20 = ($19<<24>>24)==(97);
   if ($20) {
    $p$0$lcssa = 6959;
    label = 9;
   } else {
    $22 = ($19<<24>>24)==(98);
    if ($22) {
     $p$0$lcssa = (6960);
     label = 9;
    } else {
     $27 = ($19<<24>>24)==(101);
     if ($27) {
      $p$0$lcssa = (6961);
      label = 9;
     } else {
      $28 = ($19<<24>>24)==(102);
      if ($28) {
       $p$0$lcssa = (6962);
       label = 9;
      } else {
       $29 = ($19<<24>>24)==(110);
       if ($29) {
        $p$0$lcssa = (6963);
        label = 9;
       } else {
        $30 = ($19<<24>>24)==(114);
        if ($30) {
         $p$0$lcssa = (6964);
         label = 9;
        } else {
         $31 = ($19<<24>>24)==(116);
         if ($31) {
          $p$0$lcssa = (6965);
          label = 9;
         } else {
          $32 = ($19<<24>>24)==(118);
          if ($32) {
           $p$0$lcssa = (6966);
           label = 9;
          } else {
           $33 = ($19<<24>>24)==(92);
           if ($33) {
            $p$0$lcssa = (6967);
            label = 9;
           } else {
            $p$1 = (6968);$q$2 = $q$067;
           }
          }
         }
        }
       }
      }
     }
    }
   }
   if ((label|0) == 9) {
    $21 = ((($q$067)) + 1|0);
    $p$1 = $p$0$lcssa;$q$2 = $21;
   }
   $23 = ((($p$1)) + 10|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24 << 24 >> 24;
   $n$2 = $25;$q$3 = $q$2;
   label = 12;
  } else {
   $n$2 = $n$073;$q$3 = $q$067;
   label = 12;
  }
 }
 if ((label|0) == 12) {
  HEAP32[$ptr>>2] = $q$3;
  $26 = $n$2&255;
  $$2 = $26;
 }
 return ($$2|0);
}
function _read_key($fd,$buffer,$timeout) {
 $fd = $fd|0;
 $buffer = $buffer|0;
 $timeout = $timeout|0;
 var $$lcssa = 0, $$lcssa156 = 0, $$lcssa164 = 0, $$lcssa169 = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa153 = 0, $n$0 = 0, $n$144 = 0, $n$2 = 0, $n$2$lcssa148 = 0, $n$3 = 0, $n$3$lcssa = 0, $n$3$lcssa$lcssa = 0, $n$545 = 0;
 var $n$545$lcssa162 = 0, $n$6 = 0, $n$6$lcssa = 0, $pfd = 0, $seq$043 = 0, $seq$043$lcssa161 = 0, $seq$1$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pfd = sp;
 HEAP32[$pfd>>2] = $fd;
 $0 = ((($pfd)) + 4|0);
 HEAP16[$0>>1] = 1;
 $1 = ((($buffer)) + 1|0);
 $2 = (___errno_location()|0);
 $3 = ($timeout|0)>(-2);
 $4 = ((($buffer)) + 2|0);
 L1: while(1) {
  HEAP32[$2>>2] = 0;
  $5 = HEAP8[$buffer>>0]|0;
  $6 = $5&255;
  $7 = ($5<<24>>24)==(0);
  if ($7) {
   if ($3) {
    $8 = (_safe_poll($pfd,1,$timeout)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     label = 5;
     break;
    }
   }
   $10 = (_safe_read($fd,$1,1)|0);
   $11 = ($10|0)<(1);
   if ($11) {
    $62 = -1;$63 = -1;
    break;
   } else {
    $n$0 = $10;
   }
  } else {
   $n$0 = $6;
  }
  $12 = HEAP8[$1>>0]|0;
  $13 = (($n$0) + -1)|0;
  $14 = ($13|0)==(0);
  if (!($14)) {
   _memmove(($1|0),($4|0),($13|0))|0;
  }
  $15 = ($12<<24>>24)==(27);
  if ($15) {
   $n$144 = $13;$seq$043 = 6979;
  } else {
   $$lcssa164 = $12;$$lcssa169 = $13;
   label = 10;
   break;
  }
  L12: while(1) {
   $i$0 = 0;$n$2 = $n$144;
   while(1) {
    $19 = ($n$2|0)>($i$0|0);
    if ($19) {
     $n$3 = $n$2;
    } else {
     $20 = (_safe_poll($pfd,1,50)|0);
     $21 = ($20|0)==(0);
     if ($21) {
      $n$6 = $n$2;
      label = 31;
      break L12;
     }
     HEAP32[$2>>2] = 0;
     $22 = (($1) + ($n$2)|0);
     $23 = (_safe_read($fd,$22,1)|0);
     $24 = ($23|0)<(1);
     if ($24) {
      $n$2$lcssa148 = $n$2;
      label = 16;
      break L12;
     }
     $27 = (($n$2) + 1)|0;
     $n$3 = $27;
    }
    $28 = (($1) + ($i$0)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29 << 24 >> 24;
    $31 = (($seq$043) + ($i$0)|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32 << 24 >> 24;
    $34 = $33 & 127;
    $35 = ($30|0)==($34|0);
    if (!($35)) {
     $$lcssa = $31;$$lcssa156 = $32;$n$3$lcssa = $n$3;
     break;
    }
    $39 = $33 & 128;
    $40 = ($39|0)==(0);
    if (!($40)) {
     $i$0$lcssa153 = $i$0;$seq$043$lcssa161 = $seq$043;
     label = 23;
     break L1;
    }
    $47 = (($i$0) + 1)|0;
    $i$0 = $47;$n$2 = $n$3;
   }
   $36 = ($$lcssa156<<24>>24)>(-1);
   if ($36) {
    $$pn = $$lcssa;
    while(1) {
     $37 = ((($$pn)) + 1|0);
     $$pre = HEAP8[$37>>0]|0;
     $38 = ($$pre<<24>>24)>(-1);
     if ($38) {
      $$pn = $37;
     } else {
      $seq$1$lcssa = $37;
      break;
     }
    }
   } else {
    $seq$1$lcssa = $$lcssa;
   }
   $48 = ((($seq$1$lcssa)) + 2|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = ($49<<24>>24)==(0);
   if ($50) {
    $n$3$lcssa$lcssa = $n$3$lcssa;
    label = 11;
    break;
   } else {
    $n$144 = $n$3$lcssa;$seq$043 = $48;
   }
  }
  L28: do {
   if ((label|0) == 11) {
    label = 0;
    $18 = ($n$3$lcssa$lcssa|0)<(15);
    if ($18) {
     $n$545 = $n$3$lcssa$lcssa;
     while(1) {
      $51 = (_safe_poll($pfd,1,50)|0);
      $52 = ($51|0)==(0);
      if ($52) {
       $n$6 = $n$545;
       label = 31;
       break L28;
      }
      HEAP32[$2>>2] = 0;
      $53 = (($1) + ($n$545)|0);
      $54 = (_safe_read($fd,$53,1)|0);
      $55 = ($54|0)<(1);
      if ($55) {
       $n$545$lcssa162 = $n$545;
       break;
      }
      $58 = (($n$545) + 1)|0;
      $59 = ($58|0)<(15);
      if ($59) {
       $n$545 = $58;
      } else {
       break L28;
      }
     }
     $56 = HEAP32[$2>>2]|0;
     $57 = ($56|0)==(11);
     if ($57) {
      $n$6 = $n$545$lcssa162;
      label = 31;
     } else {
      label = 29;
      break L1;
     }
    }
   }
   else if ((label|0) == 16) {
    label = 0;
    $25 = HEAP32[$2>>2]|0;
    $26 = ($25|0)==(11);
    if ($26) {
     $n$6 = $n$2$lcssa148;
     label = 31;
    } else {
     label = 17;
     break L1;
    }
   }
  } while(0);
  if ((label|0) == 31) {
   label = 0;
   $60 = ($n$6|0)<(2);
   if ($60) {
    $n$6$lcssa = $n$6;
    label = 32;
    break;
   }
  }
  HEAP8[$buffer>>0] = 0;
 }
 if ((label|0) == 5) {
  HEAP32[$2>>2] = 11;
  $62 = -1;$63 = -1;
 }
 else if ((label|0) == 10) {
  $16 = $$lcssa169&255;
  HEAP8[$buffer>>0] = $16;
  $17 = $$lcssa164&255;
  $62 = 0;$63 = $17;
 }
 else if ((label|0) == 17) {
  HEAP8[$buffer>>0] = 0;
  $62 = -1;$63 = -1;
 }
 else if ((label|0) == 23) {
  HEAP8[$buffer>>0] = 0;
  $41 = (($i$0$lcssa153) + 1)|0;
  $42 = (($seq$043$lcssa161) + ($41)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43 << 24 >> 24;
  $45 = ($44|0)<(0);
  $46 = $45 << 31 >> 31;
  $62 = $46;$63 = $44;
 }
 else if ((label|0) == 29) {
  HEAP8[$buffer>>0] = 0;
  $62 = -1;$63 = -1;
 }
 else if ((label|0) == 32) {
  $61 = $n$6$lcssa&255;
  HEAP8[$buffer>>0] = $61;
  $62 = 0;$63 = 27;
 }
 tempRet0 = ($62);
 STACKTOP = sp;return ($63|0);
}
function _safe_gethostname() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $uts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uts = sp;
 (_uname($uts)|0);
 $0 = ((($uts)) + 65|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)!=(0);
 $3 = $2 ? $0 : 7072;
 $4 = (_xstrndup($3,65)|0);
 STACKTOP = sp;return ($4|0);
}
function _safe_poll($ufds,$nfds,$timeout) {
 $ufds = $ufds|0;
 $nfds = $nfds|0;
 $timeout = $timeout|0;
 var $$$02 = 0, $$026 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_poll($ufds,$nfds,$timeout)|0);
 $1 = ($0|0)>(-1);
 L1: do {
  if ($1) {
   $8 = $0;
  } else {
   $2 = (___errno_location()|0);
   $$026 = $timeout;$9 = $0;
   L3: while(1) {
    $3 = ($$026|0)>(0);
    $4 = $3 << 31 >> 31;
    $$$02 = (($4) + ($$026))|0;
    $5 = HEAP32[$2>>2]|0;
    switch ($5|0) {
    case 12: case 4:  {
     break;
    }
    default: {
     $$lcssa = $9;
     break L3;
    }
    }
    $6 = (_poll($ufds,$nfds,$$$02)|0);
    $7 = ($6|0)>(-1);
    if ($7) {
     $8 = $6;
     break L1;
    } else {
     $$026 = $$$02;$9 = $6;
    }
   }
   _bb_perror_msg(7074,$vararg_buffer);
   $8 = $$lcssa;
  }
 } while(0);
 STACKTOP = sp;return ($8|0);
}
function _safe_strncpy($dst,$src,$size) {
 $dst = $dst|0;
 $src = $src|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 if ($0) {
  $$0 = $dst;
 } else {
  $1 = (($size) + -1)|0;
  $2 = (($dst) + ($1)|0);
  HEAP8[$2>>0] = 0;
  $3 = (_strncpy($dst,$src,$1)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _overlapping_strcpy($dst,$src) {
 $dst = $dst|0;
 $src = $src|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($dst|0)==($src|0);
 if (!($0)) {
  $1 = HEAP8[$src>>0]|0;
  HEAP8[$dst>>0] = $1;
  $2 = ($1<<24>>24)==(0);
  if (!($2)) {
   $$012 = $dst;$$03 = $src;
   while(1) {
    $3 = ((($$012)) + 1|0);
    $4 = ((($$03)) + 1|0);
    $5 = HEAP8[$4>>0]|0;
    HEAP8[$3>>0] = $5;
    $6 = ($5<<24>>24)==(0);
    if ($6) {
     break;
    } else {
     $$012 = $3;$$03 = $4;
    }
   }
  }
 }
 return;
}
function _sigprocmask_allsigs($how) {
 $how = $how|0;
 var $0 = 0, $set = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $set = sp;
 (_sigfillset(($set|0))|0);
 $0 = (_sigprocmask(($how|0),($set|0),(0|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _bb_signals($sigs,$f) {
 $sigs = $sigs|0;
 $f = $f|0;
 var $$0$ = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $bit$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($sigs|0)==(0);
 if (!($0)) {
  $$01 = $sigs;$bit$02 = 1;
  while(1) {
   $1 = $bit$02 & $$01;
   $2 = ($1|0)==(0);
   $3 = $bit$02 << 1;
   $4 = $2 ? 0 : $bit$02;
   $$0$ = (($$01) - ($4))|0;
   $5 = ($$01|0)==($4|0);
   if ($5) {
    break;
   } else {
    $$01 = $$0$;$bit$02 = $3;
   }
  }
 }
 return;
}
function _sig_unblock($sig) {
 $sig = $sig|0;
 var $ss = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ss = sp;
 (_sigemptyset(($ss|0))|0);
 (_sigaddset(($ss|0),($sig|0))|0);
 (_sigprocmask(1,($ss|0),(0|0))|0);
 STACKTOP = sp;return;
}
function _kill_myself_with_sig($sig) {
 $sig = $sig|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _sig_unblock($sig);
 (_raise(($sig|0))|0);
 $0 = $sig | 128;
 __exit($0);
 // unreachable;
}
function _skip_whitespace($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = ($0<<24>>24)==(32);
  if (!($1)) {
   $2 = $0&255;
   $3 = (($2) + 247)|0;
   $4 = $3 & 255;
   $5 = ($4>>>0)<(5);
   if (!($5)) {
    $$0$lcssa = $$0;
    break;
   }
  }
  $6 = ((($$0)) + 1|0);
  $$0 = $6;
 }
 return ($$0$lcssa|0);
}
function _get_signum($name) {
 $name = $name|0;
 var $$01 = 0, $$name = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_bb_strtoul($name,0,10)|0);
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$01 = $0;
  } else {
   $4 = (_strncasecmp($name,7079,3)|0);
   $5 = ($4|0)==(0);
   $6 = ((($name)) + 3|0);
   $$name = $5 ? $6 : $name;
   $i$02 = 0;
   while(1) {
    $7 = (7083 + (($i$02*7)|0)|0);
    $8 = (_strcasecmp($$name,$7)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     $$01 = $i$02;
     break L1;
    }
    $10 = (($i$02) + 1)|0;
    $11 = ($10>>>0)<(32);
    if ($11) {
     $i$02 = $10;
    } else {
     $$01 = -1;
     break;
    }
   }
  }
 } while(0);
 return ($$01|0);
}
function _get_signame($number) {
 $number = $number|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($number>>>0)<(32);
 if ($0) {
  $1 = (7083 + (($number*7)|0)|0);
  $$0 = $1;
 } else {
  $2 = (_itoa($number)|0);
  $$0 = $2;
 }
 return ($$0|0);
}
function _fopen_or_warn($path,$mode) {
 $path = $path|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fopen($path,$mode)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _bb_simple_perror_msg($path);
 }
 return ($0|0);
}
function _fopen_for_read($path) {
 $path = $path|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fopen($path,7307)|0);
 return ($0|0);
}
function _xfopen_for_read($path) {
 $path = $path|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_xfopen($path,7307)|0);
 return ($0|0);
}
function _xfdopen_for_read($fd) {
 $fd = $fd|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $fd << 1;
 $1 = (_xfdopen_helper($0)|0);
 return ($1|0);
}
function _xfdopen_for_write($fd) {
 $fd = $fd|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $fd << 1;
 $1 = $0 | 1;
 $2 = (_xfdopen_helper($1)|0);
 return ($2|0);
}
function _xfdopen_helper($fd_and_rw_bit) {
 $fd_and_rw_bit = $fd_and_rw_bit|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $fd_and_rw_bit >>> 1;
 $1 = $fd_and_rw_bit & 1;
 $2 = ($1|0)!=(0);
 $3 = $2 ? 7309 : 7307;
 $4 = (___fdopen($0,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  _bb_error_msg_and_die(3678,$vararg_buffer);
  // unreachable;
 } else {
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function _xstrtoul_range_sfx($numstr,$base,$lower,$upper,$suffixes) {
 $numstr = $numstr|0;
 $base = $base|0;
 $lower = $lower|0;
 $upper = $upper|0;
 $suffixes = $suffixes|0;
 var $$04 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e = 0;
 var $or$cond = 0, $or$cond2 = 0, $r$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 24|0;
 $vararg_buffer = sp;
 $e = sp + 28|0;
 $0 = HEAP8[$numstr>>0]|0;
 L1: do {
  switch ($0<<24>>24) {
  case 43: case 45:  {
   break;
  }
  default: {
   $1 = $0&255;
   $2 = (($1) + 247)|0;
   $3 = $2 & 255;
   switch ($3|0) {
   case 0: case 1: case 2: case 3: case 4: case 23:  {
    break L1;
    break;
   }
   default: {
   }
   }
   $4 = (___errno_location()|0);
   $5 = HEAP32[$4>>2]|0;
   HEAP32[$4>>2] = 0;
   $6 = (_strtoul($numstr,$e,$base)|0);
   $7 = HEAP32[$4>>2]|0;
   $8 = ($7|0)!=(0);
   $9 = HEAP32[$e>>2]|0;
   $10 = ($9|0)==($numstr|0);
   $or$cond = $8 | $10;
   if (!($or$cond)) {
    HEAP32[$4>>2] = $5;
    $11 = ($suffixes|0)==(0|0);
    L5: do {
     if ($11) {
      label = 10;
     } else {
      $12 = ((($suffixes)) + 4|0);
      $13 = HEAP32[$12>>2]|0;
      $14 = ($13|0)==(0);
      if ($14) {
       label = 10;
      } else {
       $$04 = $suffixes;$36 = $13;
       while(1) {
        $19 = (_strcmp($$04,$9)|0);
        $20 = ($19|0)==(0);
        if ($20) {
         $$lcssa = $36;
         break;
        }
        $15 = ((($$04)) + 8|0);
        $16 = ((($$04)) + 12|0);
        $17 = HEAP32[$16>>2]|0;
        $18 = ($17|0)==(0);
        if ($18) {
         label = 10;
         break L5;
        } else {
         $$04 = $15;$36 = $17;
        }
       }
       $21 = (4294967295 / ($$lcssa>>>0))&-1;
       $22 = ($21>>>0)<($6>>>0);
       if (!($22)) {
        $23 = Math_imul($$lcssa, $6)|0;
        $r$0 = $23;
        label = 11;
       }
      }
     }
    } while(0);
    if ((label|0) == 10) {
     $24 = HEAP8[$9>>0]|0;
     $25 = ($24<<24>>24)==(0);
     if ($25) {
      $r$0 = $6;
      label = 11;
     } else {
      break L1;
     }
    }
    if ((label|0) == 11) {
     $26 = ($r$0>>>0)<($lower>>>0);
     $27 = ($r$0>>>0)>($upper>>>0);
     $or$cond2 = $26 | $27;
     if (!($or$cond2)) {
      STACKTOP = sp;return ($r$0|0);
     }
    }
    HEAP32[$vararg_buffer>>2] = $numstr;
    $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
    $28 = $vararg_ptr1;
    $29 = $28;
    HEAP32[$29>>2] = $lower;
    $30 = (($28) + 4)|0;
    $31 = $30;
    HEAP32[$31>>2] = 0;
    $vararg_ptr2 = ((($vararg_buffer)) + 16|0);
    $32 = $vararg_ptr2;
    $33 = $32;
    HEAP32[$33>>2] = $upper;
    $34 = (($32) + 4)|0;
    $35 = $34;
    HEAP32[$35>>2] = 0;
    _bb_error_msg_and_die(7311,$vararg_buffer);
    // unreachable;
   }
  }
  }
 } while(0);
 HEAP32[$vararg_buffer3>>2] = $numstr;
 _bb_error_msg_and_die(7348,$vararg_buffer3);
 // unreachable;
 return (0)|0;
}
function _xstrtol_range_sfx($numstr,$base,$lower,$upper,$suffixes) {
 $numstr = $numstr|0;
 $base = $base|0;
 $lower = $lower|0;
 $upper = $upper|0;
 $suffixes = $suffixes|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $p$0 = 0, $u$0 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP8[$numstr>>0]|0;
 switch ($0<<24>>24) {
 case 45: case 43:  {
  $1 = ((($numstr)) + 1|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = ($2<<24>>24)==(45);
  $$ = $3 ? -2147483648 : 2147483647;
  $p$0 = $1;$u$0 = $$;
  break;
 }
 default: {
  $p$0 = $numstr;$u$0 = 2147483647;
 }
 }
 $4 = (_xstrtoul_range_sfx($p$0,$base,0,$u$0,$suffixes)|0);
 $5 = HEAP8[$numstr>>0]|0;
 $6 = ($5<<24>>24)==(45);
 $7 = (0 - ($4))|0;
 $$1 = $6 ? $7 : $4;
 $8 = ($$1|0)<($lower|0);
 $9 = ($$1|0)>($upper|0);
 $or$cond = $8 | $9;
 if ($or$cond) {
  $10 = ($lower|0)<(0);
  $11 = $10 << 31 >> 31;
  $12 = ($upper|0)<(0);
  $13 = $12 << 31 >> 31;
  HEAP32[$vararg_buffer>>2] = $numstr;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  $14 = $vararg_ptr1;
  $15 = $14;
  HEAP32[$15>>2] = $lower;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = $11;
  $vararg_ptr2 = ((($vararg_buffer)) + 16|0);
  $18 = $vararg_ptr2;
  $19 = $18;
  HEAP32[$19>>2] = $upper;
  $20 = (($18) + 4)|0;
  $21 = $20;
  HEAP32[$21>>2] = $13;
  _bb_error_msg_and_die(7368,$vararg_buffer);
  // unreachable;
 } else {
  STACKTOP = sp;return ($$1|0);
 }
 return (0)|0;
}
function _xatol($numstr) {
 $numstr = $numstr|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_xstrtol_range_sfx($numstr,10,-2147483648,2147483647,0)|0);
 return ($0|0);
}
function _xatoi_positive($numstr) {
 $numstr = $numstr|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_xstrtoul_range_sfx($numstr,10,0,2147483647,0)|0);
 return ($0|0);
}
function _xrealloc_getcwd_or_warn($cwd) {
 $cwd = $cwd|0;
 var $$0 = 0, $$01 = 0, $$lcssa = 0, $$lcssa7 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $path_max$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $$01 = $cwd;$path_max$0 = 128;
 while(1) {
  $0 = (($path_max$0) + 64)|0;
  $1 = (_xrealloc($$01,$0)|0);
  $2 = (_getcwd($1,$0)|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $$lcssa = $1;
   label = 5;
   break;
  }
  $4 = (___errno_location()|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(34);
  if ($6) {
   $$01 = $1;$path_max$0 = $0;
  } else {
   $$lcssa7 = $1;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  _free($$lcssa7);
  _bb_perror_msg(7405,$vararg_buffer);
  $$0 = 0;
 }
 else if ((label|0) == 5) {
  $7 = (_strlen($$lcssa)|0);
  $8 = (($7) + 1)|0;
  $9 = (_xrealloc($$lcssa,$8)|0);
  $$0 = $9;
 }
 STACKTOP = sp;return ($$0|0);
}
function _xrealloc_vector_helper($vector,$sizeof_and_shift,$idx) {
 $vector = $vector|0;
 $sizeof_and_shift = $sizeof_and_shift|0;
 $idx = $idx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $sizeof_and_shift & 255;
 $1 = 1 << $0;
 $2 = (($1) + -1)|0;
 $3 = $2 & $idx;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = $sizeof_and_shift >>> 8;
  $6 = (($idx) + 1)|0;
  $7 = (($6) + ($1))|0;
  $8 = Math_imul($7, $5)|0;
  $9 = (_xrealloc($vector,$8)|0);
  $10 = Math_imul($5, $idx)|0;
  $11 = (($9) + ($10)|0);
  $12 = (($1) + 1)|0;
  $13 = Math_imul($12, $5)|0;
  _memset(($11|0),0,($13|0))|0;
  $$0 = $9;
 } else {
  $$0 = $vector;
 }
 return ($$0|0);
}
function _bb_pstrcmp($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = HEAP32[$b>>2]|0;
 $2 = (_strcmp($0,$1)|0);
 return ($2|0);
}
function _qsort_string_vector($sv,$count) {
 $sv = $sv|0;
 $count = $count|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _qsort($sv,$count,4,54);
 return;
}
function _bb_get_chunk_from_file($file,$end) {
 $file = $file|0;
 $end = $end|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $idx$0 = 0, $idx$1 = 0, $linebuf$0 = 0;
 var $linebuf$1 = 0, $linebuf$2 = 0, $linebuf$3 = 0, $or$cond = 0, $or$cond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($end|0)!=(0|0);
 $idx$0 = 0;$linebuf$0 = 0;
 while(1) {
  $1 = (_getc_unlocked($file)|0);
  $2 = ($1|0)==(-1);
  if ($2) {
   $idx$1 = $idx$0;$linebuf$2 = $linebuf$0;
   break;
  }
  $3 = $idx$0 & 255;
  $4 = ($3|0)==(0);
  if ($4) {
   $5 = (($idx$0) + 256)|0;
   $6 = (_xrealloc($linebuf$0,$5)|0);
   $linebuf$1 = $6;
  } else {
   $linebuf$1 = $linebuf$0;
  }
  $7 = $1&255;
  $8 = (($idx$0) + 1)|0;
  $9 = (($linebuf$1) + ($idx$0)|0);
  HEAP8[$9>>0] = $7;
  $10 = ($1|0)==(0);
  $11 = ($1|0)==(10);
  $or$cond = $0 & $11;
  $or$cond2 = $10 | $or$cond;
  if ($or$cond2) {
   $idx$1 = $8;$linebuf$2 = $linebuf$1;
   break;
  } else {
   $idx$0 = $8;$linebuf$0 = $linebuf$1;
  }
 }
 $12 = ($end|0)==(0|0);
 if (!($12)) {
  HEAP32[$end>>2] = $idx$1;
 }
 $13 = ($linebuf$2|0)==(0|0);
 if ($13) {
  $linebuf$3 = 0;
 } else {
  $14 = (($idx$1) + 1)|0;
  $15 = (_xrealloc($linebuf$2,$14)|0);
  $16 = (($15) + ($idx$1)|0);
  HEAP8[$16>>0] = 0;
  $linebuf$3 = $15;
 }
 return ($linebuf$3|0);
}
function _xmalloc_fgetline($file) {
 $file = $file|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = sp;
 $0 = (_bb_get_chunk_from_file($file,$i)|0);
 $1 = HEAP32[$i>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = (($1) + -1)|0;
  HEAP32[$i>>2] = $3;
  $4 = (($0) + ($3)|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==(10);
  if ($6) {
   HEAP8[$4>>0] = 0;
  }
 }
 STACKTOP = sp;return ($0|0);
}
function _tcsetattr($fd,$act,$tio) {
 $fd = $fd|0;
 $act = $act|0;
 $tio = $tio|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($act>>>0)>(2);
 if ($0) {
  $1 = (___errno_location()|0);
  HEAP32[$1>>2] = 22;
  $$0 = -1;
 } else {
  $2 = (($act) + 21506)|0;
  HEAP32[$vararg_buffer>>2] = $tio;
  $3 = (_ioctl($fd,$2,$vararg_buffer)|0);
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _tcgetattr($fd,$tio) {
 $fd = $fd|0;
 $tio = $tio|0;
 var $$ = 0, $0 = 0, $not$ = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $tio;
 $0 = (_ioctl($fd,21505,$vararg_buffer)|0);
 $not$ = ($0|0)!=(0);
 $$ = $not$ << 31 >> 31;
 STACKTOP = sp;return ($$|0);
}
function _ntohs($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n&65535;
 $1 = $0 << 8;
 $2 = $0 >>> 8;
 $3 = $1 | $2;
 $4 = $3&65535;
 return ($4|0);
}
function _htonl($n) {
 $n = $n|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_llvm_bswap_i32(($n|0))|0);
 return ($0|0);
}
function _htons($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n&65535;
 $1 = $0 << 8;
 $2 = $0 >>> 8;
 $3 = $1 | $2;
 $4 = $3&65535;
 return ($4|0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dummy = 0, $dummy$wc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy = sp;
 $0 = ($src|0)==(0|0);
 L1: do {
  if ($0) {
   $$0 = 0;
  } else {
   $1 = ($n|0)==(0);
   do {
    if (!($1)) {
     $2 = ($wc|0)==(0|0);
     $dummy$wc = $2 ? $dummy : $wc;
     $3 = HEAP8[$src>>0]|0;
     $4 = $3&255;
     $5 = ($3<<24>>24)>(-1);
     if ($5) {
      HEAP32[$dummy$wc>>2] = $4;
      $6 = ($3<<24>>24)!=(0);
      $7 = $6&1;
      $$0 = $7;
      break L1;
     }
     $8 = (($4) + -194)|0;
     $9 = ($8>>>0)>(50);
     if (!($9)) {
      $10 = ((($src)) + 1|0);
      $11 = (844 + ($8<<2)|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = ($n>>>0)<(4);
      if ($13) {
       $14 = ($n*6)|0;
       $15 = (($14) + -6)|0;
       $16 = -2147483648 >>> $15;
       $17 = $12 & $16;
       $18 = ($17|0)==(0);
       if (!($18)) {
        break;
       }
      }
      $19 = HEAP8[$10>>0]|0;
      $20 = $19&255;
      $21 = $20 >>> 3;
      $22 = (($21) + -16)|0;
      $23 = $12 >> 26;
      $24 = (($21) + ($23))|0;
      $25 = $22 | $24;
      $26 = ($25>>>0)>(7);
      if (!($26)) {
       $27 = $12 << 6;
       $28 = (($20) + -128)|0;
       $29 = $28 | $27;
       $30 = ($29|0)<(0);
       if (!($30)) {
        HEAP32[$dummy$wc>>2] = $29;
        $$0 = 2;
        break L1;
       }
       $31 = ((($src)) + 2|0);
       $32 = HEAP8[$31>>0]|0;
       $33 = $32&255;
       $34 = $33 & 192;
       $35 = ($34|0)==(128);
       if ($35) {
        $36 = $29 << 6;
        $37 = (($33) + -128)|0;
        $38 = $37 | $36;
        $39 = ($38|0)<(0);
        if (!($39)) {
         HEAP32[$dummy$wc>>2] = $38;
         $$0 = 3;
         break L1;
        }
        $40 = ((($src)) + 3|0);
        $41 = HEAP8[$40>>0]|0;
        $42 = $41&255;
        $43 = $42 & 192;
        $44 = ($43|0)==(128);
        if ($44) {
         $45 = $38 << 6;
         $46 = (($42) + -128)|0;
         $47 = $46 | $45;
         HEAP32[$dummy$wc>>2] = $47;
         $$0 = 4;
         break L1;
        }
       }
      }
     }
    }
   } while(0);
   $48 = (___errno_location()|0);
   HEAP32[$48>>2] = 84;
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$024 = 0, $$1 = 0, $$lcssa = 0, $$lcssa35 = 0, $$st = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$05 = 0, $c$1 = 0, $c$2 = 0, $dummy = 0, $dummy$wc = 0, $s$06 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy = sp;
 $0 = ($st|0)==(0|0);
 $$st = $0 ? 1132 : $st;
 $1 = HEAP32[$$st>>2]|0;
 $2 = ($src|0)==(0|0);
 L1: do {
  if ($2) {
   $3 = ($1|0)==(0);
   if ($3) {
    $$0 = 0;
   } else {
    label = 15;
   }
  } else {
   $4 = ($wc|0)==(0|0);
   $dummy$wc = $4 ? $dummy : $wc;
   $5 = ($n|0)==(0);
   if ($5) {
    $$0 = -2;
   } else {
    $6 = ($1|0)==(0);
    if ($6) {
     $7 = HEAP8[$src>>0]|0;
     $8 = $7&255;
     $9 = ($7<<24>>24)>(-1);
     if ($9) {
      HEAP32[$dummy$wc>>2] = $8;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break;
     }
     $12 = (($8) + -194)|0;
     $13 = ($12>>>0)>(50);
     if ($13) {
      label = 15;
      break;
     }
     $14 = ((($src)) + 1|0);
     $15 = (844 + ($12<<2)|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($n) + -1)|0;
     $18 = ($17|0)==(0);
     if ($18) {
      $c$2 = $16;
     } else {
      $$024 = $17;$c$05 = $16;$s$06 = $14;
      label = 9;
     }
    } else {
     $$024 = $n;$c$05 = $1;$s$06 = $src;
     label = 9;
    }
    L11: do {
     if ((label|0) == 9) {
      $19 = HEAP8[$s$06>>0]|0;
      $20 = $19&255;
      $21 = $20 >>> 3;
      $22 = (($21) + -16)|0;
      $23 = $c$05 >> 26;
      $24 = (($21) + ($23))|0;
      $25 = $22 | $24;
      $26 = ($25>>>0)>(7);
      if ($26) {
       label = 15;
       break L1;
      } else {
       $$1 = $$024;$30 = $19;$c$1 = $c$05;$s$1 = $s$06;
      }
      while(1) {
       $27 = $c$1 << 6;
       $28 = ((($s$1)) + 1|0);
       $29 = $30&255;
       $31 = (($29) + -128)|0;
       $32 = $31 | $27;
       $33 = (($$1) + -1)|0;
       $34 = ($32|0)<(0);
       if (!($34)) {
        $$lcssa = $32;$$lcssa35 = $33;
        break;
       }
       $36 = ($33|0)==(0);
       if ($36) {
        $c$2 = $32;
        break L11;
       }
       $37 = HEAP8[$28>>0]|0;
       $38 = $37 & -64;
       $39 = ($38<<24>>24)==(-128);
       if ($39) {
        $$1 = $33;$30 = $37;$c$1 = $32;$s$1 = $28;
       } else {
        label = 15;
        break L1;
       }
      }
      HEAP32[$$st>>2] = 0;
      HEAP32[$dummy$wc>>2] = $$lcssa;
      $35 = (($n) - ($$lcssa35))|0;
      $$0 = $35;
      break L1;
     }
    } while(0);
    HEAP32[$$st>>2] = $c$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  HEAP32[$$st>>2] = 0;
  $40 = (___errno_location()|0);
  HEAP32[$40>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _iswblank($wc) {
 $wc = $wc|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isblank($wc)|0);
 return ($0|0);
}
function _iswdigit($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($wc) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 return ($2|0);
}
function _iswxdigit($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($wc) + -48)|0;
 $1 = ($0>>>0)<(10);
 if ($1) {
  $6 = 1;
 } else {
  $2 = $wc | 32;
  $3 = (($2) + -97)|0;
  $4 = ($3>>>0)<(6);
  $6 = $4;
 }
 $5 = $6&1;
 return ($5|0);
}
function _iswalpha($wc) {
 $wc = $wc|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($wc>>>0)<(131072);
 if ($0) {
  $1 = $wc >>> 8;
  $2 = (7412 + ($1)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = $4 << 5;
  $6 = $wc >>> 3;
  $7 = $6 & 31;
  $8 = $5 | $7;
  $9 = (7412 + ($8)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $wc & 7;
  $13 = $11 >>> $12;
  $14 = $13 & 1;
  $$0 = $14;
 } else {
  $15 = ($wc>>>0)<(196606);
  $$ = $15&1;
  $$0 = $$;
 }
 return ($$0|0);
}
function _towupper($wc) {
 $wc = $wc|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___towcase($wc,0)|0);
 return ($0|0);
}
function _towlower($wc) {
 $wc = $wc|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___towcase($wc,1)|0);
 return ($0|0);
}
function _iswpunct($wc) {
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($wc>>>0)<(131072);
 if ($0) {
  $1 = $wc >>> 8;
  $2 = (10388 + ($1)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = $4 << 5;
  $6 = $wc >>> 3;
  $7 = $6 & 31;
  $8 = $5 | $7;
  $9 = (10388 + ($8)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $wc & 7;
  $13 = $11 >>> $12;
  $14 = $13 & 1;
  $$0 = $14;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function _iswlower($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_towupper($wc)|0);
 $1 = ($0|0)!=($wc|0);
 $2 = ($wc|0)==(223);
 $3 = $2 | $1;
 $4 = $3&1;
 return ($4|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function _iswalnum($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswdigit($wc)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_iswalpha($wc)|0);
  $3 = ($2|0)!=(0);
  $5 = $3;
 } else {
  $5 = 1;
 }
 $4 = $5&1;
 return ($4|0);
}
function _iswupper($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_towlower($wc)|0);
 $1 = ($0|0)!=($wc|0);
 $2 = $1&1;
 return ($2|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _iswctype($wc,$type) {
 $wc = $wc|0;
 $type = $type|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  switch ($type|0) {
  case 1:  {
   $0 = (_iswalnum($wc)|0);
   $$0 = $0;
   break;
  }
  case 2:  {
   $1 = (_iswalpha($wc)|0);
   $$0 = $1;
   break;
  }
  case 3:  {
   $2 = (_iswblank($wc)|0);
   $$0 = $2;
   break;
  }
  case 4:  {
   $3 = (_iswcntrl($wc)|0);
   $$0 = $3;
   break;
  }
  case 5:  {
   $4 = (_iswdigit($wc)|0);
   $$0 = $4;
   break;
  }
  case 6:  {
   $5 = (_iswgraph($wc)|0);
   $$0 = $5;
   break;
  }
  case 7:  {
   $6 = (_iswlower($wc)|0);
   $$0 = $6;
   break;
  }
  case 8:  {
   $7 = (_iswprint($wc)|0);
   $$0 = $7;
   break;
  }
  case 9:  {
   $8 = (_iswpunct($wc)|0);
   $$0 = $8;
   break;
  }
  case 10:  {
   $9 = (_iswspace($wc)|0);
   $$0 = $9;
   break;
  }
  case 11:  {
   $10 = (_iswupper($wc)|0);
   $$0 = $10;
   break;
  }
  case 12:  {
   $11 = (_iswxdigit($wc)|0);
   $$0 = $11;
   break;
  }
  default: {
   $$0 = 0;
  }
  }
 } while(0);
 return ($$0|0);
}
function _wctype($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i$01 = 0, $p$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$s>>0]|0;
 $2 = 97;$i$01 = 1;$p$02 = 13556;
 while(1) {
  $1 = ($0<<24>>24)==($2<<24>>24);
  if ($1) {
   $3 = (_strcmp($s,$p$02)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$0 = $i$01;
    break;
   }
  }
  $5 = (($i$01) + 1)|0;
  $6 = ((($p$02)) + 6|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(0);
  if ($8) {
   $$0 = 0;
   break;
  } else {
   $2 = $7;$i$01 = $5;$p$02 = $6;
  }
 }
 return ($$0|0);
}
function _iswspace($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($wc|0)==(0);
 if ($0) {
  $4 = 0;
 } else {
  $1 = (_wcschr(1136,$wc)|0);
  $2 = ($1|0)!=(0|0);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _isblank($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = ($c|0)==(9);
 $2 = $0 | $1;
 $3 = $2&1;
 return ($3|0);
}
function _iswcntrl($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($wc>>>0)<(32);
 $1 = (($wc) + -127)|0;
 $2 = ($1>>>0)<(33);
 $or$cond = $0 | $2;
 $3 = $wc & -2;
 $4 = ($3|0)==(8232);
 $or$cond3 = $4 | $or$cond;
 if ($or$cond3) {
  $8 = 1;
 } else {
  $5 = (($wc) + -65529)|0;
  $6 = ($5>>>0)<(3);
  $8 = $6;
 }
 $7 = $8&1;
 return ($7|0);
}
function _iswgraph($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswspace($wc)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_iswprint($wc)|0);
  $3 = ($2|0)!=(0);
  $5 = $3;
 } else {
  $5 = 0;
 }
 $4 = $5&1;
 return ($4|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function _iswprint($wc) {
 $wc = $wc|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($wc>>>0)<(255);
 if ($0) {
  $1 = (($wc) + 1)|0;
  $2 = $1 & 127;
  $3 = ($2>>>0)>(32);
  $4 = $3&1;
  $$0 = $4;
 } else {
  $5 = ($wc>>>0)<(8232);
  $6 = (($wc) + -8234)|0;
  $7 = ($6>>>0)<(47062);
  $or$cond = $5 | $7;
  $8 = (($wc) + -57344)|0;
  $9 = ($8>>>0)<(8185);
  $or$cond3 = $9 | $or$cond;
  if ($or$cond3) {
   $$0 = 1;
  } else {
   $10 = (($wc) + -65532)|0;
   $11 = ($10>>>0)>(1048579);
   $12 = $wc & 65534;
   $13 = ($12|0)==(65534);
   $or$cond5 = $11 | $13;
   $14 = $or$cond5&1;
   $$ = $14 ^ 1;
   return ($$|0);
  }
 }
 return ($$0|0);
}
function _closedir($dir) {
 $dir = $dir|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$dir>>2]|0;
 $1 = (_close($0)|0);
 _free($dir);
 return ($1|0);
}
function _opendir($name) {
 $name = $name|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_open($name,589824,$vararg_buffer)|0);
 $1 = ($0|0)<(0);
 do {
  if ($1) {
   $$0 = 0;
  } else {
   $2 = (_calloc(1,2072)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    HEAP32[$vararg_buffer1>>2] = $0;
    (___syscall6(6,($vararg_buffer1|0))|0);
    $$0 = 0;
    break;
   } else {
    HEAP32[$2>>2] = $0;
    $$0 = $2;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _readdir_r($dir,$buf,$result) {
 $dir = $dir|0;
 $buf = $buf|0;
 $result = $result|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___errno_location()|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($dir)) + 16|0);
 ___lock(($2|0));
 HEAP32[$0>>2] = 0;
 $3 = (_readdir($dir)|0);
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  HEAP32[$0>>2] = $1;
  $6 = ($3|0)==(0|0);
  if ($6) {
   $$01 = 0;
  } else {
   $7 = ((($3)) + 8|0);
   $8 = HEAP16[$7>>1]|0;
   $9 = $8&65535;
   _memcpy(($buf|0),($3|0),($9|0))|0;
   $$01 = $buf;
  }
  ___unlock(($2|0));
  HEAP32[$result>>2] = $$01;
  $$0 = 0;
 } else {
  ___unlock(($2|0));
  $$0 = $4;
 }
 return ($$0|0);
}
function _readdir($dir) {
 $dir = $dir|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($dir)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($dir)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)<($3|0);
 do {
  if ($4) {
   $14 = $1;
   label = 6;
  } else {
   $5 = HEAP32[$dir>>2]|0;
   $6 = ((($dir)) + 24|0);
   HEAP32[$vararg_buffer>>2] = $5;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $6;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 2048;
   $7 = (___syscall220(220,($vararg_buffer|0))|0);
   $8 = ($7|0)<(1);
   if (!($8)) {
    HEAP32[$2>>2] = $7;
    HEAP32[$0>>2] = 0;
    $14 = 0;
    label = 6;
    break;
   }
   $9 = ($7|0)<(0);
   $10 = ($7|0)!=(-2);
   $or$cond = $9 & $10;
   if ($or$cond) {
    $11 = (0 - ($7))|0;
    $12 = (___errno_location()|0);
    HEAP32[$12>>2] = $11;
    $$1 = 0;
   } else {
    $$1 = 0;
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $13 = (((($dir)) + 24|0) + ($14)|0);
  $15 = ((($13)) + 8|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = (($17) + ($14))|0;
  HEAP32[$0>>2] = $18;
  $19 = ((($13)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($dir)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$1 = $13;
 }
 STACKTOP = sp;return ($$1|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$115 = 0, $$116 = 0, $$base14 = 0, $$lcssa = 0, $$lcssa118 = 0, $$lcssa119 = 0, $$lcssa120 = 0, $$lcssa121 = 0, $$lcssa122 = 0, $$lcssa123 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$117 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0;
 var $c$6$lcssa = 0, $c$7$be = 0, $c$742 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$0$ = 0, $neg$1 = 0, $or$cond = 0, $or$cond$31 = 0, $or$cond12 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$070 = 0, $x$136 = 0, $x$254 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 L1: do {
  if ($2) {
   $5 = (___errno_location()|0);
   HEAP32[$5>>2] = 22;
   $286 = 0;$287 = 0;
  } else {
   $3 = ((($f)) + 4|0);
   $4 = ((($f)) + 100|0);
   while(1) {
    $6 = HEAP32[$3>>2]|0;
    $7 = HEAP32[$4>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$3>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($f)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$lcssa123 = $13;
     break;
    }
   }
   $16 = ($$lcssa123|0)==(45);
   L11: do {
    switch ($$lcssa123|0) {
    case 43: case 45:  {
     $17 = $16 << 31 >> 31;
     $18 = HEAP32[$3>>2]|0;
     $19 = HEAP32[$4>>2]|0;
     $20 = ($18>>>0)<($19>>>0);
     if ($20) {
      $21 = ((($18)) + 1|0);
      HEAP32[$3>>2] = $21;
      $22 = HEAP8[$18>>0]|0;
      $23 = $22&255;
      $c$0 = $23;$neg$0 = $17;
      break L11;
     } else {
      $24 = (___shgetc($f)|0);
      $c$0 = $24;$neg$0 = $17;
      break L11;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa123;$neg$0 = 0;
    }
    }
   } while(0);
   $25 = ($base|0)==(0);
   $26 = $base & -17;
   $27 = ($26|0)==(0);
   $28 = ($c$0|0)==(48);
   $or$cond5 = $27 & $28;
   do {
    if ($or$cond5) {
     $29 = HEAP32[$3>>2]|0;
     $30 = HEAP32[$4>>2]|0;
     $31 = ($29>>>0)<($30>>>0);
     if ($31) {
      $32 = ((($29)) + 1|0);
      HEAP32[$3>>2] = $32;
      $33 = HEAP8[$29>>0]|0;
      $34 = $33&255;
      $37 = $34;
     } else {
      $35 = (___shgetc($f)|0);
      $37 = $35;
     }
     $36 = $37 | 32;
     $38 = ($36|0)==(120);
     if (!($38)) {
      if ($25) {
       $$116 = 8;$c$117 = $37;
       label = 46;
       break;
      } else {
       $$1 = $base;$c$1 = $37;
       label = 32;
       break;
      }
     }
     $39 = HEAP32[$3>>2]|0;
     $40 = HEAP32[$4>>2]|0;
     $41 = ($39>>>0)<($40>>>0);
     if ($41) {
      $42 = ((($39)) + 1|0);
      HEAP32[$3>>2] = $42;
      $43 = HEAP8[$39>>0]|0;
      $44 = $43&255;
      $47 = $44;
     } else {
      $45 = (___shgetc($f)|0);
      $47 = $45;
     }
     $46 = ((13630) + ($47)|0);
     $48 = HEAP8[$46>>0]|0;
     $49 = ($48&255)>(15);
     if ($49) {
      $50 = HEAP32[$4>>2]|0;
      $51 = ($50|0)==(0|0);
      if (!($51)) {
       $52 = HEAP32[$3>>2]|0;
       $53 = ((($52)) + -1|0);
       HEAP32[$3>>2] = $53;
      }
      $54 = ($pok|0)==(0);
      if ($54) {
       ___shlim($f,0);
       $286 = 0;$287 = 0;
       break L1;
      }
      if ($51) {
       $286 = 0;$287 = 0;
       break L1;
      }
      $55 = HEAP32[$3>>2]|0;
      $56 = ((($55)) + -1|0);
      HEAP32[$3>>2] = $56;
      $286 = 0;$287 = 0;
      break L1;
     } else {
      $$116 = 16;$c$117 = $47;
      label = 46;
     }
    } else {
     $$base14 = $25 ? 10 : $base;
     $57 = ((13630) + ($c$0)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = ($59>>>0)<($$base14>>>0);
     if ($60) {
      $$1 = $$base14;$c$1 = $c$0;
      label = 32;
     } else {
      $61 = HEAP32[$4>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       $63 = HEAP32[$3>>2]|0;
       $64 = ((($63)) + -1|0);
       HEAP32[$3>>2] = $64;
      }
      ___shlim($f,0);
      $65 = (___errno_location()|0);
      HEAP32[$65>>2] = 22;
      $286 = 0;$287 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $66 = ($$1|0)==(10);
    if ($66) {
     $67 = (($c$1) + -48)|0;
     $68 = ($67>>>0)<(10);
     if ($68) {
      $71 = $67;$x$070 = 0;
      while(1) {
       $69 = ($x$070*10)|0;
       $70 = (($69) + ($71))|0;
       $72 = HEAP32[$3>>2]|0;
       $73 = HEAP32[$4>>2]|0;
       $74 = ($72>>>0)<($73>>>0);
       if ($74) {
        $75 = ((($72)) + 1|0);
        HEAP32[$3>>2] = $75;
        $76 = HEAP8[$72>>0]|0;
        $77 = $76&255;
        $c$2$be = $77;
       } else {
        $78 = (___shgetc($f)|0);
        $c$2$be = $78;
       }
       $79 = (($c$2$be) + -48)|0;
       $80 = ($79>>>0)<(10);
       $81 = ($70>>>0)<(429496729);
       $82 = $80 & $81;
       if ($82) {
        $71 = $79;$x$070 = $70;
       } else {
        $$lcssa122 = $70;$c$2$be$lcssa = $c$2$be;
        break;
       }
      }
      $288 = $$lcssa122;$289 = 0;$c$2$lcssa = $c$2$be$lcssa;
     } else {
      $288 = 0;$289 = 0;$c$2$lcssa = $c$1;
     }
     $83 = (($c$2$lcssa) + -48)|0;
     $84 = ($83>>>0)<(10);
     if ($84) {
      $85 = $288;$86 = $289;$89 = $83;$c$359 = $c$2$lcssa;
      while(1) {
       $87 = (___muldi3(($85|0),($86|0),10,0)|0);
       $88 = tempRet0;
       $90 = ($89|0)<(0);
       $91 = $90 << 31 >> 31;
       $92 = $89 ^ -1;
       $93 = $91 ^ -1;
       $94 = ($88>>>0)>($93>>>0);
       $95 = ($87>>>0)>($92>>>0);
       $96 = ($88|0)==($93|0);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($98) {
        $$lcssa = $89;$290 = $85;$291 = $86;$c$3$lcssa = $c$359;
        break;
       }
       $99 = (_i64Add(($87|0),($88|0),($89|0),($91|0))|0);
       $100 = tempRet0;
       $101 = HEAP32[$3>>2]|0;
       $102 = HEAP32[$4>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $104 = ((($101)) + 1|0);
        HEAP32[$3>>2] = $104;
        $105 = HEAP8[$101>>0]|0;
        $106 = $105&255;
        $c$3$be = $106;
       } else {
        $107 = (___shgetc($f)|0);
        $c$3$be = $107;
       }
       $108 = (($c$3$be) + -48)|0;
       $109 = ($108>>>0)<(10);
       $110 = ($100>>>0)<(429496729);
       $111 = ($99>>>0)<(2576980378);
       $112 = ($100|0)==(429496729);
       $113 = $112 & $111;
       $114 = $110 | $113;
       $or$cond7 = $109 & $114;
       if ($or$cond7) {
        $85 = $99;$86 = $100;$89 = $108;$c$359 = $c$3$be;
       } else {
        $$lcssa = $108;$290 = $99;$291 = $100;$c$3$lcssa = $c$3$be;
        break;
       }
      }
      $115 = ($$lcssa>>>0)>(9);
      if ($115) {
       $259 = $291;$261 = $290;$neg$1 = $neg$0;
      } else {
       $$115 = 10;$292 = $290;$293 = $291;$c$8 = $c$3$lcssa;
       label = 72;
      }
     } else {
      $259 = $289;$261 = $288;$neg$1 = $neg$0;
     }
    } else {
     $$116 = $$1;$c$117 = $c$1;
     label = 46;
    }
   }
   L63: do {
    if ((label|0) == 46) {
     $116 = (($$116) + -1)|0;
     $117 = $116 & $$116;
     $118 = ($117|0)==(0);
     if ($118) {
      $123 = ($$116*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (13886 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = ((13630) + ($c$117)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($131>>>0)<($$116>>>0);
      if ($132) {
       $135 = $131;$x$136 = 0;
       while(1) {
        $133 = $x$136 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$3>>2]|0;
        $137 = HEAP32[$4>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$3>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $c$4$be = $141;
        } else {
         $142 = (___shgetc($f)|0);
         $c$4$be = $142;
        }
        $143 = ((13630) + ($c$4$be)|0);
        $144 = HEAP8[$143>>0]|0;
        $145 = $144&255;
        $146 = ($145>>>0)<($$116>>>0);
        $147 = ($134>>>0)<(134217728);
        $148 = $147 & $146;
        if ($148) {
         $135 = $145;$x$136 = $134;
        } else {
         $$lcssa118 = $134;$$lcssa119 = $144;$c$4$be$lcssa = $c$4$be;
         break;
        }
       }
       $152 = $$lcssa119;$154 = 0;$156 = $$lcssa118;$c$4$lcssa = $c$4$be$lcssa;
      } else {
       $152 = $130;$154 = 0;$156 = 0;$c$4$lcssa = $c$117;
      }
      $149 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $150 = tempRet0;
      $151 = $152&255;
      $153 = ($151>>>0)>=($$116>>>0);
      $155 = ($154>>>0)>($150>>>0);
      $157 = ($156>>>0)>($149>>>0);
      $158 = ($154|0)==($150|0);
      $159 = $158 & $157;
      $160 = $155 | $159;
      $or$cond$31 = $153 | $160;
      if ($or$cond$31) {
       $$115 = $$116;$292 = $156;$293 = $154;$c$8 = $c$4$lcssa;
       label = 72;
       break;
      } else {
       $161 = $156;$162 = $154;$166 = $152;
      }
      while(1) {
       $163 = (_bitshift64Shl(($161|0),($162|0),($128|0))|0);
       $164 = tempRet0;
       $165 = $166&255;
       $167 = $165 | $163;
       $168 = HEAP32[$3>>2]|0;
       $169 = HEAP32[$4>>2]|0;
       $170 = ($168>>>0)<($169>>>0);
       if ($170) {
        $171 = ((($168)) + 1|0);
        HEAP32[$3>>2] = $171;
        $172 = HEAP8[$168>>0]|0;
        $173 = $172&255;
        $c$5$be = $173;
       } else {
        $174 = (___shgetc($f)|0);
        $c$5$be = $174;
       }
       $175 = ((13630) + ($c$5$be)|0);
       $176 = HEAP8[$175>>0]|0;
       $177 = $176&255;
       $178 = ($177>>>0)>=($$116>>>0);
       $179 = ($164>>>0)>($150>>>0);
       $180 = ($167>>>0)>($149>>>0);
       $181 = ($164|0)==($150|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$115 = $$116;$292 = $167;$293 = $164;$c$8 = $c$5$be;
        label = 72;
        break L63;
       } else {
        $161 = $167;$162 = $164;$166 = $176;
       }
      }
     }
     $119 = ((13630) + ($c$117)|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $122 = ($121>>>0)<($$116>>>0);
     if ($122) {
      $186 = $121;$x$254 = 0;
      while(1) {
       $184 = Math_imul($x$254, $$116)|0;
       $185 = (($186) + ($184))|0;
       $187 = HEAP32[$3>>2]|0;
       $188 = HEAP32[$4>>2]|0;
       $189 = ($187>>>0)<($188>>>0);
       if ($189) {
        $190 = ((($187)) + 1|0);
        HEAP32[$3>>2] = $190;
        $191 = HEAP8[$187>>0]|0;
        $192 = $191&255;
        $c$6$be = $192;
       } else {
        $193 = (___shgetc($f)|0);
        $c$6$be = $193;
       }
       $194 = ((13630) + ($c$6$be)|0);
       $195 = HEAP8[$194>>0]|0;
       $196 = $195&255;
       $197 = ($196>>>0)<($$116>>>0);
       $198 = ($185>>>0)<(119304647);
       $199 = $198 & $197;
       if ($199) {
        $186 = $196;$x$254 = $185;
       } else {
        $$lcssa120 = $185;$$lcssa121 = $195;$c$6$be$lcssa = $c$6$be;
        break;
       }
      }
      $201 = $$lcssa121;$294 = $$lcssa120;$295 = 0;$c$6$lcssa = $c$6$be$lcssa;
     } else {
      $201 = $120;$294 = 0;$295 = 0;$c$6$lcssa = $c$117;
     }
     $200 = $201&255;
     $202 = ($200>>>0)<($$116>>>0);
     if ($202) {
      $203 = (___udivdi3(-1,-1,($$116|0),0)|0);
      $204 = tempRet0;
      $205 = $295;$207 = $294;$215 = $201;$c$742 = $c$6$lcssa;
      while(1) {
       $206 = ($205>>>0)>($204>>>0);
       $208 = ($207>>>0)>($203>>>0);
       $209 = ($205|0)==($204|0);
       $210 = $209 & $208;
       $211 = $206 | $210;
       if ($211) {
        $$115 = $$116;$292 = $207;$293 = $205;$c$8 = $c$742;
        label = 72;
        break L63;
       }
       $212 = (___muldi3(($207|0),($205|0),($$116|0),0)|0);
       $213 = tempRet0;
       $214 = $215&255;
       $216 = $214 ^ -1;
       $217 = ($213>>>0)>(4294967295);
       $218 = ($212>>>0)>($216>>>0);
       $219 = ($213|0)==(-1);
       $220 = $219 & $218;
       $221 = $217 | $220;
       if ($221) {
        $$115 = $$116;$292 = $207;$293 = $205;$c$8 = $c$742;
        label = 72;
        break L63;
       }
       $222 = (_i64Add(($214|0),0,($212|0),($213|0))|0);
       $223 = tempRet0;
       $224 = HEAP32[$3>>2]|0;
       $225 = HEAP32[$4>>2]|0;
       $226 = ($224>>>0)<($225>>>0);
       if ($226) {
        $227 = ((($224)) + 1|0);
        HEAP32[$3>>2] = $227;
        $228 = HEAP8[$224>>0]|0;
        $229 = $228&255;
        $c$7$be = $229;
       } else {
        $230 = (___shgetc($f)|0);
        $c$7$be = $230;
       }
       $231 = ((13630) + ($c$7$be)|0);
       $232 = HEAP8[$231>>0]|0;
       $233 = $232&255;
       $234 = ($233>>>0)<($$116>>>0);
       if ($234) {
        $205 = $223;$207 = $222;$215 = $232;$c$742 = $c$7$be;
       } else {
        $$115 = $$116;$292 = $222;$293 = $223;$c$8 = $c$7$be;
        label = 72;
        break;
       }
      }
     } else {
      $$115 = $$116;$292 = $294;$293 = $295;$c$8 = $c$6$lcssa;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $235 = ((13630) + ($c$8)|0);
    $236 = HEAP8[$235>>0]|0;
    $237 = $236&255;
    $238 = ($237>>>0)<($$115>>>0);
    if ($238) {
     while(1) {
      $239 = HEAP32[$3>>2]|0;
      $240 = HEAP32[$4>>2]|0;
      $241 = ($239>>>0)<($240>>>0);
      if ($241) {
       $242 = ((($239)) + 1|0);
       HEAP32[$3>>2] = $242;
       $243 = HEAP8[$239>>0]|0;
       $244 = $243&255;
       $c$9$be = $244;
      } else {
       $245 = (___shgetc($f)|0);
       $c$9$be = $245;
      }
      $246 = ((13630) + ($c$9$be)|0);
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = ($248>>>0)<($$115>>>0);
      if (!($249)) {
       break;
      }
     }
     $250 = (___errno_location()|0);
     HEAP32[$250>>2] = 34;
     $251 = $0 & 1;
     $252 = ($251|0)==(0);
     $253 = (0)==(0);
     $254 = $252 & $253;
     $neg$0$ = $254 ? $neg$0 : 0;
     $259 = $1;$261 = $0;$neg$1 = $neg$0$;
    } else {
     $259 = $293;$261 = $292;$neg$1 = $neg$0;
    }
   }
   $255 = HEAP32[$4>>2]|0;
   $256 = ($255|0)==(0|0);
   if (!($256)) {
    $257 = HEAP32[$3>>2]|0;
    $258 = ((($257)) + -1|0);
    HEAP32[$3>>2] = $258;
   }
   $260 = ($259>>>0)<($1>>>0);
   $262 = ($261>>>0)<($0>>>0);
   $263 = ($259|0)==($1|0);
   $264 = $263 & $262;
   $265 = $260 | $264;
   if (!($265)) {
    $266 = $0 & 1;
    $267 = ($266|0)!=(0);
    $268 = (0)!=(0);
    $269 = $267 | $268;
    $270 = ($neg$1|0)!=(0);
    $or$cond12 = $269 | $270;
    if (!($or$cond12)) {
     $271 = (___errno_location()|0);
     HEAP32[$271>>2] = 34;
     $272 = (_i64Add(($0|0),($1|0),-1,-1)|0);
     $273 = tempRet0;
     $286 = $273;$287 = $272;
     break;
    }
    $274 = ($259>>>0)>($1>>>0);
    $275 = ($261>>>0)>($0>>>0);
    $276 = ($259|0)==($1|0);
    $277 = $276 & $275;
    $278 = $274 | $277;
    if ($278) {
     $279 = (___errno_location()|0);
     HEAP32[$279>>2] = 34;
     $286 = $1;$287 = $0;
     break;
    }
   }
   $280 = ($neg$1|0)<(0);
   $281 = $280 << 31 >> 31;
   $282 = $261 ^ $neg$1;
   $283 = $259 ^ $281;
   $284 = (_i64Subtract(($282|0),($283|0),($neg$1|0),($281|0))|0);
   $285 = tempRet0;
   $286 = $285;$287 = $284;
  }
 } while(0);
 tempRet0 = ($286);
 return ($287|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$010$i = 0, $$012$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$1$i = 0.0, $$111$be$i = 0, $$111$ph$i = 0, $$16$i = 0, $$2$i = 0, $$24$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3113$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa256 = 0;
 var $$lcssa256$lcssa = 0, $$lcssa257 = 0, $$lcssa257$lcssa = 0, $$lcssa263 = 0, $$lcssa264 = 0, $$lcssa265 = 0, $$lcssa275 = 0, $$lnz$0$i = 0, $$neg40$i = 0, $$not$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i$17 = 0, $$pre$phi42$iZ2D = 0.0, $$pre41$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0;
 var $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0, $502 = 0, $503 = 0, $504 = 0.0, $505 = 0.0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0.0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0, $656 = 0, $657 = 0.0, $658 = 0;
 var $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0.0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0.0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0.0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0$lcssa159$i = 0, $a$093$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph46$i = 0, $a$4$i = 0, $a$4$i$lcssa248 = 0, $a$4$i249 = 0, $a$4$ph$i = 0, $a$4$ph165$i = 0, $a$586$i = 0, $a$6$i = 0, $a$6$i$lcssa = 0, $a$6$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i$25 = 0.0, $bits$0$ph = 0, $brmerge$i$28 = 0;
 var $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$095$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry4$089$i = 0, $cond$i = 0, $d$0$i = 0;
 var $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$i$19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i246 = 0, $e2$1$ph$i = 0, $e2$1$ph164$i = 0, $e2$3$i = 0, $e2$4$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$3$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$12 = 0, $gotdig$0$i$12$lcssa273 = 0, $gotdig$0$i$lcssa242 = 0;
 var $gotdig$2$i = 0, $gotdig$2$i$13 = 0, $gotdig$2$i$lcssa = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3109$i = 0, $gotdig$3109$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$14 = 0, $gotrad$0$i$lcssa = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1110$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0;
 var $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0112$i = 0, $j$0112$i$lcssa = 0, $j$075$i = 0, $j$076$i = 0, $j$077$i = 0, $j$2$i = 0, $j$3102$i = 0, $k$0$lcssa$i = 0, $k$0111$i = 0, $k$0111$i$lcssa = 0, $k$071$i = 0, $k$072$i = 0, $k$073$i = 0, $k$2$i = 0;
 var $k$3$i = 0, $k$494$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$5$z$2$i = 0, $k$687$i = 0, $lnz$0$lcssa$i = 0, $lnz$0108$i = 0, $lnz$0108$i$lcssa = 0, $lnz$065$i = 0, $lnz$066$i = 0, $lnz$067$i = 0, $lnz$2$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$16 = 0, $or$cond18$i = 0, $or$cond190$i = 0, $or$cond20$i = 0, $or$cond21$i = 0;
 var $or$cond22$i = 0, $or$cond25$i = 0, $or$cond26$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond9 = 0, $or$cond9$i = 0, $or$cond9$i$27 = 0, $rp$0$lcssa160$i = 0, $rp$092$i = 0, $rp$1$i$18 = 0, $rp$1$i$18$lcssa = 0, $rp$2$ph44$i = 0, $rp$4$ph$i = 0, $rp$4$ph42$i = 0, $rp$585$i = 0, $rp$6$i = 0;
 var $rp$6$i$lcssa = 0, $rp$6$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i$24 = 0.0, $y$2$i = 0.0, $y$2$i$26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph45$i = 0, $z$10$1$i = 0, $z$10$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0;
 var $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 switch ($prec|0) {
 case 0:  {
  $bits$0$ph = 24;$emin$0$ph = -149;
  label = 4;
  break;
 }
 case 1:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 case 2:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 default: {
  $$0 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $0 = ((($f)) + 4|0);
   $1 = ((($f)) + 100|0);
   while(1) {
    $2 = HEAP32[$0>>2]|0;
    $3 = HEAP32[$1>>2]|0;
    $4 = ($2>>>0)<($3>>>0);
    if ($4) {
     $5 = ((($2)) + 1|0);
     HEAP32[$0>>2] = $5;
     $6 = HEAP8[$2>>0]|0;
     $7 = $6&255;
     $9 = $7;
    } else {
     $8 = (___shgetc($f)|0);
     $9 = $8;
    }
    $10 = (_isspace($9)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$lcssa275 = $9;
     break;
    }
   }
   $12 = ($$lcssa275|0)==(45);
   L13: do {
    switch ($$lcssa275|0) {
    case 43: case 45:  {
     $13 = $12&1;
     $14 = $13 << 1;
     $15 = (1 - ($14))|0;
     $16 = HEAP32[$0>>2]|0;
     $17 = HEAP32[$1>>2]|0;
     $18 = ($16>>>0)<($17>>>0);
     if ($18) {
      $19 = ((($16)) + 1|0);
      HEAP32[$0>>2] = $19;
      $20 = HEAP8[$16>>0]|0;
      $21 = $20&255;
      $c$0 = $21;$sign$0 = $15;
      break L13;
     } else {
      $22 = (___shgetc($f)|0);
      $c$0 = $22;$sign$0 = $15;
      break L13;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa275;$sign$0 = 1;
    }
    }
   } while(0);
   $c$179 = $c$0;$i$078 = 0;
   while(1) {
    $23 = $c$179 | 32;
    $24 = (13895 + ($i$078)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25 << 24 >> 24;
    $27 = ($23|0)==($26|0);
    if (!($27)) {
     $c$1$lcssa = $c$179;$i$0$lcssa = $i$078;
     break;
    }
    $28 = ($i$078>>>0)<(7);
    do {
     if ($28) {
      $29 = HEAP32[$0>>2]|0;
      $30 = HEAP32[$1>>2]|0;
      $31 = ($29>>>0)<($30>>>0);
      if ($31) {
       $32 = ((($29)) + 1|0);
       HEAP32[$0>>2] = $32;
       $33 = HEAP8[$29>>0]|0;
       $34 = $33&255;
       $c$2 = $34;
       break;
      } else {
       $35 = (___shgetc($f)|0);
       $c$2 = $35;
       break;
      }
     } else {
      $c$2 = $c$179;
     }
    } while(0);
    $36 = (($i$078) + 1)|0;
    $37 = ($36>>>0)<(8);
    if ($37) {
     $c$179 = $c$2;$i$078 = $36;
    } else {
     $c$1$lcssa = $c$2;$i$0$lcssa = $36;
     break;
    }
   }
   L29: do {
    switch ($i$0$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $38 = ($i$0$lcssa>>>0)>(3);
     $39 = ($pok|0)!=(0);
     $or$cond5 = $39 & $38;
     if ($or$cond5) {
      $40 = ($i$0$lcssa|0)==(8);
      if ($40) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $53 = ($i$0$lcssa|0)==(0);
     L34: do {
      if ($53) {
       $c$377 = $c$1$lcssa;$i$276 = 0;
       while(1) {
        $54 = $c$377 | 32;
        $55 = (18452 + ($i$276)|0);
        $56 = HEAP8[$55>>0]|0;
        $57 = $56 << 24 >> 24;
        $58 = ($54|0)==($57|0);
        if (!($58)) {
         $c$5 = $c$377;$i$3 = $i$276;
         break L34;
        }
        $59 = ($i$276>>>0)<(2);
        do {
         if ($59) {
          $60 = HEAP32[$0>>2]|0;
          $61 = HEAP32[$1>>2]|0;
          $62 = ($60>>>0)<($61>>>0);
          if ($62) {
           $63 = ((($60)) + 1|0);
           HEAP32[$0>>2] = $63;
           $64 = HEAP8[$60>>0]|0;
           $65 = $64&255;
           $c$4 = $65;
           break;
          } else {
           $66 = (___shgetc($f)|0);
           $c$4 = $66;
           break;
          }
         } else {
          $c$4 = $c$377;
         }
        } while(0);
        $67 = (($i$276) + 1)|0;
        $68 = ($67>>>0)<(3);
        if ($68) {
         $c$377 = $c$4;$i$276 = $67;
        } else {
         $c$5 = $c$4;$i$3 = $67;
         break;
        }
       }
      } else {
       $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
      }
     } while(0);
     switch ($i$3|0) {
     case 3:  {
      $69 = HEAP32[$0>>2]|0;
      $70 = HEAP32[$1>>2]|0;
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $72 = ((($69)) + 1|0);
       HEAP32[$0>>2] = $72;
       $73 = HEAP8[$69>>0]|0;
       $74 = $73&255;
       $76 = $74;
      } else {
       $75 = (___shgetc($f)|0);
       $76 = $75;
      }
      $77 = ($76|0)==(40);
      if ($77) {
       $i$4 = 1;
      } else {
       $78 = HEAP32[$1>>2]|0;
       $79 = ($78|0)==(0|0);
       if ($79) {
        $$0 = nan;
        break L4;
       }
       $80 = HEAP32[$0>>2]|0;
       $81 = ((($80)) + -1|0);
       HEAP32[$0>>2] = $81;
       $$0 = nan;
       break L4;
      }
      while(1) {
       $82 = HEAP32[$0>>2]|0;
       $83 = HEAP32[$1>>2]|0;
       $84 = ($82>>>0)<($83>>>0);
       if ($84) {
        $85 = ((($82)) + 1|0);
        HEAP32[$0>>2] = $85;
        $86 = HEAP8[$82>>0]|0;
        $87 = $86&255;
        $90 = $87;
       } else {
        $88 = (___shgetc($f)|0);
        $90 = $88;
       }
       $89 = (($90) + -48)|0;
       $91 = ($89>>>0)<(10);
       $92 = (($90) + -65)|0;
       $93 = ($92>>>0)<(26);
       $or$cond = $91 | $93;
       if (!($or$cond)) {
        $94 = (($90) + -97)|0;
        $95 = ($94>>>0)<(26);
        $96 = ($90|0)==(95);
        $or$cond7 = $96 | $95;
        if (!($or$cond7)) {
         $$lcssa = $90;$i$4$lcssa = $i$4;
         break;
        }
       }
       $108 = (($i$4) + 1)|0;
       $i$4 = $108;
      }
      $97 = ($$lcssa|0)==(41);
      if ($97) {
       $$0 = nan;
       break L4;
      }
      $98 = HEAP32[$1>>2]|0;
      $99 = ($98|0)==(0|0);
      if (!($99)) {
       $100 = HEAP32[$0>>2]|0;
       $101 = ((($100)) + -1|0);
       HEAP32[$0>>2] = $101;
      }
      if (!($39)) {
       $103 = (___errno_location()|0);
       HEAP32[$103>>2] = 22;
       ___shlim($f,0);
       $$0 = 0.0;
       break L4;
      }
      $102 = ($i$4$lcssa|0)==(0);
      if ($102) {
       $$0 = nan;
       break L4;
      } else {
       $$in = $i$4$lcssa;
      }
      while(1) {
       $104 = (($$in) + -1)|0;
       if (!($99)) {
        $105 = HEAP32[$0>>2]|0;
        $106 = ((($105)) + -1|0);
        HEAP32[$0>>2] = $106;
       }
       $107 = ($104|0)==(0);
       if ($107) {
        $$0 = nan;
        break L4;
       } else {
        $$in = $104;
       }
      }
      break;
     }
     case 0:  {
      $114 = ($c$5|0)==(48);
      do {
       if ($114) {
        $115 = HEAP32[$0>>2]|0;
        $116 = HEAP32[$1>>2]|0;
        $117 = ($115>>>0)<($116>>>0);
        if ($117) {
         $118 = ((($115)) + 1|0);
         HEAP32[$0>>2] = $118;
         $119 = HEAP8[$115>>0]|0;
         $120 = $119&255;
         $123 = $120;
        } else {
         $121 = (___shgetc($f)|0);
         $123 = $121;
        }
        $122 = $123 | 32;
        $124 = ($122|0)==(120);
        if (!($124)) {
         $326 = HEAP32[$1>>2]|0;
         $327 = ($326|0)==(0|0);
         if ($327) {
          $c$6 = 48;
          break;
         }
         $328 = HEAP32[$0>>2]|0;
         $329 = ((($328)) + -1|0);
         HEAP32[$0>>2] = $329;
         $c$6 = 48;
         break;
        }
        $125 = HEAP32[$0>>2]|0;
        $126 = HEAP32[$1>>2]|0;
        $127 = ($125>>>0)<($126>>>0);
        if ($127) {
         $128 = ((($125)) + 1|0);
         HEAP32[$0>>2] = $128;
         $129 = HEAP8[$125>>0]|0;
         $130 = $129&255;
         $c$0$i = $130;$gotdig$0$i = 0;
        } else {
         $131 = (___shgetc($f)|0);
         $c$0$i = $131;$gotdig$0$i = 0;
        }
        L94: while(1) {
         switch ($c$0$i|0) {
         case 46:  {
          $gotdig$0$i$lcssa242 = $gotdig$0$i;
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $168 = 0;$170 = 0;$694 = 0;$695 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break L94;
         }
         }
         $132 = HEAP32[$0>>2]|0;
         $133 = HEAP32[$1>>2]|0;
         $134 = ($132>>>0)<($133>>>0);
         if ($134) {
          $135 = ((($132)) + 1|0);
          HEAP32[$0>>2] = $135;
          $136 = HEAP8[$132>>0]|0;
          $137 = $136&255;
          $c$0$i = $137;$gotdig$0$i = 1;
          continue;
         } else {
          $138 = (___shgetc($f)|0);
          $c$0$i = $138;$gotdig$0$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $139 = HEAP32[$0>>2]|0;
         $140 = HEAP32[$1>>2]|0;
         $141 = ($139>>>0)<($140>>>0);
         if ($141) {
          $142 = ((($139)) + 1|0);
          HEAP32[$0>>2] = $142;
          $143 = HEAP8[$139>>0]|0;
          $144 = $143&255;
          $c$1$ph$i = $144;
         } else {
          $145 = (___shgetc($f)|0);
          $c$1$ph$i = $145;
         }
         $146 = ($c$1$ph$i|0)==(48);
         if ($146) {
          $154 = 0;$155 = 0;
          while(1) {
           $147 = HEAP32[$0>>2]|0;
           $148 = HEAP32[$1>>2]|0;
           $149 = ($147>>>0)<($148>>>0);
           if ($149) {
            $150 = ((($147)) + 1|0);
            HEAP32[$0>>2] = $150;
            $151 = HEAP8[$147>>0]|0;
            $152 = $151&255;
            $158 = $152;
           } else {
            $153 = (___shgetc($f)|0);
            $158 = $153;
           }
           $156 = (_i64Add(($154|0),($155|0),-1,-1)|0);
           $157 = tempRet0;
           $159 = ($158|0)==(48);
           if ($159) {
            $154 = $156;$155 = $157;
           } else {
            $168 = 0;$170 = 0;$694 = $156;$695 = $157;$c$2$i = $158;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
            break;
           }
          }
         } else {
          $168 = 0;$170 = 0;$694 = 0;$695 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i$lcssa242;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
         }
        }
        while(1) {
         $160 = (($c$2$i) + -48)|0;
         $161 = ($160>>>0)<(10);
         $$pre$i = $c$2$i | 32;
         if ($161) {
          label = 86;
         } else {
          $162 = (($$pre$i) + -97)|0;
          $163 = ($162>>>0)<(6);
          $164 = ($c$2$i|0)==(46);
          $or$cond6$i = $164 | $163;
          if (!($or$cond6$i)) {
           $212 = $694;$213 = $170;$215 = $695;$216 = $168;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break;
          }
          if ($164) {
           $165 = ($gotrad$0$i|0)==(0);
           if ($165) {
            $696 = $170;$697 = $168;$698 = $170;$699 = $168;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           } else {
            $212 = $694;$213 = $170;$215 = $695;$216 = $168;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $166 = ($c$2$i|0)>(57);
          $167 = (($$pre$i) + -87)|0;
          $d$0$i = $166 ? $167 : $160;
          $169 = ($168|0)<(0);
          $171 = ($170>>>0)<(8);
          $172 = ($168|0)==(0);
          $173 = $172 & $171;
          $174 = $169 | $173;
          do {
           if ($174) {
            $175 = $x$0$i << 4;
            $176 = (($d$0$i) + ($175))|0;
            $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
           } else {
            $177 = ($168|0)<(0);
            $178 = ($170>>>0)<(14);
            $179 = ($168|0)==(0);
            $180 = $179 & $178;
            $181 = $177 | $180;
            if ($181) {
             $182 = (+($d$0$i|0));
             $183 = $scale$0$i * 0.0625;
             $184 = $183 * $182;
             $185 = $y$0$i + $184;
             $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
             break;
            }
            $186 = ($d$0$i|0)==(0);
            $187 = ($gottail$0$i|0)!=(0);
            $or$cond$i = $187 | $186;
            if ($or$cond$i) {
             $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
            } else {
             $188 = $scale$0$i * 0.5;
             $189 = $y$0$i + $188;
             $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
            }
           }
          } while(0);
          $190 = (_i64Add(($170|0),($168|0),1,0)|0);
          $191 = tempRet0;
          $696 = $694;$697 = $695;$698 = $190;$699 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
         }
         $192 = HEAP32[$0>>2]|0;
         $193 = HEAP32[$1>>2]|0;
         $194 = ($192>>>0)<($193>>>0);
         if ($194) {
          $195 = ((($192)) + 1|0);
          HEAP32[$0>>2] = $195;
          $196 = HEAP8[$192>>0]|0;
          $197 = $196&255;
          $168 = $699;$170 = $698;$694 = $696;$695 = $697;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         } else {
          $198 = (___shgetc($f)|0);
          $168 = $699;$170 = $698;$694 = $696;$695 = $697;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         }
        }
        $199 = ($gotdig$2$i$lcssa|0)==(0);
        if ($199) {
         $200 = HEAP32[$1>>2]|0;
         $201 = ($200|0)==(0|0);
         if (!($201)) {
          $202 = HEAP32[$0>>2]|0;
          $203 = ((($202)) + -1|0);
          HEAP32[$0>>2] = $203;
         }
         $204 = ($pok|0)==(0);
         if ($204) {
          ___shlim($f,0);
         } else {
          if (!($201)) {
           $205 = HEAP32[$0>>2]|0;
           $206 = ((($205)) + -1|0);
           HEAP32[$0>>2] = $206;
           $207 = ($gotrad$0$i$lcssa|0)==(0);
           if (!($207)) {
            $208 = ((($205)) + -2|0);
            HEAP32[$0>>2] = $208;
           }
          }
         }
         $209 = (+($sign$0|0));
         $210 = $209 * 0.0;
         $$0 = $210;
         break L4;
        }
        $211 = ($gotrad$0$i$lcssa|0)==(0);
        $214 = $211 ? $213 : $212;
        $217 = $211 ? $216 : $215;
        $218 = ($216|0)<(0);
        $219 = ($213>>>0)<(8);
        $220 = ($216|0)==(0);
        $221 = $220 & $219;
        $222 = $218 | $221;
        if ($222) {
         $224 = $213;$225 = $216;$x$324$i = $x$0$i$lcssa;
         while(1) {
          $223 = $x$324$i << 4;
          $226 = (_i64Add(($224|0),($225|0),1,0)|0);
          $227 = tempRet0;
          $228 = ($227|0)<(0);
          $229 = ($226>>>0)<(8);
          $230 = ($227|0)==(0);
          $231 = $230 & $229;
          $232 = $228 | $231;
          if ($232) {
           $224 = $226;$225 = $227;$x$324$i = $223;
          } else {
           $x$3$lcssa$i = $223;
           break;
          }
         }
        } else {
         $x$3$lcssa$i = $x$0$i$lcssa;
        }
        $233 = $c$2$lcssa$i | 32;
        $234 = ($233|0)==(112);
        if ($234) {
         $235 = (_scanexp($f,$pok)|0);
         $236 = tempRet0;
         $237 = ($235|0)==(0);
         $238 = ($236|0)==(-2147483648);
         $239 = $237 & $238;
         if ($239) {
          $240 = ($pok|0)==(0);
          if ($240) {
           ___shlim($f,0);
           $$0 = 0.0;
           break L4;
          }
          $241 = HEAP32[$1>>2]|0;
          $242 = ($241|0)==(0|0);
          if ($242) {
           $253 = 0;$254 = 0;
          } else {
           $243 = HEAP32[$0>>2]|0;
           $244 = ((($243)) + -1|0);
           HEAP32[$0>>2] = $244;
           $253 = 0;$254 = 0;
          }
         } else {
          $253 = $235;$254 = $236;
         }
        } else {
         $245 = HEAP32[$1>>2]|0;
         $246 = ($245|0)==(0|0);
         if ($246) {
          $253 = 0;$254 = 0;
         } else {
          $247 = HEAP32[$0>>2]|0;
          $248 = ((($247)) + -1|0);
          HEAP32[$0>>2] = $248;
          $253 = 0;$254 = 0;
         }
        }
        $249 = (_bitshift64Shl(($214|0),($217|0),2)|0);
        $250 = tempRet0;
        $251 = (_i64Add(($249|0),($250|0),-32,-1)|0);
        $252 = tempRet0;
        $255 = (_i64Add(($251|0),($252|0),($253|0),($254|0))|0);
        $256 = tempRet0;
        $257 = ($x$3$lcssa$i|0)==(0);
        if ($257) {
         $258 = (+($sign$0|0));
         $259 = $258 * 0.0;
         $$0 = $259;
         break L4;
        }
        $260 = (0 - ($emin$0$ph))|0;
        $261 = ($256|0)>(0);
        $262 = ($255>>>0)>($260>>>0);
        $263 = ($256|0)==(0);
        $264 = $263 & $262;
        $265 = $261 | $264;
        if ($265) {
         $266 = (___errno_location()|0);
         HEAP32[$266>>2] = 34;
         $267 = (+($sign$0|0));
         $268 = $267 * 1.7976931348623157E+308;
         $269 = $268 * 1.7976931348623157E+308;
         $$0 = $269;
         break L4;
        }
        $270 = (($emin$0$ph) + -106)|0;
        $271 = ($270|0)<(0);
        $272 = $271 << 31 >> 31;
        $273 = ($256|0)<($272|0);
        $274 = ($255>>>0)<($270>>>0);
        $275 = ($256|0)==($272|0);
        $276 = $275 & $274;
        $277 = $273 | $276;
        if ($277) {
         $279 = (___errno_location()|0);
         HEAP32[$279>>2] = 34;
         $280 = (+($sign$0|0));
         $281 = $280 * 2.2250738585072014E-308;
         $282 = $281 * 2.2250738585072014E-308;
         $$0 = $282;
         break L4;
        }
        $278 = ($x$3$lcssa$i|0)>(-1);
        if ($278) {
         $288 = $255;$289 = $256;$x$419$i = $x$3$lcssa$i;$y$320$i = $y$0$i$lcssa;
         while(1) {
          $283 = !($y$320$i >= 0.5);
          $284 = $x$419$i << 1;
          $285 = $y$320$i + -1.0;
          $286 = $283&1;
          $287 = $286 | $284;
          $x$5$i = $287 ^ 1;
          $$pn$i = $283 ? $y$320$i : $285;
          $y$4$i = $y$320$i + $$pn$i;
          $290 = (_i64Add(($288|0),($289|0),-1,-1)|0);
          $291 = tempRet0;
          $292 = ($287|0)>(-1);
          if ($292) {
           $288 = $290;$289 = $291;$x$419$i = $x$5$i;$y$320$i = $y$4$i;
          } else {
           $297 = $290;$298 = $291;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
           break;
          }
         }
        } else {
         $297 = $255;$298 = $256;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
        }
        $293 = ($emin$0$ph|0)<(0);
        $294 = $293 << 31 >> 31;
        $295 = (_i64Subtract(32,0,($emin$0$ph|0),($294|0))|0);
        $296 = tempRet0;
        $299 = (_i64Add(($297|0),($298|0),($295|0),($296|0))|0);
        $300 = tempRet0;
        $301 = (0)>($300|0);
        $302 = ($bits$0$ph>>>0)>($299>>>0);
        $303 = (0)==($300|0);
        $304 = $303 & $302;
        $305 = $301 | $304;
        if ($305) {
         $306 = ($299|0)<(0);
         if ($306) {
          $$0710$i = 0;
          label = 127;
         } else {
          $$07$i = $299;
          label = 125;
         }
        } else {
         $$07$i = $bits$0$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $307 = ($$07$i|0)<(53);
         if ($307) {
          $$0710$i = $$07$i;
          label = 127;
         } else {
          $$pre41$i = (+($sign$0|0));
          $$0711$i = $$07$i;$$pre$phi42$iZ2D = $$pre41$i;$bias$0$i = 0.0;
         }
        }
        if ((label|0) == 127) {
         $308 = (84 - ($$0710$i))|0;
         $309 = (+_scalbn(1.0,$308));
         $310 = (+($sign$0|0));
         $311 = (+_copysignl($309,$310));
         $$0711$i = $$0710$i;$$pre$phi42$iZ2D = $310;$bias$0$i = $311;
        }
        $312 = ($$0711$i|0)<(32);
        $313 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $313 & $312;
        $314 = $x$4$lcssa$i & 1;
        $315 = ($314|0)==(0);
        $or$cond9$i = $315 & $or$cond4$i;
        $316 = $or$cond9$i&1;
        $x$6$i = (($316) + ($x$4$lcssa$i))|0;
        $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
        $317 = (+($x$6$i>>>0));
        $318 = $$pre$phi42$iZ2D * $317;
        $319 = $bias$0$i + $318;
        $320 = $$pre$phi42$iZ2D * $y$5$i;
        $321 = $320 + $319;
        $322 = $321 - $bias$0$i;
        $323 = $322 != 0.0;
        if (!($323)) {
         $324 = (___errno_location()|0);
         HEAP32[$324>>2] = 34;
        }
        $325 = (+_scalbnl($322,$297));
        $$0 = $325;
        break L4;
       } else {
        $c$6 = $c$5;
       }
      } while(0);
      $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
      $330 = (0 - ($sum$i))|0;
      $$010$i = $c$6;$gotdig$0$i$12 = 0;
      L184: while(1) {
       switch ($$010$i|0) {
       case 46:  {
        $gotdig$0$i$12$lcssa273 = $gotdig$0$i$12;
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$2$i = $$010$i;$700 = 0;$701 = 0;$gotdig$2$i$13 = $gotdig$0$i$12;$gotrad$0$i$14 = 0;
        break L184;
       }
       }
       $331 = HEAP32[$0>>2]|0;
       $332 = HEAP32[$1>>2]|0;
       $333 = ($331>>>0)<($332>>>0);
       if ($333) {
        $334 = ((($331)) + 1|0);
        HEAP32[$0>>2] = $334;
        $335 = HEAP8[$331>>0]|0;
        $336 = $335&255;
        $$010$i = $336;$gotdig$0$i$12 = 1;
        continue;
       } else {
        $337 = (___shgetc($f)|0);
        $$010$i = $337;$gotdig$0$i$12 = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $338 = HEAP32[$0>>2]|0;
       $339 = HEAP32[$1>>2]|0;
       $340 = ($338>>>0)<($339>>>0);
       if ($340) {
        $341 = ((($338)) + 1|0);
        HEAP32[$0>>2] = $341;
        $342 = HEAP8[$338>>0]|0;
        $343 = $342&255;
        $$111$ph$i = $343;
       } else {
        $344 = (___shgetc($f)|0);
        $$111$ph$i = $344;
       }
       $345 = ($$111$ph$i|0)==(48);
       if ($345) {
        $346 = 0;$347 = 0;
        while(1) {
         $348 = (_i64Add(($346|0),($347|0),-1,-1)|0);
         $349 = tempRet0;
         $350 = HEAP32[$0>>2]|0;
         $351 = HEAP32[$1>>2]|0;
         $352 = ($350>>>0)<($351>>>0);
         if ($352) {
          $353 = ((($350)) + 1|0);
          HEAP32[$0>>2] = $353;
          $354 = HEAP8[$350>>0]|0;
          $355 = $354&255;
          $$111$be$i = $355;
         } else {
          $356 = (___shgetc($f)|0);
          $$111$be$i = $356;
         }
         $357 = ($$111$be$i|0)==(48);
         if ($357) {
          $346 = $348;$347 = $349;
         } else {
          $$2$i = $$111$be$i;$700 = $348;$701 = $349;$gotdig$2$i$13 = 1;$gotrad$0$i$14 = 1;
          break;
         }
        }
       } else {
        $$2$i = $$111$ph$i;$700 = 0;$701 = 0;$gotdig$2$i$13 = $gotdig$0$i$12$lcssa273;$gotrad$0$i$14 = 1;
       }
      }
      HEAP32[$x$i>>2] = 0;
      $358 = (($$2$i) + -48)|0;
      $359 = ($358>>>0)<(10);
      $360 = ($$2$i|0)==(46);
      $361 = $360 | $359;
      L203: do {
       if ($361) {
        $362 = ((($x$i)) + 496|0);
        $$3113$i = $$2$i;$365 = 0;$366 = 0;$702 = $360;$703 = $358;$704 = $700;$705 = $701;$gotdig$3109$i = $gotdig$2$i$13;$gotrad$1110$i = $gotrad$0$i$14;$j$0112$i = 0;$k$0111$i = 0;$lnz$0108$i = 0;
        L205: while(1) {
         do {
          if ($702) {
           $cond$i = ($gotrad$1110$i|0)==(0);
           if ($cond$i) {
            $706 = $365;$707 = $366;$708 = $365;$709 = $366;$gotdig$4$i = $gotdig$3109$i;$gotrad$2$i = 1;$j$2$i = $j$0112$i;$k$2$i = $k$0111$i;$lnz$2$i = $lnz$0108$i;
           } else {
            $710 = $704;$711 = $705;$712 = $365;$713 = $366;$gotdig$3109$i$lcssa = $gotdig$3109$i;$j$0112$i$lcssa = $j$0112$i;$k$0111$i$lcssa = $k$0111$i;$lnz$0108$i$lcssa = $lnz$0108$i;
            break L205;
           }
          } else {
           $364 = ($k$0111$i|0)<(125);
           $367 = (_i64Add(($365|0),($366|0),1,0)|0);
           $368 = tempRet0;
           $369 = ($$3113$i|0)!=(48);
           if (!($364)) {
            if (!($369)) {
             $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3109$i;$gotrad$2$i = $gotrad$1110$i;$j$2$i = $j$0112$i;$k$2$i = $k$0111$i;$lnz$2$i = $lnz$0108$i;
             break;
            }
            $379 = HEAP32[$362>>2]|0;
            $380 = $379 | 1;
            HEAP32[$362>>2] = $380;
            $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3109$i;$gotrad$2$i = $gotrad$1110$i;$j$2$i = $j$0112$i;$k$2$i = $k$0111$i;$lnz$2$i = $lnz$0108$i;
            break;
           }
           $$lnz$0$i = $369 ? $367 : $lnz$0108$i;
           $370 = ($j$0112$i|0)==(0);
           $371 = (($x$i) + ($k$0111$i<<2)|0);
           if ($370) {
            $storemerge$i = $703;
           } else {
            $372 = HEAP32[$371>>2]|0;
            $373 = ($372*10)|0;
            $374 = (($$3113$i) + -48)|0;
            $375 = (($374) + ($373))|0;
            $storemerge$i = $375;
           }
           HEAP32[$371>>2] = $storemerge$i;
           $376 = (($j$0112$i) + 1)|0;
           $377 = ($376|0)==(9);
           $378 = $377&1;
           $$k$0$i = (($378) + ($k$0111$i))|0;
           $$16$i = $377 ? 0 : $376;
           $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1110$i;$j$2$i = $$16$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
          }
         } while(0);
         $381 = HEAP32[$0>>2]|0;
         $382 = HEAP32[$1>>2]|0;
         $383 = ($381>>>0)<($382>>>0);
         if ($383) {
          $384 = ((($381)) + 1|0);
          HEAP32[$0>>2] = $384;
          $385 = HEAP8[$381>>0]|0;
          $386 = $385&255;
          $$3$be$i = $386;
         } else {
          $387 = (___shgetc($f)|0);
          $$3$be$i = $387;
         }
         $388 = (($$3$be$i) + -48)|0;
         $389 = ($388>>>0)<(10);
         $390 = ($$3$be$i|0)==(46);
         $391 = $390 | $389;
         if ($391) {
          $$3113$i = $$3$be$i;$365 = $708;$366 = $709;$702 = $390;$703 = $388;$704 = $706;$705 = $707;$gotdig$3109$i = $gotdig$4$i;$gotrad$1110$i = $gotrad$2$i;$j$0112$i = $j$2$i;$k$0111$i = $k$2$i;$lnz$0108$i = $lnz$2$i;
         } else {
          $$3$lcssa$i = $$3$be$i;$393 = $706;$394 = $708;$396 = $707;$397 = $709;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
          label = 161;
          break L203;
         }
        }
        $363 = ($gotdig$3109$i$lcssa|0)!=(0);
        $714 = $712;$715 = $713;$716 = $710;$717 = $711;$718 = $363;$j$077$i = $j$0112$i$lcssa;$k$073$i = $k$0111$i$lcssa;$lnz$067$i = $lnz$0108$i$lcssa;
        label = 169;
       } else {
        $$3$lcssa$i = $$2$i;$393 = $700;$394 = 0;$396 = $701;$397 = 0;$gotdig$3$lcssa$i = $gotdig$2$i$13;$gotrad$1$lcssa$i = $gotrad$0$i$14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $392 = ($gotrad$1$lcssa$i|0)==(0);
        $395 = $392 ? $394 : $393;
        $398 = $392 ? $397 : $396;
        $399 = ($gotdig$3$lcssa$i|0)!=(0);
        $400 = $$3$lcssa$i | 32;
        $401 = ($400|0)==(101);
        $or$cond18$i = $401 & $399;
        if (!($or$cond18$i)) {
         $416 = ($$3$lcssa$i|0)>(-1);
         if ($416) {
          $714 = $394;$715 = $397;$716 = $395;$717 = $398;$718 = $399;$j$077$i = $j$0$lcssa$i;$k$073$i = $k$0$lcssa$i;$lnz$067$i = $lnz$0$lcssa$i;
          label = 169;
          break;
         } else {
          $719 = $394;$720 = $397;$721 = $399;$722 = $395;$723 = $398;$j$076$i = $j$0$lcssa$i;$k$072$i = $k$0$lcssa$i;$lnz$066$i = $lnz$0$lcssa$i;
          label = 171;
          break;
         }
        }
        $402 = (_scanexp($f,$pok)|0);
        $403 = tempRet0;
        $404 = ($402|0)==(0);
        $405 = ($403|0)==(-2147483648);
        $406 = $404 & $405;
        if ($406) {
         $407 = ($pok|0)==(0);
         if ($407) {
          ___shlim($f,0);
          $$1$i = 0.0;
          break;
         }
         $408 = HEAP32[$1>>2]|0;
         $409 = ($408|0)==(0|0);
         if ($409) {
          $412 = 0;$413 = 0;
         } else {
          $410 = HEAP32[$0>>2]|0;
          $411 = ((($410)) + -1|0);
          HEAP32[$0>>2] = $411;
          $412 = 0;$413 = 0;
         }
        } else {
         $412 = $402;$413 = $403;
        }
        $414 = (_i64Add(($412|0),($413|0),($395|0),($398|0))|0);
        $415 = tempRet0;
        $426 = $414;$428 = $394;$429 = $415;$431 = $397;$j$075$i = $j$0$lcssa$i;$k$071$i = $k$0$lcssa$i;$lnz$065$i = $lnz$0$lcssa$i;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $417 = HEAP32[$1>>2]|0;
       $418 = ($417|0)==(0|0);
       if ($418) {
        $719 = $714;$720 = $715;$721 = $718;$722 = $716;$723 = $717;$j$076$i = $j$077$i;$k$072$i = $k$073$i;$lnz$066$i = $lnz$067$i;
        label = 171;
       } else {
        $419 = HEAP32[$0>>2]|0;
        $420 = ((($419)) + -1|0);
        HEAP32[$0>>2] = $420;
        if ($718) {
         $426 = $716;$428 = $714;$429 = $717;$431 = $715;$j$075$i = $j$077$i;$k$071$i = $k$073$i;$lnz$065$i = $lnz$067$i;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($721) {
        $426 = $722;$428 = $719;$429 = $723;$431 = $720;$j$075$i = $j$076$i;$k$071$i = $k$072$i;$lnz$065$i = $lnz$066$i;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $421 = (___errno_location()|0);
        HEAP32[$421>>2] = 22;
        ___shlim($f,0);
        $$1$i = 0.0;
       }
       else if ((label|0) == 173) {
        $422 = HEAP32[$x$i>>2]|0;
        $423 = ($422|0)==(0);
        if ($423) {
         $424 = (+($sign$0|0));
         $425 = $424 * 0.0;
         $$1$i = $425;
         break;
        }
        $427 = ($426|0)==($428|0);
        $430 = ($429|0)==($431|0);
        $432 = $427 & $430;
        $433 = ($431|0)<(0);
        $434 = ($428>>>0)<(10);
        $435 = ($431|0)==(0);
        $436 = $435 & $434;
        $437 = $433 | $436;
        $or$cond$i$16 = $437 & $432;
        if ($or$cond$i$16) {
         $438 = ($bits$0$ph>>>0)>(30);
         $439 = $422 >>> $bits$0$ph;
         $440 = ($439|0)==(0);
         $or$cond20$i = $438 | $440;
         if ($or$cond20$i) {
          $441 = (+($sign$0|0));
          $442 = (+($422>>>0));
          $443 = $441 * $442;
          $$1$i = $443;
          break;
         }
        }
        $444 = (($emin$0$ph|0) / -2)&-1;
        $445 = ($444|0)<(0);
        $446 = $445 << 31 >> 31;
        $447 = ($429|0)>($446|0);
        $448 = ($426>>>0)>($444>>>0);
        $449 = ($429|0)==($446|0);
        $450 = $449 & $448;
        $451 = $447 | $450;
        if ($451) {
         $452 = (___errno_location()|0);
         HEAP32[$452>>2] = 34;
         $453 = (+($sign$0|0));
         $454 = $453 * 1.7976931348623157E+308;
         $455 = $454 * 1.7976931348623157E+308;
         $$1$i = $455;
         break;
        }
        $456 = (($emin$0$ph) + -106)|0;
        $457 = ($456|0)<(0);
        $458 = $457 << 31 >> 31;
        $459 = ($429|0)<($458|0);
        $460 = ($426>>>0)<($456>>>0);
        $461 = ($429|0)==($458|0);
        $462 = $461 & $460;
        $463 = $459 | $462;
        if ($463) {
         $464 = (___errno_location()|0);
         HEAP32[$464>>2] = 34;
         $465 = (+($sign$0|0));
         $466 = $465 * 2.2250738585072014E-308;
         $467 = $466 * 2.2250738585072014E-308;
         $$1$i = $467;
         break;
        }
        $468 = ($j$075$i|0)==(0);
        if ($468) {
         $k$3$i = $k$071$i;
        } else {
         $469 = ($j$075$i|0)<(9);
         if ($469) {
          $470 = (($x$i) + ($k$071$i<<2)|0);
          $$promoted$i = HEAP32[$470>>2]|0;
          $472 = $$promoted$i;$j$3102$i = $j$075$i;
          while(1) {
           $471 = ($472*10)|0;
           $473 = (($j$3102$i) + 1)|0;
           $exitcond$i = ($473|0)==(9);
           if ($exitcond$i) {
            $$lcssa265 = $471;
            break;
           } else {
            $472 = $471;$j$3102$i = $473;
           }
          }
          HEAP32[$470>>2] = $$lcssa265;
         }
         $474 = (($k$071$i) + 1)|0;
         $k$3$i = $474;
        }
        $475 = ($lnz$065$i|0)<(9);
        if ($475) {
         $476 = ($lnz$065$i|0)<=($426|0);
         $477 = ($426|0)<(18);
         $or$cond3$i = $476 & $477;
         if ($or$cond3$i) {
          $478 = ($426|0)==(9);
          if ($478) {
           $479 = (+($sign$0|0));
           $480 = HEAP32[$x$i>>2]|0;
           $481 = (+($480>>>0));
           $482 = $479 * $481;
           $$1$i = $482;
           break;
          }
          $483 = ($426|0)<(9);
          if ($483) {
           $484 = (+($sign$0|0));
           $485 = HEAP32[$x$i>>2]|0;
           $486 = (+($485>>>0));
           $487 = $484 * $486;
           $488 = (8 - ($426))|0;
           $489 = (1224 + ($488<<2)|0);
           $490 = HEAP32[$489>>2]|0;
           $491 = (+($490|0));
           $492 = $487 / $491;
           $$1$i = $492;
           break;
          }
          $493 = Math_imul($426, -3)|0;
          $$neg40$i = (($bits$0$ph) + 27)|0;
          $494 = (($$neg40$i) + ($493))|0;
          $495 = ($494|0)>(30);
          $$pre$i$17 = HEAP32[$x$i>>2]|0;
          $496 = $$pre$i$17 >>> $494;
          $497 = ($496|0)==(0);
          $or$cond190$i = $495 | $497;
          if ($or$cond190$i) {
           $498 = (+($sign$0|0));
           $499 = (+($$pre$i$17>>>0));
           $500 = $498 * $499;
           $501 = (($426) + -10)|0;
           $502 = (1224 + ($501<<2)|0);
           $503 = HEAP32[$502>>2]|0;
           $504 = (+($503|0));
           $505 = $500 * $504;
           $$1$i = $505;
           break;
          }
         }
        }
        $506 = (($426|0) % 9)&-1;
        $507 = ($506|0)==(0);
        if ($507) {
         $a$2$ph46$i = 0;$e2$0$ph$i = 0;$rp$2$ph44$i = $426;$z$1$ph45$i = $k$3$i;
        } else {
         $508 = ($426|0)>(-1);
         $509 = (($506) + 9)|0;
         $510 = $508 ? $506 : $509;
         $511 = (8 - ($510))|0;
         $512 = (1224 + ($511<<2)|0);
         $513 = HEAP32[$512>>2]|0;
         $514 = ($k$3$i|0)==(0);
         if ($514) {
          $a$0$lcssa159$i = 0;$rp$0$lcssa160$i = $426;$z$0$i = 0;
         } else {
          $515 = (1000000000 / ($513|0))&-1;
          $a$093$i = 0;$carry$095$i = 0;$k$494$i = 0;$rp$092$i = $426;
          while(1) {
           $516 = (($x$i) + ($k$494$i<<2)|0);
           $517 = HEAP32[$516>>2]|0;
           $518 = (($517>>>0) % ($513>>>0))&-1;
           $519 = (($517>>>0) / ($513>>>0))&-1;
           $520 = (($519) + ($carry$095$i))|0;
           HEAP32[$516>>2] = $520;
           $521 = Math_imul($518, $515)|0;
           $522 = ($k$494$i|0)==($a$093$i|0);
           $523 = ($520|0)==(0);
           $or$cond21$i = $522 & $523;
           $524 = (($k$494$i) + 1)|0;
           $525 = $524 & 127;
           $526 = (($rp$092$i) + -9)|0;
           $rp$1$i$18 = $or$cond21$i ? $526 : $rp$092$i;
           $a$1$i = $or$cond21$i ? $525 : $a$093$i;
           $527 = ($524|0)==($k$3$i|0);
           if ($527) {
            $$lcssa264 = $521;$a$1$i$lcssa = $a$1$i;$rp$1$i$18$lcssa = $rp$1$i$18;
            break;
           } else {
            $a$093$i = $a$1$i;$carry$095$i = $521;$k$494$i = $524;$rp$092$i = $rp$1$i$18;
           }
          }
          $528 = ($$lcssa264|0)==(0);
          if ($528) {
           $a$0$lcssa159$i = $a$1$i$lcssa;$rp$0$lcssa160$i = $rp$1$i$18$lcssa;$z$0$i = $k$3$i;
          } else {
           $529 = (($k$3$i) + 1)|0;
           $530 = (($x$i) + ($k$3$i<<2)|0);
           HEAP32[$530>>2] = $$lcssa264;
           $a$0$lcssa159$i = $a$1$i$lcssa;$rp$0$lcssa160$i = $rp$1$i$18$lcssa;$z$0$i = $529;
          }
         }
         $531 = (9 - ($510))|0;
         $532 = (($531) + ($rp$0$lcssa160$i))|0;
         $a$2$ph46$i = $a$0$lcssa159$i;$e2$0$ph$i = 0;$rp$2$ph44$i = $532;$z$1$ph45$i = $z$0$i;
        }
        L284: while(1) {
         $533 = ($rp$2$ph44$i|0)<(18);
         $534 = ($rp$2$ph44$i|0)==(18);
         $535 = (($x$i) + ($a$2$ph46$i<<2)|0);
         $e2$0$i$19 = $e2$0$ph$i;$z$1$i = $z$1$ph45$i;
         while(1) {
          if (!($533)) {
           if (!($534)) {
            $a$4$ph$i = $a$2$ph46$i;$e2$1$ph$i = $e2$0$i$19;$rp$4$ph42$i = $rp$2$ph44$i;$z$6$ph$i = $z$1$i;
            break L284;
           }
           $536 = HEAP32[$535>>2]|0;
           $537 = ($536>>>0)<(9007199);
           if (!($537)) {
            $a$4$ph$i = $a$2$ph46$i;$e2$1$ph$i = $e2$0$i$19;$rp$4$ph42$i = 18;$z$6$ph$i = $z$1$i;
            break L284;
           }
          }
          $538 = (($z$1$i) + 127)|0;
          $carry1$0$i = 0;$k$5$in$i = $538;$z$2$i = $z$1$i;
          while(1) {
           $k$5$i = $k$5$in$i & 127;
           $539 = (($x$i) + ($k$5$i<<2)|0);
           $540 = HEAP32[$539>>2]|0;
           $541 = (_bitshift64Shl(($540|0),0,29)|0);
           $542 = tempRet0;
           $543 = (_i64Add(($541|0),($542|0),($carry1$0$i|0),0)|0);
           $544 = tempRet0;
           $545 = ($544>>>0)>(0);
           $546 = ($543>>>0)>(1000000000);
           $547 = ($544|0)==(0);
           $548 = $547 & $546;
           $549 = $545 | $548;
           if ($549) {
            $550 = (___udivdi3(($543|0),($544|0),1000000000,0)|0);
            $551 = tempRet0;
            $552 = (___uremdi3(($543|0),($544|0),1000000000,0)|0);
            $553 = tempRet0;
            $$sink$off0$i = $552;$carry1$1$i = $550;
           } else {
            $$sink$off0$i = $543;$carry1$1$i = 0;
           }
           HEAP32[$539>>2] = $$sink$off0$i;
           $554 = (($z$2$i) + 127)|0;
           $555 = $554 & 127;
           $556 = ($k$5$i|0)!=($555|0);
           $557 = ($k$5$i|0)==($a$2$ph46$i|0);
           $or$cond22$i = $556 | $557;
           $558 = ($$sink$off0$i|0)==(0);
           $k$5$z$2$i = $558 ? $k$5$i : $z$2$i;
           $z$3$i = $or$cond22$i ? $z$2$i : $k$5$z$2$i;
           $559 = (($k$5$i) + -1)|0;
           if ($557) {
            $carry1$1$i$lcssa = $carry1$1$i;$z$3$i$lcssa = $z$3$i;
            break;
           } else {
            $carry1$0$i = $carry1$1$i;$k$5$in$i = $559;$z$2$i = $z$3$i;
           }
          }
          $560 = (($e2$0$i$19) + -29)|0;
          $561 = ($carry1$1$i$lcssa|0)==(0);
          if ($561) {
           $e2$0$i$19 = $560;$z$1$i = $z$3$i$lcssa;
          } else {
           $$lcssa263 = $560;$carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa;$z$3$i$lcssa$lcssa = $z$3$i$lcssa;
           break;
          }
         }
         $562 = (($rp$2$ph44$i) + 9)|0;
         $563 = (($a$2$ph46$i) + 127)|0;
         $564 = $563 & 127;
         $565 = ($564|0)==($z$3$i$lcssa$lcssa|0);
         if ($565) {
          $566 = (($z$3$i$lcssa$lcssa) + 127)|0;
          $567 = $566 & 127;
          $568 = (($x$i) + ($567<<2)|0);
          $569 = HEAP32[$568>>2]|0;
          $570 = (($z$3$i$lcssa$lcssa) + 126)|0;
          $571 = $570 & 127;
          $572 = (($x$i) + ($571<<2)|0);
          $573 = HEAP32[$572>>2]|0;
          $574 = $573 | $569;
          HEAP32[$572>>2] = $574;
          $z$4$i = $567;
         } else {
          $z$4$i = $z$3$i$lcssa$lcssa;
         }
         $575 = (($x$i) + ($564<<2)|0);
         HEAP32[$575>>2] = $carry1$1$i$lcssa$lcssa;
         $a$2$ph46$i = $564;$e2$0$ph$i = $$lcssa263;$rp$2$ph44$i = $562;$z$1$ph45$i = $z$4$i;
        }
        L302: while(1) {
         $606 = (($z$6$ph$i) + 1)|0;
         $603 = $606 & 127;
         $607 = (($z$6$ph$i) + 127)|0;
         $608 = $607 & 127;
         $609 = (($x$i) + ($608<<2)|0);
         $a$4$ph165$i = $a$4$ph$i;$e2$1$ph164$i = $e2$1$ph$i;$rp$4$ph$i = $rp$4$ph42$i;
         while(1) {
          $610 = ($rp$4$ph$i|0)==(18);
          $611 = ($rp$4$ph$i|0)>(27);
          $$24$i = $611 ? 9 : 1;
          $$not$i = $610 ^ 1;
          $a$4$i = $a$4$ph165$i;$e2$1$i = $e2$1$ph164$i;
          while(1) {
           $576 = $a$4$i & 127;
           $577 = ($576|0)==($z$6$ph$i|0);
           do {
            if ($577) {
             label = 219;
            } else {
             $578 = (($x$i) + ($576<<2)|0);
             $579 = HEAP32[$578>>2]|0;
             $580 = ($579>>>0)<(9007199);
             if ($580) {
              label = 219;
              break;
             }
             $581 = ($579>>>0)>(9007199);
             if ($581) {
              break;
             }
             $582 = (($a$4$i) + 1)|0;
             $583 = $582 & 127;
             $584 = ($583|0)==($z$6$ph$i|0);
             if ($584) {
              label = 219;
              break;
             }
             $690 = (($x$i) + ($583<<2)|0);
             $691 = HEAP32[$690>>2]|0;
             $692 = ($691>>>0)<(254740991);
             if ($692) {
              label = 219;
              break;
             }
             $693 = ($691>>>0)>(254740991);
             $brmerge$i$28 = $693 | $$not$i;
             if (!($brmerge$i$28)) {
              $617 = $576;$a$4$i249 = $a$4$i;$e2$1$i246 = $e2$1$i;$z$10$i = $z$6$ph$i;
              break L302;
             }
            }
           } while(0);
           if ((label|0) == 219) {
            label = 0;
            if ($610) {
             label = 220;
             break L302;
            }
           }
           $585 = (($e2$1$i) + ($$24$i))|0;
           $586 = ($a$4$i|0)==($z$6$ph$i|0);
           if ($586) {
            $a$4$i = $z$6$ph$i;$e2$1$i = $585;
           } else {
            $$lcssa256 = $585;$a$4$i$lcssa248 = $a$4$i;
            break;
           }
          }
          $587 = 1 << $$24$i;
          $588 = (($587) + -1)|0;
          $589 = 1000000000 >>> $$24$i;
          $a$586$i = $a$4$i$lcssa248;$carry4$089$i = 0;$k$687$i = $a$4$i$lcssa248;$rp$585$i = $rp$4$ph$i;
          while(1) {
           $590 = (($x$i) + ($k$687$i<<2)|0);
           $591 = HEAP32[$590>>2]|0;
           $592 = $591 & $588;
           $593 = $591 >>> $$24$i;
           $594 = (($593) + ($carry4$089$i))|0;
           HEAP32[$590>>2] = $594;
           $595 = Math_imul($592, $589)|0;
           $596 = ($k$687$i|0)==($a$586$i|0);
           $597 = ($594|0)==(0);
           $or$cond25$i = $596 & $597;
           $598 = (($k$687$i) + 1)|0;
           $599 = $598 & 127;
           $600 = (($rp$585$i) + -9)|0;
           $rp$6$i = $or$cond25$i ? $600 : $rp$585$i;
           $a$6$i = $or$cond25$i ? $599 : $a$586$i;
           $601 = ($599|0)==($z$6$ph$i|0);
           if ($601) {
            $$lcssa257 = $595;$a$6$i$lcssa = $a$6$i;$rp$6$i$lcssa = $rp$6$i;
            break;
           } else {
            $a$586$i = $a$6$i;$carry4$089$i = $595;$k$687$i = $599;$rp$585$i = $rp$6$i;
           }
          }
          $602 = ($$lcssa257|0)==(0);
          if ($602) {
           $a$4$ph165$i = $a$6$i$lcssa;$e2$1$ph164$i = $$lcssa256;$rp$4$ph$i = $rp$6$i$lcssa;
           continue;
          }
          $604 = ($603|0)==($a$6$i$lcssa|0);
          if (!($604)) {
           $$lcssa256$lcssa = $$lcssa256;$$lcssa257$lcssa = $$lcssa257;$a$6$i$lcssa$lcssa = $a$6$i$lcssa;$rp$6$i$lcssa$lcssa = $rp$6$i$lcssa;
           break;
          }
          $612 = HEAP32[$609>>2]|0;
          $613 = $612 | 1;
          HEAP32[$609>>2] = $613;
          $a$4$ph165$i = $a$6$i$lcssa;$e2$1$ph164$i = $$lcssa256;$rp$4$ph$i = $rp$6$i$lcssa;
         }
         $605 = (($x$i) + ($z$6$ph$i<<2)|0);
         HEAP32[$605>>2] = $$lcssa257$lcssa;
         $a$4$ph$i = $a$6$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa256$lcssa;$rp$4$ph42$i = $rp$6$i$lcssa$lcssa;$z$6$ph$i = $603;
        }
        if ((label|0) == 220) {
         if ($577) {
          $614 = (($603) + -1)|0;
          $615 = (($x$i) + ($614<<2)|0);
          HEAP32[$615>>2] = 0;
          $617 = $z$6$ph$i;$a$4$i249 = $a$4$i;$e2$1$i246 = $e2$1$i;$z$10$i = $603;
         } else {
          $617 = $576;$a$4$i249 = $a$4$i;$e2$1$i246 = $e2$1$i;$z$10$i = $z$6$ph$i;
         }
        }
        $616 = (($x$i) + ($617<<2)|0);
        $618 = HEAP32[$616>>2]|0;
        $619 = (+($618>>>0));
        $620 = (($a$4$i249) + 1)|0;
        $621 = $620 & 127;
        $622 = ($621|0)==($z$10$i|0);
        if ($622) {
         $679 = (($a$4$i249) + 2)|0;
         $680 = $679 & 127;
         $681 = (($680) + -1)|0;
         $682 = (($x$i) + ($681<<2)|0);
         HEAP32[$682>>2] = 0;
         $z$10$1$i = $680;
        } else {
         $z$10$1$i = $z$10$i;
        }
        $683 = $619 * 1.0E+9;
        $684 = (($x$i) + ($621<<2)|0);
        $685 = HEAP32[$684>>2]|0;
        $686 = (+($685>>>0));
        $687 = $683 + $686;
        $643 = (+($sign$0|0));
        $625 = $643 * $687;
        $663 = (($e2$1$i246) + 53)|0;
        $669 = (($663) - ($emin$0$ph))|0;
        $670 = ($669|0)<($bits$0$ph|0);
        $688 = ($669|0)<(0);
        $$$i = $688 ? 0 : $669;
        $denormal$0$i = $670&1;
        $$012$i = $670 ? $$$i : $bits$0$ph;
        $689 = ($$012$i|0)<(53);
        if ($689) {
         $623 = (105 - ($$012$i))|0;
         $624 = (+_scalbn(1.0,$623));
         $626 = (+_copysignl($624,$625));
         $627 = (53 - ($$012$i))|0;
         $628 = (+_scalbn(1.0,$627));
         $629 = (+_fmodl($625,$628));
         $630 = $625 - $629;
         $631 = $626 + $630;
         $bias$0$i$25 = $626;$frac$0$i = $629;$y$1$i$24 = $631;
        } else {
         $bias$0$i$25 = 0.0;$frac$0$i = 0.0;$y$1$i$24 = $625;
        }
        $632 = (($a$4$i249) + 2)|0;
        $633 = $632 & 127;
        $634 = ($633|0)==($z$10$1$i|0);
        do {
         if ($634) {
          $frac$3$i = $frac$0$i;
         } else {
          $635 = (($x$i) + ($633<<2)|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636>>>0)<(500000000);
          do {
           if ($637) {
            $638 = ($636|0)==(0);
            if ($638) {
             $639 = (($a$4$i249) + 3)|0;
             $640 = $639 & 127;
             $641 = ($640|0)==($z$10$1$i|0);
             if ($641) {
              $frac$1$i = $frac$0$i;
              break;
             }
            }
            $642 = $643 * 0.25;
            $644 = $642 + $frac$0$i;
            $frac$1$i = $644;
           } else {
            $645 = ($636>>>0)>(500000000);
            if ($645) {
             $646 = $643 * 0.75;
             $647 = $646 + $frac$0$i;
             $frac$1$i = $647;
             break;
            }
            $648 = (($a$4$i249) + 3)|0;
            $649 = $648 & 127;
            $650 = ($649|0)==($z$10$1$i|0);
            if ($650) {
             $651 = $643 * 0.5;
             $652 = $651 + $frac$0$i;
             $frac$1$i = $652;
             break;
            } else {
             $653 = $643 * 0.75;
             $654 = $653 + $frac$0$i;
             $frac$1$i = $654;
             break;
            }
           }
          } while(0);
          $655 = (53 - ($$012$i))|0;
          $656 = ($655|0)>(1);
          if (!($656)) {
           $frac$3$i = $frac$1$i;
           break;
          }
          $657 = (+_fmodl($frac$1$i,1.0));
          $658 = $657 != 0.0;
          if ($658) {
           $frac$3$i = $frac$1$i;
           break;
          }
          $659 = $frac$1$i + 1.0;
          $frac$3$i = $659;
         }
        } while(0);
        $660 = $y$1$i$24 + $frac$3$i;
        $661 = $660 - $bias$0$i$25;
        $662 = $663 & 2147483647;
        $664 = (-2 - ($sum$i))|0;
        $665 = ($662|0)>($664|0);
        do {
         if ($665) {
          $666 = (+Math_abs((+$661)));
          $667 = !($666 >= 9007199254740992.0);
          if ($667) {
           $denormal$2$i = $denormal$0$i;$e2$3$i = $e2$1$i246;$y$2$i$26 = $661;
          } else {
           $668 = ($$012$i|0)==($669|0);
           $or$cond26$i = $670 & $668;
           $denormal$1$i = $or$cond26$i ? 0 : $denormal$0$i;
           $671 = $661 * 0.5;
           $672 = (($e2$1$i246) + 1)|0;
           $denormal$2$i = $denormal$1$i;$e2$3$i = $672;$y$2$i$26 = $671;
          }
          $673 = (($e2$3$i) + 50)|0;
          $674 = ($673|0)>($330|0);
          if (!($674)) {
           $675 = ($denormal$2$i|0)!=(0);
           $676 = $frac$3$i != 0.0;
           $or$cond9$i$27 = $676 & $675;
           if (!($or$cond9$i$27)) {
            $e2$4$i = $e2$3$i;$y$3$i = $y$2$i$26;
            break;
           }
          }
          $677 = (___errno_location()|0);
          HEAP32[$677>>2] = 34;
          $e2$4$i = $e2$3$i;$y$3$i = $y$2$i$26;
         } else {
          $e2$4$i = $e2$1$i246;$y$3$i = $661;
         }
        } while(0);
        $678 = (+_scalbnl($y$3$i,$e2$4$i));
        $$1$i = $678;
       }
      } while(0);
      $$0 = $$1$i;
      break L4;
      break;
     }
     default: {
      $109 = HEAP32[$1>>2]|0;
      $110 = ($109|0)==(0|0);
      if (!($110)) {
       $111 = HEAP32[$0>>2]|0;
       $112 = ((($111)) + -1|0);
       HEAP32[$0>>2] = $112;
      }
      $113 = (___errno_location()|0);
      HEAP32[$113>>2] = 22;
      ___shlim($f,0);
      $$0 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $41 = HEAP32[$1>>2]|0;
    $42 = ($41|0)==(0|0);
    if (!($42)) {
     $43 = HEAP32[$0>>2]|0;
     $44 = ((($43)) + -1|0);
     HEAP32[$0>>2] = $44;
    }
    $45 = ($pok|0)!=(0);
    $46 = ($i$0$lcssa>>>0)>(3);
    $or$cond9 = $45 & $46;
    if ($or$cond9) {
     $i$1 = $i$0$lcssa;
     while(1) {
      if (!($42)) {
       $47 = HEAP32[$0>>2]|0;
       $48 = ((($47)) + -1|0);
       HEAP32[$0>>2] = $48;
      }
      $49 = (($i$1) + -1)|0;
      $$old8 = ($49>>>0)>(3);
      if ($$old8) {
       $i$1 = $49;
      } else {
       break;
      }
     }
    }
   }
   $50 = (+($sign$0|0));
   $51 = $50 * inf;
   $52 = $51;
   $$0 = $52;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = ((($f)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) - ($4))|0;
 $6 = ((($f)) + 108|0);
 HEAP32[$6>>2] = $5;
 $7 = ($lim|0)!=(0);
 $8 = ($5|0)>($lim|0);
 $or$cond = $7 & $8;
 if ($or$cond) {
  $9 = $4;
  $10 = (($9) + ($lim)|0);
  $11 = ((($f)) + 100|0);
  HEAP32[$11>>2] = $10;
 } else {
  $12 = ((($f)) + 100|0);
  HEAP32[$12>>2] = $2;
 }
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 4;
  } else {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    $11 = $$pre;
    $41 = $11;
    label = 9;
   } else {
    $12 = ((($f)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $13;
    $15 = (($$pre) - ($14))|0;
    $16 = ((($f)) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    $21 = $$pre;
    if ($20) {
     $22 = (($13) + ($19)|0);
     $23 = ((($f)) + 100|0);
     HEAP32[$23>>2] = $22;
     $25 = $21;
    } else {
     $41 = $21;
     label = 9;
    }
   }
   if ((label|0) == 9) {
    $24 = ((($f)) + 100|0);
    HEAP32[$24>>2] = $$pre;
    $25 = $41;
   }
   $26 = ($25|0)==(0|0);
   $$phi$trans$insert3 = ((($f)) + 4|0);
   if ($26) {
    $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
    $36 = $$pre4;
   } else {
    $27 = HEAP32[$$phi$trans$insert3>>2]|0;
    $28 = $25;
    $29 = ((($f)) + 108|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 1)|0;
    $32 = (($31) - ($27))|0;
    $33 = (($32) + ($30))|0;
    HEAP32[$29>>2] = $33;
    $34 = $27;
    $36 = $34;
   }
   $35 = ((($36)) + -1|0);
   $37 = HEAP8[$35>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
   } else {
    $40 = $6&255;
    HEAP8[$35>>0] = $40;
    $$0 = $6;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = ((($f)) + 100|0);
  HEAP32[$8>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _close($fd) {
 $fd = $fd|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $0 = (___syscall6(6,($vararg_buffer|0))|0);
 $1 = ($0|0)==(-4);
 $$ = $1 ? -115 : $0;
 $2 = (___syscall_ret($$)|0);
 STACKTOP = sp;return ($2|0);
}
function _setpgrp() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_setpgid(0,0)|0);
 return ($0|0);
}
function _geteuid() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (___syscall201(201,($vararg_buffer|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _setpgid($pid,$pgid) {
 $pid = $pid|0;
 $pgid = $pgid|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $pid;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $pgid;
 $0 = (___syscall57(57,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _write($fd,$buf,$count) {
 $fd = $fd|0;
 $buf = $buf|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $buf;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $count;
 $0 = (___syscall4(4,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _readlink($path,$buf,$bufsize) {
 $path = $path|0;
 $buf = $buf|0;
 $bufsize = $bufsize|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $path;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $buf;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $bufsize;
 $0 = (___syscall85(85,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _getpid() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (___syscall20(20,($vararg_buffer|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _getcwd($buf,$size) {
 $buf = $buf|0;
 $size = $size|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $tmp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tmp = sp + 8|0;
 $0 = ($buf|0)==(0|0);
 if ($0) {
  $$0 = 4096;$$01 = $tmp;
  label = 4;
 } else {
  $1 = ($size|0)==(0);
  if ($1) {
   $2 = (___errno_location()|0);
   HEAP32[$2>>2] = 22;
   $$02 = 0;
  } else {
   $$0 = $size;$$01 = $buf;
   label = 4;
  }
 }
 if ((label|0) == 4) {
  HEAP32[$vararg_buffer>>2] = $$01;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $$0;
  $3 = (___syscall183(183,($vararg_buffer|0))|0);
  $4 = (___syscall_ret($3)|0);
  $5 = ($4|0)<(0);
  if ($5) {
   $$02 = 0;
  } else {
   $6 = ($$01|0)==($tmp|0);
   if ($6) {
    $7 = (___strdup($tmp)|0);
    $$02 = $7;
   } else {
    $$02 = $$01;
   }
  }
 }
 STACKTOP = sp;return ($$02|0);
}
function _tcsetpgrp($fd,$pgrp) {
 $fd = $fd|0;
 $pgrp = $pgrp|0;
 var $0 = 0, $pgrp_int = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $pgrp_int = sp + 4|0;
 HEAP32[$pgrp_int>>2] = $pgrp;
 HEAP32[$vararg_buffer>>2] = $pgrp_int;
 $0 = (_ioctl($fd,21520,$vararg_buffer)|0);
 STACKTOP = sp;return ($0|0);
}
function __exit($status) {
 $status = $status|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __Exit(($status|0));
 // unreachable;
}
function _getgroups($count,$list) {
 $count = $count|0;
 $list = $list|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $count;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $list;
 $0 = (___syscall205(205,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _access($filename,$amode) {
 $filename = $filename|0;
 $amode = $amode|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $filename;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $amode;
 $0 = (___syscall33(33,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _pipe($fd) {
 $fd = $fd|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $0 = (___syscall42(42,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _getpgrp() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (___syscall65(65,($vararg_buffer|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _lseek($fd,$offset,$whence) {
 $fd = $fd|0;
 $offset = $offset|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $result = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $result = sp + 20|0;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $offset;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $result;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $0 = (___syscall140(140,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 $2 = ($1|0)!=(0);
 $3 = HEAP32[$result>>2]|0;
 $4 = $2 ? -1 : $3;
 STACKTOP = sp;return ($4|0);
}
function _tcgetpgrp($fd) {
 $fd = $fd|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $pgrp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $pgrp = sp + 4|0;
 HEAP32[$vararg_buffer>>2] = $pgrp;
 $0 = (_ioctl($fd,21519,$vararg_buffer)|0);
 $1 = ($0|0)<(0);
 $2 = HEAP32[$pgrp>>2]|0;
 $$0 = $1 ? -1 : $2;
 STACKTOP = sp;return ($$0|0);
}
function _dup2($old,$new) {
 $old = $old|0;
 $new = $new|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 while(1) {
  HEAP32[$vararg_buffer>>2] = $old;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $new;
  $0 = (___syscall63(63,($vararg_buffer|0))|0);
  $1 = ($0|0)==(-16);
  if (!($1)) {
   $$lcssa = $0;
   break;
  }
 }
 $2 = (___syscall_ret($$lcssa)|0);
 STACKTOP = sp;return ($2|0);
}
function _getppid() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (___syscall64(64,($vararg_buffer|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _isatty($fd) {
 $fd = $fd|0;
 var $0 = 0, $1 = 0, $2 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t = sp;
 $0 = (_tcgetattr($fd,$t)|0);
 $1 = ($0|0)==(0);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _chdir($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $path;
 $0 = (___syscall12(12,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _getegid() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (___syscall202(202,($vararg_buffer|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _link($existing,$new) {
 $existing = $existing|0;
 $new = $new|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $existing;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $new;
 $0 = (___syscall9(9,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _getgid() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (___syscall200(200,($vararg_buffer|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _symlink($existing,$new) {
 $existing = $existing|0;
 $new = $new|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $existing;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $new;
 $0 = (___syscall83(83,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _read($fd,$buf,$count) {
 $fd = $fd|0;
 $buf = $buf|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $buf;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $count;
 $0 = (___syscall3(3,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _dup($fd) {
 $fd = $fd|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $0 = (___syscall41(41,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _fnmatch($pat,$str,$flags) {
 $pat = $pat|0;
 $str = $str|0;
 $flags = $flags|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$lcssa = 0, $$mux = 0, $$not = 0, $$not4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, $inc = 0;
 var $or$cond = 0, $or$cond9 = 0, $p$0 = 0, $p$0$lcssa = 0, $s$0 = 0, $s$0$lcssa = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $inc = sp;
 $0 = $flags & 1;
 $1 = ($0|0)==(0);
 $2 = $flags & 8;
 $3 = ($2|0)==(0);
 L1: do {
  if ($1) {
   L3: do {
    if (!($3)) {
     $23 = $str;
     $s$1 = $str;
     while(1) {
      $24 = HEAP8[$s$1>>0]|0;
      switch ($24<<24>>24) {
      case 0:  {
       break L3;
       break;
      }
      case 47:  {
       $25 = $s$1;
       $26 = (($25) - ($23))|0;
       $27 = (_fnmatch_internal($pat,-1,$str,$26,$flags)|0);
       $28 = ($27|0)==(0);
       if ($28) {
        $$0 = 0;
        break L1;
       }
       break;
      }
      default: {
      }
      }
      $29 = ((($s$1)) + 1|0);
      $s$1 = $29;
     }
    }
   } while(0);
   $30 = (_fnmatch_internal($pat,-1,$str,-1,$flags)|0);
   $$0 = $30;
  } else {
   $$01 = $pat;$$02 = $str;
   while(1) {
    $s$0 = $$02;
    L13: while(1) {
     $4 = HEAP8[$s$0>>0]|0;
     switch ($4<<24>>24) {
     case 47: case 0:  {
      $s$0$lcssa = $s$0;
      break L13;
      break;
     }
     default: {
     }
     }
     $5 = ((($s$0)) + 1|0);
     $s$0 = $5;
    }
    $p$0 = $$01;
    L17: while(1) {
     $6 = (_pat_next($p$0,-1,$inc,$flags)|0);
     switch ($6|0) {
     case 0: case 47:  {
      $$lcssa = $6;$p$0$lcssa = $p$0;
      break L17;
      break;
     }
     default: {
     }
     }
     $7 = HEAP32[$inc>>2]|0;
     $8 = (($p$0) + ($7)|0);
     $p$0 = $8;
    }
    $9 = HEAP8[$s$0$lcssa>>0]|0;
    $10 = $9 << 24 >> 24;
    $11 = ($$lcssa|0)!=($10|0);
    $12 = ($9<<24>>24)==(0);
    $or$cond = $3 | $12;
    $or$cond9 = $11 & $or$cond;
    if ($or$cond9) {
     $$0 = 1;
     break L1;
    }
    $13 = $p$0$lcssa;
    $14 = $$01;
    $15 = (($13) - ($14))|0;
    $16 = $s$0$lcssa;
    $17 = $$02;
    $18 = (($16) - ($17))|0;
    $19 = (_fnmatch_internal($$01,$15,$$02,$18,$flags)|0);
    $$not = ($19|0)!=(0);
    $$not4 = ($$lcssa|0)==(0);
    $brmerge = $$not4 | $$not;
    $$mux = $$not&1;
    if ($brmerge) {
     $$0 = $$mux;
     break L1;
    }
    $20 = ((($s$0$lcssa)) + 1|0);
    $21 = HEAP32[$inc>>2]|0;
    $22 = (($p$0$lcssa) + ($21)|0);
    $$01 = $22;$$02 = $20;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _glob($pat,$flags,$errfunc,$g) {
 $pat = $pat|0;
 $flags = $flags|0;
 $errfunc = $errfunc|0;
 $g = $g|0;
 var $$1 = 0, $$cast = 0, $$in = 0, $$lcssa = 0, $$pre = 0, $$pre$phi323337Z2D = 0, $$pre$phi323338Z2D = 0, $$pre25 = 0, $$pre26 = 0, $$sink17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $cnt$018 = 0, $cnt$1 = 0, $d$0 = 0, $error$093435 = 0, $error$093436 = 0, $exitcond = 0;
 var $head = 0, $i$114 = 0, $ignore_err$errfunc = 0, $match$01$i = 0, $match$01$i$3 = 0, $match$01$i$6 = 0, $offs$1 = 0, $p$1 = 0, $pat$pn = 0, $tail = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $head = sp;
 $tail = sp + 8|0;
 $0 = $head;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 HEAP32[$tail>>2] = $head;
 $4 = $flags & 8;
 $5 = ($4|0)==(0);
 if ($5) {
  $18 = 0;
 } else {
  $6 = ((($g)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $18 = $7;
 }
 $8 = HEAP8[$pat>>0]|0;
 $9 = ($8<<24>>24)==(47);
 if ($9) {
  $pat$pn = $pat;
  while(1) {
   $10 = ((($pat$pn)) + 1|0);
   $$pre = HEAP8[$10>>0]|0;
   $11 = ($$pre<<24>>24)==(47);
   if ($11) {
    $pat$pn = $10;
   } else {
    $82 = $$pre;$d$0 = 13905;$p$1 = $10;
    break;
   }
  }
 } else {
  $82 = $8;$d$0 = 13904;$p$1 = $pat;
 }
 $12 = (_strlen($p$1)|0);
 $13 = ($12>>>0)>(4096);
 L8: do {
  if ($13) {
   $$1 = 1;
  } else {
   $14 = ($errfunc|0)==(0|0);
   $ignore_err$errfunc = $14 ? 55 : $errfunc;
   $15 = $flags & 32;
   $16 = ($15|0)!=(0);
   if ($16) {
    $20 = $82;
   } else {
    $17 = ((($g)) + 8|0);
    HEAP32[$17>>2] = $18;
    HEAP32[$g>>2] = 0;
    $19 = ((($g)) + 4|0);
    HEAP32[$19>>2] = 0;
    $$pre25 = HEAP8[$p$1>>0]|0;
    $20 = $$pre25;
   }
   $21 = ($20<<24>>24)==(0);
   if ($21) {
    HEAP32[$tail>>2] = 0;
    $$pre$phi323338Z2D = $head;$83 = $tail;$error$093436 = 0;
    label = 16;
   } else {
    $22 = (_match_in_dir($d$0,$p$1,$flags,$ignore_err$errfunc,$tail)|0);
    $23 = ($22|0)==(1);
    if ($23) {
     $24 = HEAP32[$head>>2]|0;
     $25 = ($24|0)==(0|0);
     if ($25) {
      $$1 = 1;
      break;
     } else {
      $match$01$i = $24;
     }
     while(1) {
      $26 = HEAP32[$match$01$i>>2]|0;
      _free($match$01$i);
      $27 = ($26|0)==(0|0);
      if ($27) {
       $$1 = 1;
       break L8;
      } else {
       $match$01$i = $26;
      }
     }
    }
    $$pre26 = HEAP32[$head>>2]|0;
    HEAP32[$tail>>2] = $$pre26;
    $28 = ($$pre26|0)==(0);
    if ($28) {
     $$pre$phi323338Z2D = $head;$83 = $tail;$error$093436 = $22;
     label = 16;
    } else {
     $$sink17 = $$pre26;$cnt$018 = 0;
     while(1) {
      $29 = $$sink17;
      $30 = HEAP32[$29>>2]|0;
      HEAP32[$tail>>2] = $30;
      $31 = (($cnt$018) + 1)|0;
      $32 = ($30|0)==(0);
      if ($32) {
       $$lcssa = $31;
       break;
      } else {
       $$sink17 = $30;$cnt$018 = $31;
      }
     }
     $33 = ($$lcssa|0)==(0);
     if ($33) {
      $$pre$phi323338Z2D = $head;$83 = $tail;$error$093436 = $22;
      label = 16;
     } else {
      $$pre$phi323337Z2D = $head;$66 = $tail;$cnt$1 = $$lcssa;$error$093435 = $22;
     }
    }
   }
   if ((label|0) == 16) {
    $34 = $flags & 16;
    $35 = ($34|0)==(0);
    if ($35) {
     $$1 = 3;
     break;
    }
    HEAP32[$tail>>2] = $head;
    $36 = (_strlen($pat)|0);
    $37 = (_append($tail,$pat,$36,0)|0);
    $38 = ($37|0)==(0);
    if ($38) {
     $$pre$phi323337Z2D = $$pre$phi323338Z2D;$66 = $83;$cnt$1 = 1;$error$093435 = $error$093436;
    } else {
     $$1 = 1;
     break;
    }
   }
   do {
    if ($16) {
     $39 = ((($g)) + 4|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = HEAP32[$g>>2]|0;
     $42 = (($cnt$1) + ($18))|0;
     $43 = (($42) + ($41))|0;
     $44 = $43 << 2;
     $45 = (($44) + 4)|0;
     $46 = (_realloc($40,$45)|0);
     $47 = ($46|0)==(0|0);
     if (!($47)) {
      HEAP32[$39>>2] = $46;
      $52 = (($41) + ($18))|0;
      $offs$1 = $52;
      break;
     }
     $48 = HEAP32[$head>>2]|0;
     $49 = ($48|0)==(0|0);
     if ($49) {
      $$1 = 1;
      break L8;
     } else {
      $match$01$i$3 = $48;
     }
     while(1) {
      $50 = HEAP32[$match$01$i$3>>2]|0;
      _free($match$01$i$3);
      $51 = ($50|0)==(0|0);
      if ($51) {
       $$1 = 1;
       break L8;
      } else {
       $match$01$i$3 = $50;
      }
     }
    } else {
     $53 = (($cnt$1) + ($18))|0;
     $54 = $53 << 2;
     $55 = (($54) + 4)|0;
     $56 = (_malloc($55)|0);
     $57 = ((($g)) + 4|0);
     HEAP32[$57>>2] = $56;
     $58 = ($56|0)==(0|0);
     if ($58) {
      $61 = HEAP32[$head>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $$1 = 1;
       break L8;
      } else {
       $match$01$i$6 = $61;
      }
      while(1) {
       $63 = HEAP32[$match$01$i$6>>2]|0;
       _free($match$01$i$6);
       $64 = ($63|0)==(0|0);
       if ($64) {
        $$1 = 1;
        break L8;
       } else {
        $match$01$i$6 = $63;
       }
      }
     } else {
      $59 = ($18|0)==(0);
      if ($59) {
       $offs$1 = 0;
       break;
      }
      $60 = $18 << 2;
      _memset(($56|0),0,($60|0))|0;
      $offs$1 = $18;
      break;
     }
    }
   } while(0);
   $65 = HEAP32[$$pre$phi323337Z2D>>2]|0;
   HEAP32[$66>>2] = $65;
   $67 = ((($g)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $$in = $65;$i$114 = 0;
   while(1) {
    $69 = $$in;
    $70 = ((($69)) + 4|0);
    $71 = (($i$114) + ($offs$1))|0;
    $72 = (($68) + ($71<<2)|0);
    HEAP32[$72>>2] = $70;
    $$cast = $$in;
    $73 = HEAP32[$$cast>>2]|0;
    HEAP32[$66>>2] = $73;
    $74 = (($i$114) + 1)|0;
    $exitcond = ($74|0)==($cnt$1|0);
    if ($exitcond) {
     break;
    } else {
     $$in = $73;$i$114 = $74;
    }
   }
   $75 = (($cnt$1) + ($offs$1))|0;
   $76 = (($68) + ($75<<2)|0);
   HEAP32[$76>>2] = 0;
   $77 = HEAP32[$g>>2]|0;
   $78 = (($77) + ($cnt$1))|0;
   HEAP32[$g>>2] = $78;
   $79 = $flags & 4;
   $80 = ($79|0)==(0);
   if ($80) {
    $81 = (($68) + ($offs$1<<2)|0);
    _qsort($81,$cnt$1,4,56);
    $$1 = $error$093435;
   } else {
    $$1 = $error$093435;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function _globfree($g) {
 $g = $g|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$g>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $$pre = ((($g)) + 4|0);
  $$pre$phiZ2D = $$pre;
 } else {
  $2 = ((($g)) + 8|0);
  $3 = ((($g)) + 4|0);
  $i$01 = 0;
  while(1) {
   $4 = HEAP32[$2>>2]|0;
   $5 = (($4) + ($i$01))|0;
   $6 = HEAP32[$3>>2]|0;
   $7 = (($6) + ($5<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($8)) + -4|0);
   _free($9);
   $10 = (($i$01) + 1)|0;
   $11 = HEAP32[$g>>2]|0;
   $12 = ($10>>>0)<($11>>>0);
   if ($12) {
    $i$01 = $10;
   } else {
    $$pre$phiZ2D = $3;
    break;
   }
  }
 }
 $13 = HEAP32[$$pre$phiZ2D>>2]|0;
 _free($13);
 HEAP32[$g>>2] = 0;
 HEAP32[$$pre$phiZ2D>>2] = 0;
 return;
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (13907 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 13995;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 13995;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 13995;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1048>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 1256;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function _getopt_long($argc,$argv,$optstring,$longopts,$idx) {
 $argc = $argc|0;
 $argv = $argv|0;
 $optstring = $optstring|0;
 $longopts = $longopts|0;
 $idx = $idx|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___getopt_long($argc,$argv,$optstring,$longopts,$idx,0)|0);
 return ($0|0);
}
function _getrlimit($resource,$rlim) {
 $resource = $resource|0;
 $rlim = $rlim|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $k_rlim = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $k_rlim = sp + 24|0;
 HEAP32[$vararg_buffer>>2] = 0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $resource;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 0;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $rlim;
 $0 = (___syscall340(340,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = $rlim;
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($3) + 4)|0;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)==(-1);
  $10 = ($8|0)==(-1);
  $11 = $9 & $10;
  if ($11) {
   $12 = $rlim;
   $13 = $12;
   HEAP32[$13>>2] = -1;
   $14 = (($12) + 4)|0;
   $15 = $14;
   HEAP32[$15>>2] = -1;
  }
  $16 = ((($rlim)) + 8|0);
  $17 = $16;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = ($19|0)==(-1);
  $24 = ($22|0)==(-1);
  $25 = $23 & $24;
  if ($25) {
   $26 = $16;
   $27 = $26;
   HEAP32[$27>>2] = -1;
   $28 = (($26) + 4)|0;
   $29 = $28;
   HEAP32[$29>>2] = -1;
   $$0 = 0;
  } else {
   $$0 = 0;
  }
 } else {
  $30 = (___errno_location()|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(38);
  if ($32) {
   HEAP32[$vararg_buffer4>>2] = $resource;
   $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
   HEAP32[$vararg_ptr7>>2] = $k_rlim;
   $33 = (___syscall191(191,($vararg_buffer4|0))|0);
   $34 = (___syscall_ret($33)|0);
   $35 = ($34|0)<(0);
   if ($35) {
    $$0 = -1;
   } else {
    $36 = HEAP32[$k_rlim>>2]|0;
    $37 = ($36|0)==(-1);
    $38 = $37 ? -1 : $36;
    $39 = $37 ? -1 : 0;
    $40 = $rlim;
    $41 = $40;
    HEAP32[$41>>2] = $38;
    $42 = (($40) + 4)|0;
    $43 = $42;
    HEAP32[$43>>2] = $39;
    $44 = ((($k_rlim)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($45|0)==(-1);
    $47 = $46 ? -1 : $45;
    $48 = $46 ? -1 : 0;
    $49 = ((($rlim)) + 8|0);
    $50 = $49;
    $51 = $50;
    HEAP32[$51>>2] = $47;
    $52 = (($50) + 4)|0;
    $53 = $52;
    HEAP32[$53>>2] = $48;
    if ($37) {
     $54 = $rlim;
     $55 = $54;
     HEAP32[$55>>2] = -1;
     $56 = (($54) + 4)|0;
     $57 = $56;
     HEAP32[$57>>2] = -1;
    }
    if ($46) {
     $58 = $49;
     $59 = $58;
     HEAP32[$59>>2] = -1;
     $60 = (($58) + 4)|0;
     $61 = $60;
     HEAP32[$61>>2] = -1;
     $$0 = 0;
    } else {
     $$0 = 0;
    }
   }
  } else {
   $$0 = $1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___setrlimit($resource,$rlim) {
 $resource = $resource|0;
 $rlim = $rlim|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k_rlim = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $k_rlim = sp + 24|0;
 HEAP32[$vararg_buffer>>2] = 0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $resource;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $rlim;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = 0;
 $0 = (___syscall340(340,($vararg_buffer|0))|0);
 $1 = ($0|0)==(-38);
 if ($1) {
  $2 = $rlim;
  $3 = $2;
  $4 = HEAP32[$3>>2]|0;
  $5 = (($2) + 4)|0;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7>>>0)<(0);
  $9 = ($4>>>0)<(4294967295);
  $10 = ($7|0)==(0);
  $11 = $10 & $9;
  $12 = $8 | $11;
  $13 = $12 ? $4 : -1;
  $12 ? $7 : 0;
  HEAP32[$k_rlim>>2] = $13;
  $14 = ((($rlim)) + 8|0);
  $15 = $14;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20>>>0)<(0);
  $22 = ($17>>>0)<(4294967295);
  $23 = ($20|0)==(0);
  $24 = $23 & $22;
  $25 = $21 | $24;
  $26 = $25 ? $17 : -1;
  $25 ? $20 : 0;
  $27 = ((($k_rlim)) + 4|0);
  HEAP32[$27>>2] = $26;
  HEAP32[$vararg_buffer4>>2] = $resource;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $k_rlim;
  $28 = (___syscall75(75,($vararg_buffer4|0))|0);
  $$0 = $28;
 } else {
  $$0 = $0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _setrlimit($resource,$rlim) {
 $resource = $resource|0;
 $rlim = $rlim|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 HEAP32[$c>>2] = $rlim;
 $0 = ((($c)) + 4|0);
 HEAP32[$0>>2] = $resource;
 $1 = ((($c)) + 8|0);
 HEAP32[$1>>2] = 0;
 ___synccall(57,$c);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
 } else {
  $4 = (___errno_location()|0);
  HEAP32[$4>>2] = $2;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _uname($uts) {
 $uts = $uts|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $uts;
 $0 = (___syscall122(122,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _getopt($argc,$argv,$optstring) {
 $argc = $argc|0;
 $argv = $argv|0;
 $optstring = $optstring|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $c = 0, $d = 0, $i$0$lcssa = 0, $i$04 = 0, $k$0 = 0, $or$cond = 0;
 var $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp + 4|0;
 $d = sp;
 $0 = HEAP32[1092>>2]|0;
 $1 = ($0|0)==(0);
 $2 = HEAP32[1100>>2]|0;
 $3 = ($2|0)!=(0);
 $or$cond = $1 | $3;
 if ($or$cond) {
  HEAP32[1100>>2] = 0;
  HEAP32[1104>>2] = 0;
  HEAP32[1092>>2] = 1;
  $4 = 1;
 } else {
  $4 = $0;
 }
 $5 = ($4|0)<($argc|0);
 L4: do {
  if ($5) {
   $6 = (($argv) + ($4<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$0 = -1;
   } else {
    $9 = HEAP8[$7>>0]|0;
    $10 = ($9<<24>>24)==(45);
    if ($10) {
     $11 = ((($7)) + 1|0);
     $12 = HEAP8[$11>>0]|0;
     switch ($12<<24>>24) {
     case 0:  {
      $$0 = -1;
      break L4;
      break;
     }
     case 45:  {
      $13 = ((($7)) + 2|0);
      $14 = HEAP8[$13>>0]|0;
      $15 = ($14<<24>>24)==(0);
      if ($15) {
       $16 = (($4) + 1)|0;
       HEAP32[1092>>2] = $16;
       $$0 = -1;
       break L4;
      }
      break;
     }
     default: {
     }
     }
     $17 = HEAP32[1104>>2]|0;
     $18 = ($17|0)==(0);
     if ($18) {
      HEAP32[1104>>2] = 1;
      $20 = 1;
     } else {
      $20 = $17;
     }
     $19 = (($7) + ($20)|0);
     $21 = (_mbtowc($c,$19,4)|0);
     $22 = ($21|0)<(0);
     if ($22) {
      HEAP32[$c>>2] = 65533;
      $28 = 65533;$k$0 = 1;
     } else {
      $$pre = HEAP32[$c>>2]|0;
      $28 = $$pre;$k$0 = $21;
     }
     $23 = HEAP32[1092>>2]|0;
     $24 = (($argv) + ($23<<2)|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = HEAP32[1104>>2]|0;
     $27 = (($25) + ($26)|0);
     HEAP32[1108>>2] = $28;
     $29 = (($26) + ($k$0))|0;
     HEAP32[1104>>2] = $29;
     $30 = (($25) + ($29)|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $33 = (($23) + 1)|0;
      HEAP32[1092>>2] = $33;
      HEAP32[1104>>2] = 0;
     }
     $34 = (_mbtowc($d,$optstring,4)|0);
     $35 = ($34|0)==(0);
     L22: do {
      if ($35) {
       $i$0$lcssa = 0;
      } else {
       $39 = $34;$i$04 = 0;
       while(1) {
        $36 = HEAP32[$d>>2]|0;
        $37 = HEAP32[$c>>2]|0;
        $38 = ($36|0)==($37|0);
        if ($38) {
         $i$0$lcssa = $i$04;
         break L22;
        }
        $40 = ($39|0)<(1);
        $41 = $40 ? 1 : $39;
        $42 = (($41) + ($i$04))|0;
        $43 = (($optstring) + ($42)|0);
        $44 = (_mbtowc($d,$43,4)|0);
        $45 = ($44|0)==(0);
        if ($45) {
         $i$0$lcssa = $42;
         break;
        } else {
         $39 = $44;$i$04 = $42;
        }
       }
      }
     } while(0);
     $46 = HEAP32[$d>>2]|0;
     $47 = HEAP32[$c>>2]|0;
     $48 = ($46|0)==($47|0);
     if (!($48)) {
      $49 = HEAP8[$optstring>>0]|0;
      $50 = ($49<<24>>24)!=(58);
      $51 = HEAP32[1096>>2]|0;
      $52 = ($51|0)!=(0);
      $or$cond3 = $50 & $52;
      if (!($or$cond3)) {
       $$0 = 63;
       break;
      }
      $53 = HEAP32[$argv>>2]|0;
      $54 = (_strlen($53)|0);
      (_write(2,$53,$54)|0);
      (_write(2,15799,18)|0);
      (_write(2,$27,$k$0)|0);
      (_write(2,15818,1)|0);
      $$0 = 63;
      break;
     }
     $55 = (($i$0$lcssa) + 1)|0;
     $56 = (($optstring) + ($55)|0);
     $57 = HEAP8[$56>>0]|0;
     $58 = ($57<<24>>24)==(58);
     if ($58) {
      $59 = HEAP32[1092>>2]|0;
      $60 = ($59|0)<($argc|0);
      if ($60) {
       $67 = (($59) + 1)|0;
       HEAP32[1092>>2] = $67;
       $68 = (($argv) + ($59<<2)|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = HEAP32[1104>>2]|0;
       $71 = (($69) + ($70)|0);
       HEAP32[1112>>2] = $71;
       HEAP32[1104>>2] = 0;
       $$0 = $46;
       break;
      }
      $61 = HEAP8[$optstring>>0]|0;
      $62 = ($61<<24>>24)==(58);
      if ($62) {
       $$0 = 58;
      } else {
       $63 = HEAP32[1096>>2]|0;
       $64 = ($63|0)==(0);
       if ($64) {
        $$0 = 63;
       } else {
        $65 = HEAP32[$argv>>2]|0;
        $66 = (_strlen($65)|0);
        (_write(2,$65,$66)|0);
        (_write(2,15820,31)|0);
        (_write(2,$27,$k$0)|0);
        (_write(2,15818,1)|0);
        $$0 = 63;
       }
      }
     } else {
      $$0 = $46;
     }
    } else {
     $$0 = -1;
    }
   }
  } else {
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _ioctl($fd,$req,$varargs) {
 $fd = $fd|0;
 $req = $req|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ap = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ap = sp + 16|0;
 HEAP32[$ap>>2] = $varargs;
 $arglist_current = HEAP32[$ap>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 4|0);
 $expanded2 = $1;
 $expanded = (($expanded2) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 4|0);
 $expanded6 = $3;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $4 = $2 & $expanded4;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $arglist_next = ((($5)) + 4|0);
 HEAP32[$ap>>2] = $arglist_next;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $req;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $6;
 $7 = (___syscall54(54,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 STACKTOP = sp;return ($8|0);
}
function _open($filename,$flags,$varargs) {
 $filename = $filename|0;
 $flags = $flags|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ap = sp + 16|0;
 HEAP32[$ap>>2] = $varargs;
 $arglist_current = HEAP32[$ap>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 4|0);
 $expanded2 = $1;
 $expanded = (($expanded2) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 4|0);
 $expanded6 = $3;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $4 = $2 & $expanded4;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $arglist_next = ((($5)) + 4|0);
 HEAP32[$ap>>2] = $arglist_next;
 $7 = $flags | 32768;
 HEAP32[$vararg_buffer>>2] = $filename;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $7;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $6;
 $8 = (___syscall5(5,($vararg_buffer|0))|0);
 $9 = (___syscall_ret($8)|0);
 STACKTOP = sp;return ($9|0);
}
function _fcntl($fd,$cmd,$varargs) {
 $fd = $fd|0;
 $cmd = $cmd|0;
 $varargs = $varargs|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $ap = 0, $arglist_current = 0, $arglist_next = 0, $ex = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer18 = 0, $vararg_buffer23 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer36 = 0;
 var $vararg_buffer41 = 0, $vararg_buffer46 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr39 = 0, $vararg_ptr40 = 0, $vararg_ptr44 = 0, $vararg_ptr45 = 0, $vararg_ptr49 = 0;
 var $vararg_ptr50 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer46 = sp + 152|0;
 $vararg_buffer41 = sp + 136|0;
 $vararg_buffer36 = sp + 120|0;
 $vararg_buffer31 = sp + 104|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $ap = sp + 176|0;
 $ex = sp + 168|0;
 HEAP32[$ap>>2] = $varargs;
 $arglist_current = HEAP32[$ap>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 4|0);
 $expanded2 = $1;
 $expanded = (($expanded2) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 4|0);
 $expanded6 = $3;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $4 = $2 & $expanded4;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $arglist_next = ((($5)) + 4|0);
 HEAP32[$ap>>2] = $arglist_next;
 $7 = ($cmd|0)==(4);
 $8 = $6 | 32768;
 $$ = $7 ? $8 : $6;
 L1: do {
  switch ($cmd|0) {
  case 14:  {
   $9 = $$;
   HEAP32[$vararg_buffer>>2] = $fd;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 14;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $9;
   $10 = (___syscall221(221,($vararg_buffer|0))|0);
   $11 = (___syscall_ret($10)|0);
   $$2 = $11;
   break;
  }
  case 9:  {
   HEAP32[$vararg_buffer3>>2] = $fd;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = 16;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $ex;
   $12 = (___syscall221(221,($vararg_buffer3|0))|0);
   switch ($12|0) {
   case -22:  {
    $13 = $$;
    HEAP32[$vararg_buffer8>>2] = $fd;
    $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
    HEAP32[$vararg_ptr11>>2] = 9;
    $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
    HEAP32[$vararg_ptr12>>2] = $13;
    $14 = (___syscall221(221,($vararg_buffer8|0))|0);
    $$0 = $14;
    break;
   }
   case 0:  {
    $16 = HEAP32[$ex>>2]|0;
    $17 = ($16|0)==(2);
    $18 = ((($ex)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (0 - ($19))|0;
    $21 = $17 ? $20 : $19;
    $$0 = $21;
    break;
   }
   default: {
    $15 = (___syscall_ret($12)|0);
    $$0 = $15;
   }
   }
   $$2 = $$0;
   break;
  }
  case 1030:  {
   HEAP32[$vararg_buffer13>>2] = $fd;
   $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
   HEAP32[$vararg_ptr16>>2] = 1030;
   $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
   HEAP32[$vararg_ptr17>>2] = $$;
   $22 = (___syscall221(221,($vararg_buffer13|0))|0);
   $23 = ($22|0)==(-22);
   if (!($23)) {
    $24 = ($22|0)>(-1);
    if ($24) {
     HEAP32[$vararg_buffer18>>2] = $22;
     $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
     HEAP32[$vararg_ptr21>>2] = 2;
     $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
     HEAP32[$vararg_ptr22>>2] = 1;
     (___syscall221(221,($vararg_buffer18|0))|0);
    }
    $25 = (___syscall_ret($22)|0);
    $$2 = $25;
    break L1;
   }
   HEAP32[$vararg_buffer23>>2] = $fd;
   $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
   HEAP32[$vararg_ptr26>>2] = 1030;
   $vararg_ptr27 = ((($vararg_buffer23)) + 8|0);
   HEAP32[$vararg_ptr27>>2] = 0;
   $26 = (___syscall221(221,($vararg_buffer23|0))|0);
   $27 = ($26|0)==(-22);
   if ($27) {
    HEAP32[$vararg_buffer31>>2] = $fd;
    $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
    HEAP32[$vararg_ptr34>>2] = 0;
    $vararg_ptr35 = ((($vararg_buffer31)) + 8|0);
    HEAP32[$vararg_ptr35>>2] = $$;
    $30 = (___syscall221(221,($vararg_buffer31|0))|0);
    $31 = ($30|0)>(-1);
    if ($31) {
     HEAP32[$vararg_buffer36>>2] = $30;
     $vararg_ptr39 = ((($vararg_buffer36)) + 4|0);
     HEAP32[$vararg_ptr39>>2] = 2;
     $vararg_ptr40 = ((($vararg_buffer36)) + 8|0);
     HEAP32[$vararg_ptr40>>2] = 1;
     (___syscall221(221,($vararg_buffer36|0))|0);
    }
    $32 = (___syscall_ret($30)|0);
    $$2 = $32;
    break L1;
   } else {
    $28 = ($26|0)>(-1);
    if ($28) {
     HEAP32[$vararg_buffer28>>2] = $26;
     (___syscall6(6,($vararg_buffer28|0))|0);
    }
    $29 = (___syscall_ret(-22)|0);
    $$2 = $29;
    break L1;
   }
   break;
  }
  default: {
   $$off = (($cmd) + -12)|0;
   $switch = ($$off>>>0)<(5);
   if ($switch) {
    $33 = $$;
    HEAP32[$vararg_buffer41>>2] = $fd;
    $vararg_ptr44 = ((($vararg_buffer41)) + 4|0);
    HEAP32[$vararg_ptr44>>2] = $cmd;
    $vararg_ptr45 = ((($vararg_buffer41)) + 8|0);
    HEAP32[$vararg_ptr45>>2] = $33;
    $34 = (___syscall221(221,($vararg_buffer41|0))|0);
    $35 = (___syscall_ret($34)|0);
    $$2 = $35;
    break L1;
   } else {
    HEAP32[$vararg_buffer46>>2] = $fd;
    $vararg_ptr49 = ((($vararg_buffer46)) + 4|0);
    HEAP32[$vararg_ptr49>>2] = $cmd;
    $vararg_ptr50 = ((($vararg_buffer46)) + 8|0);
    HEAP32[$vararg_ptr50>>2] = $$;
    $36 = (___syscall221(221,($vararg_buffer46|0))|0);
    $37 = (___syscall_ret($36)|0);
    $$2 = $37;
    break L1;
   }
  }
  }
 } while(0);
 STACKTOP = sp;return ($$2|0);
}
function _poll($fds,$n,$timeout) {
 $fds = $fds|0;
 $n = $n|0;
 $timeout = $timeout|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fds;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $n;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $timeout;
 $0 = (___syscall168(168,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _mempcpy($dest,$src,$n) {
 $dest = $dest|0;
 $src = $src|0;
 $n = $n|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _memcpy(($dest|0),($src|0),($n|0))|0;
 $0 = (($dest) + ($n)|0);
 return ($0|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function _strncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($d,$s,$n)|0);
 return ($d|0);
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP32[$$0>>2]|0;
  $1 = ($0|0)==(0);
  $2 = ((($$0)) + 4|0);
  if ($1) {
   $$0$lcssa = $$0;
   break;
  } else {
   $$0 = $2;
  }
 }
 $3 = $$0$lcssa;
 $4 = $s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 return ($6|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $6 = (_strlen($s)|0);
   $7 = (($s) + ($6)|0);
   $$0 = $7;
  } else {
   $2 = $s;
   $3 = $2 & 3;
   $4 = ($3|0)==(0);
   if ($4) {
    $$02$lcssa = $s;
   } else {
    $5 = $c&255;
    $$0211 = $s;
    while(1) {
     $8 = HEAP8[$$0211>>0]|0;
     $9 = ($8<<24>>24)==(0);
     $10 = ($8<<24>>24)==($5<<24>>24);
     $or$cond = $9 | $10;
     if ($or$cond) {
      $$0 = $$0211;
      break L1;
     }
     $11 = ((($$0211)) + 1|0);
     $12 = $11;
     $13 = $12 & 3;
     $14 = ($13|0)==(0);
     if ($14) {
      $$02$lcssa = $11;
      break;
     } else {
      $$0211 = $11;
     }
    }
   }
   $15 = Math_imul($0, 16843009)|0;
   $16 = HEAP32[$$02$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   L10: do {
    if ($21) {
     $23 = $16;$w$08 = $$02$lcssa;
     while(1) {
      $22 = $23 ^ $15;
      $24 = (($22) + -16843009)|0;
      $25 = $22 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $w$0$lcssa = $w$08;
       break L10;
      }
      $29 = ((($w$08)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + -16843009)|0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34|0)==(0);
      if ($35) {
       $23 = $30;$w$08 = $29;
      } else {
       $w$0$lcssa = $29;
       break;
      }
     }
    } else {
     $w$0$lcssa = $$02$lcssa;
    }
   } while(0);
   $36 = $c&255;
   $$1 = $w$0$lcssa;
   while(1) {
    $37 = HEAP8[$$1>>0]|0;
    $38 = ($37<<24>>24)==(0);
    $39 = ($37<<24>>24)==($36<<24>>24);
    $or$cond5 = $38 | $39;
    $40 = ((($$1)) + 1|0);
    if ($or$cond5) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $40;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strcpy($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($dest,$src)|0);
 return ($dest|0);
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$12 = 0, $$01$i = 0, $$02$i = 0, $$02$i$8 = 0, $$03$i = 0, $$3$i = 0, $$lcssa$i = 0, $$lcssa$i$11 = 0, $$lcssa$i$4 = 0, $$lcssa283 = 0, $$lcssa286 = 0, $$lcssa289 = 0, $$lcssa303 = 0, $$lcssa306 = 0, $$lcssa309 = 0, $$lcssa324 = 0, $$pr$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $233$phi = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $byteset$i = 0, $div$i = 0, $div5$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i$7 = 0, $ip$0$ph$lcssa$i = 0, $ip$0$ph$lcssa145$i = 0, $ip$0$ph78$i = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph$lcssa$i = 0, $ip$1$ph57$i = 0, $jp$0$ph15$ph72$i = 0, $jp$0$ph1567$i = 0, $jp$0$ph1567$i$lcssa = 0, $jp$0$ph1567$i$lcssa$lcssa = 0, $jp$0$ph79$i = 0, $jp$1$ph11$ph51$i = 0, $jp$1$ph1146$i = 0;
 var $jp$1$ph1146$i$lcssa = 0, $jp$1$ph1146$i$lcssa$lcssa = 0, $jp$1$ph58$i = 0, $k$061$i = 0, $k$141$i = 0, $k$2$i = 0, $k$340$i = 0, $k$340$i$lcssa = 0, $k$4$i = 0, $l$082$i = 0, $l$082$i$lcssa323 = 0, $mem$0$i = 0, $mem0$0$i = 0, $or$cond$i = 0, $or$cond$i$2 = 0, $or$cond$i$9 = 0, $or$cond6$i = 0, $p$0$ph$ph$lcssa34$i = 0, $p$0$ph$ph$lcssa34149$i = 0, $p$0$ph$ph73$i = 0;
 var $p$1$p$0$i = 0, $p$1$ph$ph$lcssa25$i = 0, $p$1$ph$ph52$i = 0, $p$3$i = 0, $shift$i = 0, $z$0$i = 0, $z$3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = HEAP8[$n>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $$0 = $h;
  } else {
   $2 = $0 << 24 >> 24;
   $3 = (_strchr($h,$2)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    $$0 = 0;
   } else {
    $5 = ((($n)) + 1|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     $$0 = $3;
    } else {
     $8 = ((($3)) + 1|0);
     $9 = HEAP8[$8>>0]|0;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$0 = 0;
     } else {
      $11 = ((($n)) + 2|0);
      $12 = HEAP8[$11>>0]|0;
      $13 = ($12<<24>>24)==(0);
      if ($13) {
       $14 = $0&255;
       $15 = $14 << 8;
       $16 = $6&255;
       $17 = $16 | $15;
       $18 = HEAP8[$3>>0]|0;
       $19 = $18&255;
       $20 = $19 << 8;
       $21 = $9&255;
       $22 = $20 | $21;
       $$01$i = $8;$232 = $9;$233 = $3;$hw$0$in2$i = $22;
       while(1) {
        $23 = $hw$0$in2$i & 65535;
        $24 = ($23|0)==($17|0);
        if ($24) {
         $$lcssa$i = $233;$31 = $232;
         break;
        }
        $25 = $23 << 8;
        $26 = ((($$01$i)) + 1|0);
        $27 = HEAP8[$26>>0]|0;
        $28 = $27&255;
        $29 = $28 | $25;
        $30 = ($27<<24>>24)==(0);
        if ($30) {
         $$lcssa$i = $$01$i;$31 = 0;
         break;
        } else {
         $233$phi = $$01$i;$$01$i = $26;$232 = $27;$hw$0$in2$i = $29;$233 = $233$phi;
        }
       }
       $32 = ($31<<24>>24)!=(0);
       $33 = $32 ? $$lcssa$i : 0;
       $$0 = $33;
       break;
      }
      $34 = ((($3)) + 2|0);
      $35 = HEAP8[$34>>0]|0;
      $36 = ($35<<24>>24)==(0);
      if ($36) {
       $$0 = 0;
      } else {
       $37 = ((($n)) + 3|0);
       $38 = HEAP8[$37>>0]|0;
       $39 = ($38<<24>>24)==(0);
       if ($39) {
        $40 = $0&255;
        $41 = $40 << 24;
        $42 = $6&255;
        $43 = $42 << 16;
        $44 = $43 | $41;
        $45 = $12&255;
        $46 = $45 << 8;
        $47 = $44 | $46;
        $48 = HEAP8[$3>>0]|0;
        $49 = $48&255;
        $50 = $49 << 24;
        $51 = $9&255;
        $52 = $51 << 16;
        $53 = $35&255;
        $54 = $53 << 8;
        $55 = $54 | $52;
        $56 = $55 | $50;
        $57 = ($56|0)==($47|0);
        if ($57) {
         $$0$lcssa$i = $34;$$lcssa$i$4 = $35;
        } else {
         $$02$i = $34;$hw$03$i = $56;
         while(1) {
          $58 = ((($$02$i)) + 1|0);
          $59 = HEAP8[$58>>0]|0;
          $60 = $59&255;
          $61 = $60 | $hw$03$i;
          $62 = $61 << 8;
          $63 = ($59<<24>>24)==(0);
          $64 = ($62|0)==($47|0);
          $or$cond$i$2 = $63 | $64;
          if ($or$cond$i$2) {
           $$0$lcssa$i = $58;$$lcssa$i$4 = $59;
           break;
          } else {
           $$02$i = $58;$hw$03$i = $62;
          }
         }
        }
        $65 = ($$lcssa$i$4<<24>>24)!=(0);
        $66 = ((($$0$lcssa$i)) + -2|0);
        $67 = $65 ? $66 : 0;
        $$0 = $67;
        break;
       }
       $68 = ((($3)) + 3|0);
       $69 = HEAP8[$68>>0]|0;
       $70 = ($69<<24>>24)==(0);
       if ($70) {
        $$0 = 0;
       } else {
        $71 = ((($n)) + 4|0);
        $72 = HEAP8[$71>>0]|0;
        $73 = ($72<<24>>24)==(0);
        if ($73) {
         $74 = $0&255;
         $75 = $74 << 24;
         $76 = $6&255;
         $77 = $76 << 16;
         $78 = $77 | $75;
         $79 = $12&255;
         $80 = $79 << 8;
         $81 = $78 | $80;
         $82 = $38&255;
         $83 = $81 | $82;
         $84 = HEAP8[$3>>0]|0;
         $85 = $84&255;
         $86 = $85 << 24;
         $87 = $9&255;
         $88 = $87 << 16;
         $89 = $35&255;
         $90 = $89 << 8;
         $91 = $69&255;
         $92 = $90 | $88;
         $93 = $92 | $91;
         $94 = $93 | $86;
         $95 = ($94|0)==($83|0);
         if ($95) {
          $$0$lcssa$i$12 = $68;$$lcssa$i$11 = $69;
         } else {
          $$02$i$8 = $68;$hw$03$i$7 = $94;
          while(1) {
           $96 = $hw$03$i$7 << 8;
           $97 = ((($$02$i$8)) + 1|0);
           $98 = HEAP8[$97>>0]|0;
           $99 = $98&255;
           $100 = $99 | $96;
           $101 = ($98<<24>>24)==(0);
           $102 = ($100|0)==($83|0);
           $or$cond$i$9 = $101 | $102;
           if ($or$cond$i$9) {
            $$0$lcssa$i$12 = $97;$$lcssa$i$11 = $98;
            break;
           } else {
            $$02$i$8 = $97;$hw$03$i$7 = $100;
           }
          }
         }
         $103 = ($$lcssa$i$11<<24>>24)!=(0);
         $104 = ((($$0$lcssa$i$12)) + -3|0);
         $105 = $103 ? $104 : 0;
         $$0 = $105;
         break;
        }
        ;HEAP32[$byteset$i>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
        $110 = $0;$l$082$i = 0;
        while(1) {
         $106 = (($3) + ($l$082$i)|0);
         $107 = HEAP8[$106>>0]|0;
         $108 = ($107<<24>>24)==(0);
         if ($108) {
          $$3$i = 0;
          break;
         }
         $109 = $110 & 31;
         $111 = $109&255;
         $112 = 1 << $111;
         $div5$i = ($110&255) >>> 5;
         $113 = $div5$i&255;
         $114 = (($byteset$i) + ($113<<2)|0);
         $115 = HEAP32[$114>>2]|0;
         $116 = $115 | $112;
         HEAP32[$114>>2] = $116;
         $117 = (($l$082$i) + 1)|0;
         $118 = $110&255;
         $119 = (($shift$i) + ($118<<2)|0);
         HEAP32[$119>>2] = $117;
         $120 = (($n) + ($117)|0);
         $121 = HEAP8[$120>>0]|0;
         $122 = ($121<<24>>24)==(0);
         if ($122) {
          $$lcssa324 = $117;$l$082$i$lcssa323 = $l$082$i;
          label = 23;
          break;
         } else {
          $110 = $121;$l$082$i = $117;
         }
        }
        L32: do {
         if ((label|0) == 23) {
          $123 = ($$lcssa324>>>0)>(1);
          L34: do {
           if ($123) {
            $234 = 1;$ip$0$ph78$i = -1;$jp$0$ph79$i = 0;
            L35: while(1) {
             $235 = $234;$jp$0$ph15$ph72$i = $jp$0$ph79$i;$p$0$ph$ph73$i = 1;
             while(1) {
              $236 = $235;$jp$0$ph1567$i = $jp$0$ph15$ph72$i;
              L39: while(1) {
               $133 = $236;$k$061$i = 1;
               while(1) {
                $129 = (($k$061$i) + ($ip$0$ph78$i))|0;
                $130 = (($n) + ($129)|0);
                $131 = HEAP8[$130>>0]|0;
                $132 = (($n) + ($133)|0);
                $134 = HEAP8[$132>>0]|0;
                $135 = ($131<<24>>24)==($134<<24>>24);
                if (!($135)) {
                 $$lcssa303 = $133;$$lcssa306 = $131;$$lcssa309 = $134;$jp$0$ph1567$i$lcssa = $jp$0$ph1567$i;
                 break L39;
                }
                $136 = ($k$061$i|0)==($p$0$ph$ph73$i|0);
                $127 = (($k$061$i) + 1)|0;
                if ($136) {
                 break;
                }
                $126 = (($127) + ($jp$0$ph1567$i))|0;
                $128 = ($126>>>0)<($$lcssa324>>>0);
                if ($128) {
                 $133 = $126;$k$061$i = $127;
                } else {
                 $ip$0$ph$lcssa$i = $ip$0$ph78$i;$p$0$ph$ph$lcssa34$i = $p$0$ph$ph73$i;
                 break L35;
                }
               }
               $137 = (($jp$0$ph1567$i) + ($p$0$ph$ph73$i))|0;
               $138 = (($137) + 1)|0;
               $139 = ($138>>>0)<($$lcssa324>>>0);
               if ($139) {
                $236 = $138;$jp$0$ph1567$i = $137;
               } else {
                $ip$0$ph$lcssa$i = $ip$0$ph78$i;$p$0$ph$ph$lcssa34$i = $p$0$ph$ph73$i;
                break L35;
               }
              }
              $140 = ($$lcssa306&255)>($$lcssa309&255);
              $141 = (($$lcssa303) - ($ip$0$ph78$i))|0;
              if (!($140)) {
               $jp$0$ph1567$i$lcssa$lcssa = $jp$0$ph1567$i$lcssa;
               break;
              }
              $124 = (($$lcssa303) + 1)|0;
              $125 = ($124>>>0)<($$lcssa324>>>0);
              if ($125) {
               $235 = $124;$jp$0$ph15$ph72$i = $$lcssa303;$p$0$ph$ph73$i = $141;
              } else {
               $ip$0$ph$lcssa$i = $ip$0$ph78$i;$p$0$ph$ph$lcssa34$i = $141;
               break L35;
              }
             }
             $142 = (($jp$0$ph1567$i$lcssa$lcssa) + 1)|0;
             $143 = (($jp$0$ph1567$i$lcssa$lcssa) + 2)|0;
             $144 = ($143>>>0)<($$lcssa324>>>0);
             if ($144) {
              $234 = $143;$ip$0$ph78$i = $jp$0$ph1567$i$lcssa$lcssa;$jp$0$ph79$i = $142;
             } else {
              $ip$0$ph$lcssa$i = $jp$0$ph1567$i$lcssa$lcssa;$p$0$ph$ph$lcssa34$i = 1;
              break;
             }
            }
            $237 = 1;$ip$1$ph57$i = -1;$jp$1$ph58$i = 0;
            while(1) {
             $239 = $237;$jp$1$ph11$ph51$i = $jp$1$ph58$i;$p$1$ph$ph52$i = 1;
             while(1) {
              $238 = $239;$jp$1$ph1146$i = $jp$1$ph11$ph51$i;
              L54: while(1) {
               $152 = $238;$k$141$i = 1;
               while(1) {
                $148 = (($k$141$i) + ($ip$1$ph57$i))|0;
                $149 = (($n) + ($148)|0);
                $150 = HEAP8[$149>>0]|0;
                $151 = (($n) + ($152)|0);
                $153 = HEAP8[$151>>0]|0;
                $154 = ($150<<24>>24)==($153<<24>>24);
                if (!($154)) {
                 $$lcssa283 = $152;$$lcssa286 = $150;$$lcssa289 = $153;$jp$1$ph1146$i$lcssa = $jp$1$ph1146$i;
                 break L54;
                }
                $155 = ($k$141$i|0)==($p$1$ph$ph52$i|0);
                $146 = (($k$141$i) + 1)|0;
                if ($155) {
                 break;
                }
                $145 = (($146) + ($jp$1$ph1146$i))|0;
                $147 = ($145>>>0)<($$lcssa324>>>0);
                if ($147) {
                 $152 = $145;$k$141$i = $146;
                } else {
                 $ip$0$ph$lcssa145$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph57$i;$p$0$ph$ph$lcssa34149$i = $p$0$ph$ph$lcssa34$i;$p$1$ph$ph$lcssa25$i = $p$1$ph$ph52$i;
                 break L34;
                }
               }
               $156 = (($jp$1$ph1146$i) + ($p$1$ph$ph52$i))|0;
               $157 = (($156) + 1)|0;
               $158 = ($157>>>0)<($$lcssa324>>>0);
               if ($158) {
                $238 = $157;$jp$1$ph1146$i = $156;
               } else {
                $ip$0$ph$lcssa145$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph57$i;$p$0$ph$ph$lcssa34149$i = $p$0$ph$ph$lcssa34$i;$p$1$ph$ph$lcssa25$i = $p$1$ph$ph52$i;
                break L34;
               }
              }
              $159 = ($$lcssa286&255)<($$lcssa289&255);
              $160 = (($$lcssa283) - ($ip$1$ph57$i))|0;
              if (!($159)) {
               $jp$1$ph1146$i$lcssa$lcssa = $jp$1$ph1146$i$lcssa;
               break;
              }
              $164 = (($$lcssa283) + 1)|0;
              $165 = ($164>>>0)<($$lcssa324>>>0);
              if ($165) {
               $239 = $164;$jp$1$ph11$ph51$i = $$lcssa283;$p$1$ph$ph52$i = $160;
              } else {
               $ip$0$ph$lcssa145$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph57$i;$p$0$ph$ph$lcssa34149$i = $p$0$ph$ph$lcssa34$i;$p$1$ph$ph$lcssa25$i = $160;
               break L34;
              }
             }
             $161 = (($jp$1$ph1146$i$lcssa$lcssa) + 1)|0;
             $162 = (($jp$1$ph1146$i$lcssa$lcssa) + 2)|0;
             $163 = ($162>>>0)<($$lcssa324>>>0);
             if ($163) {
              $237 = $162;$ip$1$ph57$i = $jp$1$ph1146$i$lcssa$lcssa;$jp$1$ph58$i = $161;
             } else {
              $ip$0$ph$lcssa145$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $jp$1$ph1146$i$lcssa$lcssa;$p$0$ph$ph$lcssa34149$i = $p$0$ph$ph$lcssa34$i;$p$1$ph$ph$lcssa25$i = 1;
              break;
             }
            }
           } else {
            $ip$0$ph$lcssa145$i = -1;$ip$1$ph$lcssa$i = -1;$p$0$ph$ph$lcssa34149$i = 1;$p$1$ph$ph$lcssa25$i = 1;
           }
          } while(0);
          $166 = (($ip$1$ph$lcssa$i) + 1)|0;
          $167 = (($ip$0$ph$lcssa145$i) + 1)|0;
          $168 = ($166>>>0)>($167>>>0);
          $p$1$p$0$i = $168 ? $p$1$ph$ph$lcssa25$i : $p$0$ph$ph$lcssa34149$i;
          $ip$1$ip$0$i = $168 ? $ip$1$ph$lcssa$i : $ip$0$ph$lcssa145$i;
          $169 = (($n) + ($p$1$p$0$i)|0);
          $170 = (($ip$1$ip$0$i) + 1)|0;
          $171 = (_memcmp($n,$169,$170)|0);
          $172 = ($171|0)==(0);
          if ($172) {
           $177 = (($$lcssa324) - ($p$1$p$0$i))|0;
           $mem0$0$i = $177;$p$3$i = $p$1$p$0$i;
          } else {
           $173 = (($$lcssa324) - ($ip$1$ip$0$i))|0;
           $174 = (($173) + -1)|0;
           $175 = ($ip$1$ip$0$i>>>0)>($174>>>0);
           $ip$1$ip$0$$i = $175 ? $ip$1$ip$0$i : $174;
           $176 = (($ip$1$ip$0$$i) + 1)|0;
           $mem0$0$i = 0;$p$3$i = $176;
          }
          $178 = $$lcssa324 | 63;
          $179 = ($mem0$0$i|0)!=(0);
          $180 = (($$lcssa324) - ($p$3$i))|0;
          $$03$i = $3;$mem$0$i = 0;$z$0$i = $3;
          L69: while(1) {
           $181 = $z$0$i;
           $182 = $$03$i;
           $183 = (($181) - ($182))|0;
           $184 = ($183>>>0)<($$lcssa324>>>0);
           do {
            if ($184) {
             $185 = (_memchr($z$0$i,0,$178)|0);
             $186 = ($185|0)==(0|0);
             if ($186) {
              $190 = (($z$0$i) + ($178)|0);
              $z$3$i = $190;
              break;
             } else {
              $187 = $185;
              $188 = (($187) - ($182))|0;
              $189 = ($188>>>0)<($$lcssa324>>>0);
              if ($189) {
               $$3$i = 0;
               break L32;
              } else {
               $z$3$i = $185;
               break;
              }
             }
            } else {
             $z$3$i = $z$0$i;
            }
           } while(0);
           $191 = (($$03$i) + ($l$082$i$lcssa323)|0);
           $192 = HEAP8[$191>>0]|0;
           $div$i = ($192&255) >>> 5;
           $193 = $div$i&255;
           $194 = (($byteset$i) + ($193<<2)|0);
           $195 = HEAP32[$194>>2]|0;
           $196 = $192 & 31;
           $197 = $196&255;
           $198 = 1 << $197;
           $199 = $198 & $195;
           $200 = ($199|0)==(0);
           if ($200) {
            $209 = (($$03$i) + ($$lcssa324)|0);
            $$03$i = $209;$mem$0$i = 0;$z$0$i = $z$3$i;
            continue;
           }
           $201 = $192&255;
           $202 = (($shift$i) + ($201<<2)|0);
           $203 = HEAP32[$202>>2]|0;
           $204 = (($$lcssa324) - ($203))|0;
           $205 = ($$lcssa324|0)==($203|0);
           if (!($205)) {
            $206 = ($mem$0$i|0)!=(0);
            $or$cond$i = $179 & $206;
            $207 = ($204>>>0)<($p$3$i>>>0);
            $or$cond6$i = $or$cond$i & $207;
            $k$2$i = $or$cond6$i ? $180 : $204;
            $208 = (($$03$i) + ($k$2$i)|0);
            $$03$i = $208;$mem$0$i = 0;$z$0$i = $z$3$i;
            continue;
           }
           $210 = ($170>>>0)>($mem$0$i>>>0);
           $211 = $210 ? $170 : $mem$0$i;
           $212 = (($n) + ($211)|0);
           $213 = HEAP8[$212>>0]|0;
           $214 = ($213<<24>>24)==(0);
           L83: do {
            if ($214) {
             $k$4$i = $170;
            } else {
             $$pr$i = $213;$k$340$i = $211;
             while(1) {
              $215 = (($$03$i) + ($k$340$i)|0);
              $216 = HEAP8[$215>>0]|0;
              $217 = ($$pr$i<<24>>24)==($216<<24>>24);
              if (!($217)) {
               $k$340$i$lcssa = $k$340$i;
               break;
              }
              $218 = (($k$340$i) + 1)|0;
              $219 = (($n) + ($218)|0);
              $220 = HEAP8[$219>>0]|0;
              $221 = ($220<<24>>24)==(0);
              if ($221) {
               $k$4$i = $170;
               break L83;
              } else {
               $$pr$i = $220;$k$340$i = $218;
              }
             }
             $222 = (($k$340$i$lcssa) - ($ip$1$ip$0$i))|0;
             $223 = (($$03$i) + ($222)|0);
             $$03$i = $223;$mem$0$i = 0;$z$0$i = $z$3$i;
             continue L69;
            }
           } while(0);
           while(1) {
            $224 = ($k$4$i>>>0)>($mem$0$i>>>0);
            if (!($224)) {
             $$3$i = $$03$i;
             break L32;
            }
            $225 = (($k$4$i) + -1)|0;
            $226 = (($n) + ($225)|0);
            $227 = HEAP8[$226>>0]|0;
            $228 = (($$03$i) + ($225)|0);
            $229 = HEAP8[$228>>0]|0;
            $230 = ($227<<24>>24)==($229<<24>>24);
            if ($230) {
             $k$4$i = $225;
            } else {
             break;
            }
           }
           $231 = (($$03$i) + ($p$3$i)|0);
           $$03$i = $231;$mem$0$i = $mem0$0$i;$z$0$i = $z$3$i;
          }
         }
        } while(0);
        $$0 = $$3$i;
       }
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _strspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$028 = 0, $$03 = 0, $$03$lcssa = 0, $$1$lcssa = 0, $$16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $byteset = 0, $div = 0, $div4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset = sp;
 ;HEAP32[$byteset>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $$0 = 0;
  } else {
   $2 = ((($c)) + 1|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $$03 = $s;
    while(1) {
     $5 = HEAP8[$$03>>0]|0;
     $6 = ($5<<24>>24)==($0<<24>>24);
     $7 = ((($$03)) + 1|0);
     if ($6) {
      $$03 = $7;
     } else {
      $$03$lcssa = $$03;
      break;
     }
    }
    $8 = $$03$lcssa;
    $9 = $s;
    $10 = (($8) - ($9))|0;
    $$0 = $10;
    break;
   } else {
    $$028 = $c;$14 = $0;
   }
   while(1) {
    $13 = $14 & 31;
    $15 = $13&255;
    $16 = 1 << $15;
    $div4 = ($14&255) >>> 5;
    $17 = $div4&255;
    $18 = (($byteset) + ($17<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $19 | $16;
    HEAP32[$18>>2] = $20;
    $21 = ((($$028)) + 1|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = ($22<<24>>24)==(0);
    if ($23) {
     break;
    } else {
     $$028 = $21;$14 = $22;
    }
   }
   $11 = HEAP8[$s>>0]|0;
   $12 = ($11<<24>>24)==(0);
   L10: do {
    if ($12) {
     $$1$lcssa = $s;
    } else {
     $$16 = $s;$24 = $11;
     while(1) {
      $div = ($24&255) >>> 5;
      $25 = $div&255;
      $26 = (($byteset) + ($25<<2)|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = $24 & 31;
      $29 = $28&255;
      $30 = 1 << $29;
      $31 = $27 & $30;
      $32 = ($31|0)==(0);
      if ($32) {
       $$1$lcssa = $$16;
       break L10;
      }
      $33 = ((($$16)) + 1|0);
      $34 = HEAP8[$33>>0]|0;
      $35 = ($34<<24>>24)==(0);
      if ($35) {
       $$1$lcssa = $33;
       break;
      } else {
       $$16 = $33;$24 = $34;
      }
     }
    }
   } while(0);
   $36 = $$1$lcssa;
   $37 = $s;
   $38 = (($36) - ($37))|0;
   $$0 = $38;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _wcschr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$01 = 0, $$01$lcssa = 0, $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(0);
 if ($0) {
  $1 = (_wcslen($s)|0);
  $2 = (($s) + ($1<<2)|0);
  $$0 = $2;
 } else {
  $$01 = $s;
  while(1) {
   $3 = HEAP32[$$01>>2]|0;
   $4 = ($3|0)==(0);
   $5 = ($3|0)==($c|0);
   $or$cond = $4 | $5;
   $6 = ((($$01)) + 4|0);
   if ($or$cond) {
    $$01$lcssa = $$01;$$lcssa = $3;
    break;
   } else {
    $$01 = $6;
   }
  }
  $7 = ($$lcssa|0)!=(0);
  $8 = $7 ? $$01$lcssa : 0;
  $$0 = $8;
 }
 return ($$0|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond$3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond$3 = $3 | $2;
 if ($or$cond$3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     $$lcssa = $1;$$lcssa19 = $2;
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = ((($l$04)) + 1|0);
    $6 = ((($r$05)) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $$lcssa&255;
   $9 = $$lcssa19&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 return ($11|0);
}
function _strcspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$027 = 0, $$03$lcssa = 0, $$035 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $byteset = 0, $div = 0, $div4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset = sp;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  label = 3;
 } else {
  $2 = ((($c)) + 1|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if ($4) {
   label = 3;
  } else {
   ;HEAP32[$byteset>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
   $$027 = $c;$13 = $0;
   while(1) {
    $12 = $13 & 31;
    $14 = $12&255;
    $15 = 1 << $14;
    $div4 = ($13&255) >>> 5;
    $16 = $div4&255;
    $17 = (($byteset) + ($16<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $18 | $15;
    HEAP32[$17>>2] = $19;
    $20 = ((($$027)) + 1|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     break;
    } else {
     $$027 = $20;$13 = $21;
    }
   }
   $10 = HEAP8[$s>>0]|0;
   $11 = ($10<<24>>24)==(0);
   L7: do {
    if ($11) {
     $$03$lcssa = $s;
    } else {
     $$035 = $s;$23 = $10;
     while(1) {
      $div = ($23&255) >>> 5;
      $24 = $div&255;
      $25 = (($byteset) + ($24<<2)|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = $23 & 31;
      $28 = $27&255;
      $29 = 1 << $28;
      $30 = $26 & $29;
      $31 = ($30|0)==(0);
      if (!($31)) {
       $$03$lcssa = $$035;
       break L7;
      }
      $32 = ((($$035)) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if ($34) {
       $$03$lcssa = $32;
       break;
      } else {
       $$035 = $32;$23 = $33;
      }
     }
    }
   } while(0);
   $35 = $$03$lcssa;
   $36 = $s;
   $37 = (($35) - ($36))|0;
   $$0 = $37;
  }
 }
 if ((label|0) == 3) {
  $5 = $0 << 24 >> 24;
  $6 = (___strchrnul($s,$5)|0);
  $7 = $6;
  $8 = $s;
  $9 = (($7) - ($8))|0;
  $$0 = $9;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stpcpy($d,$s) {
 $d = $d|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa = 0, $$0115 = 0, $$016 = 0, $$03 = 0, $$1$ph = 0, $$12$ph = 0, $$128 = 0, $$19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $wd$0$lcssa = 0, $wd$010 = 0, $ws$0$lcssa = 0, $ws$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L1: do {
  if ($4) {
   $5 = $0 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$0$lcssa = $s;$$01$lcssa = $d;
   } else {
    $$0115 = $d;$$016 = $s;
    while(1) {
     $7 = HEAP8[$$016>>0]|0;
     HEAP8[$$0115>>0] = $7;
     $8 = ($7<<24>>24)==(0);
     if ($8) {
      $$03 = $$0115;
      break L1;
     }
     $9 = ((($$016)) + 1|0);
     $10 = ((($$0115)) + 1|0);
     $11 = $9;
     $12 = $11 & 3;
     $13 = ($12|0)==(0);
     if ($13) {
      $$0$lcssa = $9;$$01$lcssa = $10;
      break;
     } else {
      $$0115 = $10;$$016 = $9;
     }
    }
   }
   $14 = HEAP32[$$0$lcssa>>2]|0;
   $15 = (($14) + -16843009)|0;
   $16 = $14 & -2139062144;
   $17 = $16 ^ -2139062144;
   $18 = $17 & $15;
   $19 = ($18|0)==(0);
   if ($19) {
    $22 = $14;$wd$010 = $$01$lcssa;$ws$011 = $$0$lcssa;
    while(1) {
     $20 = ((($ws$011)) + 4|0);
     $21 = ((($wd$010)) + 4|0);
     HEAP32[$wd$010>>2] = $22;
     $23 = HEAP32[$20>>2]|0;
     $24 = (($23) + -16843009)|0;
     $25 = $23 & -2139062144;
     $26 = $25 ^ -2139062144;
     $27 = $26 & $24;
     $28 = ($27|0)==(0);
     if ($28) {
      $22 = $23;$wd$010 = $21;$ws$011 = $20;
     } else {
      $wd$0$lcssa = $21;$ws$0$lcssa = $20;
      break;
     }
    }
   } else {
    $wd$0$lcssa = $$01$lcssa;$ws$0$lcssa = $$0$lcssa;
   }
   $$1$ph = $ws$0$lcssa;$$12$ph = $wd$0$lcssa;
   label = 8;
  } else {
   $$1$ph = $s;$$12$ph = $d;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $29 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$12$ph>>0] = $29;
  $30 = ($29<<24>>24)==(0);
  if ($30) {
   $$03 = $$12$ph;
  } else {
   $$128 = $$12$ph;$$19 = $$1$ph;
   while(1) {
    $31 = ((($$19)) + 1|0);
    $32 = ((($$128)) + 1|0);
    $33 = HEAP8[$31>>0]|0;
    HEAP8[$32>>0] = $33;
    $34 = ($33<<24>>24)==(0);
    if ($34) {
     $$03 = $32;
     break;
    } else {
     $$128 = $32;$$19 = $31;
    }
   }
  }
 }
 return ($$03|0);
}
function _strcasecmp($_l,$_r) {
 $_l = $_l|0;
 $_r = $_r|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$03 = 0, $l$03$lcssa24 = 0, $r$0$lcssa = 0, $r$04 = 0, $r$04$lcssa23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$_l>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $19 = 0;$r$0$lcssa = $_r;
  } else {
   $2 = $0&255;
   $5 = $0;$7 = $2;$l$03 = $_l;$r$04 = $_r;
   while(1) {
    $3 = HEAP8[$r$04>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $19 = $5;$r$0$lcssa = $r$04;
     break L1;
    }
    $6 = ($5<<24>>24)==($3<<24>>24);
    if (!($6)) {
     $8 = (_tolower($7)|0);
     $9 = HEAP8[$r$04>>0]|0;
     $10 = $9&255;
     $11 = (_tolower($10)|0);
     $12 = ($8|0)==($11|0);
     if (!($12)) {
      $l$03$lcssa24 = $l$03;$r$04$lcssa23 = $r$04;
      break;
     }
    }
    $13 = ((($l$03)) + 1|0);
    $14 = ((($r$04)) + 1|0);
    $15 = HEAP8[$13>>0]|0;
    $16 = $15&255;
    $17 = ($15<<24>>24)==(0);
    if ($17) {
     $19 = 0;$r$0$lcssa = $14;
     break L1;
    } else {
     $5 = $15;$7 = $16;$l$03 = $13;$r$04 = $14;
    }
   }
   $$pre = HEAP8[$l$03$lcssa24>>0]|0;
   $19 = $$pre;$r$0$lcssa = $r$04$lcssa23;
  }
 } while(0);
 $18 = $19&255;
 $20 = (_tolower($18)|0);
 $21 = HEAP8[$r$0$lcssa>>0]|0;
 $22 = $21&255;
 $23 = (_tolower($22)|0);
 $24 = (($20) - ($23))|0;
 return ($24|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
 } else {
  $1 = HEAP8[$_l>>0]|0;
  $2 = ($1<<24>>24)==(0);
  L3: do {
   if ($2) {
    $13 = 0;$r$0$lcssa = $_r;
   } else {
    $$08$in = $n;$6 = $1;$l$06 = $_l;$r$07 = $_r;
    while(1) {
     $$08 = (($$08$in) + -1)|0;
     $3 = HEAP8[$r$07>>0]|0;
     $4 = ($3<<24>>24)!=(0);
     $5 = ($$08|0)!=(0);
     $or$cond = $5 & $4;
     $7 = ($6<<24>>24)==($3<<24>>24);
     $or$cond4 = $7 & $or$cond;
     if (!($or$cond4)) {
      $13 = $6;$r$0$lcssa = $r$07;
      break L3;
     }
     $8 = ((($l$06)) + 1|0);
     $9 = ((($r$07)) + 1|0);
     $10 = HEAP8[$8>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if ($11) {
      $13 = 0;$r$0$lcssa = $9;
      break;
     } else {
      $$08$in = $$08;$6 = $10;$l$06 = $8;$r$07 = $9;
     }
    }
   }
  } while(0);
  $12 = $13&255;
  $14 = HEAP8[$r$0$lcssa>>0]|0;
  $15 = $14&255;
  $16 = (($12) - ($15))|0;
  $$03 = $16;
 }
 return ($$03|0);
}
function _strncasecmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$04 = 0, $$08 = 0, $$08$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$06 = 0, $l$06$lcssa28 = 0, $or$cond = 0, $r$0$lcssa = 0, $r$07 = 0, $r$07$lcssa27 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$04 = 0;
 } else {
  $1 = HEAP8[$_l>>0]|0;
  $2 = ($1<<24>>24)==(0);
  L3: do {
   if ($2) {
    $21 = 0;$r$0$lcssa = $_r;
   } else {
    $3 = $1&255;
    $$08$in = $n;$7 = $1;$9 = $3;$l$06 = $_l;$r$07 = $_r;
    while(1) {
     $$08 = (($$08$in) + -1)|0;
     $4 = HEAP8[$r$07>>0]|0;
     $5 = ($4<<24>>24)!=(0);
     $6 = ($$08|0)!=(0);
     $or$cond = $6 & $5;
     if (!($or$cond)) {
      $21 = $7;$r$0$lcssa = $r$07;
      break L3;
     }
     $8 = ($7<<24>>24)==($4<<24>>24);
     if (!($8)) {
      $10 = (_tolower($9)|0);
      $11 = HEAP8[$r$07>>0]|0;
      $12 = $11&255;
      $13 = (_tolower($12)|0);
      $14 = ($10|0)==($13|0);
      if (!($14)) {
       $l$06$lcssa28 = $l$06;$r$07$lcssa27 = $r$07;
       break;
      }
     }
     $15 = ((($l$06)) + 1|0);
     $16 = ((($r$07)) + 1|0);
     $17 = HEAP8[$15>>0]|0;
     $18 = $17&255;
     $19 = ($17<<24>>24)==(0);
     if ($19) {
      $21 = 0;$r$0$lcssa = $16;
      break L3;
     } else {
      $$08$in = $$08;$7 = $17;$9 = $18;$l$06 = $15;$r$07 = $16;
     }
    }
    $$pre = HEAP8[$l$06$lcssa28>>0]|0;
    $21 = $$pre;$r$0$lcssa = $r$07$lcssa27;
   }
  } while(0);
  $20 = $21&255;
  $22 = (_tolower($20)|0);
  $23 = HEAP8[$r$0$lcssa>>0]|0;
  $24 = $23&255;
  $25 = (_tolower($24)|0);
  $26 = (($22) - ($25))|0;
  $$04 = $26;
 }
 return ($$04|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (($0) + 1)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
 } else {
  _memcpy(($2|0),($s|0),($1|0))|0;
  $$0 = $2;
 }
 return ($$0|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn$15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn$15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn$15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn$15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function ___stpncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa60 = 0, $$031 = 0, $$04$lcssa = 0, $$04$lcssa61 = 0, $$0430 = 0, $$06$lcssa = 0, $$06$lcssa62 = 0, $$0629 = 0, $$1$lcssa = 0, $$117 = 0, $$15$ph = 0, $$1511 = 0, $$17$ph = 0, $$1710 = 0, $$2$ph = 0, $$212 = 0, $$28 = 0, $$3 = 0, $$lcssa = 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond$28 = 0, $wd$0$lcssa = 0;
 var $wd$018 = 0, $ws$0$lcssa = 0, $ws$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = $0 & 3;
   $6 = ($5|0)!=(0);
   $7 = ($n|0)!=(0);
   $or$cond$28 = $7 & $6;
   L3: do {
    if ($or$cond$28) {
     $$031 = $n;$$0430 = $s;$$0629 = $d;
     while(1) {
      $8 = HEAP8[$$0430>>0]|0;
      HEAP8[$$0629>>0] = $8;
      $9 = ($8<<24>>24)==(0);
      if ($9) {
       $$0$lcssa60 = $$031;$$04$lcssa61 = $$0430;$$06$lcssa62 = $$0629;
       break L3;
      }
      $10 = (($$031) + -1)|0;
      $11 = ((($$0430)) + 1|0);
      $12 = ((($$0629)) + 1|0);
      $13 = $11;
      $14 = $13 & 3;
      $15 = ($14|0)!=(0);
      $16 = ($10|0)!=(0);
      $or$cond = $16 & $15;
      if ($or$cond) {
       $$031 = $10;$$0430 = $11;$$0629 = $12;
      } else {
       $$0$lcssa = $10;$$04$lcssa = $11;$$06$lcssa = $12;$$lcssa = $16;
       label = 5;
       break;
      }
     }
    } else {
     $$0$lcssa = $n;$$04$lcssa = $s;$$06$lcssa = $d;$$lcssa = $7;
     label = 5;
    }
   } while(0);
   if ((label|0) == 5) {
    if ($$lcssa) {
     $$0$lcssa60 = $$0$lcssa;$$04$lcssa61 = $$04$lcssa;$$06$lcssa62 = $$06$lcssa;
    } else {
     $$28 = $$06$lcssa;$$3 = 0;
     break;
    }
   }
   $17 = HEAP8[$$04$lcssa61>>0]|0;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $$28 = $$06$lcssa62;$$3 = $$0$lcssa60;
   } else {
    $19 = ($$0$lcssa60>>>0)>(3);
    L11: do {
     if ($19) {
      $$117 = $$0$lcssa60;$wd$018 = $$06$lcssa62;$ws$019 = $$04$lcssa61;
      while(1) {
       $20 = HEAP32[$ws$019>>2]|0;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$117;$wd$0$lcssa = $wd$018;$ws$0$lcssa = $ws$019;
        break L11;
       }
       HEAP32[$wd$018>>2] = $20;
       $26 = (($$117) + -4)|0;
       $27 = ((($ws$019)) + 4|0);
       $28 = ((($wd$018)) + 4|0);
       $29 = ($26>>>0)>(3);
       if ($29) {
        $$117 = $26;$wd$018 = $28;$ws$019 = $27;
       } else {
        $$1$lcssa = $26;$wd$0$lcssa = $28;$ws$0$lcssa = $27;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa60;$wd$0$lcssa = $$06$lcssa62;$ws$0$lcssa = $$04$lcssa61;
     }
    } while(0);
    $$15$ph = $ws$0$lcssa;$$17$ph = $wd$0$lcssa;$$2$ph = $$1$lcssa;
    label = 11;
   }
  } else {
   $$15$ph = $s;$$17$ph = $d;$$2$ph = $n;
   label = 11;
  }
 } while(0);
 L16: do {
  if ((label|0) == 11) {
   $30 = ($$2$ph|0)==(0);
   if ($30) {
    $$28 = $$17$ph;$$3 = 0;
   } else {
    $$1511 = $$15$ph;$$1710 = $$17$ph;$$212 = $$2$ph;
    while(1) {
     $31 = HEAP8[$$1511>>0]|0;
     HEAP8[$$1710>>0] = $31;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$28 = $$1710;$$3 = $$212;
      break L16;
     }
     $33 = (($$212) + -1)|0;
     $34 = ((($$1511)) + 1|0);
     $35 = ((($$1710)) + 1|0);
     $36 = ($33|0)==(0);
     if ($36) {
      $$28 = $35;$$3 = 0;
      break;
     } else {
      $$1511 = $34;$$1710 = $35;$$212 = $33;
     }
    }
   }
  }
 } while(0);
 _memset(($$28|0),0,($$3|0))|0;
 return ($$28|0);
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (($0) + 1)|0;
 $2 = (___memrchr($s,$c,$1)|0);
 return ($2|0);
}
function _strnlen($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_memchr($s,0,$n)|0);
 $1 = ($0|0)==(0|0);
 $2 = $0;
 $3 = $s;
 $4 = (($2) - ($3))|0;
 $5 = $1 ? $n : $4;
 return ($5|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond$18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond$18 = $4 & $3;
 L1: do {
  if ($or$cond$18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c&255;
 $$01 = $n;
 while(1) {
  $1 = (($$01) + -1)|0;
  $2 = ($$01|0)==(0);
  if ($2) {
   $$0 = 0;
   break;
  }
  $3 = (($m) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==($0<<24>>24);
  if ($5) {
   $$0 = $3;
   break;
  } else {
   $$01 = $1;
  }
 }
 return ($$0|0);
}
function _strcat($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($dest)|0);
 $1 = (($dest) + ($0)|0);
 (_strcpy($1,$src)|0);
 return ($dest|0);
}
function _strtoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox($s,$p,$base,-1,-1)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _strtoul($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox($s,$p,$base,-1,0)|0);
 $1 = tempRet0;
 return ($0|0);
}
function _strtol($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox($s,$p,$base,-2147483648,0)|0);
 $1 = tempRet0;
 return ($0|0);
}
function _qsort($base,$nel,$width,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$0$i = 0, $$0$i$29 = 0, $$02$i$3$i = 0, $$02$i$i = 0, $$lcssa = 0, $$lcssa56 = 0, $$phi$trans$insert$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$10 = 0, $$pre$i$19 = 0, $$pre$i$4 = 0, $$pre$i$7 = 0, $$pre1$i = 0, $$pre1$i$11 = 0, $$pre1$i$26$pre = 0, $$pre1$i$5 = 0, $$pre1$i$8 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $9$phi = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $head$0$lcssa = 0;
 var $head$035 = 0, $head$1$be = 0, $head$152 = 0, $i$0 = 0, $lp = 0, $nTrailingZeros$03$i$2$i = 0, $nTrailingZeros$03$i$2$i$lcssa = 0, $nTrailingZeros$03$i$i = 0, $or$cond = 0, $or$cond$50 = 0, $or$cond47 = 0, $or$cond47$51 = 0, $p = 0, $pshift$0$lcssa = 0, $pshift$036 = 0, $pshift$1 = 0, $pshift$2$be = 0, $pshift$253 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $lp = sp + 8|0;
 $p = sp;
 $0 = Math_imul($width, $nel)|0;
 $1 = $p;
 $2 = $1;
 HEAP32[$2>>2] = 1;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = ($0|0)==(0);
 if (!($5)) {
  $6 = (0 - ($width))|0;
  $7 = ((($lp)) + 4|0);
  HEAP32[$7>>2] = $width;
  HEAP32[$lp>>2] = $width;
  $11 = $width;$9 = $width;$i$0 = 2;
  while(1) {
   $8 = (($9) + ($width))|0;
   $10 = (($8) + ($11))|0;
   $12 = (($lp) + ($i$0<<2)|0);
   HEAP32[$12>>2] = $10;
   $13 = ($10>>>0)<($0>>>0);
   $14 = (($i$0) + 1)|0;
   if ($13) {
    $9$phi = $11;$11 = $10;$i$0 = $14;$9 = $9$phi;
   } else {
    break;
   }
  }
  $15 = (($base) + ($0)|0);
  $16 = (($15) + ($6)|0);
  $17 = ($16>>>0)>($base>>>0);
  $$phi$trans$insert$i = ((($p)) + 4|0);
  if ($17) {
   $18 = $16;
   $20 = 1;$head$035 = $base;$pshift$036 = 1;
   while(1) {
    $19 = $20 & 3;
    $21 = ($19|0)==(3);
    do {
     if ($21) {
      _sift($head$035,$width,$cmp,$pshift$036,$lp);
      $$pre$i = HEAP32[$p>>2]|0;
      $$pre1$i = HEAP32[$$phi$trans$insert$i>>2]|0;
      $22 = $$pre$i >>> 2;
      $23 = $$pre1$i << 30;
      $24 = $23 | $22;
      HEAP32[$p>>2] = $24;
      $25 = $$pre1$i >>> 2;
      HEAP32[$$phi$trans$insert$i>>2] = $25;
      $26 = (($pshift$036) + 2)|0;
      $49 = $24;$pshift$1 = $26;
     } else {
      $27 = (($pshift$036) + -1)|0;
      $28 = (($lp) + ($27<<2)|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = $head$035;
      $31 = (($18) - ($30))|0;
      $32 = ($29>>>0)<($31>>>0);
      if ($32) {
       _sift($head$035,$width,$cmp,$pshift$036,$lp);
      } else {
       _trinkle($head$035,$width,$cmp,$p,$pshift$036,0,$lp);
      }
      $33 = ($pshift$036|0)==(1);
      if ($33) {
       $$pre$i$4 = HEAP32[$$phi$trans$insert$i>>2]|0;
       $$pre1$i$5 = HEAP32[$p>>2]|0;
       $34 = $$pre$i$4 << 1;
       $35 = $$pre1$i$5 >>> 31;
       $36 = $35 | $34;
       HEAP32[$$phi$trans$insert$i>>2] = $36;
       $37 = $$pre1$i$5 << 1;
       HEAP32[$p>>2] = $37;
       $49 = $37;$pshift$1 = 0;
       break;
      }
      $38 = ($27>>>0)>(31);
      if ($38) {
       $39 = (($pshift$036) + -33)|0;
       $40 = HEAP32[$p>>2]|0;
       HEAP32[$$phi$trans$insert$i>>2] = $40;
       HEAP32[$p>>2] = 0;
       $$0$i = $39;$42 = $40;$45 = 0;
      } else {
       $$pre$i$10 = HEAP32[$$phi$trans$insert$i>>2]|0;
       $$pre1$i$11 = HEAP32[$p>>2]|0;
       $$0$i = $27;$42 = $$pre$i$10;$45 = $$pre1$i$11;
      }
      $41 = $42 << $$0$i;
      $43 = (32 - ($$0$i))|0;
      $44 = $45 >>> $43;
      $46 = $44 | $41;
      HEAP32[$$phi$trans$insert$i>>2] = $46;
      $47 = $45 << $$0$i;
      HEAP32[$p>>2] = $47;
      $49 = $47;$pshift$1 = 1;
     }
    } while(0);
    $48 = $49 | 1;
    HEAP32[$p>>2] = $48;
    $50 = (($head$035) + ($width)|0);
    $51 = ($50>>>0)<($16>>>0);
    if ($51) {
     $20 = $48;$head$035 = $50;$pshift$036 = $pshift$1;
    } else {
     $head$0$lcssa = $50;$pshift$0$lcssa = $pshift$1;
     break;
    }
   }
  } else {
   $head$0$lcssa = $base;$pshift$0$lcssa = 1;
  }
  _trinkle($head$0$lcssa,$width,$cmp,$p,$pshift$0$lcssa,0,$lp);
  $52 = ((($p)) + 4|0);
  $53 = ($pshift$0$lcssa|0)==(1);
  $54 = HEAP32[$p>>2]|0;
  $55 = ($54|0)==(1);
  $or$cond$50 = $53 & $55;
  $56 = HEAP32[$52>>2]|0;
  $57 = ($56|0)==(0);
  $or$cond47$51 = $or$cond$50 & $57;
  if (!($or$cond47$51)) {
   $60 = $54;$head$152 = $head$0$lcssa;$pshift$253 = $pshift$0$lcssa;
   while(1) {
    $58 = ($pshift$253|0)<(2);
    if ($58) {
     $59 = (($60) + -1)|0;
     $61 = ($59|0)==(0);
     do {
      if ($61) {
       $82 = 32;
       label = 30;
      } else {
       $62 = $59 & 1;
       $63 = ($62|0)==(0);
       if ($63) {
        $$02$i$i = $59;$nTrailingZeros$03$i$i = 0;
        while(1) {
         $64 = (($nTrailingZeros$03$i$i) + 1)|0;
         $65 = $$02$i$i >>> 1;
         $66 = $65 & 1;
         $67 = ($66|0)==(0);
         if ($67) {
          $$02$i$i = $65;$nTrailingZeros$03$i$i = $64;
         } else {
          $$lcssa = $64;
          break;
         }
        }
        $68 = ($$lcssa|0)==(0);
        if ($68) {
         label = 24;
        } else {
         $79 = $$lcssa;
        }
       } else {
        label = 24;
       }
       if ((label|0) == 24) {
        label = 0;
        $69 = HEAP32[$$phi$trans$insert$i>>2]|0;
        $70 = ($69|0)==(0);
        if ($70) {
         $82 = 64;
         label = 30;
         break;
        }
        $71 = $69 & 1;
        $72 = ($71|0)==(0);
        if ($72) {
         $$02$i$3$i = $69;$nTrailingZeros$03$i$2$i = 0;
        } else {
         $$0$i$29 = 0;$85 = $60;$88 = $69;$92 = 0;
         break;
        }
        while(1) {
         $73 = (($nTrailingZeros$03$i$2$i) + 1)|0;
         $74 = $$02$i$3$i >>> 1;
         $75 = $74 & 1;
         $76 = ($75|0)==(0);
         if ($76) {
          $$02$i$3$i = $74;$nTrailingZeros$03$i$2$i = $73;
         } else {
          $$lcssa56 = $73;$nTrailingZeros$03$i$2$i$lcssa = $nTrailingZeros$03$i$2$i;
          break;
         }
        }
        $77 = (($nTrailingZeros$03$i$2$i$lcssa) + 33)|0;
        $78 = ($$lcssa56|0)==(0);
        if ($78) {
         $$0$i$29 = 0;$85 = $60;$88 = $69;$92 = 0;
         break;
        } else {
         $79 = $77;
        }
       }
       $80 = ($79>>>0)>(31);
       if ($80) {
        $82 = $79;
        label = 30;
       } else {
        $$pre1$i$26$pre = HEAP32[$$phi$trans$insert$i>>2]|0;
        $$0$i$29 = $79;$85 = $60;$88 = $$pre1$i$26$pre;$92 = $79;
       }
      }
     } while(0);
     if ((label|0) == 30) {
      label = 0;
      $81 = (($82) + -32)|0;
      $83 = HEAP32[$$phi$trans$insert$i>>2]|0;
      HEAP32[$p>>2] = $83;
      HEAP32[$$phi$trans$insert$i>>2] = 0;
      $$0$i$29 = $81;$85 = $83;$88 = 0;$92 = $82;
     }
     $84 = $85 >>> $$0$i$29;
     $86 = (32 - ($$0$i$29))|0;
     $87 = $88 << $86;
     $89 = $87 | $84;
     HEAP32[$p>>2] = $89;
     $90 = $88 >>> $$0$i$29;
     HEAP32[$$phi$trans$insert$i>>2] = $90;
     $91 = (($92) + ($pshift$253))|0;
     $$pre = (($head$152) + ($6)|0);
     $head$1$be = $$pre;$pshift$2$be = $91;
    } else {
     $$pre$i$19 = HEAP32[$$phi$trans$insert$i>>2]|0;
     $93 = $$pre$i$19 << 2;
     $94 = $60 >>> 30;
     $95 = $94 | $93;
     $96 = (($pshift$253) + -2)|0;
     $97 = $60 << 1;
     $98 = $97 & 2147483646;
     $99 = $94 << 31;
     $100 = $98 | $99;
     $101 = $100 ^ 3;
     HEAP32[$p>>2] = $101;
     $102 = $95 >>> 1;
     HEAP32[$$phi$trans$insert$i>>2] = $102;
     $103 = (($lp) + ($96<<2)|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = (0 - ($104))|0;
     $106 = (($head$152) + ($105)|0);
     $107 = (($106) + ($6)|0);
     $108 = (($pshift$253) + -1)|0;
     _trinkle($107,$width,$cmp,$p,$108,1,$lp);
     $$pre$i$7 = HEAP32[$$phi$trans$insert$i>>2]|0;
     $$pre1$i$8 = HEAP32[$p>>2]|0;
     $109 = $$pre$i$7 << 1;
     $110 = $$pre1$i$8 >>> 31;
     $111 = $110 | $109;
     HEAP32[$$phi$trans$insert$i>>2] = $111;
     $112 = $$pre1$i$8 << 1;
     $113 = $112 | 1;
     HEAP32[$p>>2] = $113;
     $114 = (($head$152) + ($6)|0);
     _trinkle($114,$width,$cmp,$p,$96,1,$lp);
     $head$1$be = $114;$pshift$2$be = $96;
    }
    $115 = ($pshift$2$be|0)==(1);
    $116 = HEAP32[$p>>2]|0;
    $117 = ($116|0)==(1);
    $or$cond = $115 & $117;
    $118 = HEAP32[$52>>2]|0;
    $119 = ($118|0)==(0);
    $or$cond47 = $or$cond & $119;
    if ($or$cond47) {
     break;
    } else {
     $60 = $116;$head$152 = $head$1$be;$pshift$253 = $pshift$2$be;
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$13 = 0, $$lcssa9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit$2 = 0, $isdigittmp = 0, $isdigittmp$1 = 0, $isdigittmp5 = 0, $n$0$lcssa = 0, $n$04 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = ((($$0)) + 1|0);
  if ($3) {
   $$0$lcssa = $$0;$$lcssa9 = $4;
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0$lcssa>>0]|0;
 $6 = $5 << 24 >> 24;
 switch ($6|0) {
 case 45:  {
  $neg$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $neg$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = $$0$lcssa;$8 = $5;$neg$1$ph = 0;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$$lcssa9>>0]|0;
  $$1$ph = $$lcssa9;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $isdigittmp$1 = (($7) + -48)|0;
 $isdigit$2 = ($isdigittmp$1>>>0)<(10);
 if ($isdigit$2) {
  $$13 = $$1$ph;$isdigittmp5 = $isdigittmp$1;$n$04 = 0;
  while(1) {
   $9 = ($n$04*10)|0;
   $10 = ((($$13)) + 1|0);
   $11 = (($9) - ($isdigittmp5))|0;
   $12 = HEAP8[$10>>0]|0;
   $13 = $12 << 24 >> 24;
   $isdigittmp = (($13) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$13 = $10;$isdigittmp5 = $isdigittmp;$n$04 = $11;
   } else {
    $n$0$lcssa = $11;
    break;
   }
  }
 } else {
  $n$0$lcssa = 0;
 }
 $14 = ($neg$1$ph|0)!=(0);
 $15 = (0 - ($n$0$lcssa))|0;
 $16 = $14 ? $n$0$lcssa : $15;
 return ($16|0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0;
 var $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 L1: do {
  if ($15) {
   label = 3;
  } else {
   $16 = $3 & 2147483647;
   $17 = ($16>>>0)>(2146435072);
   $18 = ($2>>>0)>(0);
   $19 = ($16|0)==(2146435072);
   $20 = $19 & $18;
   $21 = $17 | $20;
   $22 = ($6|0)==(2047);
   $or$cond = $21 | $22;
   if ($or$cond) {
    label = 3;
   } else {
    $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $26 = tempRet0;
    $27 = ($26>>>0)>($12>>>0);
    $28 = ($25>>>0)>($11>>>0);
    $29 = ($26|0)==($12|0);
    $30 = $29 & $28;
    $31 = $27 | $30;
    if (!($31)) {
     $32 = ($25|0)==($11|0);
     $33 = ($26|0)==($12|0);
     $34 = $32 & $33;
     $35 = $x * 0.0;
     $$x = $34 ? $35 : $x;
     return (+$$x);
    }
    $36 = ($6|0)==(0);
    if ($36) {
     $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $38 = tempRet0;
     $39 = ($38|0)>(-1);
     $40 = ($37>>>0)>(4294967295);
     $41 = ($38|0)==(-1);
     $42 = $41 & $40;
     $43 = $39 | $42;
     if ($43) {
      $45 = $37;$46 = $38;$ex$026 = 0;
      while(1) {
       $44 = (($ex$026) + -1)|0;
       $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
       $48 = tempRet0;
       $49 = ($48|0)>(-1);
       $50 = ($47>>>0)>(4294967295);
       $51 = ($48|0)==(-1);
       $52 = $51 & $50;
       $53 = $49 | $52;
       if ($53) {
        $45 = $47;$46 = $48;$ex$026 = $44;
       } else {
        $ex$0$lcssa = $44;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $54 = (1 - ($ex$0$lcssa))|0;
     $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
     $56 = tempRet0;
     $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
    } else {
     $57 = $1 & 1048575;
     $58 = $57 | 1048576;
     $83 = $0;$84 = $58;$ex$1 = $6;
    }
    $59 = ($9|0)==(0);
    if ($59) {
     $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $61 = tempRet0;
     $62 = ($61|0)>(-1);
     $63 = ($60>>>0)>(4294967295);
     $64 = ($61|0)==(-1);
     $65 = $64 & $63;
     $66 = $62 | $65;
     if ($66) {
      $68 = $60;$69 = $61;$ey$020 = 0;
      while(1) {
       $67 = (($ey$020) + -1)|0;
       $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
       $71 = tempRet0;
       $72 = ($71|0)>(-1);
       $73 = ($70>>>0)>(4294967295);
       $74 = ($71|0)==(-1);
       $75 = $74 & $73;
       $76 = $72 | $75;
       if ($76) {
        $68 = $70;$69 = $71;$ey$020 = $67;
       } else {
        $ey$0$lcssa = $67;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $77 = (1 - ($ey$0$lcssa))|0;
     $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
     $79 = tempRet0;
     $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
    } else {
     $80 = $3 & 1048575;
     $81 = $80 | 1048576;
     $85 = $2;$86 = $81;$ey$1$ph = $9;
    }
    $82 = ($ex$1|0)>($ey$1$ph|0);
    $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
    $88 = tempRet0;
    $89 = ($88|0)>(-1);
    $90 = ($87>>>0)>(4294967295);
    $91 = ($88|0)==(-1);
    $92 = $91 & $90;
    $93 = $89 | $92;
    L23: do {
     if ($82) {
      $152 = $93;$153 = $87;$154 = $88;$94 = $83;$96 = $84;$ex$212 = $ex$1;
      while(1) {
       if ($152) {
        $95 = ($94|0)==($85|0);
        $97 = ($96|0)==($86|0);
        $98 = $95 & $97;
        if ($98) {
         break;
        } else {
         $100 = $153;$101 = $154;
        }
       } else {
        $100 = $94;$101 = $96;
       }
       $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
       $103 = tempRet0;
       $104 = (($ex$212) + -1)|0;
       $105 = ($104|0)>($ey$1$ph|0);
       $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
       $107 = tempRet0;
       $108 = ($107|0)>(-1);
       $109 = ($106>>>0)>(4294967295);
       $110 = ($107|0)==(-1);
       $111 = $110 & $109;
       $112 = $108 | $111;
       if ($105) {
        $152 = $112;$153 = $106;$154 = $107;$94 = $102;$96 = $103;$ex$212 = $104;
       } else {
        $$lcssa7 = $112;$113 = $102;$115 = $103;$155 = $106;$156 = $107;$ex$2$lcssa = $104;
        break L23;
       }
      }
      $99 = $x * 0.0;
      $$0 = $99;
      break L1;
     } else {
      $$lcssa7 = $93;$113 = $83;$115 = $84;$155 = $87;$156 = $88;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($$lcssa7) {
     $114 = ($113|0)==($85|0);
     $116 = ($115|0)==($86|0);
     $117 = $114 & $116;
     if ($117) {
      $125 = $x * 0.0;
      $$0 = $125;
      break;
     } else {
      $118 = $156;$120 = $155;
     }
    } else {
     $118 = $115;$120 = $113;
    }
    $119 = ($118>>>0)<(1048576);
    $121 = ($120>>>0)<(0);
    $122 = ($118|0)==(1048576);
    $123 = $122 & $121;
    $124 = $119 | $123;
    if ($124) {
     $126 = $120;$127 = $118;$ex$39 = $ex$2$lcssa;
     while(1) {
      $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
      $129 = tempRet0;
      $130 = (($ex$39) + -1)|0;
      $131 = ($129>>>0)<(1048576);
      $132 = ($128>>>0)<(0);
      $133 = ($129|0)==(1048576);
      $134 = $133 & $132;
      $135 = $131 | $134;
      if ($135) {
       $126 = $128;$127 = $129;$ex$39 = $130;
      } else {
       $137 = $128;$138 = $129;$ex$3$lcssa = $130;
       break;
      }
     }
    } else {
     $137 = $120;$138 = $118;$ex$3$lcssa = $ex$2$lcssa;
    }
    $136 = ($ex$3$lcssa|0)>(0);
    if ($136) {
     $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
     $140 = tempRet0;
     $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $142 = tempRet0;
     $143 = $139 | $141;
     $144 = $140 | $142;
     $149 = $144;$151 = $143;
    } else {
     $145 = (1 - ($ex$3$lcssa))|0;
     $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
     $147 = tempRet0;
     $149 = $147;$151 = $146;
    }
    $148 = $149 | $10;
    HEAP32[tempDoublePtr>>2] = $151;HEAP32[tempDoublePtr+4>>2] = $148;$150 = +HEAPF64[tempDoublePtr>>3];
    $$0 = $150;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $23 = $x * $y;
  $24 = $23 / $23;
  $$0 = $24;
 }
 return (+$$0);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _umask($mode) {
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $mode;
 $0 = (___syscall60(60,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _lstat($path,$buf) {
 $path = $path|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $path;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $buf;
 $0 = (___syscall196(196,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _stat($path,$buf) {
 $path = $path|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $path;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $buf;
 $0 = (___syscall195(195,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function ___synccall($func,$ctx) {
 $func = $func|0;
 $ctx = $ctx|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_vi[$func & 63]($ctx);
 return;
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(15852,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (___fmodeflags($mode)|0);
  $5 = $4 | 32768;
  HEAP32[$vararg_buffer>>2] = $filename;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $6 = (___syscall5(5,($vararg_buffer|0))|0);
  $7 = (___syscall_ret($6)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   $$0 = 0;
  } else {
   $9 = (___fdopen($7,$mode)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    HEAP32[$vararg_buffer3>>2] = $7;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $9;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$cast = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iov = sp + 32|0;
 HEAP32[$iov>>2] = $buf;
 $0 = ((($iov)) + 4|0);
 $1 = ((($f)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $5 = (($len) - ($4))|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($iov)) + 8|0);
 $7 = ((($f)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($iov)) + 12|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[1048>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $16 = ((($f)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $17;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $iov;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer3|0))|0);
  $19 = (___syscall_ret($18)|0);
  $cnt$0 = $19;
 } else {
  _pthread_cleanup_push((58|0),($f|0));
  $12 = ((($f)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $iov;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $14 = (___syscall145(145,($vararg_buffer|0))|0);
  $15 = (___syscall_ret($14)|0);
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 $20 = ($cnt$0|0)<(1);
 if ($20) {
  $21 = $cnt$0 & 48;
  $22 = $21 ^ 16;
  $23 = HEAP32[$f>>2]|0;
  $24 = $23 | $22;
  HEAP32[$f>>2] = $24;
  $25 = ((($f)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($f)) + 4|0);
  HEAP32[$26>>2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0>>2]|0;
  $28 = ($cnt$0>>>0)>($27>>>0);
  if ($28) {
   $29 = (($cnt$0) - ($27))|0;
   $30 = HEAP32[$7>>2]|0;
   $31 = ((($f)) + 4|0);
   HEAP32[$31>>2] = $30;
   $$cast = $30;
   $32 = (($$cast) + ($29)|0);
   $33 = ((($f)) + 8|0);
   HEAP32[$33>>2] = $32;
   $34 = HEAP32[$1>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $$0 = $len;
   } else {
    $36 = ((($$cast)) + 1|0);
    HEAP32[$31>>2] = $36;
    $37 = HEAP8[$$cast>>0]|0;
    $38 = (($len) + -1)|0;
    $39 = (($buf) + ($38)|0);
    HEAP8[$39>>0] = $37;
    $$0 = $len;
   }
  } else {
   $$0 = $cnt$0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $$flags$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0;
 var $flags$2$ = 0, $flags$4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($mode,43)|0);
 $1 = ($0|0)==(0|0);
 $2 = HEAP8[$mode>>0]|0;
 $not$ = ($2<<24>>24)!=(114);
 $$ = $not$&1;
 $flags$0 = $1 ? $$ : 2;
 $3 = (_strchr($mode,120)|0);
 $4 = ($3|0)==(0|0);
 $5 = $flags$0 | 128;
 $flags$0$ = $4 ? $flags$0 : $5;
 $6 = (_strchr($mode,101)|0);
 $7 = ($6|0)==(0|0);
 $8 = $flags$0$ | 524288;
 $flags$2 = $7 ? $flags$0$ : $8;
 $9 = ($2<<24>>24)==(114);
 $10 = $flags$2 | 64;
 $flags$2$ = $9 ? $flags$2 : $10;
 $11 = ($2<<24>>24)==(119);
 $12 = $flags$2$ | 512;
 $flags$4 = $11 ? $12 : $flags$2$;
 $13 = ($2<<24>>24)==(97);
 $14 = $flags$4 | 1024;
 $$flags$4 = $13 ? $14 : $flags$4;
 return ($$flags$4|0);
}
function _fprintf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vfprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0, $iovcnt$0$lcssa12 = 0;
 var $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) - ($1))|0;
 HEAP32[$2>>2] = $5;
 $6 = ((($iovs)) + 8|0);
 HEAP32[$6>>2] = $buf;
 $7 = ((($iovs)) + 12|0);
 HEAP32[$7>>2] = $len;
 $8 = (($5) + ($len))|0;
 $9 = ((($f)) + 60|0);
 $10 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $8;
 while(1) {
  $11 = HEAP32[1048>>2]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $16 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $16;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $17 = (___syscall146(146,($vararg_buffer3|0))|0);
   $18 = (___syscall_ret($17)|0);
   $cnt$0 = $18;
  } else {
   _pthread_cleanup_push((59|0),($f|0));
   $13 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer>>2] = $13;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $14 = (___syscall146(146,($vararg_buffer|0))|0);
   $15 = (___syscall_ret($14)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $15;
  }
  $19 = ($rem$0|0)==($cnt$0|0);
  if ($19) {
   label = 6;
   break;
  }
  $26 = ($cnt$0|0)<(0);
  if ($26) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $34 = (($rem$0) - ($cnt$0))|0;
  $35 = ((($iov$0)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($cnt$0>>>0)>($36>>>0);
  if ($37) {
   $38 = HEAP32[$10>>2]|0;
   HEAP32[$0>>2] = $38;
   HEAP32[$3>>2] = $38;
   $39 = (($cnt$0) - ($36))|0;
   $40 = ((($iov$0)) + 8|0);
   $41 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $49 = $$pre;$cnt$1 = $39;$iov$1 = $40;$iovcnt$1 = $41;
  } else {
   $42 = ($iovcnt$0|0)==(2);
   if ($42) {
    $43 = HEAP32[$0>>2]|0;
    $44 = (($43) + ($cnt$0)|0);
    HEAP32[$0>>2] = $44;
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $45 = HEAP32[$iov$1>>2]|0;
  $46 = (($45) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $46;
  $47 = ((($iov$1)) + 4|0);
  $48 = (($49) - ($cnt$1))|0;
  HEAP32[$47>>2] = $48;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $34;
 }
 if ((label|0) == 6) {
  $20 = HEAP32[$10>>2]|0;
  $21 = ((($f)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($f)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$0>>2] = $25;
  HEAP32[$3>>2] = $25;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $27 = ((($f)) + 16|0);
  HEAP32[$27>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 | 32;
  HEAP32[$f>>2] = $29;
  $30 = ($iovcnt$0$lcssa12|0)==(2);
  if ($30) {
   $$0 = 0;
  } else {
   $31 = ((($iov$0$lcssa11)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($len) - ($32))|0;
   $$0 = $33;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fputs($s,$f) {
 $s = $s|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (_fwrite($s,$0,1,$f)|0);
 $2 = (($1) + -1)|0;
 return ($2|0);
}
function _printf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[1124>>2]|0;
 $1 = (_vfprintf($0,$fmt,$ap)|0);
 STACKTOP = sp;return ($1|0);
}
function _puts($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1124>>2]|0;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $19 = $4;
 } else {
  $19 = 0;
 }
 $5 = (_fputs($s,$0)|0);
 $6 = ($5|0)<(0);
 do {
  if ($6) {
   $18 = 1;
  } else {
   $7 = ((($0)) + 75|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = ($8<<24>>24)==(10);
   if (!($9)) {
    $10 = ((($0)) + 20|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($0)) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($11>>>0)<($13>>>0);
    if ($14) {
     $15 = ((($11)) + 1|0);
     HEAP32[$10>>2] = $15;
     HEAP8[$11>>0] = 10;
     $18 = 0;
     break;
    }
   }
   $16 = (___overflow($0,10)|0);
   $phitmp = ($16|0)<(0);
   $18 = $phitmp;
  }
 } while(0);
 $17 = $18 << 31 >> 31;
 $20 = ($19|0)==(0);
 if (!($20)) {
  ___unlockfile($0);
 }
 return ($17|0);
}
function _fileno($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $3 = (___lockfile($f)|0);
  $phitmp = ($3|0)==(0);
  if (!($phitmp)) {
   ___unlockfile($f);
  }
 }
 $4 = ((($f)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 return ($5|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 63]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $_c&255;
 HEAP8[$c>>0] = $0;
 $1 = ((($f)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$1>>2]|0;
   $9 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $9 = $2;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($9>>>0);
   if ($8) {
    $10 = $_c & 255;
    $11 = ((($f)) + 75|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($10|0)==($13|0);
    if (!($14)) {
     $15 = ((($7)) + 1|0);
     HEAP32[$6>>2] = $15;
     HEAP8[$7>>0] = $0;
     $$0 = $10;
     break;
    }
   }
   $16 = ((($f)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iiii[$17 & 63]($f,$c,1)|0);
   $19 = ($18|0)==(1);
   if ($19) {
    $20 = HEAP8[$c>>0]|0;
    $21 = $20&255;
    $$0 = $21;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 32;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 $5 = $3;
 $6 = $1;
 $7 = (($5) - ($6))|0;
 $k$0 = $4 ? $2 : $7;
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = ((($f)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = ((($f)) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 return ($k$0$len|0);
}
function _vasprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp;
 $0 = (_malloc(240)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   $vacopy_currentptr = HEAP32[$ap>>2]|0;
   HEAP32[$ap2>>2] = $vacopy_currentptr;
   $2 = (_vsnprintf($0,240,$fmt,$ap2)|0);
   $3 = ($2>>>0)<(240);
   if ($3) {
    $4 = (($2) + 1)|0;
    $5 = (_realloc($0,$4)|0);
    $6 = ($5|0)!=(0|0);
    $7 = $6 ? $5 : $0;
    HEAP32[$s>>2] = $7;
    $$0 = $2;
    break;
   }
   _free($0);
   $8 = ($2|0)<(0);
   if ($8) {
    $$0 = -1;
   } else {
    $9 = (($2) + 1)|0;
    $10 = (_malloc($9)|0);
    HEAP32[$s>>2] = $10;
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$0 = -1;
    } else {
     $12 = (_vsnprintf($10,$9,$fmt,$ap)|0);
     $$0 = $12;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $32 = $5;
  } else {
   $32 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 63]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $33 = ($32|0)==(0);
  if (!($33)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=1260; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
   label = 4;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$01 = $s;$$02 = $n;
  label = 4;
 }
 if ((label|0) == 4) {
  $4 = $$01;
  $5 = (-2 - ($4))|0;
  $6 = ($$02>>>0)>($5>>>0);
  $$$02 = $6 ? $5 : $$02;
  $7 = ((($f)) + 48|0);
  HEAP32[$7>>2] = $$$02;
  $8 = ((($f)) + 20|0);
  HEAP32[$8>>2] = $$01;
  $9 = ((($f)) + 44|0);
  HEAP32[$9>>2] = $$01;
  $10 = (($$01) + ($$$02)|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($f)) + 28|0);
  HEAP32[$12>>2] = $10;
  $13 = (_vfprintf($f,$fmt,$ap)|0);
  $14 = ($$$02|0)==(0);
  if ($14) {
   $$0 = $13;
  } else {
   $15 = HEAP32[$8>>2]|0;
   $16 = HEAP32[$11>>2]|0;
   $17 = ($15|0)==($16|0);
   $18 = $17 << 31 >> 31;
   $19 = (($15) + ($18)|0);
   HEAP8[$19>>0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _putchar_unlocked($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1124>>2]|0;
 $1 = ((($0)) + 75|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)==($c|0);
 if ($4) {
  label = 4;
 } else {
  $5 = ((($0)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($0)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6>>>0)<($8>>>0);
  if ($9) {
   $10 = $c&255;
   $11 = ((($6)) + 1|0);
   HEAP32[$5>>2] = $11;
   HEAP8[$6>>0] = $10;
   $12 = $c & 255;
   $14 = $12;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $13 = (___overflow($0,$c)|0);
  $14 = $13;
 }
 return ($14|0);
}
function _rename($old,$new) {
 $old = $old|0;
 $new = $new|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $old;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $new;
 $0 = (___syscall38(38,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  (___lockfile($f)|0);
 }
 $3 = HEAP32[$f>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  ___lock(((1076)|0));
  $6 = ((($f)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $9 = $7;
  $$pre = ((($f)) + 56|0);
  if (!($8)) {
   $10 = HEAP32[$$pre>>2]|0;
   $11 = ((($7)) + 56|0);
   HEAP32[$11>>2] = $10;
  }
  $12 = HEAP32[$$pre>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = $12;
  if (!($13)) {
   $15 = ((($12)) + 52|0);
   HEAP32[$15>>2] = $9;
  }
  $16 = HEAP32[(1072)>>2]|0;
  $17 = ($16|0)==($f|0);
  if ($17) {
   HEAP32[(1072)>>2] = $14;
  }
  ___unlock(((1076)|0));
 }
 $18 = (_fflush($f)|0);
 $19 = ((($f)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_ii[$20 & 63]($f)|0);
 $22 = $21 | $18;
 $23 = ((($f)) + 92|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _free($24);
 }
 if (!($5)) {
  _free($f);
 }
 return ($22|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa12 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$0>>2]|0;
   $9 = $$pre;
   label = 5;
  } else {
   $$0 = 0;
  }
 } else {
  $3 = $1;
  $9 = $3;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($9) - ($7))|0;
   $10 = ($8>>>0)<($l>>>0);
   $11 = $7;
   if ($10) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 63]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L10: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
       break L10;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa12 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 63]($f,$s,$i$0$lcssa12)|0);
     $26 = ($25>>>0)<($i$0$lcssa12>>>0);
     if ($26) {
      $$0 = $i$0$lcssa12;
      break L5;
     }
     $27 = (($s) + ($i$0$lcssa12)|0);
     $28 = (($l) - ($i$0$lcssa12))|0;
     $$pre6 = HEAP32[$6>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa12;
    } else {
     $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$6>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$6>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___fwritex($src,$0,$f)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   ___unlockfile($f);
   $7 = $6;
  }
 } else {
  $4 = (___fwritex($src,$0,$f)|0);
  $7 = $4;
 }
 $8 = ($7|0)==($0|0);
 if ($8) {
  $10 = $nmemb;
 } else {
  $9 = (($7>>>0) / ($size>>>0))&-1;
  $10 = $9;
 }
 return ($10|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$0 = 0, $$cast = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $tio = sp + 52|0;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(15852,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (_malloc(1144)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
  } else {
   dest=$4; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $6 = (_strchr($mode,43)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = ($0<<24>>24)==(114);
    $9 = $8 ? 8 : 4;
    HEAP32[$4>>2] = $9;
   }
   $10 = (_strchr($mode,101)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = $0;
   } else {
    HEAP32[$vararg_buffer>>2] = $fd;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$mode>>0]|0;
    $12 = $$pre;
   }
   $13 = ($12<<24>>24)==(97);
   if ($13) {
    HEAP32[$vararg_buffer3>>2] = $fd;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $14 = (___syscall221(221,($vararg_buffer3|0))|0);
    $15 = $14 & 1024;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = $14 | 1024;
     HEAP32[$vararg_buffer7>>2] = $fd;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $17;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $18 = HEAP32[$4>>2]|0;
    $19 = $18 | 128;
    HEAP32[$4>>2] = $19;
    $26 = $19;
   } else {
    $$pre1 = HEAP32[$4>>2]|0;
    $26 = $$pre1;
   }
   $20 = ((($4)) + 60|0);
   HEAP32[$20>>2] = $fd;
   $21 = ((($4)) + 120|0);
   $22 = ((($4)) + 44|0);
   HEAP32[$22>>2] = $21;
   $23 = ((($4)) + 48|0);
   HEAP32[$23>>2] = 1024;
   $24 = ((($4)) + 75|0);
   HEAP8[$24>>0] = -1;
   $25 = $26 & 8;
   $27 = ($25|0)==(0);
   if ($27) {
    HEAP32[$vararg_buffer12>>2] = $fd;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $tio;
    $28 = (___syscall54(54,($vararg_buffer12|0))|0);
    $29 = ($28|0)==(0);
    if ($29) {
     HEAP8[$24>>0] = 10;
    }
   }
   $30 = ((($4)) + 32|0);
   HEAP32[$30>>2] = 34;
   $31 = ((($4)) + 36|0);
   HEAP32[$31>>2] = 32;
   $32 = ((($4)) + 40|0);
   HEAP32[$32>>2] = 33;
   $33 = ((($4)) + 12|0);
   HEAP32[$33>>2] = 31;
   $34 = HEAP32[(1052)>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = ((($4)) + 76|0);
    HEAP32[$36>>2] = -1;
   }
   ___lock(((1076)|0));
   $37 = HEAP32[(1072)>>2]|0;
   $38 = ((($4)) + 56|0);
   HEAP32[$38>>2] = $37;
   $39 = ($37|0)==(0);
   if (!($39)) {
    $$cast = $37;
    $40 = ((($$cast)) + 52|0);
    HEAP32[$40>>2] = $4;
   }
   HEAP32[(1072)>>2] = $4;
   ___unlock(((1076)|0));
   $$0 = $4;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _getc_unlocked($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = ((($1)) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___uflow($f)|0);
  $9 = $8;
 }
 return ($9|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 63]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f>>2] = $20;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$11 = 0, $$12 = 0, $$13 = 0, $$14 = 0, $$lcssa = 0, $$lcssa386 = 0, $$lcssa40 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi184Z2D = 0, $$pre170 = 0, $$pre172 = 0, $$pre174 = 0, $$pre176 = 0, $$pre178 = 0, $$pre180 = 0, $$pre182 = 0, $$pre183 = 0;
 var $$size$0 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0402 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $base$0 = 0, $c$0102 = 0, $dest$0 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $factor = 0, $factor18 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$phi = 0, $i$0$ph22 = 0, $i$0$ph22$lcssa = 0;
 var $i$1 = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit8 = 0, $isdigit8$97 = 0, $isdigittmp = 0, $isdigittmp7 = 0, $isdigittmp7$96 = 0, $k$0$ph = 0, $k$1$ph = 0, $matches$0$ = 0, $matches$0107 = 0, $matches$0107$lcssa = 0, $matches$0107371 = 0, $matches$1 = 0;
 var $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond = 0, $or$cond10 = 0, $or$cond3 = 0, $or$cond5 = 0, $p$0110 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$398 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0;
 var $p$8 = 0, $p$9 = 0, $pos$0111 = 0, $pos$1 = 0, $pos$2 = 0, $s$0105 = 0, $s$0105$lcssa = 0, $s$1 = 0, $s$2$ph = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0;
 var $wcs$0106 = 0, $wcs$0106$lcssa = 0, $wcs$1 = 0, $wcs$10 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$099 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $327 = $4;
 } else {
  $327 = 0;
 }
 $5 = HEAP8[$fmt>>0]|0;
 $6 = ($5<<24>>24)==(0);
 L4: do {
  if ($6) {
   $matches$3 = 0;
  } else {
   $7 = ((($f)) + 4|0);
   $8 = ((($f)) + 100|0);
   $9 = ((($f)) + 108|0);
   $10 = ((($f)) + 8|0);
   $11 = ((($scanset)) + 10|0);
   $12 = ((($scanset)) + 33|0);
   $13 = ((($st)) + 4|0);
   $14 = ((($scanset)) + 46|0);
   $15 = ((($scanset)) + 94|0);
   $17 = $5;$matches$0107 = 0;$p$0110 = $fmt;$pos$0111 = 0;$s$0105 = 0;$wcs$0106 = 0;
   L6: while(1) {
    $16 = $17&255;
    $18 = (_isspace($16)|0);
    $19 = ($18|0)==(0);
    L8: do {
     if ($19) {
      $46 = HEAP8[$p$0110>>0]|0;
      $47 = ($46<<24>>24)==(37);
      L10: do {
       if ($47) {
        $48 = ((($p$0110)) + 1|0);
        $49 = HEAP8[$48>>0]|0;
        L12: do {
         switch ($49<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $70 = ((($p$0110)) + 2|0);
          $dest$0 = 0;$p$2 = $70;
          break;
         }
         default: {
          $71 = $49&255;
          $isdigittmp = (($71) + -48)|0;
          $isdigit = ($isdigittmp>>>0)<(10);
          if ($isdigit) {
           $72 = ((($p$0110)) + 2|0);
           $73 = HEAP8[$72>>0]|0;
           $74 = ($73<<24>>24)==(36);
           if ($74) {
            $vacopy_currentptr = HEAP32[$ap>>2]|0;
            HEAP32[$ap2$i>>2] = $vacopy_currentptr;
            $i$0$i = $isdigittmp;
            while(1) {
             $75 = ($i$0$i>>>0)>(1);
             $arglist_current = HEAP32[$ap2$i>>2]|0;
             $76 = $arglist_current;
             $77 = ((0) + 4|0);
             $expanded4 = $77;
             $expanded = (($expanded4) - 1)|0;
             $78 = (($76) + ($expanded))|0;
             $79 = ((0) + 4|0);
             $expanded8 = $79;
             $expanded7 = (($expanded8) - 1)|0;
             $expanded6 = $expanded7 ^ -1;
             $80 = $78 & $expanded6;
             $81 = $80;
             $82 = HEAP32[$81>>2]|0;
             $arglist_next = ((($81)) + 4|0);
             HEAP32[$ap2$i>>2] = $arglist_next;
             $83 = (($i$0$i) + -1)|0;
             if ($75) {
              $i$0$i = $83;
             } else {
              $$lcssa = $82;
              break;
             }
            }
            $84 = ((($p$0110)) + 3|0);
            $dest$0 = $$lcssa;$p$2 = $84;
            break L12;
           }
          }
          $arglist_current2 = HEAP32[$ap>>2]|0;
          $85 = $arglist_current2;
          $86 = ((0) + 4|0);
          $expanded11 = $86;
          $expanded10 = (($expanded11) - 1)|0;
          $87 = (($85) + ($expanded10))|0;
          $88 = ((0) + 4|0);
          $expanded15 = $88;
          $expanded14 = (($expanded15) - 1)|0;
          $expanded13 = $expanded14 ^ -1;
          $89 = $87 & $expanded13;
          $90 = $89;
          $91 = HEAP32[$90>>2]|0;
          $arglist_next3 = ((($90)) + 4|0);
          HEAP32[$ap>>2] = $arglist_next3;
          $dest$0 = $91;$p$2 = $48;
         }
         }
        } while(0);
        $92 = HEAP8[$p$2>>0]|0;
        $93 = $92&255;
        $isdigittmp7$96 = (($93) + -48)|0;
        $isdigit8$97 = ($isdigittmp7$96>>>0)<(10);
        if ($isdigit8$97) {
         $97 = $93;$p$398 = $p$2;$width$099 = 0;
         while(1) {
          $94 = ($width$099*10)|0;
          $95 = (($94) + -48)|0;
          $96 = (($95) + ($97))|0;
          $98 = ((($p$398)) + 1|0);
          $99 = HEAP8[$98>>0]|0;
          $100 = $99&255;
          $isdigittmp7 = (($100) + -48)|0;
          $isdigit8 = ($isdigittmp7>>>0)<(10);
          if ($isdigit8) {
           $97 = $100;$p$398 = $98;$width$099 = $96;
          } else {
           $$lcssa40 = $99;$p$3$lcssa = $98;$width$0$lcssa = $96;
           break;
          }
         }
        } else {
         $$lcssa40 = $92;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
        }
        $101 = ($$lcssa40<<24>>24)==(109);
        if ($101) {
         $102 = ($dest$0|0)!=(0|0);
         $103 = $102&1;
         $104 = ((($p$3$lcssa)) + 1|0);
         $$pre170 = HEAP8[$104>>0]|0;
         $107 = $$pre170;$alloc$0 = $103;$p$4 = $104;$s$1 = 0;$wcs$1 = 0;
        } else {
         $107 = $$lcssa40;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0105;$wcs$1 = $wcs$0106;
        }
        $105 = ((($p$4)) + 1|0);
        $106 = $107&255;
        switch ($106|0) {
        case 104:  {
         $108 = HEAP8[$105>>0]|0;
         $109 = ($108<<24>>24)==(104);
         $110 = ((($p$4)) + 2|0);
         $$11 = $109 ? $110 : $105;
         $$12 = $109 ? -2 : -1;
         $p$5 = $$11;$size$0 = $$12;
         break;
        }
        case 108:  {
         $111 = HEAP8[$105>>0]|0;
         $112 = ($111<<24>>24)==(108);
         $113 = ((($p$4)) + 2|0);
         $$13 = $112 ? $113 : $105;
         $$14 = $112 ? 3 : 1;
         $p$5 = $$13;$size$0 = $$14;
         break;
        }
        case 106:  {
         $p$5 = $105;$size$0 = 3;
         break;
        }
        case 116: case 122:  {
         $p$5 = $105;$size$0 = 1;
         break;
        }
        case 76:  {
         $p$5 = $105;$size$0 = 2;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $p$5 = $p$4;$size$0 = 0;
         break;
        }
        default: {
         $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = $s$1;$wcs$8 = $wcs$1;
         label = 154;
         break L6;
        }
        }
        $114 = HEAP8[$p$5>>0]|0;
        $115 = $114&255;
        $116 = $115 & 47;
        $117 = ($116|0)==(3);
        $118 = $115 | 32;
        $$ = $117 ? $118 : $115;
        $$size$0 = $117 ? 1 : $size$0;
        switch ($$|0) {
        case 99:  {
         $119 = ($width$0$lcssa|0)<(1);
         $$width$0 = $119 ? 1 : $width$0$lcssa;
         $pos$1 = $pos$0111;$width$1 = $$width$0;
         break;
        }
        case 91:  {
         $pos$1 = $pos$0111;$width$1 = $width$0$lcssa;
         break;
        }
        case 110:  {
         $120 = ($pos$0111|0)<(0);
         $121 = $120 << 31 >> 31;
         $122 = ($dest$0|0)==(0|0);
         if ($122) {
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
         }
         switch ($$size$0|0) {
         case -2:  {
          $123 = $pos$0111&255;
          HEAP8[$dest$0>>0] = $123;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         case -1:  {
          $124 = $pos$0111&65535;
          HEAP16[$dest$0>>1] = $124;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $pos$0111;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $pos$0111;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         case 3:  {
          $125 = $dest$0;
          $126 = $125;
          HEAP32[$126>>2] = $pos$0111;
          $127 = (($125) + 4)|0;
          $128 = $127;
          HEAP32[$128>>2] = $121;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         default: {
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
         }
         }
         break;
        }
        default: {
         ___shlim($f,0);
         while(1) {
          $129 = HEAP32[$7>>2]|0;
          $130 = HEAP32[$8>>2]|0;
          $131 = ($129>>>0)<($130>>>0);
          if ($131) {
           $132 = ((($129)) + 1|0);
           HEAP32[$7>>2] = $132;
           $133 = HEAP8[$129>>0]|0;
           $134 = $133&255;
           $136 = $134;
          } else {
           $135 = (___shgetc($f)|0);
           $136 = $135;
          }
          $137 = (_isspace($136)|0);
          $138 = ($137|0)==(0);
          if ($138) {
           break;
          }
         }
         $139 = HEAP32[$8>>2]|0;
         $140 = ($139|0)==(0|0);
         if ($140) {
          $$pre172 = HEAP32[$7>>2]|0;
          $148 = $$pre172;
         } else {
          $141 = HEAP32[$7>>2]|0;
          $142 = ((($141)) + -1|0);
          HEAP32[$7>>2] = $142;
          $143 = $142;
          $148 = $143;
         }
         $144 = HEAP32[$9>>2]|0;
         $145 = HEAP32[$10>>2]|0;
         $146 = (($144) + ($pos$0111))|0;
         $147 = (($146) + ($148))|0;
         $149 = (($147) - ($145))|0;
         $pos$1 = $149;$width$1 = $width$0$lcssa;
        }
        }
        ___shlim($f,$width$1);
        $150 = HEAP32[$7>>2]|0;
        $151 = HEAP32[$8>>2]|0;
        $152 = ($150>>>0)<($151>>>0);
        if ($152) {
         $153 = ((($150)) + 1|0);
         HEAP32[$7>>2] = $153;
         $156 = $151;
        } else {
         $154 = (___shgetc($f)|0);
         $155 = ($154|0)<(0);
         if ($155) {
          $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = $s$1;$wcs$8 = $wcs$1;
          label = 154;
          break L6;
         }
         $$pre174 = HEAP32[$8>>2]|0;
         $156 = $$pre174;
        }
        $157 = ($156|0)==(0|0);
        if (!($157)) {
         $158 = HEAP32[$7>>2]|0;
         $159 = ((($158)) + -1|0);
         HEAP32[$7>>2] = $159;
        }
        L68: do {
         switch ($$|0) {
         case 91: case 99: case 115:  {
          $160 = ($$|0)==(99);
          $161 = $$ & 239;
          $162 = ($161|0)==(99);
          L70: do {
           if ($162) {
            $163 = ($$|0)==(115);
            _memset(($scanset|0),-1,257)|0;
            HEAP8[$scanset>>0] = 0;
            if ($163) {
             HEAP8[$12>>0] = 0;
             ;HEAP8[$11>>0]=0|0;HEAP8[$11+1>>0]=0|0;HEAP8[$11+2>>0]=0|0;HEAP8[$11+3>>0]=0|0;HEAP8[$11+4>>0]=0|0;
             $p$9 = $p$5;
            } else {
             $p$9 = $p$5;
            }
           } else {
            $164 = ((($p$5)) + 1|0);
            $165 = HEAP8[$164>>0]|0;
            $166 = ($165<<24>>24)==(94);
            $167 = ((($p$5)) + 2|0);
            $invert$0 = $166&1;
            $168 = $166 ? $164 : $p$5;
            $p$6 = $166 ? $167 : $164;
            $169 = $166&1;
            _memset(($scanset|0),($169|0),257)|0;
            HEAP8[$scanset>>0] = 0;
            $170 = HEAP8[$p$6>>0]|0;
            switch ($170<<24>>24) {
            case 45:  {
             $171 = ((($168)) + 2|0);
             $172 = $invert$0 ^ 1;
             $173 = $172&255;
             HEAP8[$14>>0] = $173;
             $$pre$phi184Z2D = $173;$p$7$ph = $171;
             break;
            }
            case 93:  {
             $174 = ((($168)) + 2|0);
             $175 = $invert$0 ^ 1;
             $176 = $175&255;
             HEAP8[$15>>0] = $176;
             $$pre$phi184Z2D = $176;$p$7$ph = $174;
             break;
            }
            default: {
             $$pre182 = $invert$0 ^ 1;
             $$pre183 = $$pre182&255;
             $$pre$phi184Z2D = $$pre183;$p$7$ph = $p$6;
            }
            }
            $p$7 = $p$7$ph;
            while(1) {
             $177 = HEAP8[$p$7>>0]|0;
             L81: do {
              switch ($177<<24>>24) {
              case 0:  {
               $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = $s$1;$wcs$8 = $wcs$1;
               label = 154;
               break L6;
               break;
              }
              case 93:  {
               $p$9 = $p$7;
               break L70;
               break;
              }
              case 45:  {
               $178 = ((($p$7)) + 1|0);
               $179 = HEAP8[$178>>0]|0;
               switch ($179<<24>>24) {
               case 93: case 0:  {
                $190 = 45;$p$8 = $p$7;
                break L81;
                break;
               }
               default: {
               }
               }
               $180 = ((($p$7)) + -1|0);
               $181 = HEAP8[$180>>0]|0;
               $182 = ($181&255)<($179&255);
               if ($182) {
                $183 = $181&255;
                $c$0102 = $183;
                while(1) {
                 $184 = (($c$0102) + 1)|0;
                 $185 = (($scanset) + ($184)|0);
                 HEAP8[$185>>0] = $$pre$phi184Z2D;
                 $186 = HEAP8[$178>>0]|0;
                 $187 = $186&255;
                 $188 = ($184|0)<($187|0);
                 if ($188) {
                  $c$0102 = $184;
                 } else {
                  $190 = $186;$p$8 = $178;
                  break;
                 }
                }
               } else {
                $190 = $179;$p$8 = $178;
               }
               break;
              }
              default: {
               $190 = $177;$p$8 = $p$7;
              }
              }
             } while(0);
             $189 = $190&255;
             $191 = (($189) + 1)|0;
             $192 = (($scanset) + ($191)|0);
             HEAP8[$192>>0] = $$pre$phi184Z2D;
             $193 = ((($p$8)) + 1|0);
             $p$7 = $193;
            }
           }
          } while(0);
          $194 = (($width$1) + 1)|0;
          $195 = $160 ? $194 : 31;
          $196 = ($$size$0|0)==(1);
          $197 = ($alloc$0|0)!=(0);
          L89: do {
           if ($196) {
            if ($197) {
             $198 = $195 << 2;
             $199 = (_malloc($198)|0);
             $200 = ($199|0)==(0|0);
             if ($200) {
              $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = $199;
              label = 154;
              break L6;
             } else {
              $wcs$2 = $199;
             }
            } else {
             $wcs$2 = $dest$0;
            }
            HEAP32[$st>>2] = 0;
            HEAP32[$13>>2] = 0;
            $i$0$ph = 0;$k$0$ph = $195;$wcs$3$ph = $wcs$2;
            L95: while(1) {
             $201 = ($wcs$3$ph|0)==(0|0);
             $i$0$ph22 = $i$0$ph;
             while(1) {
              L99: while(1) {
               $202 = HEAP32[$7>>2]|0;
               $203 = HEAP32[$8>>2]|0;
               $204 = ($202>>>0)<($203>>>0);
               if ($204) {
                $205 = ((($202)) + 1|0);
                HEAP32[$7>>2] = $205;
                $206 = HEAP8[$202>>0]|0;
                $207 = $206&255;
                $210 = $207;
               } else {
                $208 = (___shgetc($f)|0);
                $210 = $208;
               }
               $209 = (($210) + 1)|0;
               $211 = (($scanset) + ($209)|0);
               $212 = HEAP8[$211>>0]|0;
               $213 = ($212<<24>>24)==(0);
               if ($213) {
                $i$0$ph22$lcssa = $i$0$ph22;$wcs$3$ph$lcssa = $wcs$3$ph;
                break L95;
               }
               $214 = $210&255;
               HEAP8[$0>>0] = $214;
               $215 = (_mbrtowc($wc,$0,1,$st)|0);
               switch ($215|0) {
               case -1:  {
                $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = $wcs$3$ph;
                label = 154;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L99;
               }
               }
              }
              if ($201) {
               $i$1 = $i$0$ph22;
              } else {
               $216 = HEAP32[$wc>>2]|0;
               $217 = (($i$0$ph22) + 1)|0;
               $218 = (($wcs$3$ph) + ($i$0$ph22<<2)|0);
               HEAP32[$218>>2] = $216;
               $i$1 = $217;
              }
              $219 = ($i$1|0)==($k$0$ph|0);
              $or$cond = $197 & $219;
              if ($or$cond) {
               break;
              } else {
               $i$0$ph22 = $i$1;
              }
             }
             $factor = $k$0$ph << 1;
             $220 = $factor | 1;
             $221 = $220 << 2;
             $222 = (_realloc($wcs$3$ph,$221)|0);
             $223 = ($222|0)==(0|0);
             if ($223) {
              $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = $wcs$3$ph;
              label = 154;
              break L6;
             } else {
              $i$0$ph$phi = $k$0$ph;$k$0$ph = $220;$wcs$3$ph = $222;$i$0$ph = $i$0$ph$phi;
             }
            }
            $224 = (_mbsinit($st)|0);
            $225 = ($224|0)==(0);
            if ($225) {
             $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = $wcs$3$ph$lcssa;
             label = 154;
             break L6;
            } else {
             $i$4 = $i$0$ph22$lcssa;$s$4 = 0;$wcs$5 = $wcs$3$ph$lcssa;
            }
           } else {
            if ($197) {
             $226 = (_malloc($195)|0);
             $227 = ($226|0)==(0|0);
             if ($227) {
              $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = 0;
              label = 154;
              break L6;
             } else {
              $i$2$ph = 0;$k$1$ph = $195;$s$2$ph = $226;
             }
             while(1) {
              $i$2 = $i$2$ph;
              while(1) {
               $228 = HEAP32[$7>>2]|0;
               $229 = HEAP32[$8>>2]|0;
               $230 = ($228>>>0)<($229>>>0);
               if ($230) {
                $231 = ((($228)) + 1|0);
                HEAP32[$7>>2] = $231;
                $232 = HEAP8[$228>>0]|0;
                $233 = $232&255;
                $236 = $233;
               } else {
                $234 = (___shgetc($f)|0);
                $236 = $234;
               }
               $235 = (($236) + 1)|0;
               $237 = (($scanset) + ($235)|0);
               $238 = HEAP8[$237>>0]|0;
               $239 = ($238<<24>>24)==(0);
               if ($239) {
                $i$4 = $i$2;$s$4 = $s$2$ph;$wcs$5 = 0;
                break L89;
               }
               $240 = $236&255;
               $241 = (($i$2) + 1)|0;
               $242 = (($s$2$ph) + ($i$2)|0);
               HEAP8[$242>>0] = $240;
               $243 = ($241|0)==($k$1$ph|0);
               if ($243) {
                break;
               } else {
                $i$2 = $241;
               }
              }
              $factor18 = $k$1$ph << 1;
              $244 = $factor18 | 1;
              $245 = (_realloc($s$2$ph,$244)|0);
              $246 = ($245|0)==(0|0);
              if ($246) {
               $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = $s$2$ph;$wcs$8 = 0;
               label = 154;
               break L6;
              } else {
               $i$2$ph$phi = $k$1$ph;$k$1$ph = $244;$s$2$ph = $245;$i$2$ph = $i$2$ph$phi;
              }
             }
            }
            $247 = ($dest$0|0)==(0|0);
            if ($247) {
             $265 = $156;
             while(1) {
              $263 = HEAP32[$7>>2]|0;
              $264 = ($263>>>0)<($265>>>0);
              if ($264) {
               $266 = ((($263)) + 1|0);
               HEAP32[$7>>2] = $266;
               $267 = HEAP8[$263>>0]|0;
               $268 = $267&255;
               $271 = $268;
              } else {
               $269 = (___shgetc($f)|0);
               $271 = $269;
              }
              $270 = (($271) + 1)|0;
              $272 = (($scanset) + ($270)|0);
              $273 = HEAP8[$272>>0]|0;
              $274 = ($273<<24>>24)==(0);
              if ($274) {
               $i$4 = 0;$s$4 = 0;$wcs$5 = 0;
               break L89;
              }
              $$pre178 = HEAP32[$8>>2]|0;
              $265 = $$pre178;
             }
            } else {
             $250 = $156;$i$3 = 0;
             while(1) {
              $248 = HEAP32[$7>>2]|0;
              $249 = ($248>>>0)<($250>>>0);
              if ($249) {
               $251 = ((($248)) + 1|0);
               HEAP32[$7>>2] = $251;
               $252 = HEAP8[$248>>0]|0;
               $253 = $252&255;
               $256 = $253;
              } else {
               $254 = (___shgetc($f)|0);
               $256 = $254;
              }
              $255 = (($256) + 1)|0;
              $257 = (($scanset) + ($255)|0);
              $258 = HEAP8[$257>>0]|0;
              $259 = ($258<<24>>24)==(0);
              if ($259) {
               $i$4 = $i$3;$s$4 = $dest$0;$wcs$5 = 0;
               break L89;
              }
              $260 = $256&255;
              $261 = (($i$3) + 1)|0;
              $262 = (($dest$0) + ($i$3)|0);
              HEAP8[$262>>0] = $260;
              $$pre176 = HEAP32[$8>>2]|0;
              $250 = $$pre176;$i$3 = $261;
             }
            }
           }
          } while(0);
          $275 = HEAP32[$8>>2]|0;
          $276 = ($275|0)==(0|0);
          if ($276) {
           $$pre180 = HEAP32[$7>>2]|0;
           $283 = $$pre180;
          } else {
           $277 = HEAP32[$7>>2]|0;
           $278 = ((($277)) + -1|0);
           HEAP32[$7>>2] = $278;
           $279 = $278;
           $283 = $279;
          }
          $280 = HEAP32[$9>>2]|0;
          $281 = HEAP32[$10>>2]|0;
          $282 = (($283) - ($281))|0;
          $284 = (($282) + ($280))|0;
          $285 = ($284|0)==(0);
          if ($285) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0107;$s$9 = $s$4;$wcs$10 = $wcs$5;
           break L6;
          }
          $$not = $160 ^ 1;
          $286 = ($284|0)==($width$1|0);
          $or$cond10 = $286 | $$not;
          if (!($or$cond10)) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0107;$s$9 = $s$4;$wcs$10 = $wcs$5;
           break L6;
          }
          do {
           if ($197) {
            if ($196) {
             HEAP32[$dest$0>>2] = $wcs$5;
             break;
            } else {
             HEAP32[$dest$0>>2] = $s$4;
             break;
            }
           }
          } while(0);
          if ($160) {
           $p$10 = $p$9;$s$5 = $s$4;$wcs$6 = $wcs$5;
          } else {
           $287 = ($wcs$5|0)==(0|0);
           if (!($287)) {
            $288 = (($wcs$5) + ($i$4<<2)|0);
            HEAP32[$288>>2] = 0;
           }
           $289 = ($s$4|0)==(0|0);
           if ($289) {
            $p$10 = $p$9;$s$5 = 0;$wcs$6 = $wcs$5;
            break L68;
           }
           $290 = (($s$4) + ($i$4)|0);
           HEAP8[$290>>0] = 0;
           $p$10 = $p$9;$s$5 = $s$4;$wcs$6 = $wcs$5;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $base$0 = 16;
          label = 136;
          break;
         }
         case 111:  {
          $base$0 = 8;
          label = 136;
          break;
         }
         case 117: case 100:  {
          $base$0 = 10;
          label = 136;
          break;
         }
         case 105:  {
          $base$0 = 0;
          label = 136;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $308 = (+___floatscan($f,$$size$0,0));
          $309 = HEAP32[$9>>2]|0;
          $310 = HEAP32[$7>>2]|0;
          $311 = HEAP32[$10>>2]|0;
          $312 = (($311) - ($310))|0;
          $313 = ($309|0)==($312|0);
          if ($313) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0107;$s$9 = $s$1;$wcs$10 = $wcs$1;
           break L6;
          }
          $314 = ($dest$0|0)==(0|0);
          if ($314) {
           $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case 0:  {
            $315 = $308;
            HEAPF32[$dest$0>>2] = $315;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L68;
            break;
           }
           case 1:  {
            HEAPF64[$dest$0>>3] = $308;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L68;
            break;
           }
           case 2:  {
            HEAPF64[$dest$0>>3] = $308;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L68;
            break;
           }
           default: {
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L68;
           }
           }
          }
          break;
         }
         default: {
          $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
         }
         }
        } while(0);
        L169: do {
         if ((label|0) == 136) {
          label = 0;
          $291 = (___intscan($f,$base$0,0,-1,-1)|0);
          $292 = tempRet0;
          $293 = HEAP32[$9>>2]|0;
          $294 = HEAP32[$7>>2]|0;
          $295 = HEAP32[$10>>2]|0;
          $296 = (($295) - ($294))|0;
          $297 = ($293|0)==($296|0);
          if ($297) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0107;$s$9 = $s$1;$wcs$10 = $wcs$1;
           break L6;
          }
          $298 = ($$|0)==(112);
          $299 = ($dest$0|0)!=(0|0);
          $or$cond3 = $299 & $298;
          if ($or$cond3) {
           $300 = $291;
           HEAP32[$dest$0>>2] = $300;
           $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
           break;
          }
          $301 = ($dest$0|0)==(0|0);
          if ($301) {
           $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case -2:  {
            $302 = $291&255;
            HEAP8[$dest$0>>0] = $302;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           case -1:  {
            $303 = $291&65535;
            HEAP16[$dest$0>>1] = $303;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           case 0:  {
            HEAP32[$dest$0>>2] = $291;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           case 1:  {
            HEAP32[$dest$0>>2] = $291;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           case 3:  {
            $304 = $dest$0;
            $305 = $304;
            HEAP32[$305>>2] = $291;
            $306 = (($304) + 4)|0;
            $307 = $306;
            HEAP32[$307>>2] = $292;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           default: {
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
           }
           }
          }
         }
        } while(0);
        $316 = HEAP32[$9>>2]|0;
        $317 = HEAP32[$7>>2]|0;
        $318 = HEAP32[$10>>2]|0;
        $319 = (($316) + ($pos$1))|0;
        $320 = (($319) + ($317))|0;
        $321 = (($320) - ($318))|0;
        $not$ = ($dest$0|0)!=(0|0);
        $322 = $not$&1;
        $matches$0$ = (($322) + ($matches$0107))|0;
        $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $321;$s$6 = $s$5;$wcs$7 = $wcs$6;
        break L8;
       }
      } while(0);
      $50 = $47&1;
      $51 = (($p$0110) + ($50)|0);
      ___shlim($f,0);
      $52 = HEAP32[$7>>2]|0;
      $53 = HEAP32[$8>>2]|0;
      $54 = ($52>>>0)<($53>>>0);
      if ($54) {
       $55 = ((($52)) + 1|0);
       HEAP32[$7>>2] = $55;
       $56 = HEAP8[$52>>0]|0;
       $57 = $56&255;
       $61 = $57;
      } else {
       $58 = (___shgetc($f)|0);
       $61 = $58;
      }
      $59 = HEAP8[$51>>0]|0;
      $60 = $59&255;
      $62 = ($61|0)==($60|0);
      if (!($62)) {
       $$lcssa386 = $61;$matches$0107$lcssa = $matches$0107;$s$0105$lcssa = $s$0105;$wcs$0106$lcssa = $wcs$0106;
       label = 22;
       break L6;
      }
      $69 = (($pos$0111) + 1)|0;
      $matches$1 = $matches$0107;$p$11 = $51;$pos$2 = $69;$s$6 = $s$0105;$wcs$7 = $wcs$0106;
     } else {
      $p$1 = $p$0110;
      while(1) {
       $20 = ((($p$1)) + 1|0);
       $21 = HEAP8[$20>>0]|0;
       $22 = $21&255;
       $23 = (_isspace($22)|0);
       $24 = ($23|0)==(0);
       if ($24) {
        $p$1$lcssa = $p$1;
        break;
       } else {
        $p$1 = $20;
       }
      }
      ___shlim($f,0);
      while(1) {
       $25 = HEAP32[$7>>2]|0;
       $26 = HEAP32[$8>>2]|0;
       $27 = ($25>>>0)<($26>>>0);
       if ($27) {
        $28 = ((($25)) + 1|0);
        HEAP32[$7>>2] = $28;
        $29 = HEAP8[$25>>0]|0;
        $30 = $29&255;
        $32 = $30;
       } else {
        $31 = (___shgetc($f)|0);
        $32 = $31;
       }
       $33 = (_isspace($32)|0);
       $34 = ($33|0)==(0);
       if ($34) {
        break;
       }
      }
      $35 = HEAP32[$8>>2]|0;
      $36 = ($35|0)==(0|0);
      if ($36) {
       $$pre = HEAP32[$7>>2]|0;
       $44 = $$pre;
      } else {
       $37 = HEAP32[$7>>2]|0;
       $38 = ((($37)) + -1|0);
       HEAP32[$7>>2] = $38;
       $39 = $38;
       $44 = $39;
      }
      $40 = HEAP32[$9>>2]|0;
      $41 = HEAP32[$10>>2]|0;
      $42 = (($40) + ($pos$0111))|0;
      $43 = (($42) + ($44))|0;
      $45 = (($43) - ($41))|0;
      $matches$1 = $matches$0107;$p$11 = $p$1$lcssa;$pos$2 = $45;$s$6 = $s$0105;$wcs$7 = $wcs$0106;
     }
    } while(0);
    $323 = ((($p$11)) + 1|0);
    $324 = HEAP8[$323>>0]|0;
    $325 = ($324<<24>>24)==(0);
    if ($325) {
     $matches$3 = $matches$1;
     break L4;
    } else {
     $17 = $324;$matches$0107 = $matches$1;$p$0110 = $323;$pos$0111 = $pos$2;$s$0105 = $s$6;$wcs$0106 = $wcs$7;
    }
   }
   if ((label|0) == 22) {
    $63 = HEAP32[$8>>2]|0;
    $64 = ($63|0)==(0|0);
    if (!($64)) {
     $65 = HEAP32[$7>>2]|0;
     $66 = ((($65)) + -1|0);
     HEAP32[$7>>2] = $66;
    }
    $67 = ($$lcssa386|0)>(-1);
    $68 = ($matches$0107$lcssa|0)!=(0);
    $or$cond5 = $68 | $67;
    if ($or$cond5) {
     $matches$3 = $matches$0107$lcssa;
     break;
    } else {
     $alloc$1 = 0;$s$8 = $s$0105$lcssa;$wcs$9 = $wcs$0106$lcssa;
     label = 155;
    }
   }
   else if ((label|0) == 154) {
    $$old4 = ($matches$0107371|0)==(0);
    if ($$old4) {
     $alloc$1 = $alloc$0402;$s$8 = $s$7;$wcs$9 = $wcs$8;
     label = 155;
    } else {
     $alloc$2 = $alloc$0402;$matches$2 = $matches$0107371;$s$9 = $s$7;$wcs$10 = $wcs$8;
    }
   }
   if ((label|0) == 155) {
    $alloc$2 = $alloc$1;$matches$2 = -1;$s$9 = $s$8;$wcs$10 = $wcs$9;
   }
   $326 = ($alloc$2|0)==(0);
   if ($326) {
    $matches$3 = $matches$2;
   } else {
    _free($s$9);
    _free($wcs$10);
    $matches$3 = $matches$2;
   }
  }
 } while(0);
 $328 = ($327|0)==(0);
 if (!($328)) {
  ___unlockfile($f);
 }
 STACKTOP = sp;return ($matches$3|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$01$2 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[1128>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[1128>>2]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((1076)|0));
   $$01$2 = HEAP32[(1072)>>2]|0;
   $11 = ($$01$2|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$01$2;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $23 = $15;
     } else {
      $23 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $24 = ($23|0)==(0);
     if (!($24)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((1076)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 32|0);
 HEAP32[$0>>2] = 60;
 $1 = ((($f)) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ((($f)) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = ((($f)) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function _fgets($s,$n,$f) {
 $s = $s|0;
 $n = $n|0;
 $f = $f|0;
 var $$0 = 0, $$047 = 0, $$05 = 0, $$lcssa13 = 0, $$old2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $p$0 = 0;
 var $p$1 = 0, $sext$mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $3 = (___lockfile($f)|0);
  $12 = $3;
 } else {
  $12 = 0;
 }
 $4 = (($n) + -1)|0;
 $5 = ($n|0)<(2);
 if ($5) {
  $6 = ((($f)) + 74|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = (($8) + 255)|0;
  $10 = $9 | $8;
  $11 = $10&255;
  HEAP8[$6>>0] = $11;
  $13 = ($12|0)==(0);
  if (!($13)) {
   ___unlockfile($f);
  }
  $14 = ($4|0)==(0);
  if ($14) {
   HEAP8[$s>>0] = 0;
   $$0 = $s;
  } else {
   $$0 = 0;
  }
 } else {
  $$old2 = ($4|0)==(0);
  L11: do {
   if ($$old2) {
    $p$1 = $s;
    label = 17;
   } else {
    $15 = ((($f)) + 4|0);
    $16 = ((($f)) + 8|0);
    $$05 = $4;$p$0 = $s;
    while(1) {
     $17 = HEAP32[$15>>2]|0;
     $18 = HEAP32[$16>>2]|0;
     $19 = $17;
     $20 = (($18) - ($19))|0;
     $21 = (_memchr($17,10,$20)|0);
     $22 = ($21|0)==(0|0);
     $23 = $21;
     $24 = (1 - ($19))|0;
     $25 = (($24) + ($23))|0;
     $26 = $22 ? $20 : $25;
     $27 = ($26>>>0)<($$05>>>0);
     $28 = $27 ? $26 : $$05;
     _memcpy(($p$0|0),($17|0),($28|0))|0;
     $29 = HEAP32[$15>>2]|0;
     $30 = (($29) + ($28)|0);
     HEAP32[$15>>2] = $30;
     $31 = (($p$0) + ($28)|0);
     $32 = (($$05) - ($28))|0;
     $or$cond = $22 & $27;
     if (!($or$cond)) {
      $p$1 = $31;
      label = 17;
      break L11;
     }
     $33 = HEAP32[$16>>2]|0;
     $34 = ($30>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($30)) + 1|0);
      HEAP32[$15>>2] = $35;
      $36 = HEAP8[$30>>0]|0;
      $37 = $36&255;
      $46 = $37;
     } else {
      $38 = (___uflow($f)|0);
      $39 = ($38|0)<(0);
      if ($39) {
       $$lcssa13 = $31;
       break;
      } else {
       $46 = $38;
      }
     }
     $44 = (($32) + -1)|0;
     $45 = $46&255;
     $47 = ((($31)) + 1|0);
     HEAP8[$31>>0] = $45;
     $sext$mask = $46 & 255;
     $48 = ($sext$mask|0)!=(10);
     $49 = ($44|0)!=(0);
     $or$cond3 = $49 & $48;
     if ($or$cond3) {
      $$05 = $44;$p$0 = $47;
     } else {
      $p$1 = $47;
      label = 17;
      break L11;
     }
    }
    $40 = ($$lcssa13|0)==($s|0);
    if ($40) {
     $$047 = 0;
    } else {
     $41 = HEAP32[$f>>2]|0;
     $42 = $41 & 16;
     $43 = ($42|0)==(0);
     if ($43) {
      $$047 = 0;
     } else {
      $p$1 = $$lcssa13;
      label = 17;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   $50 = ($s|0)==(0|0);
   if ($50) {
    $$047 = 0;
   } else {
    HEAP8[$p$1>>0] = 0;
    $$047 = $s;
   }
  }
  $51 = ($12|0)==(0);
  if ($51) {
   $$0 = $$047;
  } else {
   ___unlockfile($f);
   $$0 = $$047;
  }
 }
 return ($$0|0);
}
function ___towcase($wc,$lower) {
 $wc = $wc|0;
 $lower = $lower|0;
 var $$2 = 0, $$lcssa = 0, $$lcssa53 = 0, $$neg20 = 0, $$neg20$lcssa = 0, $$neg23 = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$029 = 0, $i$128 = 0, $i$128$lcssa = 0, $or$cond = 0, $or$cond10 = 0, $or$cond12 = 0, $or$cond14 = 0, $or$cond16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $lower << 1;
 $1 = (($0) + -1)|0;
 $2 = (($lower) + -1)|0;
 $3 = (_iswalpha($wc)|0);
 $4 = ($3|0)==(0);
 $5 = (($wc) + -1536)|0;
 $6 = ($5>>>0)<(2560);
 $or$cond10 = $6 | $4;
 $7 = (($wc) + -11776)|0;
 $8 = ($7>>>0)<(30784);
 $or$cond12 = $8 | $or$cond10;
 $9 = (($wc) + -43008)|0;
 $10 = ($9>>>0)<(22272);
 $or$cond14 = $10 | $or$cond12;
 L1: do {
  if ($or$cond14) {
   $$2 = $wc;
  } else {
   $11 = ($lower|0)!=(0);
   $12 = (($wc) + -4256)|0;
   $13 = ($12>>>0)<(46);
   $or$cond16 = $11 & $13;
   if ($or$cond16) {
    $14 = ($wc|0)>(4293);
    if ($14) {
     switch ($wc|0) {
     case 4295: case 4301:  {
      break;
     }
     default: {
      $$2 = $wc;
      break L1;
     }
     }
    }
    $15 = (($wc) + 7264)|0;
    $$2 = $15;
    break;
   }
   $$not = $11 ^ 1;
   $16 = (($wc) + -11520)|0;
   $17 = ($16>>>0)<(38);
   $or$cond = $17 & $$not;
   if ($or$cond) {
    $18 = ($wc|0)>(11557);
    if ($18) {
     switch ($wc|0) {
     case 11559: case 11565:  {
      break;
     }
     default: {
      $$2 = $wc;
      break L1;
     }
     }
    }
    $19 = (($wc) + -7264)|0;
    $$2 = $19;
    break;
   } else {
    $i$029 = 0;
   }
   while(1) {
    $26 = (((2700 + ($i$029<<2)|0)) + 3|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = (2700 + ($i$029<<2)|0);
    $29 = HEAP16[$28>>1]|0;
    $30 = $29&65535;
    $31 = (((2700 + ($i$029<<2)|0)) + 2|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32 << 24 >> 24;
    $34 = $33 & $2;
    $$neg20 = (($wc) - ($30))|0;
    $35 = (($$neg20) - ($34))|0;
    $36 = $27&255;
    $37 = ($35>>>0)<($36>>>0);
    $20 = (($i$029) + 1)|0;
    if ($37) {
     $$lcssa = $32;$$lcssa53 = $33;$$neg20$lcssa = $$neg20;
     label = 13;
     break;
    }
    $21 = ($20|0)==(61);
    if ($21) {
     break;
    } else {
     $i$029 = $20;
    }
   }
   if ((label|0) == 13) {
    $38 = ($$lcssa<<24>>24)==(1);
    if ($38) {
     $39 = (($lower) + ($wc))|0;
     $40 = $$neg20$lcssa & 1;
     $41 = (($39) - ($40))|0;
     $$2 = $41;
     break;
    } else {
     $42 = Math_imul($$lcssa53, $1)|0;
     $43 = (($42) + ($wc))|0;
     $$2 = $43;
     break;
    }
   }
   $22 = (1 - ($lower))|0;
   $23 = (2208 + ($22<<1)|0);
   $24 = HEAP16[$23>>1]|0;
   $25 = ($24<<16>>16)==(0);
   L23: do {
    if (!($25)) {
     $45 = $24;$i$128 = 0;
     while(1) {
      $44 = $45&65535;
      $46 = ($44|0)==($wc|0);
      if ($46) {
       $i$128$lcssa = $i$128;
       break;
      }
      $50 = (($i$128) + 1)|0;
      $51 = ((2208 + ($50<<2)|0) + ($22<<1)|0);
      $52 = HEAP16[$51>>1]|0;
      $53 = ($52<<16>>16)==(0);
      if ($53) {
       break L23;
      } else {
       $45 = $52;$i$128 = $50;
      }
     }
     $47 = ((2208 + ($i$128$lcssa<<2)|0) + ($lower<<1)|0);
     $48 = HEAP16[$47>>1]|0;
     $49 = $48&65535;
     $$2 = $49;
     break L1;
    }
   } while(0);
   $54 = ($lower*40)|0;
   $$neg23 = (($wc) + -66600)|0;
   $55 = (($$neg23) + ($54))|0;
   $56 = ($55>>>0)<(40);
   if ($56) {
    $57 = (($wc) + -40)|0;
    $58 = ($lower*80)|0;
    $59 = (($57) + ($58))|0;
    $$2 = $59;
   } else {
    $$2 = $wc;
   }
  }
 } while(0);
 return ($$2|0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $x$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = ((($1)) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 switch ($9|0) {
 case 43: case 45:  {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($12)) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $22 & $21;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = ((($25)) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
  break;
 }
 default: {
  $c$0 = $9;$neg$0 = 0;
 }
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $98 = -2147483648;$99 = 0;
  } else {
   $31 = HEAP32[$0>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$0>>2] = $32;
   $98 = -2147483648;$99 = 0;
  }
 } else {
  $c$112 = $c$0;$x$013 = 0;
  while(1) {
   $33 = ($x$013*10)|0;
   $34 = (($c$112) + -48)|0;
   $35 = (($34) + ($33))|0;
   $36 = HEAP32[$0>>2]|0;
   $37 = HEAP32[$2>>2]|0;
   $38 = ($36>>>0)<($37>>>0);
   if ($38) {
    $39 = ((($36)) + 1|0);
    HEAP32[$0>>2] = $39;
    $40 = HEAP8[$36>>0]|0;
    $41 = $40&255;
    $c$1$be = $41;
   } else {
    $42 = (___shgetc($f)|0);
    $c$1$be = $42;
   }
   $43 = (($c$1$be) + -48)|0;
   $44 = ($43>>>0)<(10);
   $45 = ($35|0)<(214748364);
   $46 = $44 & $45;
   if ($46) {
    $c$112 = $c$1$be;$x$013 = $35;
   } else {
    $$lcssa22 = $35;$c$1$be$lcssa = $c$1$be;
    break;
   }
  }
  $47 = ($$lcssa22|0)<(0);
  $48 = $47 << 31 >> 31;
  $49 = (($c$1$be$lcssa) + -48)|0;
  $50 = ($49>>>0)<(10);
  if ($50) {
   $53 = $$lcssa22;$54 = $48;$c$27 = $c$1$be$lcssa;
   while(1) {
    $55 = (___muldi3(($53|0),($54|0),10,0)|0);
    $56 = tempRet0;
    $57 = ($c$27|0)<(0);
    $58 = $57 << 31 >> 31;
    $59 = (_i64Add(($c$27|0),($58|0),-48,-1)|0);
    $60 = tempRet0;
    $61 = (_i64Add(($59|0),($60|0),($55|0),($56|0))|0);
    $62 = tempRet0;
    $63 = HEAP32[$0>>2]|0;
    $64 = HEAP32[$2>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$0>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $c$2$be = $68;
    } else {
     $69 = (___shgetc($f)|0);
     $c$2$be = $69;
    }
    $70 = (($c$2$be) + -48)|0;
    $71 = ($70>>>0)<(10);
    $72 = ($62|0)<(21474836);
    $73 = ($61>>>0)<(2061584302);
    $74 = ($62|0)==(21474836);
    $75 = $74 & $73;
    $76 = $72 | $75;
    $77 = $71 & $76;
    if ($77) {
     $53 = $61;$54 = $62;$c$27 = $c$2$be;
    } else {
     $92 = $61;$93 = $62;$c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $92 = $$lcssa22;$93 = $48;$c$2$lcssa = $c$1$be$lcssa;
  }
  $51 = (($c$2$lcssa) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   while(1) {
    $78 = HEAP32[$0>>2]|0;
    $79 = HEAP32[$2>>2]|0;
    $80 = ($78>>>0)<($79>>>0);
    if ($80) {
     $81 = ((($78)) + 1|0);
     HEAP32[$0>>2] = $81;
     $82 = HEAP8[$78>>0]|0;
     $83 = $82&255;
     $c$3$be = $83;
    } else {
     $84 = (___shgetc($f)|0);
     $c$3$be = $84;
    }
    $85 = (($c$3$be) + -48)|0;
    $86 = ($85>>>0)<(10);
    if (!($86)) {
     break;
    }
   }
  }
  $87 = HEAP32[$2>>2]|0;
  $88 = ($87|0)==(0|0);
  if (!($88)) {
   $89 = HEAP32[$0>>2]|0;
   $90 = ((($89)) + -1|0);
   HEAP32[$0>>2] = $90;
  }
  $91 = ($neg$0|0)!=(0);
  $94 = (_i64Subtract(0,0,($92|0),($93|0))|0);
  $95 = tempRet0;
  $96 = $91 ? $94 : $92;
  $97 = $91 ? $95 : $93;
  $98 = $97;$99 = $96;
 }
 tempRet0 = ($98);
 return ($99|0);
}
function _pat_next($pat,$m,$step,$flags) {
 $pat = $pat|0;
 $m = $m|0;
 $step = $step|0;
 $flags = $flags|0;
 var $$ = 0, $$0 = 0, $$02 = 0, $$1 = 0, $$10 = 0, $$11 = 0, $$2 = 0, $$6 = 0, $$k$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $esc$0 = 0, $k$0 = 0, $k$1$ph = 0, $k$118 = 0, $k$2$lcssa = 0, $k$2$ph = 0, $k$213 = 0, $k$3 = 0, $k$4 = 0;
 var $not$ = 0, $or$cond = 0, $or$cond5 = 0, $storemerge = 0, $wc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wc = sp;
 $0 = ($m|0)==(0);
 L1: do {
  if ($0) {
   label = 3;
  } else {
   $1 = HEAP8[$pat>>0]|0;
   $2 = ($1<<24>>24)==(0);
   if ($2) {
    label = 3;
   } else {
    HEAP32[$step>>2] = 1;
    $3 = HEAP8[$pat>>0]|0;
    switch ($3<<24>>24) {
    case 42:  {
     $$2 = -5;
     break L1;
     break;
    }
    case 92:  {
     $4 = ((($pat)) + 1|0);
     $5 = HEAP8[$4>>0]|0;
     $6 = ($5<<24>>24)!=(0);
     $7 = $flags & 2;
     $8 = ($7|0)==(0);
     $or$cond = $8 & $6;
     if ($or$cond) {
      HEAP32[$step>>2] = 2;
      $$pre = HEAP8[$4>>0]|0;
      $$02 = $4;$53 = $$pre;$esc$0 = 1;
      label = 30;
     } else {
      $60 = 92;
     }
     break;
    }
    case 91:  {
     $9 = ($m>>>0)>(1);
     L8: do {
      if ($9) {
       $10 = ((($pat)) + 1|0);
       $11 = HEAP8[$10>>0]|0;
       switch ($11<<24>>24) {
       case 33: case 94:  {
        break;
       }
       default: {
        $k$0 = 1;
        break L8;
       }
       }
       $k$0 = 2;
      } else {
       $k$0 = 1;
      }
     } while(0);
     $12 = ($k$0>>>0)<($m>>>0);
     if ($12) {
      $13 = (($pat) + ($k$0)|0);
      $14 = HEAP8[$13>>0]|0;
      $15 = ($14<<24>>24)==(93);
      $16 = $15&1;
      $$k$0 = (($16) + ($k$0))|0;
      $k$1$ph = $$k$0;
     } else {
      $k$1$ph = $k$0;
     }
     $17 = ($k$1$ph>>>0)<($m>>>0);
     L15: do {
      if ($17) {
       $k$118 = $k$1$ph;
       while(1) {
        $18 = (($pat) + ($k$118)|0);
        $19 = HEAP8[$18>>0]|0;
        switch ($19<<24>>24) {
        case 93: case 0:  {
         $k$4 = $k$118;
         label = 26;
         break L15;
         break;
        }
        default: {
        }
        }
        $20 = (($k$118) + 1)|0;
        $21 = ($20>>>0)<($m>>>0);
        L19: do {
         if ($21) {
          $22 = (($pat) + ($20)|0);
          $23 = HEAP8[$22>>0]|0;
          $24 = ($23<<24>>24)!=(0);
          $25 = ($19<<24>>24)==(91);
          $or$cond5 = $25 & $24;
          if ($or$cond5) {
           switch ($23<<24>>24) {
           case 61: case 46: case 58:  {
            break;
           }
           default: {
            $k$3 = $k$118;
            break L19;
           }
           }
           $26 = (($k$118) + 2)|0;
           $27 = ($26>>>0)<($m>>>0);
           if ($27) {
            $28 = (($pat) + ($26)|0);
            $29 = HEAP8[$28>>0]|0;
            $30 = ($29<<24>>24)==(0);
            $31 = (($k$118) + 3)|0;
            $$ = $30 ? $26 : $31;
            $k$2$ph = $$;
           } else {
            $k$2$ph = $26;
           }
           $32 = ($k$2$ph>>>0)<($m>>>0);
           L26: do {
            if ($32) {
             $k$213 = $k$2$ph;
             while(1) {
              $33 = (($pat) + ($k$213)|0);
              $34 = HEAP8[$33>>0]|0;
              $35 = ($34<<24>>24)==(0);
              if ($35) {
               $k$2$lcssa = $k$213;
               break L26;
              }
              $36 = (($k$213) + -1)|0;
              $37 = (($pat) + ($36)|0);
              $38 = HEAP8[$37>>0]|0;
              $39 = ($34<<24>>24)!=(93);
              $not$ = ($38<<24>>24)!=($23<<24>>24);
              $$6 = $39 | $not$;
              if (!($$6)) {
               $k$2$lcssa = $k$213;
               break L26;
              }
              $40 = (($k$213) + 1)|0;
              $41 = ($40>>>0)<($m>>>0);
              if ($41) {
               $k$213 = $40;
              } else {
               $k$2$lcssa = $40;
               break;
              }
             }
            } else {
             $k$2$lcssa = $k$2$ph;
            }
           } while(0);
           $42 = ($k$2$lcssa|0)==($m|0);
           if ($42) {
            $$0 = 91;$storemerge = 1;
            break L15;
           }
           $43 = (($pat) + ($k$2$lcssa)|0);
           $44 = HEAP8[$43>>0]|0;
           $45 = ($44<<24>>24)==(0);
           if ($45) {
            $k$4 = $k$2$lcssa;
            label = 26;
            break L15;
           } else {
            $k$3 = $k$2$lcssa;
           }
          } else {
           $k$3 = $k$118;
          }
         } else {
          $k$3 = $k$118;
         }
        } while(0);
        $46 = (($k$3) + 1)|0;
        $47 = ($46>>>0)<($m>>>0);
        if ($47) {
         $k$118 = $46;
        } else {
         $k$4 = $46;
         label = 26;
         break L15;
        }
       }
      } else {
       $k$4 = $k$1$ph;
       label = 26;
      }
     } while(0);
     if ((label|0) == 26) {
      $48 = ($k$4|0)==($m|0);
      if ($48) {
       $$0 = 91;$storemerge = 1;
      } else {
       $49 = (($pat) + ($k$4)|0);
       $50 = HEAP8[$49>>0]|0;
       $51 = ($50<<24>>24)==(0);
       $52 = (($k$4) + 1)|0;
       $$10 = $51 ? 1 : $52;
       $$11 = $51 ? 91 : -3;
       $$0 = $$11;$storemerge = $$10;
      }
     }
     HEAP32[$step>>2] = $storemerge;
     $$2 = $$0;
     break L1;
     break;
    }
    case 63:  {
     $$2 = -4;
     break L1;
     break;
    }
    default: {
     $$02 = $pat;$53 = $3;$esc$0 = 0;
     label = 30;
    }
    }
    if ((label|0) == 30) {
     $54 = ($53<<24>>24)<(0);
     if ($54) {
      $55 = (_mbtowc($wc,$$02,$m)|0);
      $56 = ($55|0)<(0);
      if ($56) {
       HEAP32[$step>>2] = 0;
       $$1 = -2;
      } else {
       $57 = (($55) + ($esc$0))|0;
       HEAP32[$step>>2] = $57;
       $58 = HEAP32[$wc>>2]|0;
       $$1 = $58;
      }
      $$2 = $$1;
      break;
     } else {
      $60 = $53;
     }
    }
    $59 = $60 << 24 >> 24;
    $$2 = $59;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  HEAP32[$step>>2] = 0;
  $$2 = 0;
 }
 STACKTOP = sp;return ($$2|0);
}
function _fnmatch_internal($pat,$m,$str,$n,$flags) {
 $pat = $pat|0;
 $m = $m|0;
 $str = $str|0;
 $n = $n|0;
 $flags = $flags|0;
 var $$0 = 0, $$01 = 0, $$01$lcssa183 = 0, $$02 = 0, $$02$lcssa181 = 0, $$03 = 0, $$03$lcssa179 = 0, $$06 = 0, $$06$lcssa177 = 0, $$1$ph49 = 0, $$14$ph48 = 0, $$1447$be = 0, $$1447144 = 0, $$25$pn = 0, $$3 = 0, $$lcssa = 0, $$lcssa187 = 0, $$lcssa26 = 0, $$lcssa29 = 0, $$phi$trans$insert = 0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond$146 = 0, $p$059 = 0, $pinc = 0, $ptail$0$lcssa = 0, $ptail$060 = 0;
 var $ptail$1 = 0, $s$0$lcssa = 0, $s$053 = 0, $s$1147 = 0, $s$1147$phi = 0, $s$2 = 0, $s$350 = 0, $s$4$lcssa = 0, $s$443 = 0, $sinc = 0, $tailcnt$0$lcssa = 0, $tailcnt$061 = 0, $tailcnt$1 = 0, $tailcnt$254 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pinc = sp + 4|0;
 $sinc = sp;
 $0 = $flags & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $$01 = $pat;$$02 = $n;$$03 = $str;$$06 = $m;
  label = 4;
 } else {
  $2 = HEAP8[$str>>0]|0;
  $3 = ($2<<24>>24)==(46);
  if ($3) {
   $4 = HEAP8[$pat>>0]|0;
   $5 = ($4<<24>>24)==(46);
   if ($5) {
    $$01 = $pat;$$02 = $n;$$03 = $str;$$06 = $m;
    label = 4;
   } else {
    $$0 = 1;
   }
  } else {
   $$01 = $pat;$$02 = $n;$$03 = $str;$$06 = $m;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   L5: while(1) {
    label = 0;
    $6 = (_pat_next($$01,$$06,$pinc,$flags)|0);
    switch ($6|0) {
    case -2:  {
     $$0 = 1;
     break L4;
     break;
    }
    case -5:  {
     $$01$lcssa183 = $$01;$$02$lcssa181 = $$02;$$03$lcssa179 = $$03;$$06$lcssa177 = $$06;
     break L5;
     break;
    }
    default: {
    }
    }
    $13 = (_str_next($$03,$$02,$sinc)|0);
    $14 = ($13|0)<(1);
    if ($14) {
     $$lcssa187 = $6;
     label = 8;
     break;
    }
    $16 = HEAP32[$sinc>>2]|0;
    $17 = (($$03) + ($16)|0);
    $18 = (($$02) - ($16))|0;
    switch ($6|0) {
    case -3:  {
     $19 = (_match_bracket($$01,$13)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      $$0 = 1;
      break L4;
     }
     break;
    }
    case -4:  {
     break;
    }
    default: {
     $21 = ($13|0)==($6|0);
     if (!($21)) {
      $$0 = 1;
      break L4;
     }
    }
    }
    $22 = HEAP32[$pinc>>2]|0;
    $23 = (($$01) + ($22)|0);
    $24 = (($$06) - ($22))|0;
    $$01 = $23;$$02 = $18;$$03 = $17;$$06 = $24;
    label = 4;
   }
   if ((label|0) == 8) {
    $not$ = ($$lcssa187|0)!=(0);
    $15 = $not$&1;
    $$0 = $15;
    break;
   }
   $7 = ((($$01$lcssa183)) + 1|0);
   $8 = (($$06$lcssa177) + -1)|0;
   $9 = (_strnlen($7,$8)|0);
   $10 = (($7) + ($9)|0);
   $11 = ($9|0)>(0);
   L16: do {
    if ($11) {
     $12 = $10;
     $p$059 = $7;$ptail$060 = $7;$tailcnt$061 = 0;
     while(1) {
      $25 = $p$059;
      $26 = (($12) - ($25))|0;
      $27 = (_pat_next($p$059,$26,$pinc,$flags)|0);
      switch ($27|0) {
      case -2:  {
       $$0 = 1;
       break L4;
       break;
      }
      case -5:  {
       $28 = ((($p$059)) + 1|0);
       $ptail$1 = $28;$tailcnt$1 = 0;
       break;
      }
      default: {
       $29 = (($tailcnt$061) + 1)|0;
       $ptail$1 = $ptail$060;$tailcnt$1 = $29;
      }
      }
      $30 = HEAP32[$pinc>>2]|0;
      $31 = (($p$059) + ($30)|0);
      $32 = ($31>>>0)<($10>>>0);
      if ($32) {
       $p$059 = $31;$ptail$060 = $ptail$1;$tailcnt$061 = $tailcnt$1;
      } else {
       $ptail$0$lcssa = $ptail$1;$tailcnt$0$lcssa = $tailcnt$1;
       break L16;
      }
     }
    } else {
     $ptail$0$lcssa = $7;$tailcnt$0$lcssa = 0;
    }
   } while(0);
   $33 = (_strnlen($$03$lcssa179,$$02$lcssa181)|0);
   $34 = (($$03$lcssa179) + ($33)|0);
   $35 = ($33>>>0)<($tailcnt$0$lcssa>>>0);
   if ($35) {
    $$0 = 1;
   } else {
    $36 = ($33|0)>(0);
    $37 = ($tailcnt$0$lcssa|0)!=(0);
    $38 = $36 & $37;
    if ($38) {
     $s$053 = $34;$tailcnt$254 = $tailcnt$0$lcssa;
     while(1) {
      $39 = ((($s$053)) + -1|0);
      $40 = HEAP8[$39>>0]|0;
      $41 = ($40<<24>>24)>(-1);
      if ($41) {
       $s$2 = $39;
      } else {
       $42 = ((($s$053)) + -1|0);
       $43 = $40 & -64;
       $44 = ($43<<24>>24)==(-128);
       $45 = ($42>>>0)>($$03$lcssa179>>>0);
       $or$cond$146 = $45 & $44;
       if ($or$cond$146) {
        $47 = $42;$s$1147 = $s$053;
        while(1) {
         $$phi$trans$insert = ((($s$1147)) + -2|0);
         $$pre = HEAP8[$$phi$trans$insert>>0]|0;
         $46 = ((($47)) + -1|0);
         $48 = $$pre & -64;
         $49 = ($48<<24>>24)==(-128);
         $50 = ($46>>>0)>($$03$lcssa179>>>0);
         $or$cond = $50 & $49;
         if ($or$cond) {
          $s$1147$phi = $47;$47 = $46;$s$1147 = $s$1147$phi;
         } else {
          $s$2 = $46;
          break;
         }
        }
       } else {
        $s$2 = $42;
       }
      }
      $51 = (($tailcnt$254) + -1)|0;
      $52 = ($s$2>>>0)>($$03$lcssa179>>>0);
      $53 = ($51|0)!=(0);
      $54 = $52 & $53;
      if ($54) {
       $s$053 = $s$2;$tailcnt$254 = $51;
      } else {
       $$lcssa29 = $53;$s$0$lcssa = $s$2;
       break;
      }
     }
    } else {
     $$lcssa29 = $37;$s$0$lcssa = $34;
    }
    if ($$lcssa29) {
     $$0 = 1;
    } else {
     $55 = $10;
     $56 = $ptail$0$lcssa;
     $57 = (($55) - ($56))|0;
     $58 = (_pat_next($ptail$0$lcssa,$57,$pinc,$flags)|0);
     $59 = HEAP32[$pinc>>2]|0;
     $60 = $34;
     $61 = $s$0$lcssa;
     $62 = (($60) - ($61))|0;
     $63 = (_str_next($s$0$lcssa,$62,$sinc)|0);
     $64 = ($63|0)<(1);
     L36: do {
      if ($64) {
       $$lcssa26 = $58;
      } else {
       $65 = (($ptail$0$lcssa) + ($59)|0);
       $70 = $58;$72 = $59;$74 = $65;$75 = $63;$s$350 = $s$0$lcssa;
       while(1) {
        $68 = HEAP32[$sinc>>2]|0;
        $69 = (($s$350) + ($68)|0);
        switch ($70|0) {
        case -3:  {
         $71 = (0 - ($72))|0;
         $73 = (($74) + ($71)|0);
         $76 = (_match_bracket($73,$75)|0);
         $77 = ($76|0)==(0);
         if ($77) {
          $$0 = 1;
          break L4;
         }
         break;
        }
        case -4:  {
         break;
        }
        default: {
         $78 = ($75|0)==($70|0);
         if (!($78)) {
          $$0 = 1;
          break L4;
         }
        }
        }
        $79 = $74;
        $80 = (($55) - ($79))|0;
        $81 = (_pat_next($74,$80,$pinc,$flags)|0);
        $82 = HEAP32[$pinc>>2]|0;
        $83 = (($74) + ($82)|0);
        $84 = $69;
        $85 = (($60) - ($84))|0;
        $86 = (_str_next($69,$85,$sinc)|0);
        $87 = ($86|0)<(1);
        if ($87) {
         $$lcssa26 = $81;
         break L36;
        } else {
         $70 = $81;$72 = $82;$74 = $83;$75 = $86;$s$350 = $69;
        }
       }
      }
     } while(0);
     $66 = ($$lcssa26|0)==(0);
     if ($66) {
      $67 = ($7>>>0)<($ptail$0$lcssa>>>0);
      if ($67) {
       $$1$ph49 = $7;$$14$ph48 = $$03$lcssa179;
       while(1) {
        $89 = $$1$ph49;
        $90 = (($56) - ($89))|0;
        $91 = (_pat_next($$1$ph49,$90,$pinc,$flags)|0);
        $92 = HEAP32[$pinc>>2]|0;
        $93 = (($$1$ph49) + ($92)|0);
        $94 = ($91|0)==(-5);
        L48: do {
         if ($94) {
          $$lcssa = $93;$s$4$lcssa = $$14$ph48;
         } else {
          $$1447144 = $$14$ph48;$129 = $93;$130 = $92;$131 = $91;
          while(1) {
           $101 = $130;$103 = $129;$99 = $131;$s$443 = $$1447144;
           L51: while(1) {
            $95 = $s$443;
            $96 = (($61) - ($95))|0;
            $97 = (_str_next($s$443,$96,$sinc)|0);
            $98 = ($97|0)==(0);
            if ($98) {
             $$0 = 1;
             break L4;
            }
            switch ($99|0) {
            case -3:  {
             $100 = (0 - ($101))|0;
             $102 = (($103) + ($100)|0);
             $104 = (_match_bracket($102,$97)|0);
             $105 = ($104|0)==(0);
             if ($105) {
              break L51;
             }
             break;
            }
            case -4:  {
             break;
            }
            default: {
             $106 = ($97|0)==($99|0);
             if (!($106)) {
              break L51;
             }
            }
            }
            $107 = HEAP32[$sinc>>2]|0;
            $108 = (($s$443) + ($107)|0);
            $109 = $103;
            $110 = (($56) - ($109))|0;
            $111 = (_pat_next($103,$110,$pinc,$flags)|0);
            $112 = HEAP32[$pinc>>2]|0;
            $113 = (($103) + ($112)|0);
            $114 = ($111|0)==(-5);
            if ($114) {
             $$lcssa = $113;$s$4$lcssa = $108;
             break L48;
            } else {
             $101 = $112;$103 = $113;$99 = $111;$s$443 = $108;
            }
           }
           $115 = $$1447144;
           $116 = (($61) - ($115))|0;
           $117 = (_str_next($$1447144,$116,$sinc)|0);
           $118 = ($117|0)>(0);
           if ($118) {
            $119 = HEAP32[$sinc>>2]|0;
            $120 = (($$1447144) + ($119)|0);
            $$1447$be = $120;
           } else {
            $$25$pn = $$1447144;
            while(1) {
             $$3 = ((($$25$pn)) + 1|0);
             $125 = $$3;
             $126 = (($61) - ($125))|0;
             $127 = (_str_next($$3,$126,$sinc)|0);
             $128 = ($127|0)<(0);
             if ($128) {
              $$25$pn = $$3;
             } else {
              $$1447$be = $$3;
              break;
             }
            }
           }
           $121 = (_pat_next($$1$ph49,$90,$pinc,$flags)|0);
           $122 = HEAP32[$pinc>>2]|0;
           $123 = (($$1$ph49) + ($122)|0);
           $124 = ($121|0)==(-5);
           if ($124) {
            $$lcssa = $123;$s$4$lcssa = $$1447$be;
            break;
           } else {
            $$1447144 = $$1447$be;$129 = $123;$130 = $122;$131 = $121;
           }
          }
         }
        } while(0);
        $88 = ($$lcssa>>>0)<($ptail$0$lcssa>>>0);
        if ($88) {
         $$1$ph49 = $$lcssa;$$14$ph48 = $s$4$lcssa;
        } else {
         $$0 = 0;
         break;
        }
       }
      } else {
       $$0 = 0;
      }
     } else {
      $$0 = 1;
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _ignore_err($path,$err) {
 $path = $path|0;
 $err = $err|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _match_in_dir($d,$p,$flags,$errfunc,$tail) {
 $d = $d|0;
 $p = $p|0;
 $flags = $flags|0;
 $errfunc = $errfunc|0;
 $tail = $tail|0;
 var $$ = 0, $$0$i = 0, $$012$i = 0, $$05 = 0, $$10 = 0, $$4 = 0, $$5 = 0, $$6 = 0, $$alloca_mul = 0, $$alloca_mul1 = 0, $$lcssa = 0, $$lcssa18 = 0, $$lcssa50 = 0, $$lcssa51 = 0, $$lcssa53 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bracket$03$i = 0, $bracket$1$i = 0, $de = 0, $de_buf = 0, $l$0 = 0, $mark$0 = 0, $name$0 = 0, $not$ = 0, $not$$24 = 0, $not$15 = 0, $p2$0 = 0, $p2$1 = 0, $st = 0, $st1 = 0, $switch$split2D = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $de_buf = sp + 156|0;
 $de = sp + 152|0;
 $st = sp + 76|0;
 $st1 = sp;
 $0 = (_strlen($p)|0);
 $1 = (($0) + 1)|0;
 $$alloca_mul = $1;
 $2 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $3 = (_strlen($d)|0);
 $4 = $flags & 64;
 $5 = $4 >>> 5;
 $6 = $flags >>> 5;
 $7 = $6 & 4;
 $8 = $7 | $5;
 $9 = $8 ^ 4;
 $10 = (_strchr($p,47)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$05 = $p;$p2$1 = 0;
 } else {
  (_strcpy($2,$p)|0);
  $12 = $10;
  $13 = $p;
  $14 = (($12) - ($13))|0;
  $15 = (($2) + ($14)|0);
  HEAP8[$15>>0] = 0;
  $p2$0 = $10;
  while(1) {
   $16 = HEAP8[$p2$0>>0]|0;
   $17 = ($16<<24>>24)==(47);
   $18 = ((($p2$0)) + 1|0);
   if ($17) {
    $p2$0 = $18;
   } else {
    $$05 = $2;$p2$1 = $p2$0;
    break;
   }
  }
 }
 $19 = HEAP8[$$05>>0]|0;
 $20 = ($19<<24>>24)==(0);
 L6: do {
  if ($20) {
   $$0$i = 1;
  } else {
   $21 = ($4|0)==(0);
   $$012$i = $$05;$23 = $19;$bracket$03$i = 0;
   while(1) {
    $22 = $23 << 24 >> 24;
    switch ($22|0) {
    case 42: case 63:  {
     $$0$i = 0;
     break L6;
     break;
    }
    case 92:  {
     if ($21) {
      $$0$i = 0;
      break L6;
     } else {
      $bracket$1$i = $bracket$03$i;
     }
     break;
    }
    case 91:  {
     $bracket$1$i = 1;
     break;
    }
    case 93:  {
     $24 = ($bracket$03$i|0)==(0);
     if ($24) {
      $bracket$1$i = 0;
     } else {
      $$0$i = 0;
      break L6;
     }
     break;
    }
    default: {
     $bracket$1$i = $bracket$03$i;
    }
    }
    $25 = ((($$012$i)) + 1|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = ($26<<24>>24)==(0);
    if ($27) {
     $$0$i = 1;
     break L6;
    } else {
     $$012$i = $25;$23 = $26;$bracket$03$i = $bracket$1$i;
    }
   }
  }
 } while(0);
 $28 = HEAP8[$d>>0]|0;
 $29 = ($28<<24>>24)==(47);
 if ($29) {
  $30 = ((($d)) + 1|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = ($31<<24>>24)==(0);
  $$ = $32 ? 0 : $3;
  $l$0 = $$;
 } else {
  $l$0 = $3;
 }
 $33 = ($28<<24>>24)!=(0);
 $34 = $33 ? $d : 18460;
 $35 = (_opendir($34)|0);
 $36 = (___errno_location()|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35|0)==(0|0);
 L19: do {
  if ($38) {
   switch ($37|0) {
   case 20:  {
    $$5 = 0;
    break L19;
    break;
   }
   case 13:  {
    $39 = HEAP8[$$05>>0]|0;
    $40 = ($39<<24>>24)==(0);
    if ($40) {
     $41 = (_stat($d,$st)|0);
     $42 = ($41|0)==(0);
     if ($42) {
      $43 = ((($st)) + 12|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = $44 & 61440;
      $46 = ($45|0)==(16384);
      if ($46) {
       $47 = (_append($tail,$d,$l$0,$l$0)|0);
       $not$15 = ($47|0)!=(0);
       $$6 = $not$15&1;
       $$5 = $$6;
       break L19;
      }
     }
    }
    break;
   }
   default: {
   }
   }
   $48 = (FUNCTION_TABLE_iii[$errfunc & 63]($d,$37)|0);
   $49 = $flags & 1;
   $50 = $48 | $49;
   $51 = ($50|0)==(0);
   $$10 = $51 ? 0 : 2;
   $$5 = $$10;
  } else {
   $52 = HEAP8[$$05>>0]|0;
   $53 = ($52<<24>>24)==(0);
   if ($53) {
    $66 = (_append($tail,$d,$l$0,$l$0)|0);
    $67 = ($66|0)!=(0);
    $68 = $67&1;
    (_closedir($35)|0);
    $$5 = $68;
    break;
   }
   $54 = (_readdir_r($35,$de_buf,$de)|0);
   $55 = ($54|0)!=(0);
   $56 = HEAP32[$de>>2]|0;
   $57 = ($56|0)!=(0|0);
   $not$$24 = $55 ^ 1;
   $58 = $57 & $not$$24;
   L33: do {
    if ($58) {
     $59 = (($l$0) + 2)|0;
     $60 = ($$0$i|0)==(0);
     $61 = ($p2$1|0)!=(0|0);
     $62 = $flags & 2;
     $63 = ($62|0)==(0);
     $64 = (($l$0) + 1)|0;
     $65 = ((($st1)) + 12|0);
     $70 = $56;
     L35: while(1) {
      $69 = ((($70)) + 8|0);
      $71 = HEAP16[$69>>1]|0;
      $72 = $71&65535;
      $73 = (($59) + ($72))|0;
      $74 = (_llvm_stacksave()|0);
      $$alloca_mul1 = $73;
      $75 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul1)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
      $76 = HEAP32[$de>>2]|0;
      $77 = ((($76)) + 11|0);
      if ($60) {
       $78 = (_fnmatch($$05,$77,$9)|0);
       $79 = ($78|0)==(0);
       if ($79) {
        label = 28;
       }
      } else {
       $80 = (_strcmp($$05,$77)|0);
       $81 = ($80|0)==(0);
       if ($81) {
        label = 28;
       }
      }
      L40: do {
       if ((label|0) == 28) {
        label = 0;
        L42: do {
         if ($61) {
          $82 = HEAP32[$de>>2]|0;
          $83 = ((($82)) + 10|0);
          $84 = HEAP8[$83>>0]|0;
          $85 = ($84<<24>>24)==(0);
          if (!($85)) {
           $86 = $84&255;
           $87 = $86 << 12;
           $88 = $87 & 61440;
           $switch$split2D = ($88|0)<(40960);
           if ($switch$split2D) {
            switch ($88|0) {
            case 16384:  {
             break L42;
             break;
            }
            default: {
             break L40;
            }
            }
           } else {
            switch ($88|0) {
            case 40960:  {
             break L42;
             break;
            }
            default: {
             break L40;
            }
            }
           }
          }
         }
        } while(0);
        $89 = HEAP8[$d>>0]|0;
        $90 = ($89<<24>>24)==(0);
        if ($90) {
         $95 = HEAP32[$de>>2]|0;
         $96 = ((($95)) + 11|0);
         $name$0 = $96;
        } else {
         _memcpy(($75|0),($d|0),($l$0|0))|0;
         $91 = (($75) + ($l$0)|0);
         HEAP8[$91>>0] = 47;
         $92 = ((($91)) + 1|0);
         $93 = HEAP32[$de>>2]|0;
         $94 = ((($93)) + 11|0);
         (_strcpy($92,$94)|0);
         $name$0 = $75;
        }
        if ($61) {
         $97 = (_match_in_dir($name$0,$p2$1,$flags,$errfunc,$tail)|0);
         $98 = ($97|0)==(0);
         if ($98) {
          break;
         } else {
          $$lcssa51 = $74;$$lcssa53 = $97;
          label = 36;
          break L35;
         }
        }
        do {
         if ($63) {
          $mark$0 = 0;
         } else {
          $99 = HEAP32[$de>>2]|0;
          $100 = ((($99)) + 10|0);
          $101 = HEAP8[$100>>0]|0;
          $102 = ($101<<24>>24)==(0);
          if (!($102)) {
           $103 = $101&255;
           $104 = $103 << 12;
           $105 = $104 & 61440;
           $106 = ($105|0)==(40960);
           if (!($106)) {
            $107 = ($105|0)==(16384);
            $108 = $107&1;
            $mark$0 = $108;
            break;
           }
          }
          (_stat($name$0,$st1)|0);
          $109 = HEAP32[$65>>2]|0;
          $110 = $109 & 61440;
          $111 = ($110|0)==(16384);
          $112 = $111&1;
          $mark$0 = $112;
         }
        } while(0);
        $113 = HEAP32[$de>>2]|0;
        $114 = ((($113)) + 8|0);
        $115 = HEAP16[$114>>1]|0;
        $116 = $115&65535;
        $117 = (($64) + ($116))|0;
        $118 = (_append($tail,$name$0,$117,$mark$0)|0);
        $119 = ($118|0)==(0);
        if (!($119)) {
         $$lcssa50 = $74;
         label = 43;
         break L35;
        }
       }
      } while(0);
      _llvm_stackrestore(($74|0));
      $120 = (_readdir_r($35,$de_buf,$de)|0);
      $121 = ($120|0)!=(0);
      $122 = HEAP32[$de>>2]|0;
      $123 = ($122|0)!=(0|0);
      $not$ = $121 ^ 1;
      $124 = $123 & $not$;
      if ($124) {
       $70 = $122;
      } else {
       $$lcssa = $120;$$lcssa18 = $121;
       break L33;
      }
     }
     if ((label|0) == 36) {
      (_closedir($35)|0);
      $$4 = $$lcssa53;$125 = $$lcssa51;
     }
     else if ((label|0) == 43) {
      (_closedir($35)|0);
      $$4 = 1;$125 = $$lcssa50;
     }
     _llvm_stackrestore(($125|0));
     $$5 = $$4;
     break L19;
    } else {
     $$lcssa = $54;$$lcssa18 = $55;
    }
   } while(0);
   (_closedir($35)|0);
   if ($$lcssa18) {
    $126 = (FUNCTION_TABLE_iii[$errfunc & 63]($d,$$lcssa)|0);
    $127 = $flags & 1;
    $128 = $126 | $127;
    $129 = ($128|0)==(0);
    if (!($129)) {
     $$5 = 2;
     break;
    }
   }
   $$5 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$5|0);
}
function _append($tail,$name,$len,$mark) {
 $tail = $tail|0;
 $name = $name|0;
 $len = $len|0;
 $mark = $mark|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $endptr = 0, $strlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($len) + 9)|0;
 $1 = (_malloc($0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = -1;
 } else {
  $3 = HEAP32[$tail>>2]|0;
  HEAP32[$3>>2] = $1;
  HEAP32[$1>>2] = 0;
  $4 = ((($1)) + 4|0);
  (_strcpy($4,$name)|0);
  $5 = ($mark|0)==(0);
  if (!($5)) {
   $strlen = (_strlen($4)|0);
   $endptr = (($4) + ($strlen)|0);
   HEAP8[$endptr>>0]=47&255;HEAP8[$endptr+1>>0]=47>>8;
  }
  HEAP32[$tail>>2] = $1;
  $$0 = 0;
 }
 return ($$0|0);
}
function _sort($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = HEAP32[$b>>2]|0;
 $2 = (_strcmp($0,$1)|0);
 return ($2|0);
}
function ___getopt_long($argc,$argv,$optstring,$longopts,$idx,$longonly) {
 $argc = $argc|0;
 $argv = $argv|0;
 $optstring = $optstring|0;
 $longopts = $longopts|0;
 $idx = $idx|0;
 $longonly = $longonly|0;
 var $$ = 0, $$3 = 0, $$lcssa68 = 0, $$phi$trans$insert = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$028 = 0, $i$028$lcssa = 0, $i$028$lcssa64 = 0, $i$02866 = 0, $name$026 = 0, $opt$014 = 0, $opt$014$lcssa67 = 0, $opt$027 = 0, $or$cond = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1092>>2]|0;
 $1 = ($0|0)==(0);
 $2 = HEAP32[1100>>2]|0;
 $3 = ($2|0)!=(0);
 $or$cond = $1 | $3;
 if ($or$cond) {
  HEAP32[1100>>2] = 0;
  HEAP32[1104>>2] = 0;
  HEAP32[1092>>2] = 1;
  $4 = 1;
 } else {
  $4 = $0;
 }
 $5 = ($4|0)<($argc|0);
 L4: do {
  if ($5) {
   $6 = (($argv) + ($4<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$3 = -1;
   } else {
    $9 = HEAP8[$7>>0]|0;
    $10 = ($9<<24>>24)==(45);
    if ($10) {
     $11 = ($longonly|0)==(0);
     $$phi$trans$insert = ((($7)) + 1|0);
     $$pre = HEAP8[$$phi$trans$insert>>0]|0;
     if ($11) {
      $phitmp = ($$pre<<24>>24)==(45);
      if ($phitmp) {
       $13 = ((($7)) + 2|0);
       $14 = HEAP8[$13>>0]|0;
       $15 = ($14<<24>>24)==(0);
       if (!($15)) {
        $18 = 45;
        label = 10;
       }
      }
     } else {
      $12 = ($$pre<<24>>24)==(0);
      if (!($12)) {
       $18 = $$pre;
       label = 10;
      }
     }
     if ((label|0) == 10) {
      $16 = HEAP32[$longopts>>2]|0;
      $17 = ($16|0)==(0|0);
      $19 = ($18<<24>>24)==(45);
      L14: do {
       if (!($17)) {
        $20 = ((($7)) + 2|0);
        $$ = $19 ? $20 : $$phi$trans$insert;
        $22 = $16;$i$028 = 0;
        L16: while(1) {
         $21 = HEAP8[$22>>0]|0;
         $23 = ($21<<24>>24)==(0);
         L18: do {
          if ($23) {
           $opt$014 = $$;
           label = 15;
          } else {
           $$pr = $21;$name$026 = $22;$opt$027 = $$;
           while(1) {
            $24 = HEAP8[$opt$027>>0]|0;
            $25 = ($$pr<<24>>24)==($24<<24>>24);
            if (!($25)) {
             break L18;
            }
            $26 = ((($name$026)) + 1|0);
            $27 = ((($opt$027)) + 1|0);
            $28 = HEAP8[$26>>0]|0;
            $29 = ($28<<24>>24)==(0);
            if ($29) {
             $opt$014 = $27;
             label = 15;
             break;
            } else {
             $$pr = $28;$name$026 = $26;$opt$027 = $27;
            }
           }
          }
         } while(0);
         L22: do {
          if ((label|0) == 15) {
           label = 0;
           $30 = HEAP8[$opt$014>>0]|0;
           switch ($30<<24>>24) {
           case 61: case 0:  {
            break;
           }
           default: {
            break L22;
           }
           }
           $31 = ($30<<24>>24)==(61);
           $32 = (((($longopts) + ($i$028<<4)|0)) + 4|0);
           $33 = HEAP32[$32>>2]|0;
           if (!($31)) {
            $$lcssa68 = $33;$i$028$lcssa = $i$028;
            label = 19;
            break L16;
           }
           $34 = ($33|0)==(0);
           if (!($34)) {
            $i$028$lcssa64 = $i$028;$opt$014$lcssa67 = $opt$014;
            label = 18;
            break L16;
           }
          }
         } while(0);
         $49 = (($i$028) + 1)|0;
         $50 = (($longopts) + ($49<<4)|0);
         $51 = HEAP32[$50>>2]|0;
         $52 = ($51|0)==(0|0);
         if ($52) {
          break L14;
         } else {
          $22 = $51;$i$028 = $49;
         }
        }
        do {
         if ((label|0) == 18) {
          $35 = ((($opt$014$lcssa67)) + 1|0);
          HEAP32[1112>>2] = $35;
          $42 = $4;$i$02866 = $i$028$lcssa64;
         }
         else if ((label|0) == 19) {
          $36 = ($$lcssa68|0)==(1);
          if ($36) {
           $37 = (($4) + 1)|0;
           HEAP32[1092>>2] = $37;
           $38 = (($argv) + ($37<<2)|0);
           $39 = HEAP32[$38>>2]|0;
           HEAP32[1112>>2] = $39;
           $40 = ($39|0)==(0|0);
           if ($40) {
            $$3 = 58;
            break L4;
           } else {
            $42 = $37;$i$02866 = $i$028$lcssa;
            break;
           }
          } else {
           HEAP32[1112>>2] = 0;
           $42 = $4;$i$02866 = $i$028$lcssa;
           break;
          }
         }
        } while(0);
        $41 = (($42) + 1)|0;
        HEAP32[1092>>2] = $41;
        $43 = ($idx|0)==(0|0);
        if (!($43)) {
         HEAP32[$idx>>2] = $i$02866;
        }
        $44 = (((($longopts) + ($i$02866<<4)|0)) + 8|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = ($45|0)==(0|0);
        $47 = (((($longopts) + ($i$02866<<4)|0)) + 12|0);
        $48 = HEAP32[$47>>2]|0;
        if ($46) {
         $$3 = $48;
         break L4;
        }
        HEAP32[$45>>2] = $48;
        $$3 = 0;
        break L4;
       }
      } while(0);
      if ($19) {
       $53 = (($4) + 1)|0;
       HEAP32[1092>>2] = $53;
       $$3 = 63;
       break;
      }
     }
     $54 = (_getopt($argc,$argv,$optstring)|0);
     $$3 = $54;
    } else {
     $$3 = -1;
    }
   }
  } else {
   $$3 = -1;
  }
 } while(0);
 return ($$3|0);
}
function _do_setrlimit($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = ((($p)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$p>>2]|0;
  $6 = (___setrlimit($4,$5)|0);
  $7 = (0 - ($6))|0;
  HEAP32[$0>>2] = $7;
 }
 return;
}
function _strtox($s,$p,$base,$0,$1) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 HEAP32[$f>>2] = 0;
 $2 = ((($f)) + 4|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 44|0);
 HEAP32[$3>>2] = $s;
 $4 = ($s|0)<(0|0);
 $5 = ((($s)) + 2147483647|0);
 $$sink = $4 ? (-1) : $5;
 $6 = ((($f)) + 8|0);
 HEAP32[$6>>2] = $$sink;
 $7 = ((($f)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($f,0);
 $8 = (___intscan($f,$base,1,$0,$1)|0);
 $9 = tempRet0;
 $10 = ($p|0)==(0|0);
 if (!($10)) {
  $11 = ((($f)) + 108|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = HEAP32[$6>>2]|0;
  $15 = (($13) + ($12))|0;
  $16 = (($15) - ($14))|0;
  $17 = (($s) + ($16)|0);
  HEAP32[$p>>2] = $17;
 }
 tempRet0 = ($9);
 STACKTOP = sp;return ($8|0);
}
function _sift($head,$width,$cmp,$pshift,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pshift = $pshift|0;
 $lp = $lp|0;
 var $$0$be = 0, $$01$be = 0, $$012 = 0, $$03 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $i$0$lcssa = 0, $i$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ar = sp;
 HEAP32[$ar>>2] = $head;
 $0 = ($pshift|0)>(1);
 L1: do {
  if ($0) {
   $1 = (0 - ($width))|0;
   $$012 = $pshift;$$03 = $head;$8 = $head;$i$04 = 1;
   while(1) {
    $2 = (($$03) + ($1)|0);
    $3 = (($$012) + -2)|0;
    $4 = (($lp) + ($3<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = (0 - ($5))|0;
    $7 = (($2) + ($6)|0);
    $9 = (FUNCTION_TABLE_iii[$cmp & 63]($8,$7)|0);
    $10 = ($9|0)>(-1);
    if ($10) {
     $11 = (FUNCTION_TABLE_iii[$cmp & 63]($8,$2)|0);
     $12 = ($11|0)>(-1);
     if ($12) {
      $i$0$lcssa = $i$04;
      break L1;
     }
    }
    $13 = (FUNCTION_TABLE_iii[$cmp & 63]($7,$2)|0);
    $14 = ($13|0)>(-1);
    $15 = (($i$04) + 1)|0;
    $16 = (($ar) + ($i$04<<2)|0);
    if ($14) {
     HEAP32[$16>>2] = $7;
     $17 = (($$012) + -1)|0;
     $$0$be = $7;$$01$be = $17;
    } else {
     HEAP32[$16>>2] = $2;
     $$0$be = $2;$$01$be = $3;
    }
    $18 = ($$01$be|0)>(1);
    if (!($18)) {
     $i$0$lcssa = $15;
     break L1;
    }
    $$pre = HEAP32[$ar>>2]|0;
    $$012 = $$01$be;$$03 = $$0$be;$8 = $$pre;$i$04 = $15;
   }
  } else {
   $i$0$lcssa = 1;
  }
 } while(0);
 _cycle($width,$ar,$i$0$lcssa);
 STACKTOP = sp;return;
}
function _trinkle($head,$width,$cmp,$pp,$pshift,$trusty,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pp = $pp|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$0$i = 0, $$0$lcssa = 0, $$0$lcssa49 = 0, $$01162 = 0, $$01162$phi = 0, $$02$i$3$i = 0, $$02$i$i = 0, $$02$lcssa = 0, $$02$lcssa51 = 0, $$02964 = 0, $$03$lcssa = 0, $$03865 = 0, $$lcssa = 0, $$lcssa75 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $i$0$lcssa = 0, $i$0$lcssa50 = 0, $i$01063 = 0, $nTrailingZeros$03$i$2$i = 0, $nTrailingZeros$03$i$2$i$lcssa = 0, $nTrailingZeros$03$i$i = 0, $or$cond = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ar = sp;
 $0 = HEAP32[$pp>>2]|0;
 $1 = ((($pp)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$ar>>2] = $head;
 $3 = (0 - ($width))|0;
 $4 = ($0|0)!=(1);
 $5 = ($2|0)!=(0);
 $6 = $5 | $4;
 L1: do {
  if ($6) {
   $7 = (($lp) + ($pshift<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (0 - ($8))|0;
   $10 = (($head) + ($9)|0);
   $11 = (FUNCTION_TABLE_iii[$cmp & 63]($10,$head)|0);
   $12 = ($11|0)<(1);
   if ($12) {
    $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
    label = 19;
   } else {
    $phitmp = ($trusty|0)==(0);
    $$01162 = $head;$$02964 = $pshift;$$03865 = $phitmp;$18 = $10;$28 = $0;$37 = $2;$i$01063 = 1;
    while(1) {
     $13 = ($$02964|0)>(1);
     $or$cond = $$03865 & $13;
     if ($or$cond) {
      $14 = (($$01162) + ($3)|0);
      $15 = (($$02964) + -2)|0;
      $16 = (($lp) + ($15<<2)|0);
      $17 = HEAP32[$16>>2]|0;
      $19 = (FUNCTION_TABLE_iii[$cmp & 63]($14,$18)|0);
      $20 = ($19|0)>(-1);
      if ($20) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       label = 20;
       break L1;
      }
      $21 = (0 - ($17))|0;
      $22 = (($14) + ($21)|0);
      $23 = (FUNCTION_TABLE_iii[$cmp & 63]($22,$18)|0);
      $24 = ($23|0)>(-1);
      if ($24) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       label = 20;
       break L1;
      }
     }
     $25 = (($i$01063) + 1)|0;
     $26 = (($ar) + ($i$01063<<2)|0);
     HEAP32[$26>>2] = $18;
     $27 = (($28) + -1)|0;
     $29 = ($27|0)==(0);
     do {
      if ($29) {
       $50 = 32;
       label = 16;
      } else {
       $30 = $27 & 1;
       $31 = ($30|0)==(0);
       if ($31) {
        $$02$i$i = $27;$nTrailingZeros$03$i$i = 0;
        while(1) {
         $32 = (($nTrailingZeros$03$i$i) + 1)|0;
         $33 = $$02$i$i >>> 1;
         $34 = $33 & 1;
         $35 = ($34|0)==(0);
         if ($35) {
          $$02$i$i = $33;$nTrailingZeros$03$i$i = $32;
         } else {
          $$lcssa = $32;
          break;
         }
        }
        $36 = ($$lcssa|0)==(0);
        if ($36) {
         label = 11;
        } else {
         $47 = $$lcssa;
        }
       } else {
        label = 11;
       }
       if ((label|0) == 11) {
        label = 0;
        $38 = ($37|0)==(0);
        if ($38) {
         $50 = 64;
         label = 16;
         break;
        }
        $39 = $37 & 1;
        $40 = ($39|0)==(0);
        if ($40) {
         $$02$i$3$i = $37;$nTrailingZeros$03$i$2$i = 0;
        } else {
         $$0$i = 0;$52 = $28;$55 = $37;$59 = 0;
         break;
        }
        while(1) {
         $41 = (($nTrailingZeros$03$i$2$i) + 1)|0;
         $42 = $$02$i$3$i >>> 1;
         $43 = $42 & 1;
         $44 = ($43|0)==(0);
         if ($44) {
          $$02$i$3$i = $42;$nTrailingZeros$03$i$2$i = $41;
         } else {
          $$lcssa75 = $41;$nTrailingZeros$03$i$2$i$lcssa = $nTrailingZeros$03$i$2$i;
          break;
         }
        }
        $45 = (($nTrailingZeros$03$i$2$i$lcssa) + 33)|0;
        $46 = ($$lcssa75|0)==(0);
        if ($46) {
         $$0$i = 0;$52 = $28;$55 = $37;$59 = 0;
         break;
        } else {
         $47 = $45;
        }
       }
       $48 = ($47>>>0)>(31);
       if ($48) {
        $50 = $47;
        label = 16;
       } else {
        $$0$i = $47;$52 = $28;$55 = $37;$59 = $47;
       }
      }
     } while(0);
     if ((label|0) == 16) {
      label = 0;
      $49 = (($50) + -32)|0;
      $$0$i = $49;$52 = $37;$55 = 0;$59 = $50;
     }
     $51 = $52 >>> $$0$i;
     $53 = (32 - ($$0$i))|0;
     $54 = $55 << $53;
     $56 = $54 | $51;
     $57 = $55 >>> $$0$i;
     $58 = (($59) + ($$02964))|0;
     $60 = ($56|0)!=(1);
     $61 = ($57|0)!=(0);
     $62 = $61 | $60;
     if (!($62)) {
      $$0$lcssa49 = $18;$$02$lcssa51 = $58;$i$0$lcssa50 = $25;
      label = 20;
      break L1;
     }
     $$pre = HEAP32[$ar>>2]|0;
     $63 = (($lp) + ($58<<2)|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = (0 - ($64))|0;
     $66 = (($18) + ($65)|0);
     $67 = (FUNCTION_TABLE_iii[$cmp & 63]($66,$$pre)|0);
     $68 = ($67|0)<(1);
     if ($68) {
      $$0$lcssa = $18;$$02$lcssa = $58;$$03$lcssa = 0;$i$0$lcssa = $25;
      label = 19;
      break;
     } else {
      $$01162$phi = $18;$$02964 = $58;$$03865 = 1;$18 = $66;$28 = $56;$37 = $57;$i$01063 = $25;$$01162 = $$01162$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
   label = 19;
  }
 } while(0);
 if ((label|0) == 19) {
  $69 = ($$03$lcssa|0)==(0);
  if ($69) {
   $$0$lcssa49 = $$0$lcssa;$$02$lcssa51 = $$02$lcssa;$i$0$lcssa50 = $i$0$lcssa;
   label = 20;
  }
 }
 if ((label|0) == 20) {
  _cycle($width,$ar,$i$0$lcssa50);
  _sift($$0$lcssa49,$width,$cmp,$$02$lcssa51,$lp);
 }
 STACKTOP = sp;return;
}
function _cleanup_522($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _cleanup_527($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i$33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$210$$24$i = 0, $$210$$26$i = 0, $$210$i = 0, $$23$i = 0, $$25$i = 0, $$3$i = 0.0, $$311$i = 0;
 var $$33$i = 0, $$36$i = 0.0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41279$i = 0, $$43 = 0, $$5$lcssa$i = 0, $$590$i = 0, $$a$3$188$i = 0, $$a$3$i = 0, $$a$3189$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa162$i = 0, $$lcssa321 = 0, $$lcssa322 = 0, $$lcssa326 = 0, $$lcssa328 = 0, $$lcssa329 = 0, $$lcssa330 = 0;
 var $$lcssa331 = 0, $$lcssa332 = 0, $$lcssa334 = 0, $$lcssa344 = 0, $$lcssa347 = 0.0, $$lcssa349 = 0, $$lcssa52 = 0, $$neg55$i = 0, $$neg56$i = 0, $$p$$i = 0, $$p$0 = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr50$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi187$iZ2D = 0, $$pre182$i = 0;
 var $$pre185$i = 0, $$pre186$i = 0, $$pre190 = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0.0, $365 = 0, $366 = 0, $367 = 0, $368 = 0.0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0.0, $397 = 0.0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0.0, $413 = 0, $414 = 0, $415 = 0, $416 = 0.0, $417 = 0.0;
 var $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0.0, $602 = 0.0, $603 = 0, $604 = 0.0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1150$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3137$i = 0, $a$5$lcssa$i = 0, $a$5112$i = 0, $a$6$i = 0, $a$8$i = 0;
 var $a$9$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0143$i = 0, $carry3$0131$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$142$i = 0, $d$0$i = 0, $d$0144$i = 0, $d$1130$i = 0, $d$2$lcssa$i = 0;
 var $d$2111$i = 0, $d$4$i = 0, $d$585$i = 0, $d$678$i = 0, $d$789$i = 0, $e$0126$i = 0, $e$1$i = 0, $e$2107$i = 0, $e$4$i = 0, $e$5$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$196$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0;
 var $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $fl$0103 = 0, $fl$056 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa197 = 0, $i$0108 = 0, $i$0125$i = 0, $i$03$i = 0, $i$03$i$25 = 0;
 var $i$1$lcssa$i = 0, $i$1119 = 0, $i$1119$i = 0, $i$2106$i = 0, $i$295 = 0, $i$295$lcssa = 0, $i$3102$i = 0, $i$393 = 0, $isdigit = 0, $isdigit$2$i = 0, $isdigit$2$i$23 = 0, $isdigit$i = 0, $isdigit$i$27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$1$i = 0, $isdigittmp$1$i$22 = 0, $isdigittmp$i = 0;
 var $isdigittmp$i$26 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i$24 = 0, $isdigittmp9 = 0, $j$0$118$i = 0, $j$0$i = 0, $j$0120$i = 0, $j$1103$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1107 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0;
 var $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond18$i = 0, $or$cond20 = 0, $or$cond22$i = 0, $or$cond239 = 0, $or$cond3$not$i = 0, $or$cond31$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0;
 var $p$4195 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$9$i = 0, $re$172$i = 0, $round$071$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s1$0$i = 0;
 var $s7$082$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$073$i = 0, $s9$0$i = 0, $s9$186$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa327 = 0, $storemerge = 0, $storemerge$13 = 0, $storemerge$8102 = 0, $storemerge$854 = 0, $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$32$i = 0, $wc = 0, $ws$0109 = 0, $ws$1120 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$096 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1149$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3136$i = 0, $z$4$i = 0, $z$7$$i = 0, $z$7$i = 0;
 var $z$7$i$lcssa = 0, $z$7$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = ((($ebuf0$i)) + 12|0);
 $6 = ((($ebuf0$i)) + 11|0);
 $7 = $buf$i;
 $8 = $5;
 $9 = (($8) - ($7))|0;
 $10 = (-2 - ($7))|0;
 $11 = (($8) + 2)|0;
 $12 = ((($big$i)) + 288|0);
 $13 = ((($buf$i)) + 9|0);
 $14 = $13;
 $15 = ((($buf$i)) + 8|0);
 $22 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$22>>0]|0;
  $23 = ($21<<24>>24)==(0);
  if ($23) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 242;
   break;
  } else {
   $24 = $21;$26 = $22;
  }
  L9: while(1) {
   switch ($24<<24>>24) {
   case 37:  {
    $28 = $26;$z$096 = $26;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$lcssa52 = $26;$z$0$lcssa = $26;
    break L9;
    break;
   }
   default: {
   }
   }
   $25 = ((($26)) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $24 = $$pre;$26 = $25;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $27 = ((($28)) + 1|0);
     $29 = HEAP8[$27>>0]|0;
     $30 = ($29<<24>>24)==(37);
     if (!($30)) {
      $$lcssa52 = $28;$z$0$lcssa = $z$096;
      break L12;
     }
     $31 = ((($z$096)) + 1|0);
     $32 = ((($28)) + 2|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = ($33<<24>>24)==(37);
     if ($34) {
      $28 = $32;$z$096 = $31;
      label = 9;
     } else {
      $$lcssa52 = $32;$z$0$lcssa = $31;
      break;
     }
    }
   }
  } while(0);
  $35 = $z$0$lcssa;
  $36 = $22;
  $37 = (($35) - ($36))|0;
  if ($0) {
   $38 = HEAP32[$f>>2]|0;
   $39 = $38 & 32;
   $40 = ($39|0)==(0);
   if ($40) {
    (___fwritex($22,$37,$f)|0);
   }
  }
  $41 = ($z$0$lcssa|0)==($22|0);
  if (!($41)) {
   $l10n$0$phi = $l10n$0;$22 = $$lcssa52;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $42 = ((($$lcssa52)) + 1|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43 << 24 >> 24;
  $isdigittmp = (($44) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $45 = ((($$lcssa52)) + 2|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = ($46<<24>>24)==(36);
   $48 = ((($$lcssa52)) + 3|0);
   $$43 = $47 ? $48 : $42;
   $$l10n$0 = $47 ? 1 : $l10n$0;
   $isdigittmp$ = $47 ? $isdigittmp : -1;
   $$pre190 = HEAP8[$$43>>0]|0;
   $50 = $$pre190;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$43;
  } else {
   $50 = $43;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $42;
  }
  $49 = $50 << 24 >> 24;
  $51 = $49 & -32;
  $52 = ($51|0)==(32);
  L25: do {
   if ($52) {
    $54 = $49;$59 = $50;$fl$0103 = 0;$storemerge$8102 = $storemerge;
    while(1) {
     $53 = (($54) + -32)|0;
     $55 = 1 << $53;
     $56 = $55 & 75913;
     $57 = ($56|0)==(0);
     if ($57) {
      $68 = $59;$fl$056 = $fl$0103;$storemerge$854 = $storemerge$8102;
      break L25;
     }
     $58 = $59 << 24 >> 24;
     $60 = (($58) + -32)|0;
     $61 = 1 << $60;
     $62 = $61 | $fl$0103;
     $63 = ((($storemerge$8102)) + 1|0);
     $64 = HEAP8[$63>>0]|0;
     $65 = $64 << 24 >> 24;
     $66 = $65 & -32;
     $67 = ($66|0)==(32);
     if ($67) {
      $54 = $65;$59 = $64;$fl$0103 = $62;$storemerge$8102 = $63;
     } else {
      $68 = $64;$fl$056 = $62;$storemerge$854 = $63;
      break;
     }
    }
   } else {
    $68 = $50;$fl$056 = 0;$storemerge$854 = $storemerge;
   }
  } while(0);
  $69 = ($68<<24>>24)==(42);
  do {
   if ($69) {
    $70 = ((($storemerge$854)) + 1|0);
    $71 = HEAP8[$70>>0]|0;
    $72 = $71 << 24 >> 24;
    $isdigittmp11 = (($72) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $73 = ((($storemerge$854)) + 2|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = ($74<<24>>24)==(36);
     if ($75) {
      $76 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$76>>2] = 10;
      $77 = HEAP8[$70>>0]|0;
      $78 = $77 << 24 >> 24;
      $79 = (($78) + -48)|0;
      $80 = (($nl_arg) + ($79<<3)|0);
      $81 = $80;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = (($81) + 4)|0;
      $85 = $84;
      $86 = HEAP32[$85>>2]|0;
      $87 = ((($storemerge$854)) + 3|0);
      $l10n$2 = 1;$storemerge$13 = $87;$w$0 = $83;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $88 = ($l10n$1|0)==(0);
     if (!($88)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $108 = $70;$fl$1 = $fl$056;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $89 = $arglist_current;
     $90 = ((0) + 4|0);
     $expanded4 = $90;
     $expanded = (($expanded4) - 1)|0;
     $91 = (($89) + ($expanded))|0;
     $92 = ((0) + 4|0);
     $expanded8 = $92;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $93 = $91 & $expanded6;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge$13 = $70;$w$0 = $95;
    }
    $96 = ($w$0|0)<(0);
    if ($96) {
     $97 = $fl$056 | 8192;
     $98 = (0 - ($w$0))|0;
     $108 = $storemerge$13;$fl$1 = $97;$l10n$3 = $l10n$2;$w$1 = $98;
    } else {
     $108 = $storemerge$13;$fl$1 = $fl$056;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $99 = $68 << 24 >> 24;
    $isdigittmp$1$i = (($99) + -48)|0;
    $isdigit$2$i = ($isdigittmp$1$i>>>0)<(10);
    if ($isdigit$2$i) {
     $103 = $storemerge$854;$i$03$i = 0;$isdigittmp4$i = $isdigittmp$1$i;
     while(1) {
      $100 = ($i$03$i*10)|0;
      $101 = (($100) + ($isdigittmp4$i))|0;
      $102 = ((($103)) + 1|0);
      $104 = HEAP8[$102>>0]|0;
      $105 = $104 << 24 >> 24;
      $isdigittmp$i = (($105) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $103 = $102;$i$03$i = $101;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa321 = $101;$$lcssa322 = $102;
       break;
      }
     }
     $106 = ($$lcssa321|0)<(0);
     if ($106) {
      $$0 = -1;
      break L1;
     } else {
      $108 = $$lcssa322;$fl$1 = $fl$056;$l10n$3 = $l10n$1;$w$1 = $$lcssa321;
     }
    } else {
     $108 = $storemerge$854;$fl$1 = $fl$056;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $107 = HEAP8[$108>>0]|0;
  $109 = ($107<<24>>24)==(46);
  L46: do {
   if ($109) {
    $110 = ((($108)) + 1|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = ($111<<24>>24)==(42);
    if (!($112)) {
     $139 = $111 << 24 >> 24;
     $isdigittmp$1$i$22 = (($139) + -48)|0;
     $isdigit$2$i$23 = ($isdigittmp$1$i$22>>>0)<(10);
     if ($isdigit$2$i$23) {
      $143 = $110;$i$03$i$25 = 0;$isdigittmp4$i$24 = $isdigittmp$1$i$22;
     } else {
      $802 = $110;$p$0 = 0;
      break;
     }
     while(1) {
      $140 = ($i$03$i$25*10)|0;
      $141 = (($140) + ($isdigittmp4$i$24))|0;
      $142 = ((($143)) + 1|0);
      $144 = HEAP8[$142>>0]|0;
      $145 = $144 << 24 >> 24;
      $isdigittmp$i$26 = (($145) + -48)|0;
      $isdigit$i$27 = ($isdigittmp$i$26>>>0)<(10);
      if ($isdigit$i$27) {
       $143 = $142;$i$03$i$25 = $141;$isdigittmp4$i$24 = $isdigittmp$i$26;
      } else {
       $802 = $142;$p$0 = $141;
       break L46;
      }
     }
    }
    $113 = ((($108)) + 2|0);
    $114 = HEAP8[$113>>0]|0;
    $115 = $114 << 24 >> 24;
    $isdigittmp9 = (($115) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $116 = ((($108)) + 3|0);
     $117 = HEAP8[$116>>0]|0;
     $118 = ($117<<24>>24)==(36);
     if ($118) {
      $119 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$119>>2] = 10;
      $120 = HEAP8[$113>>0]|0;
      $121 = $120 << 24 >> 24;
      $122 = (($121) + -48)|0;
      $123 = (($nl_arg) + ($122<<3)|0);
      $124 = $123;
      $125 = $124;
      $126 = HEAP32[$125>>2]|0;
      $127 = (($124) + 4)|0;
      $128 = $127;
      $129 = HEAP32[$128>>2]|0;
      $130 = ((($108)) + 4|0);
      $802 = $130;$p$0 = $126;
      break;
     }
    }
    $131 = ($l10n$3|0)==(0);
    if (!($131)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $132 = $arglist_current2;
     $133 = ((0) + 4|0);
     $expanded11 = $133;
     $expanded10 = (($expanded11) - 1)|0;
     $134 = (($132) + ($expanded10))|0;
     $135 = ((0) + 4|0);
     $expanded15 = $135;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $136 = $134 & $expanded13;
     $137 = $136;
     $138 = HEAP32[$137>>2]|0;
     $arglist_next3 = ((($137)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $802 = $113;$p$0 = $138;
    } else {
     $802 = $113;$p$0 = 0;
    }
   } else {
    $802 = $108;$p$0 = -1;
   }
  } while(0);
  $147 = $802;$st$0 = 0;
  while(1) {
   $146 = HEAP8[$147>>0]|0;
   $148 = $146 << 24 >> 24;
   $149 = (($148) + -65)|0;
   $150 = ($149>>>0)>(57);
   if ($150) {
    $$0 = -1;
    break L1;
   }
   $151 = ((($147)) + 1|0);
   $152 = ((17928 + (($st$0*58)|0)|0) + ($149)|0);
   $153 = HEAP8[$152>>0]|0;
   $154 = $153&255;
   $155 = (($154) + -1)|0;
   $156 = ($155>>>0)<(8);
   if ($156) {
    $147 = $151;$st$0 = $154;
   } else {
    $$lcssa326 = $147;$$lcssa328 = $151;$$lcssa329 = $153;$$lcssa330 = $154;$st$0$lcssa327 = $st$0;
    break;
   }
  }
  $157 = ($$lcssa329<<24>>24)==(0);
  if ($157) {
   $$0 = -1;
   break;
  }
  $158 = ($$lcssa329<<24>>24)==(19);
  $159 = ($argpos$0|0)>(-1);
  do {
   if ($158) {
    if ($159) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($159) {
     $160 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$160>>2] = $$lcssa330;
     $161 = (($nl_arg) + ($argpos$0<<3)|0);
     $162 = $161;
     $163 = $162;
     $164 = HEAP32[$163>>2]|0;
     $165 = (($162) + 4)|0;
     $166 = $165;
     $167 = HEAP32[$166>>2]|0;
     $168 = $arg;
     $169 = $168;
     HEAP32[$169>>2] = $164;
     $170 = (($168) + 4)|0;
     $171 = $170;
     HEAP32[$171>>2] = $167;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$$lcssa330,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $172 = HEAP8[$$lcssa326>>0]|0;
  $173 = $172 << 24 >> 24;
  $174 = ($st$0$lcssa327|0)!=(0);
  $175 = $173 & 15;
  $176 = ($175|0)==(3);
  $or$cond15 = $174 & $176;
  $177 = $173 & -33;
  $t$0 = $or$cond15 ? $177 : $173;
  $178 = $fl$1 & 8192;
  $179 = ($178|0)==(0);
  $180 = $fl$1 & -65537;
  $fl$1$ = $179 ? $fl$1 : $180;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa327|0) {
    case 0:  {
     $187 = HEAP32[$arg>>2]|0;
     HEAP32[$187>>2] = $cnt$1;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $188 = HEAP32[$arg>>2]|0;
     HEAP32[$188>>2] = $cnt$1;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $189 = ($cnt$1|0)<(0);
     $190 = $189 << 31 >> 31;
     $191 = HEAP32[$arg>>2]|0;
     $192 = $191;
     $193 = $192;
     HEAP32[$193>>2] = $cnt$1;
     $194 = (($192) + 4)|0;
     $195 = $194;
     HEAP32[$195>>2] = $190;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $196 = $cnt$1&65535;
     $197 = HEAP32[$arg>>2]|0;
     HEAP16[$197>>1] = $196;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $198 = $cnt$1&255;
     $199 = HEAP32[$arg>>2]|0;
     HEAP8[$199>>0] = $198;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $200 = HEAP32[$arg>>2]|0;
     HEAP32[$200>>2] = $cnt$1;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $201 = ($cnt$1|0)<(0);
     $202 = $201 << 31 >> 31;
     $203 = HEAP32[$arg>>2]|0;
     $204 = $203;
     $205 = $204;
     HEAP32[$205>>2] = $cnt$1;
     $206 = (($204) + 4)|0;
     $207 = $206;
     HEAP32[$207>>2] = $202;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $208 = ($p$0>>>0)>(8);
    $209 = $208 ? $p$0 : 8;
    $210 = $fl$1$ | 8;
    $fl$3 = $210;$p$1 = $209;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $248 = $arg;
    $249 = $248;
    $250 = HEAP32[$249>>2]|0;
    $251 = (($248) + 4)|0;
    $252 = $251;
    $253 = HEAP32[$252>>2]|0;
    $254 = ($250|0)==(0);
    $255 = ($253|0)==(0);
    $256 = $254 & $255;
    if ($256) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i$33 = $1;$258 = $250;$262 = $253;
     while(1) {
      $257 = $258 & 7;
      $259 = $257 | 48;
      $260 = $259&255;
      $261 = ((($$03$i$33)) + -1|0);
      HEAP8[$261>>0] = $260;
      $263 = (_bitshift64Lshr(($258|0),($262|0),3)|0);
      $264 = tempRet0;
      $265 = ($263|0)==(0);
      $266 = ($264|0)==(0);
      $267 = $265 & $266;
      if ($267) {
       $$0$lcssa$i = $261;
       break;
      } else {
       $$03$i$33 = $261;$258 = $263;$262 = $264;
      }
     }
    }
    $268 = $fl$1$ & 8;
    $269 = ($268|0)==(0);
    if ($269) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 18408;
     label = 77;
    } else {
     $270 = $$0$lcssa$i;
     $271 = (($2) - ($270))|0;
     $272 = (($271) + 1)|0;
     $273 = ($p$0|0)<($272|0);
     $$p$0 = $273 ? $272 : $p$0;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $$p$0;$pl$1 = 0;$prefix$1 = 18408;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $274 = $arg;
    $275 = $274;
    $276 = HEAP32[$275>>2]|0;
    $277 = (($274) + 4)|0;
    $278 = $277;
    $279 = HEAP32[$278>>2]|0;
    $280 = ($279|0)<(0);
    if ($280) {
     $281 = (_i64Subtract(0,0,($276|0),($279|0))|0);
     $282 = tempRet0;
     $283 = $arg;
     $284 = $283;
     HEAP32[$284>>2] = $281;
     $285 = (($283) + 4)|0;
     $286 = $285;
     HEAP32[$286>>2] = $282;
     $291 = $281;$292 = $282;$pl$0 = 1;$prefix$0 = 18408;
     label = 76;
     break L75;
    }
    $287 = $fl$1$ & 2048;
    $288 = ($287|0)==(0);
    if ($288) {
     $289 = $fl$1$ & 1;
     $290 = ($289|0)==(0);
     $$ = $290 ? 18408 : (18410);
     $291 = $276;$292 = $279;$pl$0 = $289;$prefix$0 = $$;
     label = 76;
    } else {
     $291 = $276;$292 = $279;$pl$0 = 1;$prefix$0 = (18409);
     label = 76;
    }
    break;
   }
   case 117:  {
    $181 = $arg;
    $182 = $181;
    $183 = HEAP32[$182>>2]|0;
    $184 = (($181) + 4)|0;
    $185 = $184;
    $186 = HEAP32[$185>>2]|0;
    $291 = $183;$292 = $186;$pl$0 = 0;$prefix$0 = 18408;
    label = 76;
    break;
   }
   case 99:  {
    $312 = $arg;
    $313 = $312;
    $314 = HEAP32[$313>>2]|0;
    $315 = (($312) + 4)|0;
    $316 = $315;
    $317 = HEAP32[$316>>2]|0;
    $318 = $314&255;
    HEAP8[$3>>0] = $318;
    $a$2 = $3;$fl$6 = $180;$p$5 = 1;$pl$2 = 0;$prefix$2 = 18408;$z$2 = $1;
    break;
   }
   case 109:  {
    $319 = (___errno_location()|0);
    $320 = HEAP32[$319>>2]|0;
    $321 = (_strerror($320)|0);
    $a$1 = $321;
    label = 82;
    break;
   }
   case 115:  {
    $322 = HEAP32[$arg>>2]|0;
    $323 = ($322|0)!=(0|0);
    $324 = $323 ? $322 : 18418;
    $a$1 = $324;
    label = 82;
    break;
   }
   case 67:  {
    $331 = $arg;
    $332 = $331;
    $333 = HEAP32[$332>>2]|0;
    $334 = (($331) + 4)|0;
    $335 = $334;
    $336 = HEAP32[$335>>2]|0;
    HEAP32[$wc>>2] = $333;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $p$4195 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $337 = ($p$0|0)==(0);
    if ($337) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa197 = 0;
     label = 98;
    } else {
     $p$4195 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $364 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $364;$365 = HEAP32[tempDoublePtr>>2]|0;
    $366 = HEAP32[tempDoublePtr+4>>2]|0;
    $367 = ($366|0)<(0);
    if ($367) {
     $368 = -$364;
     $$07$i = $368;$pl$0$i = 1;$prefix$0$i = 18425;
    } else {
     $369 = $fl$1$ & 2048;
     $370 = ($369|0)==(0);
     if ($370) {
      $371 = $fl$1$ & 1;
      $372 = ($371|0)==(0);
      $$$i = $372 ? (18426) : (18431);
      $$07$i = $364;$pl$0$i = $371;$prefix$0$i = $$$i;
     } else {
      $$07$i = $364;$pl$0$i = 1;$prefix$0$i = (18428);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$373 = HEAP32[tempDoublePtr>>2]|0;
    $374 = HEAP32[tempDoublePtr+4>>2]|0;
    $375 = $374 & 2146435072;
    $376 = ($375>>>0)<(2146435072);
    $377 = (0)<(0);
    $378 = ($375|0)==(2146435072);
    $379 = $378 & $377;
    $380 = $376 | $379;
    do {
     if ($380) {
      $396 = (+_frexpl($$07$i,$e2$i));
      $397 = $396 * 2.0;
      $398 = $397 != 0.0;
      if ($398) {
       $399 = HEAP32[$e2$i>>2]|0;
       $400 = (($399) + -1)|0;
       HEAP32[$e2$i>>2] = $400;
      }
      $401 = $t$0 | 32;
      $402 = ($401|0)==(97);
      if ($402) {
       $403 = $t$0 & 32;
       $404 = ($403|0)==(0);
       $405 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $404 ? $prefix$0$i : $405;
       $406 = $pl$0$i | 2;
       $407 = ($p$0>>>0)>(11);
       $408 = (12 - ($p$0))|0;
       $409 = ($408|0)==(0);
       $410 = $407 | $409;
       do {
        if ($410) {
         $$1$i = $397;
        } else {
         $re$172$i = $408;$round$071$i = 8.0;
         while(1) {
          $411 = (($re$172$i) + -1)|0;
          $412 = $round$071$i * 16.0;
          $413 = ($411|0)==(0);
          if ($413) {
           $$lcssa347 = $412;
           break;
          } else {
           $re$172$i = $411;$round$071$i = $412;
          }
         }
         $414 = HEAP8[$prefix$0$$i>>0]|0;
         $415 = ($414<<24>>24)==(45);
         if ($415) {
          $416 = -$397;
          $417 = $416 - $$lcssa347;
          $418 = $$lcssa347 + $417;
          $419 = -$418;
          $$1$i = $419;
          break;
         } else {
          $420 = $397 + $$lcssa347;
          $421 = $420 - $$lcssa347;
          $$1$i = $421;
          break;
         }
        }
       } while(0);
       $422 = HEAP32[$e2$i>>2]|0;
       $423 = ($422|0)<(0);
       $424 = (0 - ($422))|0;
       $425 = $423 ? $424 : $422;
       $426 = ($425|0)<(0);
       $427 = $426 << 31 >> 31;
       $428 = (_fmt_u($425,$427,$5)|0);
       $429 = ($428|0)==($5|0);
       if ($429) {
        HEAP8[$6>>0] = 48;
        $estr$0$i = $6;
       } else {
        $estr$0$i = $428;
       }
       $430 = $422 >> 31;
       $431 = $430 & 2;
       $432 = (($431) + 43)|0;
       $433 = $432&255;
       $434 = ((($estr$0$i)) + -1|0);
       HEAP8[$434>>0] = $433;
       $435 = (($t$0) + 15)|0;
       $436 = $435&255;
       $437 = ((($estr$0$i)) + -2|0);
       HEAP8[$437>>0] = $436;
       $notrhs$i = ($p$0|0)<(1);
       $438 = $fl$1$ & 8;
       $439 = ($438|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $440 = (~~(($$2$i)));
        $441 = (18392 + ($440)|0);
        $442 = HEAP8[$441>>0]|0;
        $443 = $442&255;
        $444 = $443 | $403;
        $445 = $444&255;
        $446 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $445;
        $447 = (+($440|0));
        $448 = $$2$i - $447;
        $449 = $448 * 16.0;
        $450 = $446;
        $451 = (($450) - ($7))|0;
        $452 = ($451|0)==(1);
        do {
         if ($452) {
          $notlhs$i = $449 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $439 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $446;
           break;
          }
          $453 = ((($s$0$i)) + 2|0);
          HEAP8[$446>>0] = 46;
          $s$1$i = $453;
         } else {
          $s$1$i = $446;
         }
        } while(0);
        $454 = $449 != 0.0;
        if ($454) {
         $$2$i = $449;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $455 = ($p$0|0)!=(0);
       $$pre185$i = $s$1$i$lcssa;
       $456 = (($10) + ($$pre185$i))|0;
       $457 = ($456|0)<($p$0|0);
       $or$cond239 = $455 & $457;
       $458 = $437;
       $459 = (($11) + ($p$0))|0;
       $460 = (($459) - ($458))|0;
       $461 = $437;
       $462 = (($9) - ($461))|0;
       $463 = (($462) + ($$pre185$i))|0;
       $l$0$i = $or$cond239 ? $460 : $463;
       $464 = (($l$0$i) + ($406))|0;
       _pad($f,32,$w$1,$464,$fl$1$);
       $465 = HEAP32[$f>>2]|0;
       $466 = $465 & 32;
       $467 = ($466|0)==(0);
       if ($467) {
        (___fwritex($prefix$0$$i,$406,$f)|0);
       }
       $468 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$464,$468);
       $469 = (($$pre185$i) - ($7))|0;
       $470 = HEAP32[$f>>2]|0;
       $471 = $470 & 32;
       $472 = ($471|0)==(0);
       if ($472) {
        (___fwritex($buf$i,$469,$f)|0);
       }
       $473 = $437;
       $474 = (($8) - ($473))|0;
       $sum = (($469) + ($474))|0;
       $475 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$475,0,0);
       $476 = HEAP32[$f>>2]|0;
       $477 = $476 & 32;
       $478 = ($477|0)==(0);
       if ($478) {
        (___fwritex($437,$474,$f)|0);
       }
       $479 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$464,$479);
       $480 = ($464|0)<($w$1|0);
       $w$$i = $480 ? $w$1 : $464;
       $$0$i = $w$$i;
       break;
      }
      $481 = ($p$0|0)<(0);
      $$p$i = $481 ? 6 : $p$0;
      if ($398) {
       $482 = $397 * 268435456.0;
       $483 = HEAP32[$e2$i>>2]|0;
       $484 = (($483) + -28)|0;
       HEAP32[$e2$i>>2] = $484;
       $$3$i = $482;$485 = $484;
      } else {
       $$pre182$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $397;$485 = $$pre182$i;
      }
      $486 = ($485|0)<(0);
      $$33$i = $486 ? $big$i : $12;
      $487 = $$33$i;
      $$4$i = $$3$i;$z$0$i = $$33$i;
      while(1) {
       $488 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $488;
       $489 = ((($z$0$i)) + 4|0);
       $490 = (+($488>>>0));
       $491 = $$4$i - $490;
       $492 = $491 * 1.0E+9;
       $493 = $492 != 0.0;
       if ($493) {
        $$4$i = $492;$z$0$i = $489;
       } else {
        $$lcssa331 = $489;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $494 = ($$pr$i|0)>(0);
      if ($494) {
       $495 = $$pr$i;$a$1150$i = $$33$i;$z$1149$i = $$lcssa331;
       while(1) {
        $496 = ($495|0)>(29);
        $497 = $496 ? 29 : $495;
        $d$0$142$i = ((($z$1149$i)) + -4|0);
        $498 = ($d$0$142$i>>>0)<($a$1150$i>>>0);
        do {
         if ($498) {
          $a$2$ph$i = $a$1150$i;
         } else {
          $carry$0143$i = 0;$d$0144$i = $d$0$142$i;
          while(1) {
           $499 = HEAP32[$d$0144$i>>2]|0;
           $500 = (_bitshift64Shl(($499|0),0,($497|0))|0);
           $501 = tempRet0;
           $502 = (_i64Add(($500|0),($501|0),($carry$0143$i|0),0)|0);
           $503 = tempRet0;
           $504 = (___uremdi3(($502|0),($503|0),1000000000,0)|0);
           $505 = tempRet0;
           HEAP32[$d$0144$i>>2] = $504;
           $506 = (___udivdi3(($502|0),($503|0),1000000000,0)|0);
           $507 = tempRet0;
           $d$0$i = ((($d$0144$i)) + -4|0);
           $508 = ($d$0$i>>>0)<($a$1150$i>>>0);
           if ($508) {
            $$lcssa332 = $506;
            break;
           } else {
            $carry$0143$i = $506;$d$0144$i = $d$0$i;
           }
          }
          $509 = ($$lcssa332|0)==(0);
          if ($509) {
           $a$2$ph$i = $a$1150$i;
           break;
          }
          $510 = ((($a$1150$i)) + -4|0);
          HEAP32[$510>>2] = $$lcssa332;
          $a$2$ph$i = $510;
         }
        } while(0);
        $z$2$i = $z$1149$i;
        while(1) {
         $511 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($511)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $512 = ((($z$2$i)) + -4|0);
         $513 = HEAP32[$512>>2]|0;
         $514 = ($513|0)==(0);
         if ($514) {
          $z$2$i = $512;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $515 = HEAP32[$e2$i>>2]|0;
        $516 = (($515) - ($497))|0;
        HEAP32[$e2$i>>2] = $516;
        $517 = ($516|0)>(0);
        if ($517) {
         $495 = $516;$a$1150$i = $a$2$ph$i;$z$1149$i = $z$2$i$lcssa;
        } else {
         $$pr50$i = $516;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr50$i = $$pr$i;$a$1$lcssa$i = $$33$i;$z$1$lcssa$i = $$lcssa331;
      }
      $518 = ($$pr50$i|0)<(0);
      if ($518) {
       $519 = (($$p$i) + 25)|0;
       $520 = (($519|0) / 9)&-1;
       $521 = (($520) + 1)|0;
       $522 = ($401|0)==(102);
       $524 = $$pr50$i;$a$3137$i = $a$1$lcssa$i;$z$3136$i = $z$1$lcssa$i;
       while(1) {
        $523 = (0 - ($524))|0;
        $525 = ($523|0)>(9);
        $526 = $525 ? 9 : $523;
        $527 = ($a$3137$i>>>0)<($z$3136$i>>>0);
        do {
         if ($527) {
          $531 = 1 << $526;
          $532 = (($531) + -1)|0;
          $533 = 1000000000 >>> $526;
          $carry3$0131$i = 0;$d$1130$i = $a$3137$i;
          while(1) {
           $534 = HEAP32[$d$1130$i>>2]|0;
           $535 = $534 & $532;
           $536 = $534 >>> $526;
           $537 = (($536) + ($carry3$0131$i))|0;
           HEAP32[$d$1130$i>>2] = $537;
           $538 = Math_imul($535, $533)|0;
           $539 = ((($d$1130$i)) + 4|0);
           $540 = ($539>>>0)<($z$3136$i>>>0);
           if ($540) {
            $carry3$0131$i = $538;$d$1130$i = $539;
           } else {
            $$lcssa334 = $538;
            break;
           }
          }
          $541 = HEAP32[$a$3137$i>>2]|0;
          $542 = ($541|0)==(0);
          $543 = ((($a$3137$i)) + 4|0);
          $$a$3$i = $542 ? $543 : $a$3137$i;
          $544 = ($$lcssa334|0)==(0);
          if ($544) {
           $$a$3189$i = $$a$3$i;$z$4$i = $z$3136$i;
           break;
          }
          $545 = ((($z$3136$i)) + 4|0);
          HEAP32[$z$3136$i>>2] = $$lcssa334;
          $$a$3189$i = $$a$3$i;$z$4$i = $545;
         } else {
          $528 = HEAP32[$a$3137$i>>2]|0;
          $529 = ($528|0)==(0);
          $530 = ((($a$3137$i)) + 4|0);
          $$a$3$188$i = $529 ? $530 : $a$3137$i;
          $$a$3189$i = $$a$3$188$i;$z$4$i = $z$3136$i;
         }
        } while(0);
        $546 = $522 ? $$33$i : $$a$3189$i;
        $547 = $z$4$i;
        $548 = $546;
        $549 = (($547) - ($548))|0;
        $550 = $549 >> 2;
        $551 = ($550|0)>($521|0);
        $552 = (($546) + ($521<<2)|0);
        $$z$4$i = $551 ? $552 : $z$4$i;
        $553 = HEAP32[$e2$i>>2]|0;
        $554 = (($553) + ($526))|0;
        HEAP32[$e2$i>>2] = $554;
        $555 = ($554|0)<(0);
        if ($555) {
         $524 = $554;$a$3137$i = $$a$3189$i;$z$3136$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3189$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $556 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($556) {
        $557 = $a$3$lcssa$i;
        $558 = (($487) - ($557))|0;
        $559 = $558 >> 2;
        $560 = ($559*9)|0;
        $561 = HEAP32[$a$3$lcssa$i>>2]|0;
        $562 = ($561>>>0)<(10);
        if ($562) {
         $e$1$i = $560;
         break;
        } else {
         $e$0126$i = $560;$i$0125$i = 10;
        }
        while(1) {
         $563 = ($i$0125$i*10)|0;
         $564 = (($e$0126$i) + 1)|0;
         $565 = ($561>>>0)<($563>>>0);
         if ($565) {
          $e$1$i = $564;
          break;
         } else {
          $e$0126$i = $564;$i$0125$i = $563;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $566 = ($401|0)!=(102);
      $567 = $566 ? $e$1$i : 0;
      $568 = (($$p$i) - ($567))|0;
      $569 = ($401|0)==(103);
      $570 = ($$p$i|0)!=(0);
      $571 = $570 & $569;
      $$neg55$i = $571 << 31 >> 31;
      $572 = (($568) + ($$neg55$i))|0;
      $573 = $z$3$lcssa$i;
      $574 = (($573) - ($487))|0;
      $575 = $574 >> 2;
      $576 = ($575*9)|0;
      $577 = (($576) + -9)|0;
      $578 = ($572|0)<($577|0);
      if ($578) {
       $579 = ((($$33$i)) + 4|0);
       $580 = (($572) + 9216)|0;
       $581 = (($580|0) / 9)&-1;
       $582 = (($581) + -1024)|0;
       $583 = (($579) + ($582<<2)|0);
       $584 = (($580|0) % 9)&-1;
       $j$0$118$i = (($584) + 1)|0;
       $585 = ($j$0$118$i|0)<(9);
       if ($585) {
        $i$1119$i = 10;$j$0120$i = $j$0$118$i;
        while(1) {
         $586 = ($i$1119$i*10)|0;
         $j$0$i = (($j$0120$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $586;
          break;
         } else {
          $i$1119$i = $586;$j$0120$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $587 = HEAP32[$583>>2]|0;
       $588 = (($587>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $589 = ($588|0)==(0);
       $590 = ((($583)) + 4|0);
       $591 = ($590|0)==($z$3$lcssa$i|0);
       $or$cond18$i = $591 & $589;
       do {
        if ($or$cond18$i) {
         $a$8$i = $a$3$lcssa$i;$d$4$i = $583;$e$4$i = $e$1$i;
        } else {
         $592 = (($587>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $593 = $592 & 1;
         $594 = ($593|0)==(0);
         $$20$i = $594 ? 9007199254740992.0 : 9007199254740994.0;
         $595 = (($i$1$lcssa$i|0) / 2)&-1;
         $596 = ($588>>>0)<($595>>>0);
         if ($596) {
          $small$0$i = 0.5;
         } else {
          $597 = ($588|0)==($595|0);
          $or$cond22$i = $591 & $597;
          $$36$i = $or$cond22$i ? 1.0 : 1.5;
          $small$0$i = $$36$i;
         }
         $598 = ($pl$0$i|0)==(0);
         do {
          if ($598) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $599 = HEAP8[$prefix$0$i>>0]|0;
           $600 = ($599<<24>>24)==(45);
           if (!($600)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $601 = -$$20$i;
           $602 = -$small$0$i;
           $round6$1$i = $601;$small$1$i = $602;
          }
         } while(0);
         $603 = (($587) - ($588))|0;
         HEAP32[$583>>2] = $603;
         $604 = $round6$1$i + $small$1$i;
         $605 = $604 != $round6$1$i;
         if (!($605)) {
          $a$8$i = $a$3$lcssa$i;$d$4$i = $583;$e$4$i = $e$1$i;
          break;
         }
         $606 = (($603) + ($i$1$lcssa$i))|0;
         HEAP32[$583>>2] = $606;
         $607 = ($606>>>0)>(999999999);
         if ($607) {
          $a$5112$i = $a$3$lcssa$i;$d$2111$i = $583;
          while(1) {
           $608 = ((($d$2111$i)) + -4|0);
           HEAP32[$d$2111$i>>2] = 0;
           $609 = ($608>>>0)<($a$5112$i>>>0);
           if ($609) {
            $610 = ((($a$5112$i)) + -4|0);
            HEAP32[$610>>2] = 0;
            $a$6$i = $610;
           } else {
            $a$6$i = $a$5112$i;
           }
           $611 = HEAP32[$608>>2]|0;
           $612 = (($611) + 1)|0;
           HEAP32[$608>>2] = $612;
           $613 = ($612>>>0)>(999999999);
           if ($613) {
            $a$5112$i = $a$6$i;$d$2111$i = $608;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $608;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $583;
         }
         $614 = $a$5$lcssa$i;
         $615 = (($487) - ($614))|0;
         $616 = $615 >> 2;
         $617 = ($616*9)|0;
         $618 = HEAP32[$a$5$lcssa$i>>2]|0;
         $619 = ($618>>>0)<(10);
         if ($619) {
          $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $617;
          break;
         } else {
          $e$2107$i = $617;$i$2106$i = 10;
         }
         while(1) {
          $620 = ($i$2106$i*10)|0;
          $621 = (($e$2107$i) + 1)|0;
          $622 = ($618>>>0)<($620>>>0);
          if ($622) {
           $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $621;
           break;
          } else {
           $e$2107$i = $621;$i$2106$i = $620;
          }
         }
        }
       } while(0);
       $623 = ((($d$4$i)) + 4|0);
       $624 = ($z$3$lcssa$i>>>0)>($623>>>0);
       $$z$3$i = $624 ? $623 : $z$3$lcssa$i;
       $a$9$ph$i = $a$8$i;$e$5$ph$i = $e$4$i;$z$7$ph$i = $$z$3$i;
      } else {
       $a$9$ph$i = $a$3$lcssa$i;$e$5$ph$i = $e$1$i;$z$7$ph$i = $z$3$lcssa$i;
      }
      $625 = (0 - ($e$5$ph$i))|0;
      $z$7$i = $z$7$ph$i;
      while(1) {
       $626 = ($z$7$i>>>0)>($a$9$ph$i>>>0);
       if (!($626)) {
        $$lcssa162$i = 0;$z$7$i$lcssa = $z$7$i;
        break;
       }
       $627 = ((($z$7$i)) + -4|0);
       $628 = HEAP32[$627>>2]|0;
       $629 = ($628|0)==(0);
       if ($629) {
        $z$7$i = $627;
       } else {
        $$lcssa162$i = 1;$z$7$i$lcssa = $z$7$i;
        break;
       }
      }
      do {
       if ($569) {
        $630 = $570&1;
        $631 = $630 ^ 1;
        $$p$$i = (($631) + ($$p$i))|0;
        $632 = ($$p$$i|0)>($e$5$ph$i|0);
        $633 = ($e$5$ph$i|0)>(-5);
        $or$cond6$i = $632 & $633;
        if ($or$cond6$i) {
         $634 = (($t$0) + -1)|0;
         $$neg56$i = (($$p$$i) + -1)|0;
         $635 = (($$neg56$i) - ($e$5$ph$i))|0;
         $$013$i = $634;$$210$i = $635;
        } else {
         $636 = (($t$0) + -2)|0;
         $637 = (($$p$$i) + -1)|0;
         $$013$i = $636;$$210$i = $637;
        }
        $638 = $fl$1$ & 8;
        $639 = ($638|0)==(0);
        if (!($639)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi187$iZ2D = $638;
         break;
        }
        do {
         if ($$lcssa162$i) {
          $640 = ((($z$7$i$lcssa)) + -4|0);
          $641 = HEAP32[$640>>2]|0;
          $642 = ($641|0)==(0);
          if ($642) {
           $j$2$i = 9;
           break;
          }
          $643 = (($641>>>0) % 10)&-1;
          $644 = ($643|0)==(0);
          if ($644) {
           $i$3102$i = 10;$j$1103$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $645 = ($i$3102$i*10)|0;
           $646 = (($j$1103$i) + 1)|0;
           $647 = (($641>>>0) % ($645>>>0))&-1;
           $648 = ($647|0)==(0);
           if ($648) {
            $i$3102$i = $645;$j$1103$i = $646;
           } else {
            $j$2$i = $646;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $649 = $$013$i | 32;
        $650 = ($649|0)==(102);
        $651 = $z$7$i$lcssa;
        $652 = (($651) - ($487))|0;
        $653 = $652 >> 2;
        $654 = ($653*9)|0;
        $655 = (($654) + -9)|0;
        if ($650) {
         $656 = (($655) - ($j$2$i))|0;
         $657 = ($656|0)<(0);
         $$23$i = $657 ? 0 : $656;
         $658 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $658 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi187$iZ2D = 0;
         break;
        } else {
         $659 = (($655) + ($e$5$ph$i))|0;
         $660 = (($659) - ($j$2$i))|0;
         $661 = ($660|0)<(0);
         $$25$i = $661 ? 0 : $660;
         $662 = ($$210$i|0)<($$25$i|0);
         $$210$$26$i = $662 ? $$210$i : $$25$i;
         $$114$i = $$013$i;$$311$i = $$210$$26$i;$$pre$phi187$iZ2D = 0;
         break;
        }
       } else {
        $$pre186$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi187$iZ2D = $$pre186$i;
       }
      } while(0);
      $663 = $$311$i | $$pre$phi187$iZ2D;
      $664 = ($663|0)!=(0);
      $665 = $664&1;
      $666 = $$114$i | 32;
      $667 = ($666|0)==(102);
      if ($667) {
       $668 = ($e$5$ph$i|0)>(0);
       $669 = $668 ? $e$5$ph$i : 0;
       $$pn$i = $669;$estr$2$i = 0;
      } else {
       $670 = ($e$5$ph$i|0)<(0);
       $671 = $670 ? $625 : $e$5$ph$i;
       $672 = ($671|0)<(0);
       $673 = $672 << 31 >> 31;
       $674 = (_fmt_u($671,$673,$5)|0);
       $675 = $674;
       $676 = (($8) - ($675))|0;
       $677 = ($676|0)<(2);
       if ($677) {
        $estr$196$i = $674;
        while(1) {
         $678 = ((($estr$196$i)) + -1|0);
         HEAP8[$678>>0] = 48;
         $679 = $678;
         $680 = (($8) - ($679))|0;
         $681 = ($680|0)<(2);
         if ($681) {
          $estr$196$i = $678;
         } else {
          $estr$1$lcssa$i = $678;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $674;
       }
       $682 = $e$5$ph$i >> 31;
       $683 = $682 & 2;
       $684 = (($683) + 43)|0;
       $685 = $684&255;
       $686 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$686>>0] = $685;
       $687 = $$114$i&255;
       $688 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$688>>0] = $687;
       $689 = $688;
       $690 = (($8) - ($689))|0;
       $$pn$i = $690;$estr$2$i = $688;
      }
      $691 = (($pl$0$i) + 1)|0;
      $692 = (($691) + ($$311$i))|0;
      $l$1$i = (($692) + ($665))|0;
      $693 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$693,$fl$1$);
      $694 = HEAP32[$f>>2]|0;
      $695 = $694 & 32;
      $696 = ($695|0)==(0);
      if ($696) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $697 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$693,$697);
      do {
       if ($667) {
        $698 = ($a$9$ph$i>>>0)>($$33$i>>>0);
        $r$0$a$9$i = $698 ? $$33$i : $a$9$ph$i;
        $d$585$i = $r$0$a$9$i;
        while(1) {
         $699 = HEAP32[$d$585$i>>2]|0;
         $700 = (_fmt_u($699,0,$13)|0);
         $701 = ($d$585$i|0)==($r$0$a$9$i|0);
         do {
          if ($701) {
           $705 = ($700|0)==($13|0);
           if (!($705)) {
            $s7$1$i = $700;
            break;
           }
           HEAP8[$15>>0] = 48;
           $s7$1$i = $15;
          } else {
           $702 = ($700>>>0)>($buf$i>>>0);
           if ($702) {
            $s7$082$i = $700;
           } else {
            $s7$1$i = $700;
            break;
           }
           while(1) {
            $703 = ((($s7$082$i)) + -1|0);
            HEAP8[$703>>0] = 48;
            $704 = ($703>>>0)>($buf$i>>>0);
            if ($704) {
             $s7$082$i = $703;
            } else {
             $s7$1$i = $703;
             break;
            }
           }
          }
         } while(0);
         $706 = HEAP32[$f>>2]|0;
         $707 = $706 & 32;
         $708 = ($707|0)==(0);
         if ($708) {
          $709 = $s7$1$i;
          $710 = (($14) - ($709))|0;
          (___fwritex($s7$1$i,$710,$f)|0);
         }
         $711 = ((($d$585$i)) + 4|0);
         $712 = ($711>>>0)>($$33$i>>>0);
         if ($712) {
          $$lcssa344 = $711;
          break;
         } else {
          $d$585$i = $711;
         }
        }
        $713 = ($663|0)==(0);
        do {
         if (!($713)) {
          $714 = HEAP32[$f>>2]|0;
          $715 = $714 & 32;
          $716 = ($715|0)==(0);
          if (!($716)) {
           break;
          }
          (___fwritex(18460,1,$f)|0);
         }
        } while(0);
        $717 = ($$lcssa344>>>0)<($z$7$i$lcssa>>>0);
        $718 = ($$311$i|0)>(0);
        $719 = $718 & $717;
        if ($719) {
         $$41279$i = $$311$i;$d$678$i = $$lcssa344;
         while(1) {
          $720 = HEAP32[$d$678$i>>2]|0;
          $721 = (_fmt_u($720,0,$13)|0);
          $722 = ($721>>>0)>($buf$i>>>0);
          if ($722) {
           $s8$073$i = $721;
           while(1) {
            $723 = ((($s8$073$i)) + -1|0);
            HEAP8[$723>>0] = 48;
            $724 = ($723>>>0)>($buf$i>>>0);
            if ($724) {
             $s8$073$i = $723;
            } else {
             $s8$0$lcssa$i = $723;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $721;
          }
          $725 = HEAP32[$f>>2]|0;
          $726 = $725 & 32;
          $727 = ($726|0)==(0);
          if ($727) {
           $728 = ($$41279$i|0)>(9);
           $729 = $728 ? 9 : $$41279$i;
           (___fwritex($s8$0$lcssa$i,$729,$f)|0);
          }
          $730 = ((($d$678$i)) + 4|0);
          $731 = (($$41279$i) + -9)|0;
          $732 = ($730>>>0)<($z$7$i$lcssa>>>0);
          $733 = ($$41279$i|0)>(9);
          $734 = $733 & $732;
          if ($734) {
           $$41279$i = $731;$d$678$i = $730;
          } else {
           $$412$lcssa$i = $731;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $735 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$735,9,0);
       } else {
        $736 = ((($a$9$ph$i)) + 4|0);
        $z$7$$i = $$lcssa162$i ? $z$7$i$lcssa : $736;
        $737 = ($$311$i|0)>(-1);
        if ($737) {
         $738 = ($$pre$phi187$iZ2D|0)==(0);
         $$590$i = $$311$i;$d$789$i = $a$9$ph$i;
         while(1) {
          $739 = HEAP32[$d$789$i>>2]|0;
          $740 = (_fmt_u($739,0,$13)|0);
          $741 = ($740|0)==($13|0);
          if ($741) {
           HEAP8[$15>>0] = 48;
           $s9$0$i = $15;
          } else {
           $s9$0$i = $740;
          }
          $742 = ($d$789$i|0)==($a$9$ph$i|0);
          do {
           if ($742) {
            $746 = ((($s9$0$i)) + 1|0);
            $747 = HEAP32[$f>>2]|0;
            $748 = $747 & 32;
            $749 = ($748|0)==(0);
            if ($749) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $750 = ($$590$i|0)<(1);
            $or$cond31$i = $738 & $750;
            if ($or$cond31$i) {
             $s9$2$i = $746;
             break;
            }
            $751 = HEAP32[$f>>2]|0;
            $752 = $751 & 32;
            $753 = ($752|0)==(0);
            if (!($753)) {
             $s9$2$i = $746;
             break;
            }
            (___fwritex(18460,1,$f)|0);
            $s9$2$i = $746;
           } else {
            $743 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($743) {
             $s9$186$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $744 = ((($s9$186$i)) + -1|0);
             HEAP8[$744>>0] = 48;
             $745 = ($744>>>0)>($buf$i>>>0);
             if ($745) {
              $s9$186$i = $744;
             } else {
              $s9$2$i = $744;
              break;
             }
            }
           }
          } while(0);
          $754 = $s9$2$i;
          $755 = (($14) - ($754))|0;
          $756 = HEAP32[$f>>2]|0;
          $757 = $756 & 32;
          $758 = ($757|0)==(0);
          if ($758) {
           $759 = ($$590$i|0)>($755|0);
           $760 = $759 ? $755 : $$590$i;
           (___fwritex($s9$2$i,$760,$f)|0);
          }
          $761 = (($$590$i) - ($755))|0;
          $762 = ((($d$789$i)) + 4|0);
          $763 = ($762>>>0)<($z$7$$i>>>0);
          $764 = ($761|0)>(-1);
          $765 = $763 & $764;
          if ($765) {
           $$590$i = $761;$d$789$i = $762;
          } else {
           $$5$lcssa$i = $761;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $766 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$766,18,0);
        $767 = HEAP32[$f>>2]|0;
        $768 = $767 & 32;
        $769 = ($768|0)==(0);
        if (!($769)) {
         break;
        }
        $770 = $estr$2$i;
        $771 = (($8) - ($770))|0;
        (___fwritex($estr$2$i,$771,$f)|0);
       }
      } while(0);
      $772 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$693,$772);
      $773 = ($693|0)<($w$1|0);
      $w$32$i = $773 ? $w$1 : $693;
      $$0$i = $w$32$i;
     } else {
      $381 = $t$0 & 32;
      $382 = ($381|0)!=(0);
      $383 = $382 ? 18444 : 18448;
      $384 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $385 = $382 ? 18452 : 18456;
      $pl$1$i = $384 ? 0 : $pl$0$i;
      $s1$0$i = $384 ? $385 : $383;
      $386 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$386,$180);
      $387 = HEAP32[$f>>2]|0;
      $388 = $387 & 32;
      $389 = ($388|0)==(0);
      if ($389) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $391 = $$pre$i;
      } else {
       $391 = $387;
      }
      $390 = $391 & 32;
      $392 = ($390|0)==(0);
      if ($392) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $393 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$386,$393);
      $394 = ($386|0)<($w$1|0);
      $395 = $394 ? $w$1 : $386;
      $$0$i = $395;
     }
    } while(0);
    $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $a$2 = $22;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 18408;$z$2 = $1;
   }
   }
  } while(0);
  L308: do {
   if ((label|0) == 64) {
    label = 0;
    $211 = $arg;
    $212 = $211;
    $213 = HEAP32[$212>>2]|0;
    $214 = (($211) + 4)|0;
    $215 = $214;
    $216 = HEAP32[$215>>2]|0;
    $217 = $t$1 & 32;
    $218 = ($213|0)==(0);
    $219 = ($216|0)==(0);
    $220 = $218 & $219;
    if ($220) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 18408;
     label = 77;
    } else {
     $$012$i = $1;$222 = $213;$229 = $216;
     while(1) {
      $221 = $222 & 15;
      $223 = (18392 + ($221)|0);
      $224 = HEAP8[$223>>0]|0;
      $225 = $224&255;
      $226 = $225 | $217;
      $227 = $226&255;
      $228 = ((($$012$i)) + -1|0);
      HEAP8[$228>>0] = $227;
      $230 = (_bitshift64Lshr(($222|0),($229|0),4)|0);
      $231 = tempRet0;
      $232 = ($230|0)==(0);
      $233 = ($231|0)==(0);
      $234 = $232 & $233;
      if ($234) {
       $$lcssa349 = $228;
       break;
      } else {
       $$012$i = $228;$222 = $230;$229 = $231;
      }
     }
     $235 = $arg;
     $236 = $235;
     $237 = HEAP32[$236>>2]|0;
     $238 = (($235) + 4)|0;
     $239 = $238;
     $240 = HEAP32[$239>>2]|0;
     $241 = ($237|0)==(0);
     $242 = ($240|0)==(0);
     $243 = $241 & $242;
     $244 = $fl$3 & 8;
     $245 = ($244|0)==(0);
     $or$cond17 = $245 | $243;
     if ($or$cond17) {
      $a$0 = $$lcssa349;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 18408;
      label = 77;
     } else {
      $246 = $t$1 >> 4;
      $247 = (18408 + ($246)|0);
      $a$0 = $$lcssa349;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $247;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $293 = (_fmt_u($291,$292,$1)|0);
    $a$0 = $293;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $325 = (_memchr($a$1,0,$p$0)|0);
    $326 = ($325|0)==(0|0);
    $327 = $325;
    $328 = $a$1;
    $329 = (($327) - ($328))|0;
    $330 = (($a$1) + ($p$0)|0);
    $z$1 = $326 ? $330 : $325;
    $p$3 = $326 ? $p$0 : $329;
    $a$2 = $a$1;$fl$6 = $180;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 18408;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $338 = HEAP32[$arg>>2]|0;
    $i$0108 = 0;$l$1107 = 0;$ws$0109 = $338;
    while(1) {
     $339 = HEAP32[$ws$0109>>2]|0;
     $340 = ($339|0)==(0);
     if ($340) {
      $i$0$lcssa = $i$0108;$l$2 = $l$1107;
      break;
     }
     $341 = (_wctomb($mb,$339)|0);
     $342 = ($341|0)<(0);
     $343 = (($p$4195) - ($i$0108))|0;
     $344 = ($341>>>0)>($343>>>0);
     $or$cond20 = $342 | $344;
     if ($or$cond20) {
      $i$0$lcssa = $i$0108;$l$2 = $341;
      break;
     }
     $345 = ((($ws$0109)) + 4|0);
     $346 = (($341) + ($i$0108))|0;
     $347 = ($p$4195>>>0)>($346>>>0);
     if ($347) {
      $i$0108 = $346;$l$1107 = $341;$ws$0109 = $345;
     } else {
      $i$0$lcssa = $346;$l$2 = $341;
      break;
     }
    }
    $348 = ($l$2|0)<(0);
    if ($348) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $349 = ($i$0$lcssa|0)==(0);
    if ($349) {
     $i$0$lcssa197 = 0;
     label = 98;
    } else {
     $350 = HEAP32[$arg>>2]|0;
     $i$1119 = 0;$ws$1120 = $350;
     while(1) {
      $351 = HEAP32[$ws$1120>>2]|0;
      $352 = ($351|0)==(0);
      if ($352) {
       $i$0$lcssa197 = $i$0$lcssa;
       label = 98;
       break L308;
      }
      $353 = ((($ws$1120)) + 4|0);
      $354 = (_wctomb($mb,$351)|0);
      $355 = (($354) + ($i$1119))|0;
      $356 = ($355|0)>($i$0$lcssa|0);
      if ($356) {
       $i$0$lcssa197 = $i$0$lcssa;
       label = 98;
       break L308;
      }
      $357 = HEAP32[$f>>2]|0;
      $358 = $357 & 32;
      $359 = ($358|0)==(0);
      if ($359) {
       (___fwritex($mb,$354,$f)|0);
      }
      $360 = ($355>>>0)<($i$0$lcssa>>>0);
      if ($360) {
       $i$1119 = $355;$ws$1120 = $353;
      } else {
       $i$0$lcssa197 = $i$0$lcssa;
       label = 98;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 98) {
   label = 0;
   $361 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa197,$361);
   $362 = ($w$1|0)>($i$0$lcssa197|0);
   $363 = $362 ? $w$1 : $i$0$lcssa197;
   $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $363;$l10n$0 = $l10n$3;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $294 = ($p$2|0)>(-1);
   $295 = $fl$4 & -65537;
   $$fl$4 = $294 ? $295 : $fl$4;
   $296 = $arg;
   $297 = $296;
   $298 = HEAP32[$297>>2]|0;
   $299 = (($296) + 4)|0;
   $300 = $299;
   $301 = HEAP32[$300>>2]|0;
   $302 = ($298|0)!=(0);
   $303 = ($301|0)!=(0);
   $304 = $302 | $303;
   $305 = ($p$2|0)!=(0);
   $or$cond = $305 | $304;
   if ($or$cond) {
    $306 = $a$0;
    $307 = (($2) - ($306))|0;
    $308 = $304&1;
    $309 = $308 ^ 1;
    $310 = (($309) + ($307))|0;
    $311 = ($p$2|0)>($310|0);
    $p$2$ = $311 ? $p$2 : $310;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $774 = $z$2;
  $775 = $a$2;
  $776 = (($774) - ($775))|0;
  $777 = ($p$5|0)<($776|0);
  $$p$5 = $777 ? $776 : $p$5;
  $778 = (($pl$2) + ($$p$5))|0;
  $779 = ($w$1|0)<($778|0);
  $w$2 = $779 ? $778 : $w$1;
  _pad($f,32,$w$2,$778,$fl$6);
  $780 = HEAP32[$f>>2]|0;
  $781 = $780 & 32;
  $782 = ($781|0)==(0);
  if ($782) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $783 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$778,$783);
  _pad($f,48,$$p$5,$776,0);
  $784 = HEAP32[$f>>2]|0;
  $785 = $784 & 32;
  $786 = ($785|0)==(0);
  if ($786) {
   (___fwritex($a$2,$776,$f)|0);
  }
  $787 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$778,$787);
  $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 L343: do {
  if ((label|0) == 242) {
   $788 = ($f|0)==(0|0);
   if ($788) {
    $789 = ($l10n$0$lcssa|0)==(0);
    if ($789) {
     $$0 = 0;
    } else {
     $i$295 = 1;
     while(1) {
      $790 = (($nl_type) + ($i$295<<2)|0);
      $791 = HEAP32[$790>>2]|0;
      $792 = ($791|0)==(0);
      if ($792) {
       $i$295$lcssa = $i$295;
       break;
      }
      $794 = (($nl_arg) + ($i$295<<3)|0);
      _pop_arg($794,$791,$ap);
      $795 = (($i$295) + 1)|0;
      $796 = ($795|0)<(10);
      if ($796) {
       $i$295 = $795;
      } else {
       $$0 = 1;
       break L343;
      }
     }
     $793 = ($i$295$lcssa|0)<(10);
     if ($793) {
      $i$393 = $i$295$lcssa;
      while(1) {
       $799 = (($nl_type) + ($i$393<<2)|0);
       $800 = HEAP32[$799>>2]|0;
       $801 = ($800|0)==(0);
       $797 = (($i$393) + 1)|0;
       if (!($801)) {
        $$0 = -1;
        break L343;
       }
       $798 = ($797|0)<(10);
       if ($798) {
        $i$393 = $797;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 63]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 63]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _do_read_663($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 return ($0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = ($4>>>0)>($l>>>0);
 $l$ = $5 ? $l : $4;
 $$cast = $3;
 _memcpy(($$cast|0),($s|0),($l$|0))|0;
 $6 = HEAP32[$2>>2]|0;
 $7 = (($6) + ($l$)|0);
 HEAP32[$2>>2] = $7;
 return ($l|0);
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa20 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa20;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _cycle($width,$ar,$n) {
 $width = $width|0;
 $ar = $ar|0;
 $n = $n|0;
 var $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0;
 var $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 $0 = ($n|0)<(2);
 L1: do {
  if (!($0)) {
   $1 = (($ar) + ($n<<2)|0);
   HEAP32[$1>>2] = $tmp;
   $2 = ($width|0)==(0);
   if (!($2)) {
    $$02 = $width;$6 = $tmp;
    while(1) {
     $3 = ($$02>>>0)>(256);
     $4 = $3 ? 256 : $$02;
     $5 = HEAP32[$ar>>2]|0;
     _memcpy(($6|0),($5|0),($4|0))|0;
     $i$01 = 0;
     while(1) {
      $7 = (($ar) + ($i$01<<2)|0);
      $8 = HEAP32[$7>>2]|0;
      $9 = (($i$01) + 1)|0;
      $10 = (($ar) + ($9<<2)|0);
      $11 = HEAP32[$10>>2]|0;
      _memcpy(($8|0),($11|0),($4|0))|0;
      $12 = HEAP32[$7>>2]|0;
      $13 = (($12) + ($4)|0);
      HEAP32[$7>>2] = $13;
      $exitcond = ($9|0)==($n|0);
      if ($exitcond) {
       break;
      } else {
       $i$01 = $9;
      }
     }
     $14 = ($$02|0)==($4|0);
     if ($14) {
      break L1;
     }
     $15 = (($$02) - ($4))|0;
     $$pre = HEAP32[$1>>2]|0;
     $$02 = $15;$6 = $$pre;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _str_next($str,$n,$step) {
 $str = $str|0;
 $n = $n|0;
 $step = $step|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $wc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wc = sp;
 $0 = ($n|0)==(0);
 do {
  if ($0) {
   HEAP32[$step>>2] = 0;
   $$1 = 0;
  } else {
   $1 = HEAP8[$str>>0]|0;
   $2 = ($1<<24>>24)<(0);
   if (!($2)) {
    HEAP32[$step>>2] = 1;
    $6 = HEAP8[$str>>0]|0;
    $7 = $6 << 24 >> 24;
    $$1 = $7;
    break;
   }
   $3 = (_mbtowc($wc,$str,$n)|0);
   $4 = ($3|0)<(0);
   if ($4) {
    HEAP32[$step>>2] = 1;
    $$0 = -1;
   } else {
    HEAP32[$step>>2] = $3;
    $5 = HEAP32[$wc>>2]|0;
    $$0 = $5;
   }
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function _match_bracket($p,$k) {
 $p = $p|0;
 $k = $k|0;
 var $$04 = 0, $$1$ph = 0, $$15 = 0, $$26 = 0, $$48 = 0, $$48$lcssa = 0, $$610 = 0, $$711 = 0, $$8 = 0, $$lcssa = 0, $$pre = 0, $$pre22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $inv$0 = 0, $wc = 0, $wc2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wc = sp + 4|0;
 $wc2 = sp;
 $buf = sp + 8|0;
 $0 = ((($p)) + 1|0);
 $1 = HEAP8[$0>>0]|0;
 switch ($1<<24>>24) {
 case 33: case 94:  {
  $2 = ((($p)) + 2|0);
  $$pre = HEAP8[$2>>0]|0;
  $$04 = $2;$3 = $$pre;$7 = $0;$inv$0 = 1;
  break;
 }
 default: {
  $$04 = $0;$3 = $1;$7 = $p;$inv$0 = 0;
 }
 }
 L4: do {
  switch ($3<<24>>24) {
  case 93:  {
   $4 = ($k|0)==(93);
   if ($4) {
    $5 = $inv$0 ^ 1;
    $$8 = $5;
    break L4;
   } else {
    $6 = ((($7)) + 2|0);
    $$15 = $6;
    label = 10;
    break L4;
   }
   break;
  }
  case 45:  {
   $8 = ($k|0)==(45);
   if ($8) {
    $9 = $inv$0 ^ 1;
    $$8 = $9;
    break L4;
   } else {
    $10 = ((($7)) + 2|0);
    $$15 = $10;
    label = 10;
    break L4;
   }
   break;
  }
  default: {
   $$15 = $$04;
   label = 10;
  }
  }
 } while(0);
 L13: do {
  if ((label|0) == 10) {
   $11 = ((($$15)) + -1|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12 << 24 >> 24;
   HEAP32[$wc>>2] = $13;
   $14 = $inv$0 ^ 1;
   $$26 = $$15;
   L15: while(1) {
    $15 = HEAP8[$$26>>0]|0;
    L17: do {
     switch ($15<<24>>24) {
     case 93:  {
      $$8 = $inv$0;
      break L13;
      break;
     }
     case 45:  {
      $16 = ((($$26)) + 1|0);
      $17 = HEAP8[$16>>0]|0;
      $18 = ($17<<24>>24)==(93);
      if ($18) {
       label = 27;
      } else {
       $19 = (_mbtowc($wc2,$16,4)|0);
       $20 = ($19|0)<(0);
       if ($20) {
        $$1$ph = 0;
        break L15;
       }
       $21 = HEAP32[$wc>>2]|0;
       $22 = HEAP32[$wc2>>2]|0;
       $23 = ($22|0)<($21|0);
       if (!($23)) {
        $24 = (($k) - ($21))|0;
        $25 = (($22) - ($21))|0;
        $26 = ($24>>>0)>($25>>>0);
        if (!($26)) {
         $$1$ph = $14;
         break L15;
        }
       }
       $27 = (($19) + -1)|0;
       $28 = (($$26) + ($27)|0);
       $$711 = $28;
      }
      break;
     }
     case 91:  {
      $29 = ((($$26)) + 1|0);
      $30 = HEAP8[$29>>0]|0;
      switch ($30<<24>>24) {
      case 61: case 46: case 58:  {
       break;
      }
      default: {
       label = 27;
       break L17;
      }
      }
      $31 = ((($$26)) + 3|0);
      $$48 = $31;
      while(1) {
       $32 = ((($$48)) + -1|0);
       $33 = HEAP8[$32>>0]|0;
       $34 = ($33<<24>>24)==($30<<24>>24);
       if ($34) {
        $35 = HEAP8[$$48>>0]|0;
        $36 = ($35<<24>>24)==(93);
        if ($36) {
         $$48$lcssa = $$48;$$lcssa = $32;
         break;
        }
       }
       $37 = ((($$48)) + 1|0);
       $$48 = $37;
      }
      $38 = ((($$26)) + 2|0);
      $39 = ($30<<24>>24)==(58);
      if ($39) {
       $40 = $$lcssa;
       $41 = $38;
       $42 = (($40) - ($41))|0;
       $43 = ($42|0)<(16);
       if ($43) {
        _memcpy(($buf|0),($38|0),($42|0))|0;
        $44 = (($buf) + ($42)|0);
        HEAP8[$44>>0] = 0;
        $45 = (_wctype($buf)|0);
        $46 = (_iswctype($k,$45)|0);
        $47 = ($46|0)==(0);
        if ($47) {
         $$711 = $$48$lcssa;
        } else {
         $$8 = $14;
         break L13;
        }
       } else {
        $$711 = $$48$lcssa;
       }
      } else {
       $$711 = $$48$lcssa;
      }
      break;
     }
     default: {
      $48 = ($15<<24>>24)>(-1);
      if ($48) {
       label = 27;
      } else {
       $50 = (_mbtowc($wc,$$26,4)|0);
       $51 = ($50|0)<(0);
       if ($51) {
        $$8 = 0;
        break L13;
       }
       $52 = (($50) + -1)|0;
       $53 = (($$26) + ($52)|0);
       $$pre22 = HEAP32[$wc>>2]|0;
       $$610 = $53;$54 = $$pre22;
       label = 30;
      }
     }
     }
    } while(0);
    if ((label|0) == 27) {
     label = 0;
     $49 = $15&255;
     HEAP32[$wc>>2] = $49;
     $$610 = $$26;$54 = $49;
     label = 30;
    }
    if ((label|0) == 30) {
     label = 0;
     $55 = ($54|0)==($k|0);
     if ($55) {
      $$8 = $14;
      break L13;
     } else {
      $$711 = $$610;
     }
    }
    $56 = ((($$711)) + 1|0);
    $$26 = $56;
   }
   $$8 = $$1$ph;
  }
 } while(0);
 STACKTOP = sp;return ($$8|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa141 = 0, $$lcssa142 = 0, $$lcssa144 = 0, $$lcssa147 = 0, $$lcssa149 = 0, $$lcssa151 = 0, $$lcssa153 = 0, $$lcssa155 = 0, $$lcssa157 = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$13 = 0, $$pre$i$16$i = 0, $$pre$i$i = 0, $$pre$phi$i$14Z2D = 0, $$pre$phi$i$17$iZ2D = 0, $$pre$phi$i$iZ2D = 0;
 var $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre71 = 0, $$pre9$i$i = 0, $$rsize$0$i = 0, $$rsize$4$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0;
 var $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0;
 var $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0;
 var $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0;
 var $1062 = 0, $1063 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0;
 var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0;
 var $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
 var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0;
 var $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0;
 var $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0;
 var $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0;
 var $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0;
 var $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0;
 var $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0;
 var $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0;
 var $K12$0$i = 0, $K2$0$i$i = 0, $K8$0$i$i = 0, $R$1$i = 0, $R$1$i$9 = 0, $R$1$i$9$lcssa = 0, $R$1$i$i = 0, $R$1$i$i$lcssa = 0, $R$1$i$lcssa = 0, $R$3$i = 0, $R$3$i$11 = 0, $R$3$i$i = 0, $RP$1$i = 0, $RP$1$i$8 = 0, $RP$1$i$8$lcssa = 0, $RP$1$i$i = 0, $RP$1$i$i$lcssa = 0, $RP$1$i$lcssa = 0, $T$0$i = 0, $T$0$i$18$i = 0;
 var $T$0$i$18$i$lcssa = 0, $T$0$i$18$i$lcssa139 = 0, $T$0$i$i = 0, $T$0$i$i$lcssa = 0, $T$0$i$i$lcssa140 = 0, $T$0$i$lcssa = 0, $T$0$i$lcssa156 = 0, $br$2$ph$i = 0, $cond$i = 0, $cond$i$12 = 0, $cond$i$i = 0, $exitcond$i$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $nb$0 = 0, $not$$i$20$i = 0, $not$$i$i = 0, $not$7$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0;
 var $or$cond$i$17 = 0, $or$cond1$i = 0, $or$cond1$i$16 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $p$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$5 = 0, $rsize$0$i$lcssa = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$412$i = 0, $rst$0$i = 0;
 var $rst$1$i = 0, $sizebits$0$$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$069$i = 0, $sp$069$i$lcssa = 0, $sp$168$i = 0, $sp$168$i$lcssa = 0, $ssize$0$i = 0, $ssize$2$ph$i = 0, $ssize$5$i = 0, $t$0$i = 0, $t$0$i$4 = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$411$i = 0, $tbase$747$i = 0, $tsize$746$i = 0;
 var $v$0$i = 0, $v$0$i$6 = 0, $v$0$i$lcssa = 0, $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$413$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[1708>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (1748 + ($13<<2)|0);
    $15 = ((($14)) + 8|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[1708>>2] = $22;
     } else {
      $23 = HEAP32[(1724)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $31 = (($16) + ($28)|0);
    $32 = ((($31)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33 | 1;
    HEAP32[$32>>2] = $34;
    $$0 = $17;
    return ($$0|0);
   }
   $35 = HEAP32[(1716)>>2]|0;
   $36 = ($4>>>0)>($35>>>0);
   if ($36) {
    $37 = ($7|0)==(0);
    if (!($37)) {
     $38 = $7 << $5;
     $39 = 2 << $5;
     $40 = (0 - ($39))|0;
     $41 = $39 | $40;
     $42 = $38 & $41;
     $43 = (0 - ($42))|0;
     $44 = $42 & $43;
     $45 = (($44) + -1)|0;
     $46 = $45 >>> 12;
     $47 = $46 & 16;
     $48 = $45 >>> $47;
     $49 = $48 >>> 5;
     $50 = $49 & 8;
     $51 = $50 | $47;
     $52 = $48 >>> $50;
     $53 = $52 >>> 2;
     $54 = $53 & 4;
     $55 = $51 | $54;
     $56 = $52 >>> $54;
     $57 = $56 >>> 1;
     $58 = $57 & 2;
     $59 = $55 | $58;
     $60 = $56 >>> $58;
     $61 = $60 >>> 1;
     $62 = $61 & 1;
     $63 = $59 | $62;
     $64 = $60 >>> $62;
     $65 = (($63) + ($64))|0;
     $66 = $65 << 1;
     $67 = (1748 + ($66<<2)|0);
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($67|0)==($71|0);
     do {
      if ($72) {
       $73 = 1 << $65;
       $74 = $73 ^ -1;
       $75 = $6 & $74;
       HEAP32[1708>>2] = $75;
       $89 = $35;
      } else {
       $76 = HEAP32[(1724)>>2]|0;
       $77 = ($71>>>0)<($76>>>0);
       if ($77) {
        _abort();
        // unreachable;
       }
       $78 = ((($71)) + 12|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ($79|0)==($69|0);
       if ($80) {
        HEAP32[$78>>2] = $67;
        HEAP32[$68>>2] = $71;
        $$pre = HEAP32[(1716)>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $81 = $65 << 3;
     $82 = (($81) - ($4))|0;
     $83 = $4 | 3;
     $84 = ((($69)) + 4|0);
     HEAP32[$84>>2] = $83;
     $85 = (($69) + ($4)|0);
     $86 = $82 | 1;
     $87 = ((($85)) + 4|0);
     HEAP32[$87>>2] = $86;
     $88 = (($85) + ($82)|0);
     HEAP32[$88>>2] = $82;
     $90 = ($89|0)==(0);
     if (!($90)) {
      $91 = HEAP32[(1728)>>2]|0;
      $92 = $89 >>> 3;
      $93 = $92 << 1;
      $94 = (1748 + ($93<<2)|0);
      $95 = HEAP32[1708>>2]|0;
      $96 = 1 << $92;
      $97 = $95 & $96;
      $98 = ($97|0)==(0);
      if ($98) {
       $99 = $95 | $96;
       HEAP32[1708>>2] = $99;
       $$pre71 = ((($94)) + 8|0);
       $$pre$phiZ2D = $$pre71;$F4$0 = $94;
      } else {
       $100 = ((($94)) + 8|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = HEAP32[(1724)>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $100;$F4$0 = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $91;
      $104 = ((($F4$0)) + 12|0);
      HEAP32[$104>>2] = $91;
      $105 = ((($91)) + 8|0);
      HEAP32[$105>>2] = $F4$0;
      $106 = ((($91)) + 12|0);
      HEAP32[$106>>2] = $94;
     }
     HEAP32[(1716)>>2] = $82;
     HEAP32[(1728)>>2] = $85;
     $$0 = $70;
     return ($$0|0);
    }
    $107 = HEAP32[(1712)>>2]|0;
    $108 = ($107|0)==(0);
    if ($108) {
     $nb$0 = $4;
    } else {
     $109 = (0 - ($107))|0;
     $110 = $107 & $109;
     $111 = (($110) + -1)|0;
     $112 = $111 >>> 12;
     $113 = $112 & 16;
     $114 = $111 >>> $113;
     $115 = $114 >>> 5;
     $116 = $115 & 8;
     $117 = $116 | $113;
     $118 = $114 >>> $116;
     $119 = $118 >>> 2;
     $120 = $119 & 4;
     $121 = $117 | $120;
     $122 = $118 >>> $120;
     $123 = $122 >>> 1;
     $124 = $123 & 2;
     $125 = $121 | $124;
     $126 = $122 >>> $124;
     $127 = $126 >>> 1;
     $128 = $127 & 1;
     $129 = $125 | $128;
     $130 = $126 >>> $128;
     $131 = (($129) + ($130))|0;
     $132 = (2012 + ($131<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ((($133)) + 4|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = $135 & -8;
     $137 = (($136) - ($4))|0;
     $rsize$0$i = $137;$t$0$i = $133;$v$0$i = $133;
     while(1) {
      $138 = ((($t$0$i)) + 16|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0|0);
      if ($140) {
       $141 = ((($t$0$i)) + 20|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $145 = $142;
       }
      } else {
       $145 = $139;
      }
      $144 = ((($145)) + 4|0);
      $146 = HEAP32[$144>>2]|0;
      $147 = $146 & -8;
      $148 = (($147) - ($4))|0;
      $149 = ($148>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $149 ? $148 : $rsize$0$i;
      $$v$0$i = $149 ? $145 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $145;$v$0$i = $$v$0$i;
     }
     $150 = HEAP32[(1724)>>2]|0;
     $151 = ($v$0$i$lcssa>>>0)<($150>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = (($v$0$i$lcssa) + ($4)|0);
     $153 = ($v$0$i$lcssa>>>0)<($152>>>0);
     if (!($153)) {
      _abort();
      // unreachable;
     }
     $154 = ((($v$0$i$lcssa)) + 24|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ((($v$0$i$lcssa)) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($v$0$i$lcssa|0);
     do {
      if ($158) {
       $168 = ((($v$0$i$lcssa)) + 20|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = ($169|0)==(0|0);
       if ($170) {
        $171 = ((($v$0$i$lcssa)) + 16|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($172|0)==(0|0);
        if ($173) {
         $R$3$i = 0;
         break;
        } else {
         $R$1$i = $172;$RP$1$i = $171;
        }
       } else {
        $R$1$i = $169;$RP$1$i = $168;
       }
       while(1) {
        $174 = ((($R$1$i)) + 20|0);
        $175 = HEAP32[$174>>2]|0;
        $176 = ($175|0)==(0|0);
        if (!($176)) {
         $R$1$i = $175;$RP$1$i = $174;
         continue;
        }
        $177 = ((($R$1$i)) + 16|0);
        $178 = HEAP32[$177>>2]|0;
        $179 = ($178|0)==(0|0);
        if ($179) {
         $R$1$i$lcssa = $R$1$i;$RP$1$i$lcssa = $RP$1$i;
         break;
        } else {
         $R$1$i = $178;$RP$1$i = $177;
        }
       }
       $180 = ($RP$1$i$lcssa>>>0)<($150>>>0);
       if ($180) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$1$i$lcssa>>2] = 0;
        $R$3$i = $R$1$i$lcssa;
        break;
       }
      } else {
       $159 = ((($v$0$i$lcssa)) + 8|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = ($160>>>0)<($150>>>0);
       if ($161) {
        _abort();
        // unreachable;
       }
       $162 = ((($160)) + 12|0);
       $163 = HEAP32[$162>>2]|0;
       $164 = ($163|0)==($v$0$i$lcssa|0);
       if (!($164)) {
        _abort();
        // unreachable;
       }
       $165 = ((($157)) + 8|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($166|0)==($v$0$i$lcssa|0);
       if ($167) {
        HEAP32[$162>>2] = $157;
        HEAP32[$165>>2] = $160;
        $R$3$i = $157;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $181 = ($155|0)==(0|0);
     do {
      if (!($181)) {
       $182 = ((($v$0$i$lcssa)) + 28|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = (2012 + ($183<<2)|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($v$0$i$lcssa|0)==($185|0);
       if ($186) {
        HEAP32[$184>>2] = $R$3$i;
        $cond$i = ($R$3$i|0)==(0|0);
        if ($cond$i) {
         $187 = 1 << $183;
         $188 = $187 ^ -1;
         $189 = HEAP32[(1712)>>2]|0;
         $190 = $189 & $188;
         HEAP32[(1712)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(1724)>>2]|0;
        $192 = ($155>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($155)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($v$0$i$lcssa|0);
        if ($195) {
         HEAP32[$193>>2] = $R$3$i;
        } else {
         $196 = ((($155)) + 20|0);
         HEAP32[$196>>2] = $R$3$i;
        }
        $197 = ($R$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(1724)>>2]|0;
       $199 = ($R$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($R$3$i)) + 24|0);
       HEAP32[$200>>2] = $155;
       $201 = ((($v$0$i$lcssa)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($R$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $R$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($v$0$i$lcssa)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(1724)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($R$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $R$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i$lcssa) + ($4))|0;
      $216 = $215 | 3;
      $217 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($v$0$i$lcssa) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $4 | 3;
      $223 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $rsize$0$i$lcssa | 1;
      $225 = ((($152)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($152) + ($rsize$0$i$lcssa)|0);
      HEAP32[$226>>2] = $rsize$0$i$lcssa;
      $227 = HEAP32[(1716)>>2]|0;
      $228 = ($227|0)==(0);
      if (!($228)) {
       $229 = HEAP32[(1728)>>2]|0;
       $230 = $227 >>> 3;
       $231 = $230 << 1;
       $232 = (1748 + ($231<<2)|0);
       $233 = HEAP32[1708>>2]|0;
       $234 = 1 << $230;
       $235 = $233 & $234;
       $236 = ($235|0)==(0);
       if ($236) {
        $237 = $233 | $234;
        HEAP32[1708>>2] = $237;
        $$pre$i = ((($232)) + 8|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $232;
       } else {
        $238 = ((($232)) + 8|0);
        $239 = HEAP32[$238>>2]|0;
        $240 = HEAP32[(1724)>>2]|0;
        $241 = ($239>>>0)<($240>>>0);
        if ($241) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $238;$F1$0$i = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $229;
       $242 = ((($F1$0$i)) + 12|0);
       HEAP32[$242>>2] = $229;
       $243 = ((($229)) + 8|0);
       HEAP32[$243>>2] = $F1$0$i;
       $244 = ((($229)) + 12|0);
       HEAP32[$244>>2] = $232;
      }
      HEAP32[(1716)>>2] = $rsize$0$i$lcssa;
      HEAP32[(1728)>>2] = $152;
     }
     $245 = ((($v$0$i$lcssa)) + 8|0);
     $$0 = $245;
     return ($$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $246 = ($bytes>>>0)>(4294967231);
   if ($246) {
    $nb$0 = -1;
   } else {
    $247 = (($bytes) + 11)|0;
    $248 = $247 & -8;
    $249 = HEAP32[(1712)>>2]|0;
    $250 = ($249|0)==(0);
    if ($250) {
     $nb$0 = $248;
    } else {
     $251 = (0 - ($248))|0;
     $252 = $247 >>> 8;
     $253 = ($252|0)==(0);
     if ($253) {
      $idx$0$i = 0;
     } else {
      $254 = ($248>>>0)>(16777215);
      if ($254) {
       $idx$0$i = 31;
      } else {
       $255 = (($252) + 1048320)|0;
       $256 = $255 >>> 16;
       $257 = $256 & 8;
       $258 = $252 << $257;
       $259 = (($258) + 520192)|0;
       $260 = $259 >>> 16;
       $261 = $260 & 4;
       $262 = $261 | $257;
       $263 = $258 << $261;
       $264 = (($263) + 245760)|0;
       $265 = $264 >>> 16;
       $266 = $265 & 2;
       $267 = $262 | $266;
       $268 = (14 - ($267))|0;
       $269 = $263 << $266;
       $270 = $269 >>> 15;
       $271 = (($268) + ($270))|0;
       $272 = $271 << 1;
       $273 = (($271) + 7)|0;
       $274 = $248 >>> $273;
       $275 = $274 & 1;
       $276 = $275 | $272;
       $idx$0$i = $276;
      }
     }
     $277 = (2012 + ($idx$0$i<<2)|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = ($278|0)==(0|0);
     L123: do {
      if ($279) {
       $rsize$3$i = $251;$t$2$i = 0;$v$3$i = 0;
       label = 86;
      } else {
       $280 = ($idx$0$i|0)==(31);
       $281 = $idx$0$i >>> 1;
       $282 = (25 - ($281))|0;
       $283 = $280 ? 0 : $282;
       $284 = $248 << $283;
       $rsize$0$i$5 = $251;$rst$0$i = 0;$sizebits$0$i = $284;$t$0$i$4 = $278;$v$0$i$6 = 0;
       while(1) {
        $285 = ((($t$0$i$4)) + 4|0);
        $286 = HEAP32[$285>>2]|0;
        $287 = $286 & -8;
        $288 = (($287) - ($248))|0;
        $289 = ($288>>>0)<($rsize$0$i$5>>>0);
        if ($289) {
         $290 = ($287|0)==($248|0);
         if ($290) {
          $rsize$412$i = $288;$t$411$i = $t$0$i$4;$v$413$i = $t$0$i$4;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $288;$v$1$i = $t$0$i$4;
         }
        } else {
         $rsize$1$i = $rsize$0$i$5;$v$1$i = $v$0$i$6;
        }
        $291 = ((($t$0$i$4)) + 20|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = $sizebits$0$i >>> 31;
        $294 = (((($t$0$i$4)) + 16|0) + ($293<<2)|0);
        $295 = HEAP32[$294>>2]|0;
        $296 = ($292|0)==(0|0);
        $297 = ($292|0)==($295|0);
        $or$cond1$i = $296 | $297;
        $rst$1$i = $or$cond1$i ? $rst$0$i : $292;
        $298 = ($295|0)==(0|0);
        $299 = $298&1;
        $300 = $299 ^ 1;
        $sizebits$0$$i = $sizebits$0$i << $300;
        if ($298) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i$5 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $sizebits$0$$i;$t$0$i$4 = $295;$v$0$i$6 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $301 = ($t$2$i|0)==(0|0);
      $302 = ($v$3$i|0)==(0|0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $idx$0$i;
       $304 = (0 - ($303))|0;
       $305 = $303 | $304;
       $306 = $249 & $305;
       $307 = ($306|0)==(0);
       if ($307) {
        $nb$0 = $248;
        break;
       }
       $308 = (0 - ($306))|0;
       $309 = $306 & $308;
       $310 = (($309) + -1)|0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = (($328) + ($329))|0;
       $331 = (2012 + ($330<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $t$4$ph$i = $332;
      } else {
       $t$4$ph$i = $t$2$i;
      }
      $333 = ($t$4$ph$i|0)==(0|0);
      if ($333) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i;
      } else {
       $rsize$412$i = $rsize$3$i;$t$411$i = $t$4$ph$i;$v$413$i = $v$3$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $334 = ((($t$411$i)) + 4|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335 & -8;
       $337 = (($336) - ($248))|0;
       $338 = ($337>>>0)<($rsize$412$i>>>0);
       $$rsize$4$i = $338 ? $337 : $rsize$412$i;
       $t$4$v$4$i = $338 ? $t$411$i : $v$413$i;
       $339 = ((($t$411$i)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if (!($341)) {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $340;$v$413$i = $t$4$v$4$i;
        label = 90;
        continue;
       }
       $342 = ((($t$411$i)) + 20|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = ($343|0)==(0|0);
       if ($344) {
        $rsize$4$lcssa$i = $$rsize$4$i;$v$4$lcssa$i = $t$4$v$4$i;
        break;
       } else {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $343;$v$413$i = $t$4$v$4$i;
        label = 90;
       }
      }
     }
     $345 = ($v$4$lcssa$i|0)==(0|0);
     if ($345) {
      $nb$0 = $248;
     } else {
      $346 = HEAP32[(1716)>>2]|0;
      $347 = (($346) - ($248))|0;
      $348 = ($rsize$4$lcssa$i>>>0)<($347>>>0);
      if ($348) {
       $349 = HEAP32[(1724)>>2]|0;
       $350 = ($v$4$lcssa$i>>>0)<($349>>>0);
       if ($350) {
        _abort();
        // unreachable;
       }
       $351 = (($v$4$lcssa$i) + ($248)|0);
       $352 = ($v$4$lcssa$i>>>0)<($351>>>0);
       if (!($352)) {
        _abort();
        // unreachable;
       }
       $353 = ((($v$4$lcssa$i)) + 24|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ((($v$4$lcssa$i)) + 12|0);
       $356 = HEAP32[$355>>2]|0;
       $357 = ($356|0)==($v$4$lcssa$i|0);
       do {
        if ($357) {
         $367 = ((($v$4$lcssa$i)) + 20|0);
         $368 = HEAP32[$367>>2]|0;
         $369 = ($368|0)==(0|0);
         if ($369) {
          $370 = ((($v$4$lcssa$i)) + 16|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $R$3$i$11 = 0;
           break;
          } else {
           $R$1$i$9 = $371;$RP$1$i$8 = $370;
          }
         } else {
          $R$1$i$9 = $368;$RP$1$i$8 = $367;
         }
         while(1) {
          $373 = ((($R$1$i$9)) + 20|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if (!($375)) {
           $R$1$i$9 = $374;$RP$1$i$8 = $373;
           continue;
          }
          $376 = ((($R$1$i$9)) + 16|0);
          $377 = HEAP32[$376>>2]|0;
          $378 = ($377|0)==(0|0);
          if ($378) {
           $R$1$i$9$lcssa = $R$1$i$9;$RP$1$i$8$lcssa = $RP$1$i$8;
           break;
          } else {
           $R$1$i$9 = $377;$RP$1$i$8 = $376;
          }
         }
         $379 = ($RP$1$i$8$lcssa>>>0)<($349>>>0);
         if ($379) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$1$i$8$lcssa>>2] = 0;
          $R$3$i$11 = $R$1$i$9$lcssa;
          break;
         }
        } else {
         $358 = ((($v$4$lcssa$i)) + 8|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359>>>0)<($349>>>0);
         if ($360) {
          _abort();
          // unreachable;
         }
         $361 = ((($359)) + 12|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$4$lcssa$i|0);
         if (!($363)) {
          _abort();
          // unreachable;
         }
         $364 = ((($356)) + 8|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==($v$4$lcssa$i|0);
         if ($366) {
          HEAP32[$361>>2] = $356;
          HEAP32[$364>>2] = $359;
          $R$3$i$11 = $356;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $380 = ($354|0)==(0|0);
       do {
        if (!($380)) {
         $381 = ((($v$4$lcssa$i)) + 28|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = (2012 + ($382<<2)|0);
         $384 = HEAP32[$383>>2]|0;
         $385 = ($v$4$lcssa$i|0)==($384|0);
         if ($385) {
          HEAP32[$383>>2] = $R$3$i$11;
          $cond$i$12 = ($R$3$i$11|0)==(0|0);
          if ($cond$i$12) {
           $386 = 1 << $382;
           $387 = $386 ^ -1;
           $388 = HEAP32[(1712)>>2]|0;
           $389 = $388 & $387;
           HEAP32[(1712)>>2] = $389;
           break;
          }
         } else {
          $390 = HEAP32[(1724)>>2]|0;
          $391 = ($354>>>0)<($390>>>0);
          if ($391) {
           _abort();
           // unreachable;
          }
          $392 = ((($354)) + 16|0);
          $393 = HEAP32[$392>>2]|0;
          $394 = ($393|0)==($v$4$lcssa$i|0);
          if ($394) {
           HEAP32[$392>>2] = $R$3$i$11;
          } else {
           $395 = ((($354)) + 20|0);
           HEAP32[$395>>2] = $R$3$i$11;
          }
          $396 = ($R$3$i$11|0)==(0|0);
          if ($396) {
           break;
          }
         }
         $397 = HEAP32[(1724)>>2]|0;
         $398 = ($R$3$i$11>>>0)<($397>>>0);
         if ($398) {
          _abort();
          // unreachable;
         }
         $399 = ((($R$3$i$11)) + 24|0);
         HEAP32[$399>>2] = $354;
         $400 = ((($v$4$lcssa$i)) + 16|0);
         $401 = HEAP32[$400>>2]|0;
         $402 = ($401|0)==(0|0);
         do {
          if (!($402)) {
           $403 = ($401>>>0)<($397>>>0);
           if ($403) {
            _abort();
            // unreachable;
           } else {
            $404 = ((($R$3$i$11)) + 16|0);
            HEAP32[$404>>2] = $401;
            $405 = ((($401)) + 24|0);
            HEAP32[$405>>2] = $R$3$i$11;
            break;
           }
          }
         } while(0);
         $406 = ((($v$4$lcssa$i)) + 20|0);
         $407 = HEAP32[$406>>2]|0;
         $408 = ($407|0)==(0|0);
         if (!($408)) {
          $409 = HEAP32[(1724)>>2]|0;
          $410 = ($407>>>0)<($409>>>0);
          if ($410) {
           _abort();
           // unreachable;
          } else {
           $411 = ((($R$3$i$11)) + 20|0);
           HEAP32[$411>>2] = $407;
           $412 = ((($407)) + 24|0);
           HEAP32[$412>>2] = $R$3$i$11;
           break;
          }
         }
        }
       } while(0);
       $413 = ($rsize$4$lcssa$i>>>0)<(16);
       do {
        if ($413) {
         $414 = (($rsize$4$lcssa$i) + ($248))|0;
         $415 = $414 | 3;
         $416 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$416>>2] = $415;
         $417 = (($v$4$lcssa$i) + ($414)|0);
         $418 = ((($417)) + 4|0);
         $419 = HEAP32[$418>>2]|0;
         $420 = $419 | 1;
         HEAP32[$418>>2] = $420;
        } else {
         $421 = $248 | 3;
         $422 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$422>>2] = $421;
         $423 = $rsize$4$lcssa$i | 1;
         $424 = ((($351)) + 4|0);
         HEAP32[$424>>2] = $423;
         $425 = (($351) + ($rsize$4$lcssa$i)|0);
         HEAP32[$425>>2] = $rsize$4$lcssa$i;
         $426 = $rsize$4$lcssa$i >>> 3;
         $427 = ($rsize$4$lcssa$i>>>0)<(256);
         if ($427) {
          $428 = $426 << 1;
          $429 = (1748 + ($428<<2)|0);
          $430 = HEAP32[1708>>2]|0;
          $431 = 1 << $426;
          $432 = $430 & $431;
          $433 = ($432|0)==(0);
          if ($433) {
           $434 = $430 | $431;
           HEAP32[1708>>2] = $434;
           $$pre$i$13 = ((($429)) + 8|0);
           $$pre$phi$i$14Z2D = $$pre$i$13;$F5$0$i = $429;
          } else {
           $435 = ((($429)) + 8|0);
           $436 = HEAP32[$435>>2]|0;
           $437 = HEAP32[(1724)>>2]|0;
           $438 = ($436>>>0)<($437>>>0);
           if ($438) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i$14Z2D = $435;$F5$0$i = $436;
           }
          }
          HEAP32[$$pre$phi$i$14Z2D>>2] = $351;
          $439 = ((($F5$0$i)) + 12|0);
          HEAP32[$439>>2] = $351;
          $440 = ((($351)) + 8|0);
          HEAP32[$440>>2] = $F5$0$i;
          $441 = ((($351)) + 12|0);
          HEAP32[$441>>2] = $429;
          break;
         }
         $442 = $rsize$4$lcssa$i >>> 8;
         $443 = ($442|0)==(0);
         if ($443) {
          $I7$0$i = 0;
         } else {
          $444 = ($rsize$4$lcssa$i>>>0)>(16777215);
          if ($444) {
           $I7$0$i = 31;
          } else {
           $445 = (($442) + 1048320)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 8;
           $448 = $442 << $447;
           $449 = (($448) + 520192)|0;
           $450 = $449 >>> 16;
           $451 = $450 & 4;
           $452 = $451 | $447;
           $453 = $448 << $451;
           $454 = (($453) + 245760)|0;
           $455 = $454 >>> 16;
           $456 = $455 & 2;
           $457 = $452 | $456;
           $458 = (14 - ($457))|0;
           $459 = $453 << $456;
           $460 = $459 >>> 15;
           $461 = (($458) + ($460))|0;
           $462 = $461 << 1;
           $463 = (($461) + 7)|0;
           $464 = $rsize$4$lcssa$i >>> $463;
           $465 = $464 & 1;
           $466 = $465 | $462;
           $I7$0$i = $466;
          }
         }
         $467 = (2012 + ($I7$0$i<<2)|0);
         $468 = ((($351)) + 28|0);
         HEAP32[$468>>2] = $I7$0$i;
         $469 = ((($351)) + 16|0);
         $470 = ((($469)) + 4|0);
         HEAP32[$470>>2] = 0;
         HEAP32[$469>>2] = 0;
         $471 = HEAP32[(1712)>>2]|0;
         $472 = 1 << $I7$0$i;
         $473 = $471 & $472;
         $474 = ($473|0)==(0);
         if ($474) {
          $475 = $471 | $472;
          HEAP32[(1712)>>2] = $475;
          HEAP32[$467>>2] = $351;
          $476 = ((($351)) + 24|0);
          HEAP32[$476>>2] = $467;
          $477 = ((($351)) + 12|0);
          HEAP32[$477>>2] = $351;
          $478 = ((($351)) + 8|0);
          HEAP32[$478>>2] = $351;
          break;
         }
         $479 = HEAP32[$467>>2]|0;
         $480 = ($I7$0$i|0)==(31);
         $481 = $I7$0$i >>> 1;
         $482 = (25 - ($481))|0;
         $483 = $480 ? 0 : $482;
         $484 = $rsize$4$lcssa$i << $483;
         $K12$0$i = $484;$T$0$i = $479;
         while(1) {
          $485 = ((($T$0$i)) + 4|0);
          $486 = HEAP32[$485>>2]|0;
          $487 = $486 & -8;
          $488 = ($487|0)==($rsize$4$lcssa$i|0);
          if ($488) {
           $T$0$i$lcssa = $T$0$i;
           label = 148;
           break;
          }
          $489 = $K12$0$i >>> 31;
          $490 = (((($T$0$i)) + 16|0) + ($489<<2)|0);
          $491 = $K12$0$i << 1;
          $492 = HEAP32[$490>>2]|0;
          $493 = ($492|0)==(0|0);
          if ($493) {
           $$lcssa157 = $490;$T$0$i$lcssa156 = $T$0$i;
           label = 145;
           break;
          } else {
           $K12$0$i = $491;$T$0$i = $492;
          }
         }
         if ((label|0) == 145) {
          $494 = HEAP32[(1724)>>2]|0;
          $495 = ($$lcssa157>>>0)<($494>>>0);
          if ($495) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa157>>2] = $351;
           $496 = ((($351)) + 24|0);
           HEAP32[$496>>2] = $T$0$i$lcssa156;
           $497 = ((($351)) + 12|0);
           HEAP32[$497>>2] = $351;
           $498 = ((($351)) + 8|0);
           HEAP32[$498>>2] = $351;
           break;
          }
         }
         else if ((label|0) == 148) {
          $499 = ((($T$0$i$lcssa)) + 8|0);
          $500 = HEAP32[$499>>2]|0;
          $501 = HEAP32[(1724)>>2]|0;
          $502 = ($500>>>0)>=($501>>>0);
          $not$7$i = ($T$0$i$lcssa>>>0)>=($501>>>0);
          $503 = $502 & $not$7$i;
          if ($503) {
           $504 = ((($500)) + 12|0);
           HEAP32[$504>>2] = $351;
           HEAP32[$499>>2] = $351;
           $505 = ((($351)) + 8|0);
           HEAP32[$505>>2] = $500;
           $506 = ((($351)) + 12|0);
           HEAP32[$506>>2] = $T$0$i$lcssa;
           $507 = ((($351)) + 24|0);
           HEAP32[$507>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $508 = ((($v$4$lcssa$i)) + 8|0);
       $$0 = $508;
       return ($$0|0);
      } else {
       $nb$0 = $248;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(1716)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(1728)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(1728)>>2] = $514;
   HEAP32[(1716)>>2] = $511;
   $515 = $511 | 1;
   $516 = ((($514)) + 4|0);
   HEAP32[$516>>2] = $515;
   $517 = (($514) + ($511)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(1716)>>2] = 0;
   HEAP32[(1728)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $522 = (($512) + ($509)|0);
   $523 = ((($522)) + 4|0);
   $524 = HEAP32[$523>>2]|0;
   $525 = $524 | 1;
   HEAP32[$523>>2] = $525;
  }
  $526 = ((($512)) + 8|0);
  $$0 = $526;
  return ($$0|0);
 }
 $527 = HEAP32[(1720)>>2]|0;
 $528 = ($527>>>0)>($nb$0>>>0);
 if ($528) {
  $529 = (($527) - ($nb$0))|0;
  HEAP32[(1720)>>2] = $529;
  $530 = HEAP32[(1732)>>2]|0;
  $531 = (($530) + ($nb$0)|0);
  HEAP32[(1732)>>2] = $531;
  $532 = $529 | 1;
  $533 = ((($531)) + 4|0);
  HEAP32[$533>>2] = $532;
  $534 = $nb$0 | 3;
  $535 = ((($530)) + 4|0);
  HEAP32[$535>>2] = $534;
  $536 = ((($530)) + 8|0);
  $$0 = $536;
  return ($$0|0);
 }
 $537 = HEAP32[2180>>2]|0;
 $538 = ($537|0)==(0);
 do {
  if ($538) {
   $539 = (_sysconf(30)|0);
   $540 = (($539) + -1)|0;
   $541 = $540 & $539;
   $542 = ($541|0)==(0);
   if ($542) {
    HEAP32[(2188)>>2] = $539;
    HEAP32[(2184)>>2] = $539;
    HEAP32[(2192)>>2] = -1;
    HEAP32[(2196)>>2] = -1;
    HEAP32[(2200)>>2] = 0;
    HEAP32[(2152)>>2] = 0;
    $543 = (_time((0|0))|0);
    $544 = $543 & -16;
    $545 = $544 ^ 1431655768;
    HEAP32[2180>>2] = $545;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $546 = (($nb$0) + 48)|0;
 $547 = HEAP32[(2188)>>2]|0;
 $548 = (($nb$0) + 47)|0;
 $549 = (($547) + ($548))|0;
 $550 = (0 - ($547))|0;
 $551 = $549 & $550;
 $552 = ($551>>>0)>($nb$0>>>0);
 if (!($552)) {
  $$0 = 0;
  return ($$0|0);
 }
 $553 = HEAP32[(2148)>>2]|0;
 $554 = ($553|0)==(0);
 if (!($554)) {
  $555 = HEAP32[(2140)>>2]|0;
  $556 = (($555) + ($551))|0;
  $557 = ($556>>>0)<=($555>>>0);
  $558 = ($556>>>0)>($553>>>0);
  $or$cond1$i$16 = $557 | $558;
  if ($or$cond1$i$16) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $559 = HEAP32[(2152)>>2]|0;
 $560 = $559 & 4;
 $561 = ($560|0)==(0);
 L257: do {
  if ($561) {
   $562 = HEAP32[(1732)>>2]|0;
   $563 = ($562|0)==(0|0);
   L259: do {
    if ($563) {
     label = 173;
    } else {
     $sp$0$i$i = (2156);
     while(1) {
      $564 = HEAP32[$sp$0$i$i>>2]|0;
      $565 = ($564>>>0)>($562>>>0);
      if (!($565)) {
       $566 = ((($sp$0$i$i)) + 4|0);
       $567 = HEAP32[$566>>2]|0;
       $568 = (($564) + ($567)|0);
       $569 = ($568>>>0)>($562>>>0);
       if ($569) {
        $$lcssa153 = $sp$0$i$i;$$lcssa155 = $566;
        break;
       }
      }
      $570 = ((($sp$0$i$i)) + 8|0);
      $571 = HEAP32[$570>>2]|0;
      $572 = ($571|0)==(0|0);
      if ($572) {
       label = 173;
       break L259;
      } else {
       $sp$0$i$i = $571;
      }
     }
     $595 = HEAP32[(1720)>>2]|0;
     $596 = (($549) - ($595))|0;
     $597 = $596 & $550;
     $598 = ($597>>>0)<(2147483647);
     if ($598) {
      $599 = (_sbrk(($597|0))|0);
      $600 = HEAP32[$$lcssa153>>2]|0;
      $601 = HEAP32[$$lcssa155>>2]|0;
      $602 = (($600) + ($601)|0);
      $603 = ($599|0)==($602|0);
      if ($603) {
       $604 = ($599|0)==((-1)|0);
       if (!($604)) {
        $tbase$747$i = $599;$tsize$746$i = $597;
        label = 193;
        break L257;
       }
      } else {
       $br$2$ph$i = $599;$ssize$2$ph$i = $597;
       label = 183;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 173) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if (!($574)) {
      $575 = $573;
      $576 = HEAP32[(2184)>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $551;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($551) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[(2140)>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i$17 = $587 & $588;
      if ($or$cond$i$17) {
       $589 = HEAP32[(2148)>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $tbase$747$i = $573;$tsize$746$i = $ssize$0$i;
        label = 193;
        break L257;
       } else {
        $br$2$ph$i = $593;$ssize$2$ph$i = $ssize$0$i;
        label = 183;
       }
      }
     }
    }
   } while(0);
   L279: do {
    if ((label|0) == 183) {
     $605 = (0 - ($ssize$2$ph$i))|0;
     $606 = ($br$2$ph$i|0)!=((-1)|0);
     $607 = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond7$i = $607 & $606;
     $608 = ($546>>>0)>($ssize$2$ph$i>>>0);
     $or$cond8$i = $608 & $or$cond7$i;
     do {
      if ($or$cond8$i) {
       $609 = HEAP32[(2188)>>2]|0;
       $610 = (($548) - ($ssize$2$ph$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         break L279;
        } else {
         $617 = (($613) + ($ssize$2$ph$i))|0;
         $ssize$5$i = $617;
         break;
        }
       } else {
        $ssize$5$i = $ssize$2$ph$i;
       }
      } else {
       $ssize$5$i = $ssize$2$ph$i;
      }
     } while(0);
     $618 = ($br$2$ph$i|0)==((-1)|0);
     if (!($618)) {
      $tbase$747$i = $br$2$ph$i;$tsize$746$i = $ssize$5$i;
      label = 193;
      break L257;
     }
    }
   } while(0);
   $619 = HEAP32[(2152)>>2]|0;
   $620 = $619 | 4;
   HEAP32[(2152)>>2] = $620;
   label = 190;
  } else {
   label = 190;
  }
 } while(0);
 if ((label|0) == 190) {
  $621 = ($551>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($551|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond5$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond10$i = $626 & $or$cond5$i;
   if ($or$cond10$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $$not$i = ($629>>>0)>($630>>>0);
    if ($$not$i) {
     $tbase$747$i = $622;$tsize$746$i = $629;
     label = 193;
    }
   }
  }
 }
 if ((label|0) == 193) {
  $631 = HEAP32[(2140)>>2]|0;
  $632 = (($631) + ($tsize$746$i))|0;
  HEAP32[(2140)>>2] = $632;
  $633 = HEAP32[(2144)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(2144)>>2] = $632;
  }
  $635 = HEAP32[(1732)>>2]|0;
  $636 = ($635|0)==(0|0);
  do {
   if ($636) {
    $637 = HEAP32[(1724)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$747$i>>>0)<($637>>>0);
    $or$cond11$i = $638 | $639;
    if ($or$cond11$i) {
     HEAP32[(1724)>>2] = $tbase$747$i;
    }
    HEAP32[(2156)>>2] = $tbase$747$i;
    HEAP32[(2160)>>2] = $tsize$746$i;
    HEAP32[(2168)>>2] = 0;
    $640 = HEAP32[2180>>2]|0;
    HEAP32[(1744)>>2] = $640;
    HEAP32[(1740)>>2] = -1;
    $i$01$i$i = 0;
    while(1) {
     $641 = $i$01$i$i << 1;
     $642 = (1748 + ($641<<2)|0);
     $643 = ((($642)) + 12|0);
     HEAP32[$643>>2] = $642;
     $644 = ((($642)) + 8|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$01$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$01$i$i = $645;
     }
    }
    $646 = (($tsize$746$i) + -40)|0;
    $647 = ((($tbase$747$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$747$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(1732)>>2] = $654;
    HEAP32[(1720)>>2] = $655;
    $656 = $655 | 1;
    $657 = ((($654)) + 4|0);
    HEAP32[$657>>2] = $656;
    $658 = (($654) + ($655)|0);
    $659 = ((($658)) + 4|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[(2196)>>2]|0;
    HEAP32[(1736)>>2] = $660;
   } else {
    $sp$069$i = (2156);
    while(1) {
     $661 = HEAP32[$sp$069$i>>2]|0;
     $662 = ((($sp$069$i)) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$747$i|0)==($664|0);
     if ($665) {
      $$lcssa147 = $661;$$lcssa149 = $662;$$lcssa151 = $663;$sp$069$i$lcssa = $sp$069$i;
      label = 203;
      break;
     }
     $666 = ((($sp$069$i)) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$069$i = $667;
     }
    }
    if ((label|0) == 203) {
     $669 = ((($sp$069$i$lcssa)) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($635>>>0)>=($$lcssa147>>>0);
      $674 = ($635>>>0)<($tbase$747$i>>>0);
      $or$cond49$i = $674 & $673;
      if ($or$cond49$i) {
       $675 = (($$lcssa151) + ($tsize$746$i))|0;
       HEAP32[$$lcssa149>>2] = $675;
       $676 = HEAP32[(1720)>>2]|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($tsize$746$i) - ($683))|0;
       $686 = (($685) + ($676))|0;
       HEAP32[(1732)>>2] = $684;
       HEAP32[(1720)>>2] = $686;
       $687 = $686 | 1;
       $688 = ((($684)) + 4|0);
       HEAP32[$688>>2] = $687;
       $689 = (($684) + ($686)|0);
       $690 = ((($689)) + 4|0);
       HEAP32[$690>>2] = 40;
       $691 = HEAP32[(2196)>>2]|0;
       HEAP32[(1736)>>2] = $691;
       break;
      }
     }
    }
    $692 = HEAP32[(1724)>>2]|0;
    $693 = ($tbase$747$i>>>0)<($692>>>0);
    if ($693) {
     HEAP32[(1724)>>2] = $tbase$747$i;
     $757 = $tbase$747$i;
    } else {
     $757 = $692;
    }
    $694 = (($tbase$747$i) + ($tsize$746$i)|0);
    $sp$168$i = (2156);
    while(1) {
     $695 = HEAP32[$sp$168$i>>2]|0;
     $696 = ($695|0)==($694|0);
     if ($696) {
      $$lcssa144 = $sp$168$i;$sp$168$i$lcssa = $sp$168$i;
      label = 211;
      break;
     }
     $697 = ((($sp$168$i)) + 8|0);
     $698 = HEAP32[$697>>2]|0;
     $699 = ($698|0)==(0|0);
     if ($699) {
      $sp$0$i$i$i = (2156);
      break;
     } else {
      $sp$168$i = $698;
     }
    }
    if ((label|0) == 211) {
     $700 = ((($sp$168$i$lcssa)) + 12|0);
     $701 = HEAP32[$700>>2]|0;
     $702 = $701 & 8;
     $703 = ($702|0)==(0);
     if ($703) {
      HEAP32[$$lcssa144>>2] = $tbase$747$i;
      $704 = ((($sp$168$i$lcssa)) + 4|0);
      $705 = HEAP32[$704>>2]|0;
      $706 = (($705) + ($tsize$746$i))|0;
      HEAP32[$704>>2] = $706;
      $707 = ((($tbase$747$i)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($tbase$747$i) + ($713)|0);
      $715 = ((($694)) + 8|0);
      $716 = $715;
      $717 = $716 & 7;
      $718 = ($717|0)==(0);
      $719 = (0 - ($716))|0;
      $720 = $719 & 7;
      $721 = $718 ? 0 : $720;
      $722 = (($694) + ($721)|0);
      $723 = $722;
      $724 = $714;
      $725 = (($723) - ($724))|0;
      $726 = (($714) + ($nb$0)|0);
      $727 = (($725) - ($nb$0))|0;
      $728 = $nb$0 | 3;
      $729 = ((($714)) + 4|0);
      HEAP32[$729>>2] = $728;
      $730 = ($722|0)==($635|0);
      do {
       if ($730) {
        $731 = HEAP32[(1720)>>2]|0;
        $732 = (($731) + ($727))|0;
        HEAP32[(1720)>>2] = $732;
        HEAP32[(1732)>>2] = $726;
        $733 = $732 | 1;
        $734 = ((($726)) + 4|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[(1728)>>2]|0;
        $736 = ($722|0)==($735|0);
        if ($736) {
         $737 = HEAP32[(1716)>>2]|0;
         $738 = (($737) + ($727))|0;
         HEAP32[(1716)>>2] = $738;
         HEAP32[(1728)>>2] = $726;
         $739 = $738 | 1;
         $740 = ((($726)) + 4|0);
         HEAP32[$740>>2] = $739;
         $741 = (($726) + ($738)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $742 = ((($722)) + 4|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L331: do {
          if ($748) {
           $749 = ((($722)) + 8|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = ((($722)) + 12|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = (1748 + ($753<<2)|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = ($750>>>0)<($757>>>0);
             if ($756) {
              _abort();
              // unreachable;
             }
             $758 = ((($750)) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($722|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[1708>>2]|0;
            $765 = $764 & $763;
            HEAP32[1708>>2] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre9$i$i = ((($752)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $767 = ($752>>>0)<($757>>>0);
             if ($767) {
              _abort();
              // unreachable;
             }
             $768 = ((($752)) + 8|0);
             $769 = HEAP32[$768>>2]|0;
             $770 = ($769|0)==($722|0);
             if ($770) {
              $$pre$phi10$i$iZ2D = $768;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $771 = ((($750)) + 12|0);
           HEAP32[$771>>2] = $752;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $750;
          } else {
           $772 = ((($722)) + 24|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ((($722)) + 12|0);
           $775 = HEAP32[$774>>2]|0;
           $776 = ($775|0)==($722|0);
           do {
            if ($776) {
             $786 = ((($722)) + 16|0);
             $787 = ((($786)) + 4|0);
             $788 = HEAP32[$787>>2]|0;
             $789 = ($788|0)==(0|0);
             if ($789) {
              $790 = HEAP32[$786>>2]|0;
              $791 = ($790|0)==(0|0);
              if ($791) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i = $790;$RP$1$i$i = $786;
              }
             } else {
              $R$1$i$i = $788;$RP$1$i$i = $787;
             }
             while(1) {
              $792 = ((($R$1$i$i)) + 20|0);
              $793 = HEAP32[$792>>2]|0;
              $794 = ($793|0)==(0|0);
              if (!($794)) {
               $R$1$i$i = $793;$RP$1$i$i = $792;
               continue;
              }
              $795 = ((($R$1$i$i)) + 16|0);
              $796 = HEAP32[$795>>2]|0;
              $797 = ($796|0)==(0|0);
              if ($797) {
               $R$1$i$i$lcssa = $R$1$i$i;$RP$1$i$i$lcssa = $RP$1$i$i;
               break;
              } else {
               $R$1$i$i = $796;$RP$1$i$i = $795;
              }
             }
             $798 = ($RP$1$i$i$lcssa>>>0)<($757>>>0);
             if ($798) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$1$i$i$lcssa>>2] = 0;
              $R$3$i$i = $R$1$i$i$lcssa;
              break;
             }
            } else {
             $777 = ((($722)) + 8|0);
             $778 = HEAP32[$777>>2]|0;
             $779 = ($778>>>0)<($757>>>0);
             if ($779) {
              _abort();
              // unreachable;
             }
             $780 = ((($778)) + 12|0);
             $781 = HEAP32[$780>>2]|0;
             $782 = ($781|0)==($722|0);
             if (!($782)) {
              _abort();
              // unreachable;
             }
             $783 = ((($775)) + 8|0);
             $784 = HEAP32[$783>>2]|0;
             $785 = ($784|0)==($722|0);
             if ($785) {
              HEAP32[$780>>2] = $775;
              HEAP32[$783>>2] = $778;
              $R$3$i$i = $775;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $799 = ($773|0)==(0|0);
           if ($799) {
            break;
           }
           $800 = ((($722)) + 28|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = (2012 + ($801<<2)|0);
           $803 = HEAP32[$802>>2]|0;
           $804 = ($722|0)==($803|0);
           do {
            if ($804) {
             HEAP32[$802>>2] = $R$3$i$i;
             $cond$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $805 = 1 << $801;
             $806 = $805 ^ -1;
             $807 = HEAP32[(1712)>>2]|0;
             $808 = $807 & $806;
             HEAP32[(1712)>>2] = $808;
             break L331;
            } else {
             $809 = HEAP32[(1724)>>2]|0;
             $810 = ($773>>>0)<($809>>>0);
             if ($810) {
              _abort();
              // unreachable;
             }
             $811 = ((($773)) + 16|0);
             $812 = HEAP32[$811>>2]|0;
             $813 = ($812|0)==($722|0);
             if ($813) {
              HEAP32[$811>>2] = $R$3$i$i;
             } else {
              $814 = ((($773)) + 20|0);
              HEAP32[$814>>2] = $R$3$i$i;
             }
             $815 = ($R$3$i$i|0)==(0|0);
             if ($815) {
              break L331;
             }
            }
           } while(0);
           $816 = HEAP32[(1724)>>2]|0;
           $817 = ($R$3$i$i>>>0)<($816>>>0);
           if ($817) {
            _abort();
            // unreachable;
           }
           $818 = ((($R$3$i$i)) + 24|0);
           HEAP32[$818>>2] = $773;
           $819 = ((($722)) + 16|0);
           $820 = HEAP32[$819>>2]|0;
           $821 = ($820|0)==(0|0);
           do {
            if (!($821)) {
             $822 = ($820>>>0)<($816>>>0);
             if ($822) {
              _abort();
              // unreachable;
             } else {
              $823 = ((($R$3$i$i)) + 16|0);
              HEAP32[$823>>2] = $820;
              $824 = ((($820)) + 24|0);
              HEAP32[$824>>2] = $R$3$i$i;
              break;
             }
            }
           } while(0);
           $825 = ((($819)) + 4|0);
           $826 = HEAP32[$825>>2]|0;
           $827 = ($826|0)==(0|0);
           if ($827) {
            break;
           }
           $828 = HEAP32[(1724)>>2]|0;
           $829 = ($826>>>0)<($828>>>0);
           if ($829) {
            _abort();
            // unreachable;
           } else {
            $830 = ((($R$3$i$i)) + 20|0);
            HEAP32[$830>>2] = $826;
            $831 = ((($826)) + 24|0);
            HEAP32[$831>>2] = $R$3$i$i;
            break;
           }
          }
         } while(0);
         $832 = (($722) + ($746)|0);
         $833 = (($746) + ($727))|0;
         $oldfirst$0$i$i = $832;$qsize$0$i$i = $833;
        } else {
         $oldfirst$0$i$i = $722;$qsize$0$i$i = $727;
        }
        $834 = ((($oldfirst$0$i$i)) + 4|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = $835 & -2;
        HEAP32[$834>>2] = $836;
        $837 = $qsize$0$i$i | 1;
        $838 = ((($726)) + 4|0);
        HEAP32[$838>>2] = $837;
        $839 = (($726) + ($qsize$0$i$i)|0);
        HEAP32[$839>>2] = $qsize$0$i$i;
        $840 = $qsize$0$i$i >>> 3;
        $841 = ($qsize$0$i$i>>>0)<(256);
        if ($841) {
         $842 = $840 << 1;
         $843 = (1748 + ($842<<2)|0);
         $844 = HEAP32[1708>>2]|0;
         $845 = 1 << $840;
         $846 = $844 & $845;
         $847 = ($846|0)==(0);
         do {
          if ($847) {
           $848 = $844 | $845;
           HEAP32[1708>>2] = $848;
           $$pre$i$16$i = ((($843)) + 8|0);
           $$pre$phi$i$17$iZ2D = $$pre$i$16$i;$F4$0$i$i = $843;
          } else {
           $849 = ((($843)) + 8|0);
           $850 = HEAP32[$849>>2]|0;
           $851 = HEAP32[(1724)>>2]|0;
           $852 = ($850>>>0)<($851>>>0);
           if (!($852)) {
            $$pre$phi$i$17$iZ2D = $849;$F4$0$i$i = $850;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i$17$iZ2D>>2] = $726;
         $853 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$853>>2] = $726;
         $854 = ((($726)) + 8|0);
         HEAP32[$854>>2] = $F4$0$i$i;
         $855 = ((($726)) + 12|0);
         HEAP32[$855>>2] = $843;
         break;
        }
        $856 = $qsize$0$i$i >>> 8;
        $857 = ($856|0)==(0);
        do {
         if ($857) {
          $I7$0$i$i = 0;
         } else {
          $858 = ($qsize$0$i$i>>>0)>(16777215);
          if ($858) {
           $I7$0$i$i = 31;
           break;
          }
          $859 = (($856) + 1048320)|0;
          $860 = $859 >>> 16;
          $861 = $860 & 8;
          $862 = $856 << $861;
          $863 = (($862) + 520192)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 4;
          $866 = $865 | $861;
          $867 = $862 << $865;
          $868 = (($867) + 245760)|0;
          $869 = $868 >>> 16;
          $870 = $869 & 2;
          $871 = $866 | $870;
          $872 = (14 - ($871))|0;
          $873 = $867 << $870;
          $874 = $873 >>> 15;
          $875 = (($872) + ($874))|0;
          $876 = $875 << 1;
          $877 = (($875) + 7)|0;
          $878 = $qsize$0$i$i >>> $877;
          $879 = $878 & 1;
          $880 = $879 | $876;
          $I7$0$i$i = $880;
         }
        } while(0);
        $881 = (2012 + ($I7$0$i$i<<2)|0);
        $882 = ((($726)) + 28|0);
        HEAP32[$882>>2] = $I7$0$i$i;
        $883 = ((($726)) + 16|0);
        $884 = ((($883)) + 4|0);
        HEAP32[$884>>2] = 0;
        HEAP32[$883>>2] = 0;
        $885 = HEAP32[(1712)>>2]|0;
        $886 = 1 << $I7$0$i$i;
        $887 = $885 & $886;
        $888 = ($887|0)==(0);
        if ($888) {
         $889 = $885 | $886;
         HEAP32[(1712)>>2] = $889;
         HEAP32[$881>>2] = $726;
         $890 = ((($726)) + 24|0);
         HEAP32[$890>>2] = $881;
         $891 = ((($726)) + 12|0);
         HEAP32[$891>>2] = $726;
         $892 = ((($726)) + 8|0);
         HEAP32[$892>>2] = $726;
         break;
        }
        $893 = HEAP32[$881>>2]|0;
        $894 = ($I7$0$i$i|0)==(31);
        $895 = $I7$0$i$i >>> 1;
        $896 = (25 - ($895))|0;
        $897 = $894 ? 0 : $896;
        $898 = $qsize$0$i$i << $897;
        $K8$0$i$i = $898;$T$0$i$18$i = $893;
        while(1) {
         $899 = ((($T$0$i$18$i)) + 4|0);
         $900 = HEAP32[$899>>2]|0;
         $901 = $900 & -8;
         $902 = ($901|0)==($qsize$0$i$i|0);
         if ($902) {
          $T$0$i$18$i$lcssa = $T$0$i$18$i;
          label = 281;
          break;
         }
         $903 = $K8$0$i$i >>> 31;
         $904 = (((($T$0$i$18$i)) + 16|0) + ($903<<2)|0);
         $905 = $K8$0$i$i << 1;
         $906 = HEAP32[$904>>2]|0;
         $907 = ($906|0)==(0|0);
         if ($907) {
          $$lcssa = $904;$T$0$i$18$i$lcssa139 = $T$0$i$18$i;
          label = 278;
          break;
         } else {
          $K8$0$i$i = $905;$T$0$i$18$i = $906;
         }
        }
        if ((label|0) == 278) {
         $908 = HEAP32[(1724)>>2]|0;
         $909 = ($$lcssa>>>0)<($908>>>0);
         if ($909) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$lcssa>>2] = $726;
          $910 = ((($726)) + 24|0);
          HEAP32[$910>>2] = $T$0$i$18$i$lcssa139;
          $911 = ((($726)) + 12|0);
          HEAP32[$911>>2] = $726;
          $912 = ((($726)) + 8|0);
          HEAP32[$912>>2] = $726;
          break;
         }
        }
        else if ((label|0) == 281) {
         $913 = ((($T$0$i$18$i$lcssa)) + 8|0);
         $914 = HEAP32[$913>>2]|0;
         $915 = HEAP32[(1724)>>2]|0;
         $916 = ($914>>>0)>=($915>>>0);
         $not$$i$20$i = ($T$0$i$18$i$lcssa>>>0)>=($915>>>0);
         $917 = $916 & $not$$i$20$i;
         if ($917) {
          $918 = ((($914)) + 12|0);
          HEAP32[$918>>2] = $726;
          HEAP32[$913>>2] = $726;
          $919 = ((($726)) + 8|0);
          HEAP32[$919>>2] = $914;
          $920 = ((($726)) + 12|0);
          HEAP32[$920>>2] = $T$0$i$18$i$lcssa;
          $921 = ((($726)) + 24|0);
          HEAP32[$921>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1052 = ((($714)) + 8|0);
      $$0 = $1052;
      return ($$0|0);
     } else {
      $sp$0$i$i$i = (2156);
     }
    }
    while(1) {
     $922 = HEAP32[$sp$0$i$i$i>>2]|0;
     $923 = ($922>>>0)>($635>>>0);
     if (!($923)) {
      $924 = ((($sp$0$i$i$i)) + 4|0);
      $925 = HEAP32[$924>>2]|0;
      $926 = (($922) + ($925)|0);
      $927 = ($926>>>0)>($635>>>0);
      if ($927) {
       $$lcssa142 = $926;
       break;
      }
     }
     $928 = ((($sp$0$i$i$i)) + 8|0);
     $929 = HEAP32[$928>>2]|0;
     $sp$0$i$i$i = $929;
    }
    $930 = ((($$lcssa142)) + -47|0);
    $931 = ((($930)) + 8|0);
    $932 = $931;
    $933 = $932 & 7;
    $934 = ($933|0)==(0);
    $935 = (0 - ($932))|0;
    $936 = $935 & 7;
    $937 = $934 ? 0 : $936;
    $938 = (($930) + ($937)|0);
    $939 = ((($635)) + 16|0);
    $940 = ($938>>>0)<($939>>>0);
    $941 = $940 ? $635 : $938;
    $942 = ((($941)) + 8|0);
    $943 = ((($941)) + 24|0);
    $944 = (($tsize$746$i) + -40)|0;
    $945 = ((($tbase$747$i)) + 8|0);
    $946 = $945;
    $947 = $946 & 7;
    $948 = ($947|0)==(0);
    $949 = (0 - ($946))|0;
    $950 = $949 & 7;
    $951 = $948 ? 0 : $950;
    $952 = (($tbase$747$i) + ($951)|0);
    $953 = (($944) - ($951))|0;
    HEAP32[(1732)>>2] = $952;
    HEAP32[(1720)>>2] = $953;
    $954 = $953 | 1;
    $955 = ((($952)) + 4|0);
    HEAP32[$955>>2] = $954;
    $956 = (($952) + ($953)|0);
    $957 = ((($956)) + 4|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(2196)>>2]|0;
    HEAP32[(1736)>>2] = $958;
    $959 = ((($941)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$942>>2]=HEAP32[(2156)>>2]|0;HEAP32[$942+4>>2]=HEAP32[(2156)+4>>2]|0;HEAP32[$942+8>>2]=HEAP32[(2156)+8>>2]|0;HEAP32[$942+12>>2]=HEAP32[(2156)+12>>2]|0;
    HEAP32[(2156)>>2] = $tbase$747$i;
    HEAP32[(2160)>>2] = $tsize$746$i;
    HEAP32[(2168)>>2] = 0;
    HEAP32[(2164)>>2] = $942;
    $p$0$i$i = $943;
    while(1) {
     $960 = ((($p$0$i$i)) + 4|0);
     HEAP32[$960>>2] = 7;
     $961 = ((($960)) + 4|0);
     $962 = ($961>>>0)<($$lcssa142>>>0);
     if ($962) {
      $p$0$i$i = $960;
     } else {
      break;
     }
    }
    $963 = ($941|0)==($635|0);
    if (!($963)) {
     $964 = $941;
     $965 = $635;
     $966 = (($964) - ($965))|0;
     $967 = HEAP32[$959>>2]|0;
     $968 = $967 & -2;
     HEAP32[$959>>2] = $968;
     $969 = $966 | 1;
     $970 = ((($635)) + 4|0);
     HEAP32[$970>>2] = $969;
     HEAP32[$941>>2] = $966;
     $971 = $966 >>> 3;
     $972 = ($966>>>0)<(256);
     if ($972) {
      $973 = $971 << 1;
      $974 = (1748 + ($973<<2)|0);
      $975 = HEAP32[1708>>2]|0;
      $976 = 1 << $971;
      $977 = $975 & $976;
      $978 = ($977|0)==(0);
      if ($978) {
       $979 = $975 | $976;
       HEAP32[1708>>2] = $979;
       $$pre$i$i = ((($974)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $974;
      } else {
       $980 = ((($974)) + 8|0);
       $981 = HEAP32[$980>>2]|0;
       $982 = HEAP32[(1724)>>2]|0;
       $983 = ($981>>>0)<($982>>>0);
       if ($983) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $980;$F$0$i$i = $981;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $984 = ((($F$0$i$i)) + 12|0);
      HEAP32[$984>>2] = $635;
      $985 = ((($635)) + 8|0);
      HEAP32[$985>>2] = $F$0$i$i;
      $986 = ((($635)) + 12|0);
      HEAP32[$986>>2] = $974;
      break;
     }
     $987 = $966 >>> 8;
     $988 = ($987|0)==(0);
     if ($988) {
      $I1$0$i$i = 0;
     } else {
      $989 = ($966>>>0)>(16777215);
      if ($989) {
       $I1$0$i$i = 31;
      } else {
       $990 = (($987) + 1048320)|0;
       $991 = $990 >>> 16;
       $992 = $991 & 8;
       $993 = $987 << $992;
       $994 = (($993) + 520192)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 4;
       $997 = $996 | $992;
       $998 = $993 << $996;
       $999 = (($998) + 245760)|0;
       $1000 = $999 >>> 16;
       $1001 = $1000 & 2;
       $1002 = $997 | $1001;
       $1003 = (14 - ($1002))|0;
       $1004 = $998 << $1001;
       $1005 = $1004 >>> 15;
       $1006 = (($1003) + ($1005))|0;
       $1007 = $1006 << 1;
       $1008 = (($1006) + 7)|0;
       $1009 = $966 >>> $1008;
       $1010 = $1009 & 1;
       $1011 = $1010 | $1007;
       $I1$0$i$i = $1011;
      }
     }
     $1012 = (2012 + ($I1$0$i$i<<2)|0);
     $1013 = ((($635)) + 28|0);
     HEAP32[$1013>>2] = $I1$0$i$i;
     $1014 = ((($635)) + 20|0);
     HEAP32[$1014>>2] = 0;
     HEAP32[$939>>2] = 0;
     $1015 = HEAP32[(1712)>>2]|0;
     $1016 = 1 << $I1$0$i$i;
     $1017 = $1015 & $1016;
     $1018 = ($1017|0)==(0);
     if ($1018) {
      $1019 = $1015 | $1016;
      HEAP32[(1712)>>2] = $1019;
      HEAP32[$1012>>2] = $635;
      $1020 = ((($635)) + 24|0);
      HEAP32[$1020>>2] = $1012;
      $1021 = ((($635)) + 12|0);
      HEAP32[$1021>>2] = $635;
      $1022 = ((($635)) + 8|0);
      HEAP32[$1022>>2] = $635;
      break;
     }
     $1023 = HEAP32[$1012>>2]|0;
     $1024 = ($I1$0$i$i|0)==(31);
     $1025 = $I1$0$i$i >>> 1;
     $1026 = (25 - ($1025))|0;
     $1027 = $1024 ? 0 : $1026;
     $1028 = $966 << $1027;
     $K2$0$i$i = $1028;$T$0$i$i = $1023;
     while(1) {
      $1029 = ((($T$0$i$i)) + 4|0);
      $1030 = HEAP32[$1029>>2]|0;
      $1031 = $1030 & -8;
      $1032 = ($1031|0)==($966|0);
      if ($1032) {
       $T$0$i$i$lcssa = $T$0$i$i;
       label = 307;
       break;
      }
      $1033 = $K2$0$i$i >>> 31;
      $1034 = (((($T$0$i$i)) + 16|0) + ($1033<<2)|0);
      $1035 = $K2$0$i$i << 1;
      $1036 = HEAP32[$1034>>2]|0;
      $1037 = ($1036|0)==(0|0);
      if ($1037) {
       $$lcssa141 = $1034;$T$0$i$i$lcssa140 = $T$0$i$i;
       label = 304;
       break;
      } else {
       $K2$0$i$i = $1035;$T$0$i$i = $1036;
      }
     }
     if ((label|0) == 304) {
      $1038 = HEAP32[(1724)>>2]|0;
      $1039 = ($$lcssa141>>>0)<($1038>>>0);
      if ($1039) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$lcssa141>>2] = $635;
       $1040 = ((($635)) + 24|0);
       HEAP32[$1040>>2] = $T$0$i$i$lcssa140;
       $1041 = ((($635)) + 12|0);
       HEAP32[$1041>>2] = $635;
       $1042 = ((($635)) + 8|0);
       HEAP32[$1042>>2] = $635;
       break;
      }
     }
     else if ((label|0) == 307) {
      $1043 = ((($T$0$i$i$lcssa)) + 8|0);
      $1044 = HEAP32[$1043>>2]|0;
      $1045 = HEAP32[(1724)>>2]|0;
      $1046 = ($1044>>>0)>=($1045>>>0);
      $not$$i$i = ($T$0$i$i$lcssa>>>0)>=($1045>>>0);
      $1047 = $1046 & $not$$i$i;
      if ($1047) {
       $1048 = ((($1044)) + 12|0);
       HEAP32[$1048>>2] = $635;
       HEAP32[$1043>>2] = $635;
       $1049 = ((($635)) + 8|0);
       HEAP32[$1049>>2] = $1044;
       $1050 = ((($635)) + 12|0);
       HEAP32[$1050>>2] = $T$0$i$i$lcssa;
       $1051 = ((($635)) + 24|0);
       HEAP32[$1051>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1053 = HEAP32[(1720)>>2]|0;
  $1054 = ($1053>>>0)>($nb$0>>>0);
  if ($1054) {
   $1055 = (($1053) - ($nb$0))|0;
   HEAP32[(1720)>>2] = $1055;
   $1056 = HEAP32[(1732)>>2]|0;
   $1057 = (($1056) + ($nb$0)|0);
   HEAP32[(1732)>>2] = $1057;
   $1058 = $1055 | 1;
   $1059 = ((($1057)) + 4|0);
   HEAP32[$1059>>2] = $1058;
   $1060 = $nb$0 | 3;
   $1061 = ((($1056)) + 4|0);
   HEAP32[$1061>>2] = $1060;
   $1062 = ((($1056)) + 8|0);
   $$0 = $1062;
   return ($$0|0);
  }
 }
 $1063 = (___errno_location()|0);
 HEAP32[$1063>>2] = 12;
 $$0 = 0;
 return ($$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi46Z2D = 0, $$pre$phi48Z2D = 0, $$pre$phiZ2D = 0, $$pre45 = 0, $$pre47 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F18$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R8$1 = 0, $R8$1$lcssa = 0, $R8$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP10$1 = 0, $RP10$1$lcssa = 0;
 var $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa53 = 0, $cond20 = 0, $cond21 = 0, $not$ = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(1724)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $9 = (($1) + ($8)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $14 = (0 - ($12))|0;
   $15 = (($1) + ($14)|0);
   $16 = (($12) + ($8))|0;
   $17 = ($15>>>0)<($2>>>0);
   if ($17) {
    _abort();
    // unreachable;
   }
   $18 = HEAP32[(1728)>>2]|0;
   $19 = ($15|0)==($18|0);
   if ($19) {
    $104 = ((($9)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    HEAP32[(1716)>>2] = $16;
    $108 = $105 & -2;
    HEAP32[$104>>2] = $108;
    $109 = $16 | 1;
    $110 = ((($15)) + 4|0);
    HEAP32[$110>>2] = $109;
    $111 = (($15) + ($16)|0);
    HEAP32[$111>>2] = $16;
    return;
   }
   $20 = $12 >>> 3;
   $21 = ($12>>>0)<(256);
   if ($21) {
    $22 = ((($15)) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($15)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $20 << 1;
    $27 = (1748 + ($26<<2)|0);
    $28 = ($23|0)==($27|0);
    if (!($28)) {
     $29 = ($23>>>0)<($2>>>0);
     if ($29) {
      _abort();
      // unreachable;
     }
     $30 = ((($23)) + 12|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==($15|0);
     if (!($32)) {
      _abort();
      // unreachable;
     }
    }
    $33 = ($25|0)==($23|0);
    if ($33) {
     $34 = 1 << $20;
     $35 = $34 ^ -1;
     $36 = HEAP32[1708>>2]|0;
     $37 = $36 & $35;
     HEAP32[1708>>2] = $37;
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    $38 = ($25|0)==($27|0);
    if ($38) {
     $$pre47 = ((($25)) + 8|0);
     $$pre$phi48Z2D = $$pre47;
    } else {
     $39 = ($25>>>0)<($2>>>0);
     if ($39) {
      _abort();
      // unreachable;
     }
     $40 = ((($25)) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==($15|0);
     if ($42) {
      $$pre$phi48Z2D = $40;
     } else {
      _abort();
      // unreachable;
     }
    }
    $43 = ((($23)) + 12|0);
    HEAP32[$43>>2] = $25;
    HEAP32[$$pre$phi48Z2D>>2] = $23;
    $p$1 = $15;$psize$1 = $16;
    break;
   }
   $44 = ((($15)) + 24|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($15)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==($15|0);
   do {
    if ($48) {
     $58 = ((($15)) + 16|0);
     $59 = ((($58)) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==(0|0);
     if ($61) {
      $62 = HEAP32[$58>>2]|0;
      $63 = ($62|0)==(0|0);
      if ($63) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $62;$RP$1 = $58;
      }
     } else {
      $R$1 = $60;$RP$1 = $59;
     }
     while(1) {
      $64 = ((($R$1)) + 20|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if (!($66)) {
       $R$1 = $65;$RP$1 = $64;
       continue;
      }
      $67 = ((($R$1)) + 16|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)==(0|0);
      if ($69) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $68;$RP$1 = $67;
      }
     }
     $70 = ($RP$1$lcssa>>>0)<($2>>>0);
     if ($70) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $49 = ((($15)) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50>>>0)<($2>>>0);
     if ($51) {
      _abort();
      // unreachable;
     }
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($15|0);
     if (!($54)) {
      _abort();
      // unreachable;
     }
     $55 = ((($47)) + 8|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==($15|0);
     if ($57) {
      HEAP32[$52>>2] = $47;
      HEAP32[$55>>2] = $50;
      $R$3 = $47;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $71 = ($45|0)==(0|0);
   if ($71) {
    $p$1 = $15;$psize$1 = $16;
   } else {
    $72 = ((($15)) + 28|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (2012 + ($73<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($15|0)==($75|0);
    if ($76) {
     HEAP32[$74>>2] = $R$3;
     $cond20 = ($R$3|0)==(0|0);
     if ($cond20) {
      $77 = 1 << $73;
      $78 = $77 ^ -1;
      $79 = HEAP32[(1712)>>2]|0;
      $80 = $79 & $78;
      HEAP32[(1712)>>2] = $80;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    } else {
     $81 = HEAP32[(1724)>>2]|0;
     $82 = ($45>>>0)<($81>>>0);
     if ($82) {
      _abort();
      // unreachable;
     }
     $83 = ((($45)) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)==($15|0);
     if ($85) {
      HEAP32[$83>>2] = $R$3;
     } else {
      $86 = ((($45)) + 20|0);
      HEAP32[$86>>2] = $R$3;
     }
     $87 = ($R$3|0)==(0|0);
     if ($87) {
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
    $88 = HEAP32[(1724)>>2]|0;
    $89 = ($R$3>>>0)<($88>>>0);
    if ($89) {
     _abort();
     // unreachable;
    }
    $90 = ((($R$3)) + 24|0);
    HEAP32[$90>>2] = $45;
    $91 = ((($15)) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0|0);
    do {
     if (!($93)) {
      $94 = ($92>>>0)<($88>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = ((($R$3)) + 16|0);
       HEAP32[$95>>2] = $92;
       $96 = ((($92)) + 24|0);
       HEAP32[$96>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $97 = ((($91)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$1 = $15;$psize$1 = $16;
    } else {
     $100 = HEAP32[(1724)>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = ((($R$3)) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = ((($98)) + 24|0);
      HEAP32[$103>>2] = $R$3;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
   }
  } else {
   $p$1 = $1;$psize$1 = $8;
  }
 } while(0);
 $112 = ($p$1>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $113 = ((($9)) + 4|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[(1732)>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[(1720)>>2]|0;
   $122 = (($121) + ($psize$1))|0;
   HEAP32[(1720)>>2] = $122;
   HEAP32[(1732)>>2] = $p$1;
   $123 = $122 | 1;
   $124 = ((($p$1)) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[(1728)>>2]|0;
   $126 = ($p$1|0)==($125|0);
   if (!($126)) {
    return;
   }
   HEAP32[(1728)>>2] = 0;
   HEAP32[(1716)>>2] = 0;
   return;
  }
  $127 = HEAP32[(1728)>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[(1716)>>2]|0;
   $130 = (($129) + ($psize$1))|0;
   HEAP32[(1716)>>2] = $130;
   HEAP32[(1728)>>2] = $p$1;
   $131 = $130 | 1;
   $132 = ((($p$1)) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$1) + ($130)|0);
   HEAP32[$133>>2] = $130;
   return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$1))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = ((($9)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($9)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = (1748 + ($142<<2)|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[(1724)>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = ((($139)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[1708>>2]|0;
     $154 = $153 & $152;
     HEAP32[1708>>2] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre45 = ((($141)) + 8|0);
     $$pre$phi46Z2D = $$pre45;
    } else {
     $156 = HEAP32[(1724)>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = ((($141)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi46Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = ((($139)) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi46Z2D>>2] = $139;
   } else {
    $162 = ((($9)) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($9)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $177 = ((($9)) + 16|0);
      $178 = ((($177)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(0|0);
      if ($180) {
       $181 = HEAP32[$177>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R8$3 = 0;
        break;
       } else {
        $R8$1 = $181;$RP10$1 = $177;
       }
      } else {
       $R8$1 = $179;$RP10$1 = $178;
      }
      while(1) {
       $183 = ((($R8$1)) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R8$1 = $184;$RP10$1 = $183;
        continue;
       }
       $186 = ((($R8$1)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        $R8$1$lcssa = $R8$1;$RP10$1$lcssa = $RP10$1;
        break;
       } else {
        $R8$1 = $187;$RP10$1 = $186;
       }
      }
      $189 = HEAP32[(1724)>>2]|0;
      $190 = ($RP10$1$lcssa>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP10$1$lcssa>>2] = 0;
       $R8$3 = $R8$1$lcssa;
       break;
      }
     } else {
      $167 = ((($9)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[(1724)>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = ((($168)) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = ((($165)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R8$3 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $192 = ((($9)) + 28|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (2012 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R8$3;
      $cond21 = ($R8$3|0)==(0|0);
      if ($cond21) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[(1712)>>2]|0;
       $200 = $199 & $198;
       HEAP32[(1712)>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[(1724)>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = ((($163)) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R8$3;
      } else {
       $206 = ((($163)) + 20|0);
       HEAP32[$206>>2] = $R8$3;
      }
      $207 = ($R8$3|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[(1724)>>2]|0;
     $209 = ($R8$3>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = ((($R8$3)) + 24|0);
     HEAP32[$210>>2] = $163;
     $211 = ((($9)) + 16|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = ($212>>>0)<($208>>>0);
       if ($214) {
        _abort();
        // unreachable;
       } else {
        $215 = ((($R8$3)) + 16|0);
        HEAP32[$215>>2] = $212;
        $216 = ((($212)) + 24|0);
        HEAP32[$216>>2] = $R8$3;
        break;
       }
      }
     } while(0);
     $217 = ((($211)) + 4|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = ($218|0)==(0|0);
     if (!($219)) {
      $220 = HEAP32[(1724)>>2]|0;
      $221 = ($218>>>0)<($220>>>0);
      if ($221) {
       _abort();
       // unreachable;
      } else {
       $222 = ((($R8$3)) + 20|0);
       HEAP32[$222>>2] = $218;
       $223 = ((($218)) + 24|0);
       HEAP32[$223>>2] = $R8$3;
       break;
      }
     }
    }
   }
  } while(0);
  $224 = $135 | 1;
  $225 = ((($p$1)) + 4|0);
  HEAP32[$225>>2] = $224;
  $226 = (($p$1) + ($135)|0);
  HEAP32[$226>>2] = $135;
  $227 = HEAP32[(1728)>>2]|0;
  $228 = ($p$1|0)==($227|0);
  if ($228) {
   HEAP32[(1716)>>2] = $135;
   return;
  } else {
   $psize$2 = $135;
  }
 } else {
  $229 = $114 & -2;
  HEAP32[$113>>2] = $229;
  $230 = $psize$1 | 1;
  $231 = ((($p$1)) + 4|0);
  HEAP32[$231>>2] = $230;
  $232 = (($p$1) + ($psize$1)|0);
  HEAP32[$232>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $233 = $psize$2 >>> 3;
 $234 = ($psize$2>>>0)<(256);
 if ($234) {
  $235 = $233 << 1;
  $236 = (1748 + ($235<<2)|0);
  $237 = HEAP32[1708>>2]|0;
  $238 = 1 << $233;
  $239 = $237 & $238;
  $240 = ($239|0)==(0);
  if ($240) {
   $241 = $237 | $238;
   HEAP32[1708>>2] = $241;
   $$pre = ((($236)) + 8|0);
   $$pre$phiZ2D = $$pre;$F18$0 = $236;
  } else {
   $242 = ((($236)) + 8|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = HEAP32[(1724)>>2]|0;
   $245 = ($243>>>0)<($244>>>0);
   if ($245) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $242;$F18$0 = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $246 = ((($F18$0)) + 12|0);
  HEAP32[$246>>2] = $p$1;
  $247 = ((($p$1)) + 8|0);
  HEAP32[$247>>2] = $F18$0;
  $248 = ((($p$1)) + 12|0);
  HEAP32[$248>>2] = $236;
  return;
 }
 $249 = $psize$2 >>> 8;
 $250 = ($249|0)==(0);
 if ($250) {
  $I20$0 = 0;
 } else {
  $251 = ($psize$2>>>0)>(16777215);
  if ($251) {
   $I20$0 = 31;
  } else {
   $252 = (($249) + 1048320)|0;
   $253 = $252 >>> 16;
   $254 = $253 & 8;
   $255 = $249 << $254;
   $256 = (($255) + 520192)|0;
   $257 = $256 >>> 16;
   $258 = $257 & 4;
   $259 = $258 | $254;
   $260 = $255 << $258;
   $261 = (($260) + 245760)|0;
   $262 = $261 >>> 16;
   $263 = $262 & 2;
   $264 = $259 | $263;
   $265 = (14 - ($264))|0;
   $266 = $260 << $263;
   $267 = $266 >>> 15;
   $268 = (($265) + ($267))|0;
   $269 = $268 << 1;
   $270 = (($268) + 7)|0;
   $271 = $psize$2 >>> $270;
   $272 = $271 & 1;
   $273 = $272 | $269;
   $I20$0 = $273;
  }
 }
 $274 = (2012 + ($I20$0<<2)|0);
 $275 = ((($p$1)) + 28|0);
 HEAP32[$275>>2] = $I20$0;
 $276 = ((($p$1)) + 16|0);
 $277 = ((($p$1)) + 20|0);
 HEAP32[$277>>2] = 0;
 HEAP32[$276>>2] = 0;
 $278 = HEAP32[(1712)>>2]|0;
 $279 = 1 << $I20$0;
 $280 = $278 & $279;
 $281 = ($280|0)==(0);
 do {
  if ($281) {
   $282 = $278 | $279;
   HEAP32[(1712)>>2] = $282;
   HEAP32[$274>>2] = $p$1;
   $283 = ((($p$1)) + 24|0);
   HEAP32[$283>>2] = $274;
   $284 = ((($p$1)) + 12|0);
   HEAP32[$284>>2] = $p$1;
   $285 = ((($p$1)) + 8|0);
   HEAP32[$285>>2] = $p$1;
  } else {
   $286 = HEAP32[$274>>2]|0;
   $287 = ($I20$0|0)==(31);
   $288 = $I20$0 >>> 1;
   $289 = (25 - ($288))|0;
   $290 = $287 ? 0 : $289;
   $291 = $psize$2 << $290;
   $K21$0 = $291;$T$0 = $286;
   while(1) {
    $292 = ((($T$0)) + 4|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = $293 & -8;
    $295 = ($294|0)==($psize$2|0);
    if ($295) {
     $T$0$lcssa = $T$0;
     label = 130;
     break;
    }
    $296 = $K21$0 >>> 31;
    $297 = (((($T$0)) + 16|0) + ($296<<2)|0);
    $298 = $K21$0 << 1;
    $299 = HEAP32[$297>>2]|0;
    $300 = ($299|0)==(0|0);
    if ($300) {
     $$lcssa = $297;$T$0$lcssa53 = $T$0;
     label = 127;
     break;
    } else {
     $K21$0 = $298;$T$0 = $299;
    }
   }
   if ((label|0) == 127) {
    $301 = HEAP32[(1724)>>2]|0;
    $302 = ($$lcssa>>>0)<($301>>>0);
    if ($302) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$$lcssa>>2] = $p$1;
     $303 = ((($p$1)) + 24|0);
     HEAP32[$303>>2] = $T$0$lcssa53;
     $304 = ((($p$1)) + 12|0);
     HEAP32[$304>>2] = $p$1;
     $305 = ((($p$1)) + 8|0);
     HEAP32[$305>>2] = $p$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $306 = ((($T$0$lcssa)) + 8|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = HEAP32[(1724)>>2]|0;
    $309 = ($307>>>0)>=($308>>>0);
    $not$ = ($T$0$lcssa>>>0)>=($308>>>0);
    $310 = $309 & $not$;
    if ($310) {
     $311 = ((($307)) + 12|0);
     HEAP32[$311>>2] = $p$1;
     HEAP32[$306>>2] = $p$1;
     $312 = ((($p$1)) + 8|0);
     HEAP32[$312>>2] = $307;
     $313 = ((($p$1)) + 12|0);
     HEAP32[$313>>2] = $T$0$lcssa;
     $314 = ((($p$1)) + 24|0);
     HEAP32[$314>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $315 = HEAP32[(1740)>>2]|0;
 $316 = (($315) + -1)|0;
 HEAP32[(1740)>>2] = $316;
 $317 = ($316|0)==(0);
 if ($317) {
  $sp$0$in$i = (2164);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $318 = ($sp$0$i|0)==(0|0);
  $319 = ((($sp$0$i)) + 8|0);
  if ($318) {
   break;
  } else {
   $sp$0$in$i = $319;
  }
 }
 HEAP32[(1740)>>2] = -1;
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  return ($6|0);
 }
 $8 = ((($6)) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$1 = $1;
  return ($mem$1|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$1 = $11;
  return ($mem$1|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$1 = $12;
 return ($mem$1|0);
}
function _mallopt($param_number,$value) {
 $param_number = $param_number|0;
 $value = $value|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2180>>2]|0;
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $2 = (_sysconf(30)|0);
   $3 = (($2) + -1)|0;
   $4 = $3 & $2;
   $5 = ($4|0)==(0);
   if ($5) {
    HEAP32[(2188)>>2] = $2;
    HEAP32[(2184)>>2] = $2;
    HEAP32[(2192)>>2] = -1;
    HEAP32[(2196)>>2] = -1;
    HEAP32[(2200)>>2] = 0;
    HEAP32[(2152)>>2] = 0;
    $6 = (_time((0|0))|0);
    $7 = $6 & -16;
    $8 = $7 ^ 1431655768;
    HEAP32[2180>>2] = $8;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 switch ($param_number|0) {
 case -1:  {
  HEAP32[(2196)>>2] = $value;
  $$0$i = 1;
  return ($$0$i|0);
  break;
 }
 case -2:  {
  $9 = HEAP32[(2184)>>2]|0;
  $10 = ($9>>>0)>($value>>>0);
  if ($10) {
   $$0$i = 0;
   return ($$0$i|0);
  }
  $11 = (($value) + -1)|0;
  $12 = $11 & $value;
  $13 = ($12|0)==(0);
  if (!($13)) {
   $$0$i = 0;
   return ($$0$i|0);
  }
  HEAP32[(2188)>>2] = $value;
  $$0$i = 1;
  return ($$0$i|0);
  break;
 }
 case -3:  {
  HEAP32[(2192)>>2] = $value;
  $$0$i = 1;
  return ($$0$i|0);
  break;
 }
 default: {
  $$0$i = 0;
  return ($$0$i|0);
 }
 }
 return (0)|0;
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$1 = 0, $R$1$lcssa = 0;
 var $R$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $cond = 0, $newp$2 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(1724)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond3 = $or$cond$not & $6;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $7 = ((($3)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(2188)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$2 = $p;
    return ($newp$2|0);
   }
  }
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$2 = $p;
   return ($newp$2|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $26 = ((($22)) + 4|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = (($22) + ($20)|0);
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 | 1;
  HEAP32[$29>>2] = $31;
  _dispose_chunk($22,$20);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $32 = HEAP32[(1732)>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[(1720)>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $42 = ((($38)) + 4|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[(1732)>>2] = $38;
  HEAP32[(1720)>>2] = $37;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $44 = HEAP32[(1728)>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[(1716)>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($51) + ($49)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $56 = ((($51)) + 4|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $58 = ((($52)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge$1 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $64 = (($p) + ($47)|0);
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $66 | 1;
   HEAP32[$65>>2] = $67;
   $storemerge = 0;$storemerge$1 = 0;
  }
  HEAP32[(1716)>>2] = $storemerge$1;
  HEAP32[(1728)>>2] = $storemerge;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $68 = $8 & 2;
 $69 = ($68|0)==(0);
 if (!($69)) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $70 = $8 & -8;
 $71 = (($70) + ($2))|0;
 $72 = ($71>>>0)<($nb>>>0);
 if ($72) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $73 = (($71) - ($nb))|0;
 $74 = $8 >>> 3;
 $75 = ($8>>>0)<(256);
 do {
  if ($75) {
   $76 = ((($3)) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ((($3)) + 12|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $74 << 1;
   $81 = (1748 + ($80<<2)|0);
   $82 = ($77|0)==($81|0);
   if (!($82)) {
    $83 = ($77>>>0)<($4>>>0);
    if ($83) {
     _abort();
     // unreachable;
    }
    $84 = ((($77)) + 12|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)==($3|0);
    if (!($86)) {
     _abort();
     // unreachable;
    }
   }
   $87 = ($79|0)==($77|0);
   if ($87) {
    $88 = 1 << $74;
    $89 = $88 ^ -1;
    $90 = HEAP32[1708>>2]|0;
    $91 = $90 & $89;
    HEAP32[1708>>2] = $91;
    break;
   }
   $92 = ($79|0)==($81|0);
   if ($92) {
    $$pre = ((($79)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $93 = ($79>>>0)<($4>>>0);
    if ($93) {
     _abort();
     // unreachable;
    }
    $94 = ((($79)) + 8|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==($3|0);
    if ($96) {
     $$pre$phiZ2D = $94;
    } else {
     _abort();
     // unreachable;
    }
   }
   $97 = ((($77)) + 12|0);
   HEAP32[$97>>2] = $79;
   HEAP32[$$pre$phiZ2D>>2] = $77;
  } else {
   $98 = ((($3)) + 24|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ((($3)) + 12|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($101|0)==($3|0);
   do {
    if ($102) {
     $112 = ((($3)) + 16|0);
     $113 = ((($112)) + 4|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = ($114|0)==(0|0);
     if ($115) {
      $116 = HEAP32[$112>>2]|0;
      $117 = ($116|0)==(0|0);
      if ($117) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $116;$RP$1 = $112;
      }
     } else {
      $R$1 = $114;$RP$1 = $113;
     }
     while(1) {
      $118 = ((($R$1)) + 20|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if (!($120)) {
       $R$1 = $119;$RP$1 = $118;
       continue;
      }
      $121 = ((($R$1)) + 16|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ($122|0)==(0|0);
      if ($123) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $122;$RP$1 = $121;
      }
     }
     $124 = ($RP$1$lcssa>>>0)<($4>>>0);
     if ($124) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $103 = ((($3)) + 8|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104>>>0)<($4>>>0);
     if ($105) {
      _abort();
      // unreachable;
     }
     $106 = ((($104)) + 12|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if (!($108)) {
      _abort();
      // unreachable;
     }
     $109 = ((($101)) + 8|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==($3|0);
     if ($111) {
      HEAP32[$106>>2] = $101;
      HEAP32[$109>>2] = $104;
      $R$3 = $101;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $125 = ($99|0)==(0|0);
   if (!($125)) {
    $126 = ((($3)) + 28|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = (2012 + ($127<<2)|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = ($3|0)==($129|0);
    if ($130) {
     HEAP32[$128>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $131 = 1 << $127;
      $132 = $131 ^ -1;
      $133 = HEAP32[(1712)>>2]|0;
      $134 = $133 & $132;
      HEAP32[(1712)>>2] = $134;
      break;
     }
    } else {
     $135 = HEAP32[(1724)>>2]|0;
     $136 = ($99>>>0)<($135>>>0);
     if ($136) {
      _abort();
      // unreachable;
     }
     $137 = ((($99)) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($138|0)==($3|0);
     if ($139) {
      HEAP32[$137>>2] = $R$3;
     } else {
      $140 = ((($99)) + 20|0);
      HEAP32[$140>>2] = $R$3;
     }
     $141 = ($R$3|0)==(0|0);
     if ($141) {
      break;
     }
    }
    $142 = HEAP32[(1724)>>2]|0;
    $143 = ($R$3>>>0)<($142>>>0);
    if ($143) {
     _abort();
     // unreachable;
    }
    $144 = ((($R$3)) + 24|0);
    HEAP32[$144>>2] = $99;
    $145 = ((($3)) + 16|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)==(0|0);
    do {
     if (!($147)) {
      $148 = ($146>>>0)<($142>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = ((($R$3)) + 16|0);
       HEAP32[$149>>2] = $146;
       $150 = ((($146)) + 24|0);
       HEAP32[$150>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $151 = ((($145)) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[(1724)>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = ((($R$3)) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = ((($152)) + 24|0);
      HEAP32[$157>>2] = $R$3;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($73>>>0)<(16);
 if ($158) {
  $159 = $1 & 1;
  $160 = $71 | $159;
  $161 = $160 | 2;
  HEAP32[$0>>2] = $161;
  $162 = (($p) + ($71)|0);
  $163 = ((($162)) + 4|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$2 = $p;
  return ($newp$2|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = $1 & 1;
  $168 = $167 | $nb;
  $169 = $168 | 2;
  HEAP32[$0>>2] = $169;
  $170 = ((($166)) + 4|0);
  $171 = $73 | 3;
  HEAP32[$170>>2] = $171;
  $172 = (($166) + ($73)|0);
  $173 = ((($172)) + 4|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$73);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$1 = 0, $$14 = 0, $$2 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F17$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0;
 var $R$3 = 0, $R7$1 = 0, $R7$1$lcssa = 0, $R7$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP9$1 = 0, $RP9$1$lcssa = 0, $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa30 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(1724)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(1728)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $99 = ((($0)) + 4|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$1 = $9;$$14 = $10;
     break;
    }
    HEAP32[(1716)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $105 = ((($9)) + 4|0);
    HEAP32[$105>>2] = $104;
    $106 = (($9) + ($10)|0);
    HEAP32[$106>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $17 = ((($9)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($9)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (1748 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[1708>>2]|0;
     $32 = $31 & $30;
     HEAP32[1708>>2] = $32;
     $$1 = $9;$$14 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre23 = ((($20)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi24Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi24Z2D>>2] = $18;
    $$1 = $9;$$14 = $10;
    break;
   }
   $39 = ((($9)) + 24|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($9)) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $53 = ((($9)) + 16|0);
     $54 = ((($53)) + 4|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==(0|0);
     if ($56) {
      $57 = HEAP32[$53>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $57;$RP$1 = $53;
      }
     } else {
      $R$1 = $55;$RP$1 = $54;
     }
     while(1) {
      $59 = ((($R$1)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$1 = $60;$RP$1 = $59;
       continue;
      }
      $62 = ((($R$1)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $63;$RP$1 = $62;
      }
     }
     $65 = ($RP$1$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $44 = ((($9)) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$3 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$1 = $9;$$14 = $10;
   } else {
    $67 = ((($9)) + 28|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (2012 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(1712)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(1712)>>2] = $75;
      $$1 = $9;$$14 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(1724)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$3;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$3;
     }
     $82 = ($R$3|0)==(0|0);
     if ($82) {
      $$1 = $9;$$14 = $10;
      break;
     }
    }
    $83 = HEAP32[(1724)>>2]|0;
    $84 = ($R$3>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$3)) + 24|0);
    HEAP32[$85>>2] = $40;
    $86 = ((($9)) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$3)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $92 = ((($86)) + 4|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$1 = $9;$$14 = $10;
    } else {
     $95 = HEAP32[(1724)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$3)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$3;
      $$1 = $9;$$14 = $10;
      break;
     }
    }
   }
  } else {
   $$1 = $p;$$14 = $psize;
  }
 } while(0);
 $107 = HEAP32[(1724)>>2]|0;
 $108 = ($0>>>0)<($107>>>0);
 if ($108) {
  _abort();
  // unreachable;
 }
 $109 = ((($0)) + 4|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 & 2;
 $112 = ($111|0)==(0);
 if ($112) {
  $113 = HEAP32[(1732)>>2]|0;
  $114 = ($0|0)==($113|0);
  if ($114) {
   $115 = HEAP32[(1720)>>2]|0;
   $116 = (($115) + ($$14))|0;
   HEAP32[(1720)>>2] = $116;
   HEAP32[(1732)>>2] = $$1;
   $117 = $116 | 1;
   $118 = ((($$1)) + 4|0);
   HEAP32[$118>>2] = $117;
   $119 = HEAP32[(1728)>>2]|0;
   $120 = ($$1|0)==($119|0);
   if (!($120)) {
    return;
   }
   HEAP32[(1728)>>2] = 0;
   HEAP32[(1716)>>2] = 0;
   return;
  }
  $121 = HEAP32[(1728)>>2]|0;
  $122 = ($0|0)==($121|0);
  if ($122) {
   $123 = HEAP32[(1716)>>2]|0;
   $124 = (($123) + ($$14))|0;
   HEAP32[(1716)>>2] = $124;
   HEAP32[(1728)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = (($$1) + ($124)|0);
   HEAP32[$127>>2] = $124;
   return;
  }
  $128 = $110 & -8;
  $129 = (($128) + ($$14))|0;
  $130 = $110 >>> 3;
  $131 = ($110>>>0)<(256);
  do {
   if ($131) {
    $132 = ((($0)) + 8|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ((($0)) + 12|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $130 << 1;
    $137 = (1748 + ($136<<2)|0);
    $138 = ($133|0)==($137|0);
    if (!($138)) {
     $139 = ($133>>>0)<($107>>>0);
     if ($139) {
      _abort();
      // unreachable;
     }
     $140 = ((($133)) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($0|0);
     if (!($142)) {
      _abort();
      // unreachable;
     }
    }
    $143 = ($135|0)==($133|0);
    if ($143) {
     $144 = 1 << $130;
     $145 = $144 ^ -1;
     $146 = HEAP32[1708>>2]|0;
     $147 = $146 & $145;
     HEAP32[1708>>2] = $147;
     break;
    }
    $148 = ($135|0)==($137|0);
    if ($148) {
     $$pre21 = ((($135)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $149 = ($135>>>0)<($107>>>0);
     if ($149) {
      _abort();
      // unreachable;
     }
     $150 = ((($135)) + 8|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==($0|0);
     if ($152) {
      $$pre$phi22Z2D = $150;
     } else {
      _abort();
      // unreachable;
     }
    }
    $153 = ((($133)) + 12|0);
    HEAP32[$153>>2] = $135;
    HEAP32[$$pre$phi22Z2D>>2] = $133;
   } else {
    $154 = ((($0)) + 24|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ((($0)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)==($0|0);
    do {
     if ($158) {
      $168 = ((($0)) + 16|0);
      $169 = ((($168)) + 4|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $172 = HEAP32[$168>>2]|0;
       $173 = ($172|0)==(0|0);
       if ($173) {
        $R7$3 = 0;
        break;
       } else {
        $R7$1 = $172;$RP9$1 = $168;
       }
      } else {
       $R7$1 = $170;$RP9$1 = $169;
      }
      while(1) {
       $174 = ((($R7$1)) + 20|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($175|0)==(0|0);
       if (!($176)) {
        $R7$1 = $175;$RP9$1 = $174;
        continue;
       }
       $177 = ((($R7$1)) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($178|0)==(0|0);
       if ($179) {
        $R7$1$lcssa = $R7$1;$RP9$1$lcssa = $RP9$1;
        break;
       } else {
        $R7$1 = $178;$RP9$1 = $177;
       }
      }
      $180 = ($RP9$1$lcssa>>>0)<($107>>>0);
      if ($180) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$1$lcssa>>2] = 0;
       $R7$3 = $R7$1$lcssa;
       break;
      }
     } else {
      $159 = ((($0)) + 8|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($160>>>0)<($107>>>0);
      if ($161) {
       _abort();
       // unreachable;
      }
      $162 = ((($160)) + 12|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)==($0|0);
      if (!($164)) {
       _abort();
       // unreachable;
      }
      $165 = ((($157)) + 8|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = ($166|0)==($0|0);
      if ($167) {
       HEAP32[$162>>2] = $157;
       HEAP32[$165>>2] = $160;
       $R7$3 = $157;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $181 = ($155|0)==(0|0);
    if (!($181)) {
     $182 = ((($0)) + 28|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (2012 + ($183<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ($0|0)==($185|0);
     if ($186) {
      HEAP32[$184>>2] = $R7$3;
      $cond16 = ($R7$3|0)==(0|0);
      if ($cond16) {
       $187 = 1 << $183;
       $188 = $187 ^ -1;
       $189 = HEAP32[(1712)>>2]|0;
       $190 = $189 & $188;
       HEAP32[(1712)>>2] = $190;
       break;
      }
     } else {
      $191 = HEAP32[(1724)>>2]|0;
      $192 = ($155>>>0)<($191>>>0);
      if ($192) {
       _abort();
       // unreachable;
      }
      $193 = ((($155)) + 16|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = ($194|0)==($0|0);
      if ($195) {
       HEAP32[$193>>2] = $R7$3;
      } else {
       $196 = ((($155)) + 20|0);
       HEAP32[$196>>2] = $R7$3;
      }
      $197 = ($R7$3|0)==(0|0);
      if ($197) {
       break;
      }
     }
     $198 = HEAP32[(1724)>>2]|0;
     $199 = ($R7$3>>>0)<($198>>>0);
     if ($199) {
      _abort();
      // unreachable;
     }
     $200 = ((($R7$3)) + 24|0);
     HEAP32[$200>>2] = $155;
     $201 = ((($0)) + 16|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = ($202|0)==(0|0);
     do {
      if (!($203)) {
       $204 = ($202>>>0)<($198>>>0);
       if ($204) {
        _abort();
        // unreachable;
       } else {
        $205 = ((($R7$3)) + 16|0);
        HEAP32[$205>>2] = $202;
        $206 = ((($202)) + 24|0);
        HEAP32[$206>>2] = $R7$3;
        break;
       }
      }
     } while(0);
     $207 = ((($201)) + 4|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($208|0)==(0|0);
     if (!($209)) {
      $210 = HEAP32[(1724)>>2]|0;
      $211 = ($208>>>0)<($210>>>0);
      if ($211) {
       _abort();
       // unreachable;
      } else {
       $212 = ((($R7$3)) + 20|0);
       HEAP32[$212>>2] = $208;
       $213 = ((($208)) + 24|0);
       HEAP32[$213>>2] = $R7$3;
       break;
      }
     }
    }
   }
  } while(0);
  $214 = $129 | 1;
  $215 = ((($$1)) + 4|0);
  HEAP32[$215>>2] = $214;
  $216 = (($$1) + ($129)|0);
  HEAP32[$216>>2] = $129;
  $217 = HEAP32[(1728)>>2]|0;
  $218 = ($$1|0)==($217|0);
  if ($218) {
   HEAP32[(1716)>>2] = $129;
   return;
  } else {
   $$2 = $129;
  }
 } else {
  $219 = $110 & -2;
  HEAP32[$109>>2] = $219;
  $220 = $$14 | 1;
  $221 = ((($$1)) + 4|0);
  HEAP32[$221>>2] = $220;
  $222 = (($$1) + ($$14)|0);
  HEAP32[$222>>2] = $$14;
  $$2 = $$14;
 }
 $223 = $$2 >>> 3;
 $224 = ($$2>>>0)<(256);
 if ($224) {
  $225 = $223 << 1;
  $226 = (1748 + ($225<<2)|0);
  $227 = HEAP32[1708>>2]|0;
  $228 = 1 << $223;
  $229 = $227 & $228;
  $230 = ($229|0)==(0);
  if ($230) {
   $231 = $227 | $228;
   HEAP32[1708>>2] = $231;
   $$pre = ((($226)) + 8|0);
   $$pre$phiZ2D = $$pre;$F17$0 = $226;
  } else {
   $232 = ((($226)) + 8|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = HEAP32[(1724)>>2]|0;
   $235 = ($233>>>0)<($234>>>0);
   if ($235) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $232;$F17$0 = $233;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $236 = ((($F17$0)) + 12|0);
  HEAP32[$236>>2] = $$1;
  $237 = ((($$1)) + 8|0);
  HEAP32[$237>>2] = $F17$0;
  $238 = ((($$1)) + 12|0);
  HEAP32[$238>>2] = $226;
  return;
 }
 $239 = $$2 >>> 8;
 $240 = ($239|0)==(0);
 if ($240) {
  $I20$0 = 0;
 } else {
  $241 = ($$2>>>0)>(16777215);
  if ($241) {
   $I20$0 = 31;
  } else {
   $242 = (($239) + 1048320)|0;
   $243 = $242 >>> 16;
   $244 = $243 & 8;
   $245 = $239 << $244;
   $246 = (($245) + 520192)|0;
   $247 = $246 >>> 16;
   $248 = $247 & 4;
   $249 = $248 | $244;
   $250 = $245 << $248;
   $251 = (($250) + 245760)|0;
   $252 = $251 >>> 16;
   $253 = $252 & 2;
   $254 = $249 | $253;
   $255 = (14 - ($254))|0;
   $256 = $250 << $253;
   $257 = $256 >>> 15;
   $258 = (($255) + ($257))|0;
   $259 = $258 << 1;
   $260 = (($258) + 7)|0;
   $261 = $$2 >>> $260;
   $262 = $261 & 1;
   $263 = $262 | $259;
   $I20$0 = $263;
  }
 }
 $264 = (2012 + ($I20$0<<2)|0);
 $265 = ((($$1)) + 28|0);
 HEAP32[$265>>2] = $I20$0;
 $266 = ((($$1)) + 16|0);
 $267 = ((($$1)) + 20|0);
 HEAP32[$267>>2] = 0;
 HEAP32[$266>>2] = 0;
 $268 = HEAP32[(1712)>>2]|0;
 $269 = 1 << $I20$0;
 $270 = $268 & $269;
 $271 = ($270|0)==(0);
 if ($271) {
  $272 = $268 | $269;
  HEAP32[(1712)>>2] = $272;
  HEAP32[$264>>2] = $$1;
  $273 = ((($$1)) + 24|0);
  HEAP32[$273>>2] = $264;
  $274 = ((($$1)) + 12|0);
  HEAP32[$274>>2] = $$1;
  $275 = ((($$1)) + 8|0);
  HEAP32[$275>>2] = $$1;
  return;
 }
 $276 = HEAP32[$264>>2]|0;
 $277 = ($I20$0|0)==(31);
 $278 = $I20$0 >>> 1;
 $279 = (25 - ($278))|0;
 $280 = $277 ? 0 : $279;
 $281 = $$2 << $280;
 $K21$0 = $281;$T$0 = $276;
 while(1) {
  $282 = ((($T$0)) + 4|0);
  $283 = HEAP32[$282>>2]|0;
  $284 = $283 & -8;
  $285 = ($284|0)==($$2|0);
  if ($285) {
   $T$0$lcssa = $T$0;
   label = 127;
   break;
  }
  $286 = $K21$0 >>> 31;
  $287 = (((($T$0)) + 16|0) + ($286<<2)|0);
  $288 = $K21$0 << 1;
  $289 = HEAP32[$287>>2]|0;
  $290 = ($289|0)==(0|0);
  if ($290) {
   $$lcssa = $287;$T$0$lcssa30 = $T$0;
   label = 124;
   break;
  } else {
   $K21$0 = $288;$T$0 = $289;
  }
 }
 if ((label|0) == 124) {
  $291 = HEAP32[(1724)>>2]|0;
  $292 = ($$lcssa>>>0)<($291>>>0);
  if ($292) {
   _abort();
   // unreachable;
  }
  HEAP32[$$lcssa>>2] = $$1;
  $293 = ((($$1)) + 24|0);
  HEAP32[$293>>2] = $T$0$lcssa30;
  $294 = ((($$1)) + 12|0);
  HEAP32[$294>>2] = $$1;
  $295 = ((($$1)) + 8|0);
  HEAP32[$295>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $296 = ((($T$0$lcssa)) + 8|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = HEAP32[(1724)>>2]|0;
  $299 = ($297>>>0)>=($298>>>0);
  $not$ = ($T$0$lcssa>>>0)>=($298>>>0);
  $300 = $299 & $not$;
  if (!($300)) {
   _abort();
   // unreachable;
  }
  $301 = ((($297)) + 12|0);
  HEAP32[$301>>2] = $$1;
  HEAP32[$296>>2] = $$1;
  $302 = ((($$1)) + 8|0);
  HEAP32[$302>>2] = $297;
  $303 = ((($$1)) + 12|0);
  HEAP32[$303>>2] = $T$0$lcssa;
  $304 = ((($$1)) + 24|0);
  HEAP32[$304>>2] = 0;
  return;
 }
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _saveSetjmp(env, label, table, size) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    size = size|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < (size|0)) {
      if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<3)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<3)+8))>>2)]=0;
        tempRet0 = size;
        return table | 0;
      }
      i = i+1|0;
    }
    // grow the table
    size = (size*2)|0;
    table = _realloc(table|0, 8*(size+1|0)|0) | 0;
    table = _saveSetjmp(env|0, label|0, table|0, size|0) | 0;
    tempRet0 = size;
    return table | 0;
}
function _testSetjmp(id, table, size) {
    id = id|0;
    table = table|0;
    size = size|0;
    var i = 0, curr = 0;
    while ((i|0) < (size|0)) {
      curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
      }
      i = i+1|0;
    }
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&63]()|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&63](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&63](a1|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&63]();
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&63](a1|0,a2|0)|0;
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1() {
 ; nullFunc_i(1);return 0;
}
function b2(p0) {
 p0 = p0|0; nullFunc_vi(2);
}
function b3(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(3);
}
function b4(p0) {
 p0 = p0|0; nullFunc_ii(4);return 0;
}
function b5() {
 ; nullFunc_v(5);
}
function b6(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(6);return 0;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,_sn_write,b0,___stdio_write,___stdio_seek,___stdio_read,___stdout_write,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,_do_read_663,b0,b0,b0];
var FUNCTION_TABLE_i = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_binop,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_vi = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_record_pending_signo,_sigexit,b2,b2,b2,b2,b2,b2,b2,b2,_free,b2,b2,b2,_do_setrlimit,_cleanup_522
,_cleanup_527,b2,b2,b2,b2];
var FUNCTION_TABLE_vii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_set_local_var_from_halves,b3,_bb_error_msg,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_ii = [b4,b4,_builtin_source,_builtin_true,_builtin_fg_bg,_builtin_break,_builtin_cd,_builtin_continue,_builtin_eval,_builtin_exec,_builtin_exit,_builtin_export,_builtin_help,_builtin_history,_builtin_jobs,_builtin_local,_builtin_memleak,_builtin_read,_builtin_return,_builtin_set,_builtin_shift,_builtin_trap,_builtin_type,_shell_builtin_ulimit,_builtin_umask,_builtin_unset,_builtin_wait,_builtin_test,_builtin_echo
,_builtin_pwd,b4,___stdio_close,b4,b4,b4,b4,b4,b4,b4,_static_peek,_static_get,_file_peek,_file_get,b4,b4,b4,_bb_basename,b4,b4,_xzalloc,_check_operator,b4,_oexpr,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_v = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,_xfunc_has_died,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_iii = [b6,_hush_main,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,_link,_symlink,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_strcmp,b6,b6,b6,b6,b6,_bb_pstrcmp,_ignore_err,_sort,b6,b6
,b6,b6,b6,b6,b6];

  return { _testSetjmp: _testSetjmp, _i64Subtract: _i64Subtract, _fflush: _fflush, _main: _main, _htonl: _htonl, _realloc: _realloc, _i64Add: _i64Add, _memmove: _memmove, _saveSetjmp: _saveSetjmp, _memset: _memset, _malloc: _malloc, _free: _free, _memcpy: _memcpy, _llvm_bswap_i32: _llvm_bswap_i32, _bitshift64Lshr: _bitshift64Lshr, _htons: _htons, _bitshift64Shl: _bitshift64Shl, ___errno_location: ___errno_location, _ntohs: _ntohs, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_v: dynCall_v, dynCall_iii: dynCall_iii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__testSetjmp = asm["_testSetjmp"]; asm["_testSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__testSetjmp.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__htonl = asm["_htonl"]; asm["_htonl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__htonl.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__saveSetjmp = asm["_saveSetjmp"]; asm["_saveSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__saveSetjmp.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__ntohs = asm["_ntohs"]; asm["_ntohs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ntohs.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__htons = asm["_htons"]; asm["_htons"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__htons.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i32.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _main = Module["_main"] = asm["_main"];
var _htonl = Module["_htonl"] = asm["_htonl"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _ntohs = Module["_ntohs"] = asm["_ntohs"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _htons = Module["_htons"] = asm["_htons"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _free = Module["_free"] = asm["_free"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



